"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_fetch_1 = require("node-fetch");
const bignumber_js_1 = require("bignumber.js");
class EthGasStationFetchingService {
    constructor() {
        this.apiAddress = 'https://ethgasstation.info/json/ethgasAPI.json';
    }
    fetchGasPrice() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield node_fetch_1.default(this.apiAddress);
            if (!response.ok) {
                throw new Error(response.statusText);
            }
            const { average, avgWait, block_time, fast, fastWait, fastest, fastestWait, safeLow, safeLowWait } = yield response.json();
            const toWei = (val) => {
                const gwei = 1000000000;
                return (val * gwei) / 10;
            };
            return {
                average: new bignumber_js_1.BigNumber(toWei(average)),
                avgWait: new bignumber_js_1.BigNumber(avgWait),
                blockTime: new bignumber_js_1.BigNumber(Math.floor(block_time)),
                fast: new bignumber_js_1.BigNumber(toWei(fast)),
                fastWait: new bignumber_js_1.BigNumber(fastWait),
                fastest: new bignumber_js_1.BigNumber(toWei(fastest)),
                fastestWait: new bignumber_js_1.BigNumber(fastestWait),
                safeLow: new bignumber_js_1.BigNumber(toWei(safeLow)),
                safeLowWait: new bignumber_js_1.BigNumber(safeLowWait)
            };
        });
    }
}
exports.EthGasStationFetchingService = EthGasStationFetchingService;
//# sourceMappingURL=EthGasStationFetchingService.js.map