"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const bignumber_js_1 = require("bignumber.js");
const BlockScaleFetchingService_1 = require("./GasEstimation/BlockScaleFetchingService");
const EthGasStationFetchingService_1 = require("./GasEstimation/EthGasStationFetchingService");
const Util_1 = require("./Util");
const GAS_PRICE_FETCHING_SERVICES = {
    [Util_1.Networks.Mainnet]: [new BlockScaleFetchingService_1.BlockScaleFetchingService(), new EthGasStationFetchingService_1.EthGasStationFetchingService()]
};
class GasPriceUtil {
    static getEthGasStationStats() {
        return __awaiter(this, void 0, void 0, function* () {
            const ethGasStation = new EthGasStationFetchingService_1.EthGasStationFetchingService();
            return ethGasStation.fetchGasPrice();
        });
    }
    constructor(web3) {
        this.web3 = web3;
    }
    networkGasPrice() {
        return __awaiter(this, void 0, void 0, function* () {
            const gasPriceEstimation = yield this.externalApiGasPrice();
            return (gasPriceEstimation && gasPriceEstimation.average) || this.getGasPrice();
        });
    }
    getAdvancedNetworkGasPrice() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const gasPrices = yield this.externalApiGasPrice();
                if (!gasPrices) {
                    throw new Error('Could not retrieve gas prices from external source.');
                }
                return gasPrices;
            }
            catch (e) {
                const fallbackGasPrice = yield this.getGasPrice();
                return {
                    average: fallbackGasPrice,
                    fast: fallbackGasPrice,
                    fastest: fallbackGasPrice,
                    safeLow: fallbackGasPrice
                };
            }
        });
    }
    getGasPrice() {
        return __awaiter(this, void 0, void 0, function* () {
            return new bignumber_js_1.default(yield this.web3.eth.getGasPrice());
        });
    }
    externalApiGasPrice() {
        return __awaiter(this, void 0, void 0, function* () {
            const networkId = yield this.web3.eth.net.getId();
            const services = GAS_PRICE_FETCHING_SERVICES[networkId];
            if (!services) {
                return null;
            }
            for (const service of services) {
                try {
                    const gasEstimate = yield service.fetchGasPrice();
                    if (gasEstimate) {
                        return gasEstimate;
                    }
                }
                catch (e) {
                    console.error(e);
                }
            }
            return null;
        });
    }
}
exports.default = GasPriceUtil;
//# sourceMappingURL=GasPriceUtil.js.map