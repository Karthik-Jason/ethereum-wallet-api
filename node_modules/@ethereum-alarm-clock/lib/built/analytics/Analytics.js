"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const bignumber_js_1 = require("bignumber.js");
const TransactionRequest_1 = require("../transactionRequest/TransactionRequest");
const __1 = require("..");
const node_fetch_1 = require("node-fetch");
class Analytics {
    constructor(web3, requestFactory) {
        this.requestFactory = requestFactory;
        this.web3 = web3;
        this.util = new __1.Util(web3);
    }
    getTotalEthTransferred() {
        return __awaiter(this, void 0, void 0, function* () {
            let totalEthTransferred = 0;
            const chainName = yield this.util.getChainName();
            const addresses = yield this.util.getContractsAddresses();
            const subdomain = chainName === 'mainnet' ? 'api' : `api-${chainName}`;
            const baseUrl = `https://${subdomain}.etherscan.io/api?module=account&action=txlist&startblock=0&endblock=99999999&sort=asc`;
            const timestampSchedulerUrl = `${baseUrl}&address=${addresses.timestampScheduler}`;
            const blockSchedulerUrl = `${baseUrl}&address=${addresses.blockScheduler}`;
            const urls = [timestampSchedulerUrl, blockSchedulerUrl];
            const promises = [];
            urls.forEach(url => {
                const resultPromise = node_fetch_1.default(url).then((resp) => __awaiter(this, void 0, void 0, function* () {
                    const response = yield resp.json();
                    if (response.status === '1' && response.message === 'OK') {
                        const weiTransferred = response.result.reduce((acc, tx) => acc + parseInt(tx.value, 10), 0);
                        return this.web3.utils.fromWei(weiTransferred.toString(), 'ether');
                    }
                    else {
                        throw Error(response.result);
                    }
                }));
                promises.push(resultPromise);
            });
            let values;
            try {
                values = yield Promise.all(promises);
                totalEthTransferred = values.reduce((acc, value) => acc + parseFloat(value), 0);
            }
            catch (e) {
                console.log('Unable to connect to Etherscan. Fetching analytics natively...');
                totalEthTransferred = new bignumber_js_1.default(yield this.getTotalEthTransferredNatively()).toNumber();
            }
            return totalEthTransferred;
        });
    }
    getTotalEthTransferredNatively() {
        return __awaiter(this, void 0, void 0, function* () {
            const fromBlock = yield this.util.getRequestFactoryStartBlock();
            const events = yield new Promise(resolve => {
                this.requestFactory.instance.events
                    .RequestCreated({
                    fromBlock
                })
                    .on('event', (error, logs) => {
                    resolve(logs.map((log) => ({
                        address: log.returnValues.request,
                        params: log.returnValues.params
                    })));
                });
            });
            const transactions = yield Promise.all(events.map((tx) => __awaiter(this, void 0, void 0, function* () {
                const request = new TransactionRequest_1.default(tx.address, this.web3);
                yield request.fillData();
                return request;
            })));
            const weiTransferred = transactions.reduce((sum, tx) => sum.plus(tx.callValue), new bignumber_js_1.default(0));
            return this.web3.utils.fromWei(weiTransferred.toString(), 'ether');
        });
    }
}
exports.default = Analytics;
//# sourceMappingURL=Analytics.js.map