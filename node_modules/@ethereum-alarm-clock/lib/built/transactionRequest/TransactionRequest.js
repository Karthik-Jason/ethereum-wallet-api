"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const bignumber_js_1 = require("bignumber.js");
const TransactionRequestData_1 = require("./TransactionRequestData");
const Constants_1 = require("../Constants");
const Util_1 = require("../utils/Util");
const TransactionRequestCoreABI_1 = require("../abi/TransactionRequestCoreABI");
const eac_1 = require("../eac");
class TransactionRequest {
    constructor(address, web3) {
        this.util = new Util_1.default(web3);
        if (!this.util.isNotNullAddress(address)) {
            throw new Error('Attempted to instantiate a TxRequest class from a null address.');
        }
        this.web3 = web3;
        this.instance = new this.web3.eth.Contract(TransactionRequestCoreABI_1.default, address);
    }
    get address() {
        return this.instance._address.toLowerCase();
    }
    /**
     * Window centric getters
     */
    get claimWindowSize() {
        this.checkData();
        return this.data.schedule.claimWindowSize;
    }
    get claimWindowStart() {
        this.checkData();
        return this.windowStart.minus(this.freezePeriod).minus(this.claimWindowSize);
    }
    get claimWindowEnd() {
        this.checkData();
        return this.claimWindowStart.plus(this.claimWindowSize);
    }
    get freezePeriod() {
        this.checkData();
        return this.data.schedule.freezePeriod;
    }
    get freezePeriodStart() {
        this.checkData();
        return this.windowStart.plus(this.claimWindowSize);
    }
    get freezePeriodEnd() {
        this.checkData();
        return this.claimWindowEnd.plus(this.freezePeriod);
    }
    get temporalUnit() {
        this.checkData();
        return this.data.schedule.temporalUnit;
    }
    get windowSize() {
        this.checkData();
        return this.data.schedule.windowSize;
    }
    get windowStart() {
        this.checkData();
        return this.data.schedule.windowStart;
    }
    get reservedWindowSize() {
        this.checkData();
        return this.data.schedule.reservedWindowSize;
    }
    get reservedWindowEnd() {
        this.checkData();
        return this.windowStart.plus(this.reservedWindowSize);
    }
    get executionWindowEnd() {
        this.checkData();
        return this.windowStart.plus(this.windowSize);
    }
    /**
     * Dynamic getters
     */
    beforeClaimWindow() {
        return __awaiter(this, void 0, void 0, function* () {
            const now = yield this.now();
            return this.claimWindowStart.isGreaterThan(now);
        });
    }
    inClaimWindow() {
        return __awaiter(this, void 0, void 0, function* () {
            const now = yield this.now();
            return this.claimWindowStart.isLessThanOrEqualTo(now) && this.claimWindowEnd.isGreaterThan(now);
        });
    }
    inFreezePeriod() {
        return __awaiter(this, void 0, void 0, function* () {
            const now = yield this.now();
            return this.claimWindowEnd.isLessThanOrEqualTo(now) && this.freezePeriodEnd.isGreaterThan(now);
        });
    }
    inExecutionWindow() {
        return __awaiter(this, void 0, void 0, function* () {
            const now = yield this.now();
            return (this.windowStart.isLessThanOrEqualTo(now) &&
                this.executionWindowEnd.isGreaterThanOrEqualTo(now));
        });
    }
    inReservedWindow() {
        return __awaiter(this, void 0, void 0, function* () {
            const now = yield this.now();
            return this.windowStart.isLessThanOrEqualTo(now) && this.reservedWindowEnd.isGreaterThan(now);
        });
    }
    afterExecutionWindow() {
        return __awaiter(this, void 0, void 0, function* () {
            const now = yield this.now();
            return this.executionWindowEnd.isLessThan(now);
        });
    }
    executedAt() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getExecutedEvent()).blockNumber;
        });
    }
    getBucket() {
        let sign = -1;
        let bucketSize = 240;
        if (this.temporalUnit === eac_1.TemporalUnit.TIME) {
            bucketSize = 3600;
            sign = 1;
        }
        return sign * this.windowStart.toNumber() - (this.windowStart.toNumber() % bucketSize);
    }
    /**
     * Claim props/methods
     */
    get claimedBy() {
        this.checkData();
        return this.data.claimData.claimedBy.toLowerCase();
    }
    get isClaimed() {
        this.checkData();
        return this.data.claimData.claimedBy !== Constants_1.default.NULL_ADDRESS;
    }
    isClaimedBy(address) {
        this.checkData();
        return this.claimedBy === address;
    }
    get requiredDeposit() {
        this.checkData();
        return this.data.claimData.requiredDeposit;
    }
    claimPaymentModifier() {
        return __awaiter(this, void 0, void 0, function* () {
            // If the data is not filled it will cause errors.
            if (!this.data.claimData.paymentModifier) {
                yield this.refreshData();
            }
            // TxRequest is claimed and already has a set paymentModifier.
            if (this.isClaimed) {
                return new bignumber_js_1.default(this.data.claimData.paymentModifier);
            }
            // TxRequest is unclaimed so paymentModifier is calculated.
            const now = yield this.now();
            const elapsed = now.minus(this.claimWindowStart);
            return elapsed.times(100).dividedToIntegerBy(this.claimWindowSize);
        });
    }
    now() {
        return __awaiter(this, void 0, void 0, function* () {
            // If being called with an empty temporal unit the data needs to be filled.
            if (!this.temporalUnit) {
                yield this.refreshData();
            }
            if (this.temporalUnit === eac_1.TemporalUnit.BLOCK) {
                // The reason for the `plus(1)` here is that the next block to be mined
                // is for all intents and purposes the `now` since the soonest this transaction
                // could be included is alongside it.
                return new bignumber_js_1.default(yield this.web3.eth.getBlockNumber()).plus(1);
            }
            if (this.temporalUnit === eac_1.TemporalUnit.TIME) {
                const timestamp = new bignumber_js_1.default((yield this.web3.eth.getBlock('latest')).timestamp);
                const local = new bignumber_js_1.default(Math.floor(new Date().getTime() / 1000));
                return local.gt(timestamp) ? local : timestamp;
            }
            throw new Error(`[${this.address}] Unrecognized temporal unit: ${this.temporalUnit}`);
        });
    }
    /**
     * Meta
     */
    get isCancelled() {
        this.checkData();
        return this.data.meta.isCancelled;
    }
    get wasCalled() {
        this.checkData();
        return this.data.meta.wasCalled;
    }
    get wasSuccessful() {
        this.checkData();
        return this.data.meta.wasSuccessful;
    }
    get owner() {
        this.checkData();
        return this.data.meta.owner.toLowerCase();
    }
    /**
     * TxData
     */
    get toAddress() {
        this.checkData();
        return this.data.txData.toAddress && this.data.txData.toAddress.toLowerCase();
    }
    get callGas() {
        this.checkData();
        return this.data.txData.callGas;
    }
    get callValue() {
        this.checkData();
        return this.data.txData.callValue;
    }
    get gasPrice() {
        this.checkData();
        return this.data.txData.gasPrice;
    }
    get fee() {
        this.checkData();
        return this.data.paymentData.fee;
    }
    get bounty() {
        this.checkData();
        return this.data.paymentData.bounty;
    }
    callData() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.instance.methods.callData().call();
        });
    }
    /**
     * Data management
     */
    fillData() {
        return __awaiter(this, void 0, void 0, function* () {
            const requestData = yield TransactionRequestData_1.default.from(this.instance);
            this.data = requestData;
        });
    }
    refreshData() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.data) {
                return this.fillData();
            }
            return this.data.refresh();
        });
    }
    /**
     * ABI convenience functions
     */
    get claimData() {
        return this.instance.methods.claim().encodeABI();
    }
    get executeData() {
        return this.instance.methods.execute().encodeABI();
    }
    get cancelData() {
        return this.instance.methods.cancel().encodeABI();
    }
    /**
     * Error handling
     */
    checkData() {
        if (!this.data) {
            throw new Error('Data has not been filled! Please call `txRequest.fillData()` before using this method.');
        }
    }
    getExecutedEvent() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.wasCalled) {
                return {
                    blockNumber: 0,
                    bounty: 0,
                    fee: 0,
                    estimatedGas: 0
                };
            }
            const events = this.instance.events.allEvents({ fromBlock: 0 });
            return new Promise((resolve, reject) => {
                events.on('event', (error, logs) => {
                    if (error) {
                        return reject(error);
                    }
                    const Executed = logs.filter(log => log.raw.topics[0] ===
                        '0x3e504bb8b225ad41f613b0c3c4205cdd752d1615b4d77cd1773417282fcfb5d9');
                    resolve({
                        blockNumber: Executed[0].blockNumber,
                        bounty: this.web3.utils.toDecimal('0x' + Executed[0].raw.data.slice(2, 66)),
                        fee: this.web3.utils.toDecimal('0x' + Executed[0].raw.data.slice(67, 130)),
                        estimatedGas: this.web3.utils.toDecimal('0x' + Executed[0].raw.data.slice(131, 194))
                    });
                });
            });
        });
    }
}
exports.default = TransactionRequest;
//# sourceMappingURL=TransactionRequest.js.map