"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const bignumber_js_1 = require("bignumber.js");
class TransactionRequestData {
    static from(txRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield txRequest.methods.requestData().call();
            return new TransactionRequestData(data, txRequest);
        });
    }
    constructor(data, txRequest) {
        if (typeof data === 'undefined' || typeof txRequest === 'undefined') {
            throw new Error('Cannot call the constructor directly.');
        }
        this.txRequest = txRequest;
        this.fill(data);
    }
    fill(data) {
        this.claimData = {
            claimedBy: data[0][0],
            claimDeposit: new bignumber_js_1.default(data[2][0]),
            paymentModifier: parseInt(data[3][0], 10),
            requiredDeposit: new bignumber_js_1.default(data[2][14])
        };
        this.meta = {
            createdBy: data[0][1],
            owner: data[0][2],
            isCancelled: data[1][0],
            wasCalled: data[1][1],
            wasSuccessful: data[1][2]
        };
        this.paymentData = {
            feeRecipient: data[0][3],
            bountyBenefactor: data[0][4],
            fee: new bignumber_js_1.default(data[2][1]),
            feeOwed: new bignumber_js_1.default(data[2][2]),
            bounty: new bignumber_js_1.default(data[2][3]),
            bountyOwed: new bignumber_js_1.default(data[2][4])
        };
        this.schedule = {
            claimWindowSize: new bignumber_js_1.default(data[2][5]),
            freezePeriod: new bignumber_js_1.default(data[2][6]),
            reservedWindowSize: new bignumber_js_1.default(data[2][7]),
            temporalUnit: parseInt(data[2][8], 10),
            windowSize: new bignumber_js_1.default(data[2][9]),
            windowStart: new bignumber_js_1.default(data[2][10])
        };
        this.txData = {
            callGas: new bignumber_js_1.default(data[2][11]),
            callValue: new bignumber_js_1.default(data[2][12]),
            gasPrice: new bignumber_js_1.default(data[2][13]),
            toAddress: data[0][5]
        };
    }
    refresh() {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.txRequest.methods.requestData().call();
            this.fill(data);
        });
    }
}
exports.default = TransactionRequestData;
//# sourceMappingURL=TransactionRequestData.js.map