{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/layouts/InterfaceLayout/containers/SendOfflineContainer/SendOfflineContainer.vue?vue&type=style&index=0&id=620246e8&lang=scss&scoped=true&file=SendOfflineContainer.scss&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/layouts/InterfaceLayout/containers/SendOfflineContainer/SendOfflineContainer.vue","mtime":1573477612032},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import 'SendOfflineContainer.scss';\n",{"version":3,"sources":["SendOfflineContainer.vue"],"names":[],"mappingsigBA","file":"SendOfflineContainer.vue","sourceRoot":"src/layouts/InterfaceLayout/containers/SendOfflineContainer","sourcesContent":["<template>\n  <div class=\"send-offline-container\">\n    <interface-container-title :title=\"$t('common.offline')\" />\n    <div class=\"generate-tx\">\n      <div class=\"wrap\">\n        <div class=\"send-form\">\n          <div class=\"form-block amount-to-address\">\n            <ul class=\"type-amount\">\n              <li class=\"type\">\n                <div class=\"title\">\n                  <h4>{{ $t('interface.sendTxType') }}</h4>\n                </div>\n                <currency-picker\n                  :currency=\"allTokens\"\n                  :token=\"true\"\n                  :default=\"\n                    selectedCoinType.hasOwnProperty('symbol')\n                      ? selectedCoinType\n                      : {}\n                  \"\n                  page=\"sendOfflineGenTx\"\n                  @selectedCurrency=\"setSelectedCurrency\"\n                />\n              </li>\n              <li class=\"amount\">\n                <div class=\"title\">\n                  <h4>{{ $t('interface.sendTxAmount') }}</h4>\n                </div>\n                <div class=\"the-form amount-number\">\n                  <input\n                    :value=\"toAmt\"\n                    :placeholder=\"$t('interface.depAmount')\"\n                    type=\"number\"\n                    step=\"any\"\n                    name\n                    @input=\"debouncedAmount\"\n                  />\n                </div>\n              </li>\n            </ul>\n            <div class=\"to-address\">\n              <div class=\"title\">\n                <h4>{{ $t('interface.sendTxToAddr') }} &nbsp;</h4>\n                <blockie\n                  v-show=\"address !== '' && validAddress\"\n                  :address=\"address\"\n                  class=\"blockie-image-icon\"\n                  width=\"32px\"\n                  height=\"32px\"\n                />\n                <button\n                  class=\"title-button copy-button prevent-user-select\"\n                  @click=\"copyToAddress\"\n                >\n                  {{ $t('common.copy') }}\n                </button>\n              </div>\n              <div class=\"the-form address-block\">\n                <textarea\n                  ref=\"toaddress\"\n                  v-model=\"address\"\n                  name=\"name\"\n                  placeholder=\"Please Enter The Address\"\n                />\n                <i\n                  :class=\"[\n                    validAddress ? '' : 'not-good',\n                    'fa fa-check-circle good-button'\n                  ]\"\n                  aria-hidden=\"true\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"send-form\">\n          <div class=\"title-container\">\n            <div class=\"title\">\n              <div class=\"title-helper\">\n                <h4>{{ $t('common.data') }}</h4>\n              </div>\n            </div>\n          </div>\n          <div class=\"the-form gas-amount\">\n            <input\n              v-model=\"toData\"\n              :disabled=\"selectedCoinType.symbol !== 'ETH'\"\n              type=\"string\"\n              placeholder=\"e.g. 0x65746865726d696e652d657531\"\n            />\n            <div class=\"good-button-container\">\n              <i\n                :class=\"[\n                  toData !== '' ? '' : 'not-good',\n                  'fa fa-check-circle good-button'\n                ]\"\n                aria-hidden=\"true\"\n              />\n            </div>\n          </div>\n        </div>\n        <div class=\"send-form\">\n          <div class=\"title-container\">\n            <div class=\"title\">\n              <div class=\"title-helper\">\n                <h4>{{ $t('common.gasLimit') }}</h4>\n                <popover :popcontent=\"$t('popover.gasLimit')\" />\n              </div>\n            </div>\n          </div>\n          <div class=\"the-form gas-amount\">\n            <input\n              v-model=\"gasLimit\"\n              :placeholder=\"$t('common.gasLimit')\"\n              type=\"number\"\n            />\n            <div class=\"good-button-container\">\n              <i\n                :class=\"[\n                  'fa fa-check-circle good-button',\n                  gasLimit > 0 ? '' : 'not-good'\n                ]\"\n                aria-hidden=\"true\"\n              />\n            </div>\n          </div>\n        </div>\n        <div class=\"send-form\">\n          <div class=\"title-container\">\n            <div class=\"title\">\n              <div class=\"title-helper\">\n                <h4>{{ $t('common.nonce') }}</h4>\n                <popover :popcontent=\"$t('popover.nonce')\" />\n              </div>\n            </div>\n          </div>\n          <div class=\"the-form gas-amount\">\n            <input\n              v-model=\"localNonce\"\n              :placeholder=\"$t('common.nonce')\"\n              type=\"number\"\n            />\n            <div class=\"good-button-container\">\n              <i\n                :class=\"[\n                  'fa fa-check-circle good-button',\n                  localNonce >= 0 ? '' : 'not-good'\n                ]\"\n                aria-hidden=\"true\"\n              />\n            </div>\n          </div>\n        </div>\n        <div class=\"send-form\">\n          <div class=\"title-container\">\n            <div class=\"title\">\n              <div class=\"title-helper\">\n                <h4>{{ $t('common.gasPrice') }}</h4>\n                <popover :popcontent=\"txSpeedMsg\" />\n              </div>\n            </div>\n          </div>\n          <div class=\"the-form gas-amount\">\n            <input\n              v-model=\"localGasPrice\"\n              :placeholder=\"$t('common.gasPrice')\"\n              type=\"number\"\n            />\n            <div class=\"good-button-container\">\n              <i\n                :class=\"[\n                  'fa fa-check-circle good-button',\n                  localGasPrice > 0 ? '' : 'not-good'\n                ]\"\n                aria-hidden=\"true\"\n              />\n            </div>\n          </div>\n        </div>\n        <div class=\"submit-button-container\">\n          <input\n            ref=\"jsonInput\"\n            type=\"file\"\n            name=\"file\"\n            style=\"display: none\"\n            @change=\"uploadFile\"\n          />\n          <div\n            class=\"submit-button large-round-button-green-border\"\n            @click=\"uploadClick\"\n          >\n            Import JSON\n          </div>\n          <div\n            :class=\"[\n              isAllInputValid ? '' : 'disabled',\n              'submit-button large-round-button-green-filled'\n            ]\"\n            @click=\"generateTx\"\n          >\n            {{ $t('interface.generateTx') }}\n          </div>\n          <interface-bottom-text\n            link=\"https://kb.myetherwallet.com\"\n            question=\"Have issues?\"\n            link-text=\"Help Center\"\n          />\n        </div>\n      </div>\n      <signed-tx-modal ref=\"signedTxModal\" :signed-tx=\"signed\" :raw-tx=\"raw\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport InterfaceContainerTitle from '../../components/InterfaceContainerTitle';\nimport InterfaceBottomText from '@/components/InterfaceBottomText';\nimport CurrencyPicker from '@/layouts/InterfaceLayout/components/CurrencyPicker';\nimport SignedTxModal from './components/SignedTxModal';\nimport Blockie from '@/components/Blockie';\nimport BigNumber from 'bignumber.js';\nimport * as unit from 'ethjs-unit';\nimport { mapState } from 'vuex';\nimport { isAddress } from '@/helpers/addressUtils';\nimport store from 'store';\nimport { Misc, Toast } from '@/helpers';\nimport utils from 'web3-utils';\n\nexport default {\n  components: {\n    'interface-bottom-text': InterfaceBottomText,\n    blockie: Blockie,\n    'signed-tx-modal': SignedTxModal,\n    'currency-picker': CurrencyPicker,\n    'interface-container-title': InterfaceContainerTitle\n  },\n  props: {\n    checkPrefilled: {\n      type: Function,\n      default: () => {}\n    },\n    clearPrefilled: {\n      type: Function,\n      default: () => {}\n    },\n    isPrefilled: {\n      type: Boolean,\n      default: false\n    },\n    value: {\n      type: String,\n      default: '0'\n    },\n    data: {\n      type: String,\n      default: ''\n    },\n    to: {\n      type: String,\n      default: ''\n    },\n    gaslimit: {\n      type: String,\n      default: ''\n    },\n    gas: {\n      type: Number,\n      default: 0\n    },\n    tokensymbol: {\n      type: String,\n      default: ''\n    },\n    tokens: {\n      type: Array,\n      default: function() {\n        return [];\n      }\n    },\n    nonce: {\n      type: String,\n      default: '0'\n    },\n    highestGas: {\n      type: String,\n      default: '0'\n    }\n  },\n  data() {\n    return {\n      toAmt: 0,\n      address: '',\n      toData: '0x',\n      gasLimit: 21000,\n      selectedCoinType: {},\n      raw: {},\n      signed: '{}',\n      localNonce: this.nonce,\n      file: '',\n      localGasPrice: this.highestGas\n    };\n  },\n  computed: {\n    ...mapState(['wallet', 'network', 'web3', 'linkQuery']),\n    txSpeedMsg() {\n      const net = this.network.type.name;\n      // eslint-disable-next-line\n      const msg = `${this.$t('popover.txSpeedPt1').replace(\n        '{0}',\n        net\n      )} ${this.$t('popover.txSpeedPt2').replace('{0}', net)}`;\n      return msg;\n    },\n    validAddress() {\n      return isAddress(this.address);\n    },\n    allTokens() {\n      const customToken = store.get('customTokens');\n      const allTokens = this.tokens.concat(customToken[this.network.type.name]);\n      const sortedBySymbol = allTokens.sort((a, b) => {\n        if (a.symbol.toUpperCase() < b.symbol.toUpperCase()) {\n          return -1;\n        } else if (a.symbol.toUpperCase() > b.symbol.toUpperCase()) {\n          return 1;\n        }\n        return 0;\n      });\n      return sortedBySymbol;\n    },\n    isAllInputValid() {\n      return (\n        this.toData.length >= 2 &&\n        this.address.length > 0 &&\n        this.validAddress &&\n        this.toAmt >= 0 &&\n        this.gasLimit > 0 &&\n        this.localNonce >= 0 &&\n        this.localGasPrice\n      );\n    }\n  },\n  watch: {\n    highestGas(newVal) {\n      this.localGasPrice = newVal;\n    },\n    nonce(newVal) {\n      this.localNonce = newVal;\n    },\n    toData(newVal) {\n      if (Misc.validateHexString(newVal)) {\n        this.toData = newVal;\n      } else {\n        this.toData = '0x';\n      }\n    },\n    toAmt(newVal) {\n      this.createDataHex(newVal, null, null);\n    },\n    address(newVal) {\n      if (this.validAddress) {\n        this.createDataHex(null, newVal, null);\n      }\n    },\n    selectedCoinType(newVal) {\n      this.createDataHex(null, null, newVal);\n    },\n    isPrefilled() {\n      this.prefillForm();\n    }\n  },\n  mounted() {\n    this.checkPrefilled();\n  },\n  methods: {\n    prefillForm() {\n      if (this.tokens.length > 0 && this.isPrefilled) {\n        const foundToken = this.tokensymbol\n          ? this.tokens.find(item => {\n              return (\n                item.symbol.toLowerCase() === this.tokensymbol.toLowerCase()\n              );\n            })\n          : undefined;\n        this.toAmt = new BigNumber(this.value).toFixed();\n        this.toData = Misc.validateHexString(this.data) ? this.data : '';\n        this.address = this.to;\n        this.gasLimit = this.gaslimit\n          ? new BigNumber(this.gaslimit).toString()\n          : '21000';\n        this.localGasPrice = new BigNumber(this.gas).toFixed();\n        this.selectedCoinType = foundToken ? foundToken : this.selectedCoinType;\n        Toast.responseHandler(\n          'Form has been prefilled. Please proceed with caution!',\n          Toast.WARN\n        );\n        this.clearPrefilled();\n      }\n    },\n    debouncedAmount: utils._.debounce(function(e) {\n      const symbol = this.network.type.currencyName;\n      const decimals =\n        this.selectedCoinType.symbol === symbol\n          ? 18\n          : parseInt(this.selectedCoinType.decimals);\n      this.toAmt =\n        e.target.valueAsNumber < 0 || isNaN(e.target.valueAsNumber)\n          ? 0\n          : new BigNumber(e.target.valueAsNumber)\n              .decimalPlaces(decimals)\n              .toFixed();\n    }, 300),\n    async createDataHex(amount, address, currency) {\n      const locAmount = amount !== null ? amount : this.toAmt;\n      const locAddress = address !== null ? address : this.address;\n      const locCurrency = currency !== null ? currency : this.selectedCoinType;\n      const abi = [\n        {\n          constant: false,\n          inputs: [\n            {\n              name: '_to',\n              type: 'address'\n            },\n            {\n              name: '_value',\n              type: 'uint256'\n            }\n          ],\n          name: 'transfer',\n          outputs: [\n            {\n              name: '',\n              type: 'bool'\n            }\n          ],\n          payable: false,\n          stateMutability: 'nonpayable',\n          type: 'function'\n        }\n      ];\n      const symbol = this.network.type.currencyName;\n      if (locCurrency.symbol !== symbol && locAddress !== '') {\n        const locVal = locAmount === '' || locAmount === null ? '0' : locAmount;\n        const contract = new this.web3.eth.Contract(abi, locCurrency.address);\n        const convertedAmount = new BigNumber(locVal).times(\n          new BigNumber(10).pow(locCurrency.decimals)\n        );\n        this.toData = contract.methods\n          .transfer(locAddress, convertedAmount.toFixed())\n          .encodeABI();\n      }\n    },\n    copyToAddress() {\n      const el = this.$refs.toaddress;\n      el.select();\n      document.execCommand('copy');\n      window.getSelection().removeAllRanges();\n    },\n    uploadClick() {\n      const jsonInput = this.$refs.jsonInput;\n      jsonInput.value = '';\n      jsonInput.click();\n    },\n    uploadFile(e) {\n      const self = this;\n      const reader = new FileReader();\n      reader.onloadend = function(evt) {\n        try {\n          const file = JSON.parse(evt.target.result);\n          self.localGasPrice = unit.fromWei(file.gasPrice, 'gwei');\n          self.localNonce = file.nonce;\n        } catch (e) {\n          Toast.responseHandler(e, Toast.WARN);\n        }\n      };\n      reader.readAsBinaryString(e.target.files[0]);\n    },\n    async generateTx() {\n      const symbol = this.network.type.currencyName;\n      const isToken = this.selectedCoinType.symbol !== symbol;\n      const amtWei = unit.toWei(this.toAmt, 'ether');\n      const raw = {\n        nonce: Misc.sanitizeHex(new BigNumber(this.localNonce).toString(16)),\n        gasLimit: Misc.sanitizeHex(new BigNumber(this.gasLimit).toString(16)),\n        gasPrice: Misc.sanitizeHex(\n          new BigNumber(unit.toWei(this.localGasPrice, 'gwei')).toString(16)\n        ),\n        to: isToken\n          ? this.selectedCoinType.address\n          : this.address.toLowerCase().trim(),\n        value: isToken ? 0 : amtWei,\n        data: this.toData,\n        chainId: this.network.type.chainID\n      };\n      this.raw = raw;\n      const signed = await this.wallet.signTransaction(this.raw);\n      this.signed = JSON.stringify(signed);\n      this.$refs.signedTxModal.$refs.signedTx.show();\n      window.scrollTo(0, 0);\n    },\n    setSelectedCurrency(e) {\n      const symbol = this.network.type.currencyName;\n      this.selectedCoinType = e;\n      if (e.symbol === symbol) {\n        this.toData = '0x';\n      }\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped file=\"SendOfflineContainer.scss\">\n@import 'SendOfflineContainer.scss';\n</style>\n"]}]}