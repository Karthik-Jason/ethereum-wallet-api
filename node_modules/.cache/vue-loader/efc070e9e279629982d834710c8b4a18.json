{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/layouts/InterfaceLayout/components/InterfaceTokensModal/InterfaceTokensModal.vue?vue&type=template&id=6eddaf7e&scoped=true&lang=html&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/layouts/InterfaceLayout/components/InterfaceTokensModal/InterfaceTokensModal.vue","mtime":1573477611976},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"b-modal\",\n    {\n      ref: \"tokenModal\",\n      staticClass: \"bootstrap-modal nopadding max-height-1\",\n      attrs: {\n        \"hide-footer\": \"\",\n        centered: \"\",\n        title: \"Add Custom Token\",\n        static: \"\",\n        lazy: \"\"\n      },\n      on: { hidden: _vm.resetCompState }\n    },\n    [\n      _c(\"form\", { staticClass: \"tokens-modal-body\" }, [\n        _c(\"div\", [\n          _c(\"input\", {\n            directives: [\n              {\n                name: \"validate\",\n                rawName: \"v-validate\",\n                value: \"required\",\n                expression: \"'required'\"\n              },\n              {\n                name: \"model\",\n                rawName: \"v-model\",\n                value: _vm.tokenAddress,\n                expression: \"tokenAddress\"\n              }\n            ],\n            class: [\n              \"custom-input-text-1\",\n              _vm.tokenAddress !== \"\" && !_vm.validAddress\n                ? \"invalid-address\"\n                : \"\"\n            ],\n            attrs: {\n              name: \"Address\",\n              type: \"text\",\n              placeholder: \"Token Contract Address\"\n            },\n            domProps: { value: _vm.tokenAddress },\n            on: {\n              input: function($event) {\n                if ($event.target.composing) {\n                  return\n                }\n                _vm.tokenAddress = $event.target.value\n              }\n            }\n          }),\n          _c(\n            \"span\",\n            {\n              directives: [\n                {\n                  name: \"show\",\n                  rawName: \"v-show\",\n                  value: _vm.tokenAddress !== \"\" && !_vm.validAddress,\n                  expression: \"tokenAddress !== '' && !validAddress\"\n                }\n              ],\n              staticClass: \"error-message\"\n            },\n            [_vm._v(\"\\n        Invalid address given.\\n      \")]\n          ),\n          _c(\"input\", {\n            directives: [\n              {\n                name: \"validate\",\n                rawName: \"v-validate\",\n                value: \"required\",\n                expression: \"'required'\"\n              },\n              {\n                name: \"model\",\n                rawName: \"v-model\",\n                value: _vm.tokenSymbol,\n                expression: \"tokenSymbol\"\n              }\n            ],\n            staticClass: \"custom-input-text-1\",\n            attrs: {\n              name: \"Symbol\",\n              type: \"text\",\n              placeholder: \"Token Symbol\"\n            },\n            domProps: { value: _vm.tokenSymbol },\n            on: {\n              input: function($event) {\n                if ($event.target.composing) {\n                  return\n                }\n                _vm.tokenSymbol = $event.target.value\n              }\n            }\n          }),\n          _c(\"input\", {\n            directives: [\n              {\n                name: \"validate\",\n                rawName: \"v-validate\",\n                value: \"required|numeric\",\n                expression: \"'required|numeric'\"\n              },\n              {\n                name: \"model\",\n                rawName: \"v-model\",\n                value: _vm.tokenDecimal,\n                expression: \"tokenDecimal\"\n              }\n            ],\n            staticClass: \"custom-input-text-1\",\n            attrs: {\n              name: \"Decimal\",\n              type: \"number\",\n              min: \"0\",\n              max: \"18\",\n              placeholder: \"Decimals\"\n            },\n            domProps: { value: _vm.tokenDecimal },\n            on: {\n              input: function($event) {\n                if ($event.target.composing) {\n                  return\n                }\n                _vm.tokenDecimal = $event.target.value\n              }\n            }\n          }),\n          _c(\n            \"span\",\n            {\n              directives: [\n                {\n                  name: \"show\",\n                  rawName: \"v-show\",\n                  value: _vm.tokenDecimal < 0 || _vm.tokenDecimal > 18,\n                  expression: \"tokenDecimal < 0 || tokenDecimal > 18\"\n                }\n              ],\n              staticClass: \"error-message\"\n            },\n            [\n              _vm._v(\n                \"\\n        Invalid Decimal. Decimal can only be between 0 and 18.\\n      \"\n              )\n            ]\n          )\n        ]),\n        _c(\n          \"div\",\n          { staticClass: \"button-block\" },\n          [\n            _c(\n              \"button\",\n              {\n                class: [\n                  _vm.allFieldsValid ? \"\" : \"disabled\",\n                  \"save-button large-round-button-green-filled clickable\"\n                ],\n                attrs: { type: \"submit\" },\n                on: {\n                  click: function($event) {\n                    $event.preventDefault()\n                    return _vm.addToken(\n                      _vm.tokenAddress,\n                      _vm.tokenSymbol,\n                      _vm.tokenDecimal\n                    )\n                  }\n                }\n              },\n              [\n                _vm._v(\n                  \"\\n        \" + _vm._s(_vm.$t(\"interface.save\")) + \"\\n      \"\n                )\n              ]\n            ),\n            _c(\"interface-bottom-text\", {\n              attrs: {\n                \"link-text\": _vm.$t(\"interface.helpCenter\"),\n                question: _vm.$t(\"interface.dontKnow\"),\n                link: \"https://kb.myetherwallet.com\"\n              }\n            })\n          ],\n          1\n        )\n      ])\n    ]\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}