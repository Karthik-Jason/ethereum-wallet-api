{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/layouts/CreateWalletLayout/containers/ByMnemonicContainer/components/PrintModal/PrintModal.vue?vue&type=style&index=0&id=1ef0e87e&lang=scss&scoped=true&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/layouts/CreateWalletLayout/containers/ByMnemonicContainer/components/PrintModal/PrintModal.vue","mtime":1573477611676},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import 'PrintModal.scss';\n",{"version":3,"sources":["PrintModal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8FA","file":"PrintModal.vue","sourceRoot":"src/layouts/CreateWalletLayout/containers/ByMnemonicContainer/components/PrintModal","sourcesContent":["<template>\n  <div>\n    <b-modal\n      ref=\"print\"\n      title=\"Print Preview\"\n      hide-footer\n      centered\n      class=\"nopadding print-mod\"\n      size=\"lg\"\n      static\n      lazy\n    >\n      <div class=\"modal-content-container\">\n        <div ref=\"printContainer\" class=\"mnemonic-to-print\">\n          <mnemonic-table-to-print\n            :mnemonic=\"mnemonic\"\n            :is-twenty-four=\"isTwentyFour\"\n            :build-type=\"buildType\"\n          />\n        </div>\n        <div class=\"mnemonic-to-display\">\n          <mnemonic-table-to-display\n            :mnemonic=\"mnemonic\"\n            :is-twenty-four=\"isTwentyFour\"\n            :build-type=\"buildType\"\n          />\n        </div>\n        <div class=\"button-container\">\n          <standard-button\n            :options=\"printButtonOptions\"\n            @click.native=\"print\"\n          />\n        </div>\n      </div>\n      <!-- .modal-content-container -->\n    </b-modal>\n  </div>\n</template>\n<script>\nimport StandardButton from '@/components/Buttons/StandardButton';\nimport printJS from 'print-js';\nimport html2canvas from 'html2canvas';\nimport MnemonicTableToPrint from './components/MnemonicTableToPrint';\nimport MnemonicTableToDisplay from './components/MnemonicTableToDisplay';\n\nexport default {\n  components: {\n    'standard-button': StandardButton,\n    'mnemonic-table-to-print': MnemonicTableToPrint,\n    'mnemonic-table-to-display': MnemonicTableToDisplay\n  },\n  props: {\n    mnemonic: {\n      type: Array,\n      default: () => []\n    },\n    isTwentyFour: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      printButtonOptions: {\n        title: 'Print',\n        buttonStyle: 'green-border',\n        noMinWidth: true,\n        fullWidth: true\n      },\n      buildType: BUILD_TYPE\n    };\n  },\n  methods: {\n    async print() {\n      const element = this.$refs.printContainer;\n      const screen = await html2canvas(element, {\n        async: true,\n        logging: false,\n        height: 800,\n        width: 800,\n        scrollY: 0\n      }).then(canvas => {\n        return canvas;\n      });\n      printJS({\n        printable: screen.toDataURL('image/png'),\n        type: 'image'\n      });\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'PrintModal.scss';\n</style>\n"]}]}