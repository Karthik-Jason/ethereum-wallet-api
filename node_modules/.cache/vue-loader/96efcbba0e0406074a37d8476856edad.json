{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/layouts/InterfaceLayout/containers/SwapContainer/components/SwapSendToModal/SwapSendToModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/layouts/InterfaceLayout/containers/SwapContainer/components/SwapSendToModal/SwapSendToModal.vue","mtime":1574664278306},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js","mtime":1574664275010},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js","mtime":1574664277774}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Arrow from '@/assets/images/etc/single-arrow.svg';\nimport ButtonWithQrCode from '@/components/Buttons/ButtonWithQrCode';\nimport HelpCenterButton from '@/components/Buttons/HelpCenterButton';\nimport CheckoutForm from '../CheckoutForm';\n\nimport { fiat, utils, qrcodeBuilder } from '@/partners';\n\nexport default {\n  components: {\n    'button-with-qrcode': ButtonWithQrCode,\n    'help-center-button': HelpCenterButton,\n    'simplex-checkout-form': CheckoutForm\n  },\n  props: {\n    swapDetails: {\n      type: Object,\n      default: function() {\n        return {};\n      }\n    },\n    currentAddress: {\n      type: String,\n      default: ''\n    }\n  },\n  data() {\n    return {\n      rawSwapDetails: {},\n      timerInterval: {},\n      timeRemaining: 0,\n      fiatCurrencies: fiat.map(entry => entry.symbol),\n      qrcode: '',\n      arrowImage: Arrow,\n      fromAddress: {},\n      toAddress: {}\n    };\n  },\n  computed: {\n    swapProvider() {\n      return this.swapDetails.provider;\n    },\n    isFromFiat() {\n      return this.fiatCurrencies.includes(this.rawSwapDetails.fromCurrency);\n    },\n    toFiat() {\n      return this.fiatCurrencies.includes(this.rawSwapDetails.toCurrency);\n    },\n    fiatDest() {\n      if (this.swapDetails.orderDetails) {\n        return this.swapDetails.orderDetails.name;\n      }\n      return '';\n    },\n    qrcodeContent() {\n      if (this.swapDetails.dataForInitialization) {\n        return qrcodeBuilder(\n          this.swapDetails.providerAddress,\n          this.swapDetails.fromCurrency\n        );\n      }\n    }\n  },\n  watch: {\n    swapDetails(newValue) {\n      this.rawSwapDetails = newValue;\n      this.timeUpdater(newValue);\n      if (\n        this.fiatCurrencies.includes(newValue.toCurrency) ||\n        this.fiatCurrencies.includes(newValue.fromCurrency)\n      ) {\n        this.fromAddress = {\n          value: newValue.fromValue,\n          name: newValue.fromCurrency,\n          address: newValue.fromAddress ? newValue.fromAddress : ''\n        };\n        this.toAddress = {\n          value: newValue.toValue,\n          name: newValue.toCurrency,\n          address: newValue.toAddress ? newValue.toAddress : ''\n        };\n      } else {\n        this.fromAddress = {\n          value: newValue.fromValue,\n          name: newValue.fromCurrency,\n          address: newValue.fromAddress ? newValue.fromAddress : ''\n        };\n        this.toAddress = {\n          value: newValue.toValue,\n          name: newValue.toCurrency,\n          address: newValue.toAddress\n        };\n      }\n    }\n  },\n  methods: {\n    timeUpdater(swapDetails) {\n      clearInterval(this.timerInterval);\n      this.timeRemaining = utils.getTimeRemainingString(\n        swapDetails.timestamp,\n        swapDetails.validFor\n      );\n      this.timerInterval = setInterval(() => {\n        this.timeRemaining = utils.getTimeRemainingString(\n          swapDetails.timestamp,\n          swapDetails.validFor\n        );\n        if (this.timeRemaining === 'expired') {\n          clearInterval(this.timerInterval);\n        }\n      }, 1000);\n    },\n    redirectToPartner() {\n      this.$store\n        .dispatch('addSwapNotification', [\n          `Swap_Order`,\n          this.currentAddress,\n          this.swapDetails\n        ])\n        .then(() => {\n          this.$refs.swapconfirmation.hide();\n        });\n    },\n    swapStarted(swapDetails) {\n      this.timeUpdater(swapDetails);\n      if (!swapDetails.dataForInitialization) {\n        this.$refs.swapconfirmation.hide();\n        throw Error('Invalid details from swap provider');\n      }\n    },\n    sentTransaction() {\n      this.$store\n        .dispatch('addSwapNotification', [\n          `Swap_Order`,\n          this.currentAddress,\n          this.swapDetails\n        ])\n        .then(() => {\n          this.$refs.swapconfirmation.hide();\n        });\n    }\n  }\n};\n",{"version":3,"sources":["SwapSendToModal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8GA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"SwapSendToModal.vue","sourceRoot":"src/layouts/InterfaceLayout/containers/SwapContainer/components/SwapSendToModal","sourcesContent":["<template>\n  <div class=\"modal-container\">\n    <b-modal\n      ref=\"swapconfirmation\"\n      :title=\"$t('interface.reviewSwap')\"\n      hide-footer\n      centered\n      class=\"bootstrap-modal bootstrap-modal-wide padding-40-20\"\n      static\n      lazy\n    >\n      <div class=\"time-remaining\">\n        <h1>{{ timeRemaining }}</h1>\n        <p>{{ $t('interface.timeRemaining') }}</p>\n      </div>\n      <div>\n        <div class=\"swap-detail\">\n          <div class=\"from-address\">\n            <div class=\"icon\">\n              <i :class=\"['cc', fromAddress.name, 'cc-icon']\" />\n            </div>\n            <p class=\"value\">\n              {{ fromAddress.value }} <span>{{ fromAddress.name }}</span>\n            </p>\n            <p\n              v-show=\"fromAddress.address !== '' && !isFromFiat\"\n              class=\"block-title\"\n            >\n              {{ $t('interface.fromAddr') }}\n            </p>\n            <p\n              v-show=\"fromAddress.address !== '' && !isFromFiat\"\n              class=\"address\"\n            >\n              {{ fromAddress.address }}\n            </p>\n          </div>\n          <div class=\"right-arrow\"><img :src=\"arrowImage\" alt /></div>\n          <!-- Fiat to Crypto-->\n          <div v-if=\"!toFiat\" class=\"to-address\">\n            <div class=\"icon\">\n              <i :class=\"['cc', toAddress.name, 'cc-icon']\" />\n            </div>\n            <p class=\"value\">\n              {{ toAddress.value }} <span>{{ toAddress.name }}</span>\n            </p>\n            <p v-show=\"toAddress.address !== ''\" class=\"block-title\">\n              {{ $t('interface.sendTxToAddr') }}\n            </p>\n            <p v-show=\"toAddress.address !== ''\" class=\"address\">\n              {{ toAddress.address }}\n            </p>\n          </div>\n          <!-- Crypto to Crypto -->\n          <div v-else class=\"to-address\">\n            <div class=\"icon\">\n              <i :class=\"['cc', toAddress.name, 'cc-icon']\" />\n            </div>\n            <p class=\"value\">\n              {{ toAddress.value }} <span>{{ toAddress.name }}</span>\n            </p>\n            <p class=\"block-title\">{{ $t('common.to') }}</p>\n            <p class=\"address\">{{ fiatDest }}</p>\n          </div>\n        </div>\n\n        <ul v-show=\"!isFromFiat\" class=\"confirm-send-button\">\n          <li>\n            <div class=\"provider-address-details\">\n              <h4>\n                {{\n                  $t('interface.notFromEthSwap', {\n                    value: fromAddress.value,\n                    currency: fromAddress.name\n                  })\n                }}\n                <span class=\"address\">{{ qrcode }}</span>\n              </h4>\n              <p>{{ swapDetails.providerAddress }}</p>\n\n              <qrcode\n                :value=\"qrcodeContent\"\n                :options=\"{ size: 200, level: 'H', padding: 25 }\"\n              />\n            </div>\n          </li>\n          <li>\n            <div @click=\"sentTransaction\">\n              <button-with-qrcode\n                :qrcode=\"qrcode\"\n                :buttonname=\"\n                  $t('interface.sentCoins', { currency: fromAddress.name })\n                \"\n              />\n            </div>\n          </li>\n        </ul>\n        <simplex-checkout-form\n          v-if=\"isFromFiat && swapProvider === 'simplex'\"\n          :form-data=\"swapDetails.dataForInitialization\"\n          :continue-action=\"redirectToPartner\"\n        />\n      </div>\n\n      <help-center-button />\n    </b-modal>\n  </div>\n</template>\n\n<script>\nimport Arrow from '@/assets/images/etc/single-arrow.svg';\nimport ButtonWithQrCode from '@/components/Buttons/ButtonWithQrCode';\nimport HelpCenterButton from '@/components/Buttons/HelpCenterButton';\nimport CheckoutForm from '../CheckoutForm';\n\nimport { fiat, utils, qrcodeBuilder } from '@/partners';\n\nexport default {\n  components: {\n    'button-with-qrcode': ButtonWithQrCode,\n    'help-center-button': HelpCenterButton,\n    'simplex-checkout-form': CheckoutForm\n  },\n  props: {\n    swapDetails: {\n      type: Object,\n      default: function() {\n        return {};\n      }\n    },\n    currentAddress: {\n      type: String,\n      default: ''\n    }\n  },\n  data() {\n    return {\n      rawSwapDetails: {},\n      timerInterval: {},\n      timeRemaining: 0,\n      fiatCurrencies: fiat.map(entry => entry.symbol),\n      qrcode: '',\n      arrowImage: Arrow,\n      fromAddress: {},\n      toAddress: {}\n    };\n  },\n  computed: {\n    swapProvider() {\n      return this.swapDetails.provider;\n    },\n    isFromFiat() {\n      return this.fiatCurrencies.includes(this.rawSwapDetails.fromCurrency);\n    },\n    toFiat() {\n      return this.fiatCurrencies.includes(this.rawSwapDetails.toCurrency);\n    },\n    fiatDest() {\n      if (this.swapDetails.orderDetails) {\n        return this.swapDetails.orderDetails.name;\n      }\n      return '';\n    },\n    qrcodeContent() {\n      if (this.swapDetails.dataForInitialization) {\n        return qrcodeBuilder(\n          this.swapDetails.providerAddress,\n          this.swapDetails.fromCurrency\n        );\n      }\n    }\n  },\n  watch: {\n    swapDetails(newValue) {\n      this.rawSwapDetails = newValue;\n      this.timeUpdater(newValue);\n      if (\n        this.fiatCurrencies.includes(newValue.toCurrency) ||\n        this.fiatCurrencies.includes(newValue.fromCurrency)\n      ) {\n        this.fromAddress = {\n          value: newValue.fromValue,\n          name: newValue.fromCurrency,\n          address: newValue.fromAddress ? newValue.fromAddress : ''\n        };\n        this.toAddress = {\n          value: newValue.toValue,\n          name: newValue.toCurrency,\n          address: newValue.toAddress ? newValue.toAddress : ''\n        };\n      } else {\n        this.fromAddress = {\n          value: newValue.fromValue,\n          name: newValue.fromCurrency,\n          address: newValue.fromAddress ? newValue.fromAddress : ''\n        };\n        this.toAddress = {\n          value: newValue.toValue,\n          name: newValue.toCurrency,\n          address: newValue.toAddress\n        };\n      }\n    }\n  },\n  methods: {\n    timeUpdater(swapDetails) {\n      clearInterval(this.timerInterval);\n      this.timeRemaining = utils.getTimeRemainingString(\n        swapDetails.timestamp,\n        swapDetails.validFor\n      );\n      this.timerInterval = setInterval(() => {\n        this.timeRemaining = utils.getTimeRemainingString(\n          swapDetails.timestamp,\n          swapDetails.validFor\n        );\n        if (this.timeRemaining === 'expired') {\n          clearInterval(this.timerInterval);\n        }\n      }, 1000);\n    },\n    redirectToPartner() {\n      this.$store\n        .dispatch('addSwapNotification', [\n          `Swap_Order`,\n          this.currentAddress,\n          this.swapDetails\n        ])\n        .then(() => {\n          this.$refs.swapconfirmation.hide();\n        });\n    },\n    swapStarted(swapDetails) {\n      this.timeUpdater(swapDetails);\n      if (!swapDetails.dataForInitialization) {\n        this.$refs.swapconfirmation.hide();\n        throw Error('Invalid details from swap provider');\n      }\n    },\n    sentTransaction() {\n      this.$store\n        .dispatch('addSwapNotification', [\n          `Swap_Order`,\n          this.currentAddress,\n          this.swapDetails\n        ])\n        .then(() => {\n          this.$refs.swapconfirmation.hide();\n        });\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'SwapSendToModal.scss';\n</style>\n"]}]}