{"remainingRequest":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/layouts/InterfaceLayout/components/InterfaceNetworkModal/InterfaceNetworkModal.vue?vue&type=template&id=b845c69a&scoped=true&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/layouts/InterfaceLayout/components/InterfaceNetworkModal/InterfaceNetworkModal.vue","mtime":1573477611976},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    { staticClass: \"modal-container\" },\n    [\n      _c(\n        \"b-modal\",\n        {\n          ref: \"network\",\n          staticClass: \"bootstrap-modal network nopadding max-height-1\",\n          attrs: {\n            title: _vm.$t(\"interface.network\"),\n            \"hide-footer\": \"\",\n            centered: \"\",\n            static: \"\",\n            lazy: \"\"\n          }\n        },\n        [\n          _c(\"div\", { staticClass: \"content-block\" }, [\n            _c(\"div\", { staticClass: \"flex-container\" }, [\n              _c(\"h4\", { staticClass: \"modal-title\" }, [\n                _vm._v(_vm._s(_vm.$t(\"common.advanced\")))\n              ]),\n              _c(\n                \"div\",\n                { staticClass: \"margin-left-auto add-custom-network\" },\n                [\n                  _c(\"p\", [_vm._v(_vm._s(_vm.$t(\"interface.addCustomNode\")))]),\n                  _c(\"div\", { staticClass: \"sliding-switch-white\" }, [\n                    _c(\"label\", { staticClass: \"switch\" }, [\n                      _c(\"input\", {\n                        ref: \"addCustomToggle\",\n                        attrs: { type: \"checkbox\" },\n                        on: { click: _vm.addCustomNetworkToggle }\n                      }),\n                      _c(\"span\", { staticClass: \"slider round\" })\n                    ])\n                  ])\n                ]\n              )\n            ])\n          ]),\n          _c(\n            \"div\",\n            { ref: \"networkList\", staticClass: \"network-list\" },\n            [\n              _vm._l(Object.keys(_vm.reorderedNetworks), function(key, index) {\n                return _c(\n                  \"div\",\n                  { key: key + index, staticClass: \"content-block\" },\n                  [\n                    _c(\"div\", { staticClass: \"network-title\" }, [\n                      _c(\"div\", { staticClass: \"network-icon\" }, [\n                        _c(\"img\", {\n                          attrs: {\n                            src: _vm.Networks[key][0].type.icon,\n                            alt: \"\"\n                          }\n                        })\n                      ]),\n                      _c(\"h4\", { class: key.toLowerCase() }, [\n                        _vm._v(_vm._s(key))\n                      ])\n                    ]),\n                    _c(\n                      \"div\",\n                      { staticClass: \"grid-3\" },\n                      _vm._l(_vm.Networks[key], function(net) {\n                        return _c(\n                          \"p\",\n                          {\n                            key: net.service,\n                            staticClass: \"switch-network\",\n                            class:\n                              net.service === _vm.network.service &&\n                              net.type &&\n                              net.type.name === _vm.network.type.name\n                                ? \"current-network\"\n                                : \"\",\n                            on: {\n                              click: function($event) {\n                                return _vm.switchNetwork(net, key)\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n            \" +\n                                _vm._s(net.service) +\n                                \"\\n          \"\n                            )\n                          ]\n                        )\n                      }),\n                      0\n                    )\n                  ]\n                )\n              }),\n              _vm.customNetworks.length > 0\n                ? _c(\n                    \"div\",\n                    { staticClass: \"content-block\" },\n                    [\n                      _c(\"h4\", { staticClass: \"cust\" }, [\n                        _vm._v(\"Custom Networks\")\n                      ]),\n                      _vm._l(_vm.customNetworks, function(net, idx) {\n                        return _c(\n                          \"div\",\n                          {\n                            key: net.service + \"(\" + net.type.name + \")\" + idx,\n                            staticClass: \"grid-3\"\n                          },\n                          [\n                            _c(\n                              \"div\",\n                              {\n                                staticClass:\n                                  \"switch-network custom-network-item\",\n                                class:\n                                  net.service === _vm.network.service &&\n                                  net.type.name === _vm.network.type.name\n                                    ? \"current-network\"\n                                    : \"\"\n                              },\n                              [\n                                _c(\n                                  \"p\",\n                                  {\n                                    on: {\n                                      click: function($event) {\n                                        return _vm.switchNetwork(net)\n                                      }\n                                    }\n                                  },\n                                  [\n                                    _vm._v(\n                                      \"\\n              \" +\n                                        _vm._s(net.service) +\n                                        \" \" +\n                                        _vm._s(\"(\" + net.type.name + \")\") +\n                                        \"\\n            \"\n                                    )\n                                  ]\n                                ),\n                                _c(\"i\", {\n                                  staticClass: \"fa fa-times-circle\",\n                                  on: {\n                                    click: function($event) {\n                                      $event.preventDefault()\n                                      return _vm.removeNetwork(net, idx)\n                                    }\n                                  }\n                                })\n                              ]\n                            )\n                          ]\n                        )\n                      })\n                    ],\n                    2\n                  )\n                : _vm._e()\n            ],\n            2\n          ),\n          _c(\"form\", { ref: \"networkAdd\", staticClass: \"network-add hidden\" }, [\n            _c(\"div\", { staticClass: \"content-block\" }, [\n              _c(\"div\", { staticClass: \"input-block-container\" }, [\n                _c(\"input\", {\n                  directives: [\n                    {\n                      name: \"validate\",\n                      rawName: \"v-validate\",\n                      value: \"required\",\n                      expression: \"'required'\"\n                    },\n                    {\n                      name: \"model\",\n                      rawName: \"v-model\",\n                      value: _vm.name,\n                      expression: \"name\"\n                    }\n                  ],\n                  staticClass: \"custom-input-text-1\",\n                  attrs: {\n                    type: \"text\",\n                    name: \"nodeName\",\n                    placeholder: \"ETH Node Name\",\n                    autocomplete: \"off\"\n                  },\n                  domProps: { value: _vm.name },\n                  on: {\n                    input: function($event) {\n                      if ($event.target.composing) {\n                        return\n                      }\n                      _vm.name = $event.target.value\n                    }\n                  }\n                }),\n                _c(\n                  \"select\",\n                  {\n                    directives: [\n                      {\n                        name: \"model\",\n                        rawName: \"v-model\",\n                        value: _vm.selectedNetworkName,\n                        expression: \"selectedNetworkName\"\n                      }\n                    ],\n                    staticClass: \"custom-select-1\",\n                    on: {\n                      change: function($event) {\n                        var $$selectedVal = Array.prototype.filter\n                          .call($event.target.options, function(o) {\n                            return o.selected\n                          })\n                          .map(function(o) {\n                            var val = \"_value\" in o ? o._value : o.value\n                            return val\n                          })\n                        _vm.selectedNetworkName = $event.target.multiple\n                          ? $$selectedVal\n                          : $$selectedVal[0]\n                      }\n                    }\n                  },\n                  _vm._l(_vm.types, function(type) {\n                    return _c(\n                      \"option\",\n                      {\n                        key: type.name + type.name_long,\n                        domProps: {\n                          value: type.name,\n                          selected: _vm.selectedNetworkName === type.name\n                        }\n                      },\n                      [\n                        _vm._v(\n                          \"\\n              \" +\n                            _vm._s(_vm._f(\"capitalize\")(type.name)) +\n                            \" -\\n              \" +\n                            _vm._s(_vm._f(\"capitalize\")(type.name_long)) +\n                            \"\\n            \"\n                        )\n                      ]\n                    )\n                  }),\n                  0\n                ),\n                _c(\"input\", {\n                  directives: [\n                    {\n                      name: \"validate\",\n                      rawName: \"v-validate\",\n                      value: {\n                        required: true,\n                        url: {\n                          require_protocol: true,\n                          protocols: [\"http\", \"https\", \"ws\", \"wss\"],\n                          require_tld: false\n                        }\n                      },\n                      expression:\n                        \"{\\n              required: true,\\n              url: {\\n                require_protocol: true,\\n                protocols: ['http', 'https', 'ws', 'wss'],\\n                require_tld: false\\n              }\\n            }\"\n                    },\n                    {\n                      name: \"model\",\n                      rawName: \"v-model\",\n                      value: _vm.url,\n                      expression: \"url\"\n                    }\n                  ],\n                  staticClass: \"custom-input-text-1\",\n                  attrs: {\n                    type: \"text\",\n                    name: \"nodeUrl\",\n                    placeholder: \"URL\",\n                    autocomplete: \"off\"\n                  },\n                  domProps: { value: _vm.url },\n                  on: {\n                    input: function($event) {\n                      if ($event.target.composing) {\n                        return\n                      }\n                      _vm.url = $event.target.value\n                    }\n                  }\n                }),\n                _c(\"input\", {\n                  directives: [\n                    {\n                      name: \"model\",\n                      rawName: \"v-model\",\n                      value: _vm.port,\n                      expression: \"port\"\n                    }\n                  ],\n                  staticClass: \"custom-input-text-1\",\n                  attrs: {\n                    type: \"number\",\n                    name: \"nodePort\",\n                    placeholder: \"Port\",\n                    autocomplete: \"off\"\n                  },\n                  domProps: { value: _vm.port },\n                  on: {\n                    input: function($event) {\n                      if ($event.target.composing) {\n                        return\n                      }\n                      _vm.port = $event.target.value\n                    }\n                  }\n                }),\n                _c(\"input\", {\n                  directives: [\n                    {\n                      name: \"validate\",\n                      rawName: \"v-validate\",\n                      value: \"required|url:require_protocol\",\n                      expression: \"'required|url:require_protocol'\"\n                    },\n                    {\n                      name: \"show\",\n                      rawName: \"v-show\",\n                      value: _vm.selectedNetworkName === \"CUS\",\n                      expression: \"selectedNetworkName === 'CUS'\"\n                    },\n                    {\n                      name: \"model\",\n                      rawName: \"v-model\",\n                      value: _vm.blockExplorerTX,\n                      expression: \"blockExplorerTX\"\n                    }\n                  ],\n                  staticClass: \"custom-input-text-1\",\n                  attrs: {\n                    type: \"text\",\n                    name: \"customExplorerTx\",\n                    placeholder: \"https://etherscan.io/tx/[[txHash]]\",\n                    autocomplete: \"off\"\n                  },\n                  domProps: { value: _vm.blockExplorerTX },\n                  on: {\n                    input: function($event) {\n                      if ($event.target.composing) {\n                        return\n                      }\n                      _vm.blockExplorerTX = $event.target.value\n                    }\n                  }\n                }),\n                _c(\"input\", {\n                  directives: [\n                    {\n                      name: \"validate\",\n                      rawName: \"v-validate\",\n                      value: \"required|numeric\",\n                      expression: \"'required|numeric'\"\n                    },\n                    {\n                      name: \"show\",\n                      rawName: \"v-show\",\n                      value: _vm.selectedNetworkName === \"CUS\",\n                      expression: \"selectedNetworkName === 'CUS'\"\n                    },\n                    {\n                      name: \"model\",\n                      rawName: \"v-model\",\n                      value: _vm.chainID,\n                      expression: \"chainID\"\n                    }\n                  ],\n                  staticClass: \"custom-input-text-1\",\n                  attrs: {\n                    type: \"number\",\n                    name: \"customChain\",\n                    placeholder: \"Chain ID\",\n                    autocomplete: \"off\"\n                  },\n                  domProps: { value: _vm.chainID },\n                  on: {\n                    input: function($event) {\n                      if ($event.target.composing) {\n                        return\n                      }\n                      _vm.chainID = $event.target.value\n                    }\n                  }\n                }),\n                _c(\"input\", {\n                  directives: [\n                    {\n                      name: \"validate\",\n                      rawName: \"v-validate\",\n                      value: \"required|url:require_protocol\",\n                      expression: \"'required|url:require_protocol'\"\n                    },\n                    {\n                      name: \"show\",\n                      rawName: \"v-show\",\n                      value: _vm.selectedNetworkName === \"CUS\",\n                      expression: \"selectedNetworkName === 'CUS'\"\n                    },\n                    {\n                      name: \"model\",\n                      rawName: \"v-model\",\n                      value: _vm.blockExplorerAddr,\n                      expression: \"blockExplorerAddr\"\n                    }\n                  ],\n                  staticClass: \"custom-input-text-1\",\n                  attrs: {\n                    type: \"text\",\n                    name: \"customExplorerAddr\",\n                    placeholder: \"https://etherscan.io/address/[[address]]\",\n                    autocomplete: \"off\"\n                  },\n                  domProps: { value: _vm.blockExplorerAddr },\n                  on: {\n                    input: function($event) {\n                      if ($event.target.composing) {\n                        return\n                      }\n                      _vm.blockExplorerAddr = $event.target.value\n                    }\n                  }\n                })\n              ]),\n              _c(\"div\", [\n                _c(\n                  \"p\",\n                  {\n                    directives: [\n                      {\n                        name: \"show\",\n                        rawName: \"v-show\",\n                        value: _vm.errors.has(\"nodeName\"),\n                        expression: \"errors.has('nodeName')\"\n                      }\n                    ]\n                  },\n                  [\n                    _vm._v(\n                      \"\\n            \" +\n                        _vm._s(_vm.errors.first(\"nodeName\")) +\n                        \"\\n          \"\n                    )\n                  ]\n                ),\n                _c(\n                  \"p\",\n                  {\n                    directives: [\n                      {\n                        name: \"show\",\n                        rawName: \"v-show\",\n                        value: _vm.errors.has(\"nodeUrl\"),\n                        expression: \"errors.has('nodeUrl')\"\n                      }\n                    ]\n                  },\n                  [_vm._v(_vm._s(_vm.errors.first(\"nodeUrl\")))]\n                ),\n                _c(\n                  \"p\",\n                  {\n                    directives: [\n                      {\n                        name: \"show\",\n                        rawName: \"v-show\",\n                        value:\n                          _vm.errors.has(\"customExplorerTx\") ||\n                          _vm.blockExplorerTX.length > 0,\n                        expression:\n                          \"\\n              errors.has('customExplorerTx') || blockExplorerTX.length > 0\\n            \"\n                      }\n                    ]\n                  },\n                  [\n                    _vm._v(\n                      \"\\n            \" +\n                        _vm._s(_vm.errors.first(\"customExplorerTx\")) +\n                        \"\\n          \"\n                    )\n                  ]\n                ),\n                _c(\n                  \"p\",\n                  {\n                    directives: [\n                      {\n                        name: \"show\",\n                        rawName: \"v-show\",\n                        value:\n                          _vm.errors.has(\"customChain\") ||\n                          (_vm.chainID && _vm.chainID > 0),\n                        expression:\n                          \"errors.has('customChain') || (chainID && chainID > 0)\"\n                      }\n                    ]\n                  },\n                  [\n                    _vm._v(\n                      \"\\n            \" +\n                        _vm._s(_vm.errors.first(\"customChain\")) +\n                        \"\\n          \"\n                    )\n                  ]\n                ),\n                _c(\n                  \"p\",\n                  {\n                    directives: [\n                      {\n                        name: \"show\",\n                        rawName: \"v-show\",\n                        value:\n                          _vm.errors.has(\"customExplorerAddr\") ||\n                          _vm.blockExplorerAddr.length > 0,\n                        expression:\n                          \"\\n              errors.has('customExplorerAddr') || blockExplorerAddr.length > 0\\n            \"\n                      }\n                    ]\n                  },\n                  [\n                    _vm._v(\n                      \"\\n            \" +\n                        _vm._s(_vm.errors.first(\"customExplorerAddr\")) +\n                        \"\\n          \"\n                    )\n                  ]\n                )\n              ])\n            ]),\n            _c(\"div\", { staticClass: \"content-block\" }, [\n              _c(\"div\", { staticClass: \"flex-container\" }, [\n                _c(\"div\", [\n                  _c(\"h4\", { staticClass: \"modal-title\" }, [\n                    _vm._v(_vm._s(_vm.$t(\"interface.httpBasicAccess\")))\n                  ]),\n                  _c(\"p\", { staticClass: \"warning-msg\" }, [\n                    _vm._v(\n                      \"\\n              Warning: This information will be saved to your local storage,\\n              make sure your computer is secure.\\n            \"\n                    )\n                  ])\n                ]),\n                _c(\n                  \"div\",\n                  { staticClass: \"margin-left-auto add-custom-network\" },\n                  [\n                    _c(\"div\", { staticClass: \"sliding-switch-white\" }, [\n                      _c(\"label\", { staticClass: \"switch\" }, [\n                        _c(\"input\", {\n                          attrs: { type: \"checkbox\" },\n                          on: { click: _vm.expendAuth }\n                        }),\n                        _c(\"span\", { staticClass: \"slider round\" })\n                      ])\n                    ])\n                  ]\n                )\n              ]),\n              _c(\n                \"div\",\n                { ref: \"authForm\", staticClass: \"auth-form-container hidden\" },\n                [\n                  _c(\"input\", {\n                    directives: [\n                      {\n                        name: \"model\",\n                        rawName: \"v-model\",\n                        value: _vm.username,\n                        expression: \"username\"\n                      }\n                    ],\n                    staticClass: \"custom-input-text-1\",\n                    attrs: {\n                      type: \"text\",\n                      name: \"\",\n                      placeholder: \"User Name\",\n                      autocomplete: \"off\"\n                    },\n                    domProps: { value: _vm.username },\n                    on: {\n                      input: function($event) {\n                        if ($event.target.composing) {\n                          return\n                        }\n                        _vm.username = $event.target.value\n                      }\n                    }\n                  }),\n                  _c(\"input\", {\n                    directives: [\n                      {\n                        name: \"model\",\n                        rawName: \"v-model\",\n                        value: _vm.password,\n                        expression: \"password\"\n                      }\n                    ],\n                    staticClass: \"custom-input-text-1\",\n                    attrs: {\n                      type: \"password\",\n                      name: \"\",\n                      placeholder: \"Password\",\n                      autocomplete: \"off\"\n                    },\n                    domProps: { value: _vm.password },\n                    on: {\n                      input: function($event) {\n                        if ($event.target.composing) {\n                          return\n                        }\n                        _vm.password = $event.target.value\n                      }\n                    }\n                  })\n                ]\n              )\n            ]),\n            _c(\"div\", { staticClass: \"content-block\" }, [\n              _c(\n                \"div\",\n                { staticClass: \"save-button-container\" },\n                [\n                  _c(\n                    \"button\",\n                    {\n                      directives: [\n                        {\n                          name: \"show\",\n                          rawName: \"v-show\",\n                          value: _vm.selectedNetworkName !== \"CUS\",\n                          expression: \"selectedNetworkName !== 'CUS'\"\n                        }\n                      ],\n                      class: [\n                        _vm.errors.has(\"nodeName\") ||\n                        _vm.errors.has(\"nodeUrl\") ||\n                        _vm.url === \"\" ||\n                        _vm.name === \"\"\n                          ? \"disabled\"\n                          : \"\",\n                        \"save-button large-round-button-green-filled clickable\"\n                      ],\n                      on: {\n                        click: function($event) {\n                          $event.preventDefault()\n                          return _vm.saveCustomNetwork($event)\n                        }\n                      }\n                    },\n                    [\n                      _vm._v(\n                        \"\\n            \" +\n                          _vm._s(_vm.$t(\"interface.save\")) +\n                          \"\\n          \"\n                      )\n                    ]\n                  ),\n                  _c(\n                    \"button\",\n                    {\n                      directives: [\n                        {\n                          name: \"show\",\n                          rawName: \"v-show\",\n                          value: _vm.selectedNetworkName === \"CUS\",\n                          expression: \"selectedNetworkName === 'CUS'\"\n                        }\n                      ],\n                      class: [\n                        _vm.errors.has(\"nodeName\") ||\n                        _vm.errors.has(\"nodeUrl\") ||\n                        _vm.url === \"\" ||\n                        _vm.name === \"\" ||\n                        _vm.errors.has(\"customChain\") ||\n                        _vm.errors.has(\"customExplorerTx\") ||\n                        _vm.blockExplorerTX === \"\" ||\n                        !_vm.chainID ||\n                        _vm.blockExplorerAddr === \"\" ||\n                        _vm.errors.has(\"customExplorerAddr\")\n                          ? \"disabled\"\n                          : \"\",\n                        \"save-button large-round-button-green-filled clickable\"\n                      ],\n                      on: {\n                        click: function($event) {\n                          $event.preventDefault()\n                          return _vm.saveCustomNetwork($event)\n                        }\n                      }\n                    },\n                    [\n                      _vm._v(\n                        \"\\n            \" +\n                          _vm._s(_vm.$t(\"interface.save\")) +\n                          \"\\n          \"\n                      )\n                    ]\n                  ),\n                  _c(\"interface-bottom-text\", {\n                    attrs: {\n                      \"link-text\": _vm.$t(\"interface.helpCenter\"),\n                      question: _vm.$t(\"interface.dontKnow\"),\n                      link: \"https://kb.myetherwallet.com\"\n                    }\n                  })\n                ],\n                1\n              )\n            ])\n          ])\n        ]\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}