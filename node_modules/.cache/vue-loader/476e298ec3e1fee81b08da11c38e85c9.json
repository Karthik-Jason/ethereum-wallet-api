{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/dapps/MakerDai/components/PaybackModal/PaybackModal.vue?vue&type=style&index=0&id=48467fec&lang=scss&scoped=true&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/dapps/MakerDai/components/PaybackModal/PaybackModal.vue","mtime":1573477611644},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import 'PaybackModal';\n",{"version":3,"sources":["PaybackModal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6cA","file":"PaybackModal.vue","sourceRoot":"src/dapps/MakerDai/components/PaybackModal","sourcesContent":["<template>\n  <div class=\"modal-container\">\n    <b-modal\n      ref=\"modal\"\n      :title=\"$t('dappsMaker.paybackTitle')\"\n      centered\n      class=\"bootstrap-modal nopadding\"\n      hide-footer\n      static\n      lazy\n    >\n      <div class=\"contents\">\n        <p class=\"top-message\">\n          {{ $t('dappsMaker.paybackNotice') }}\n        </p>\n        <div v-if=\"!hasEnoughMkr\">\n          <div class=\"value-block\">\n            <p>\n              <b>{{ $t('dappsMaker.mkrBalance') }}</b>\n            </p>\n            <p>\n              <b>{{ mkrBalance }} MKR</b>\n            </p>\n          </div>\n          <p class=\"get-mkr\" @click=\"getMkr()\">\n            {{ $t('dappsMaker.getMkr') }}\n          </p>\n        </div>\n        <div class=\"input-container\">\n          <div class=\"top-buttons\">\n            <p @click=\"currentDai\">{{ $t('dappsMaker.setMax') }}</p>\n          </div>\n          <div :class=\"['dai-amount', hasEnoughDai ? '' : 'danger']\">\n            <input v-model=\"amount\" />\n            <p class=\"floating-text\">DAI</p>\n          </div>\n        </div>\n\n        <expanding-option title=\"Detail Information\">\n          <ul class=\"details\">\n            <li>\n              <p>{{ $t('dappsMaker.outstandingDai') }}</p>\n              <p>\n                <b>{{\n                  values.debtValue ? displayFixedValue(values.debtValue, 3) : 0\n                }}</b>\n                DAI\n              </p>\n            </li>\n            <li>\n              <p>{{ $t('dappsMaker.stabilityFeeOwed') }}</p>\n              <p>\n                <b>{{ values.governanceFeeOwed }}</b> MKR\n              </p>\n            </li>\n            <li>\n              <p>{{ $t('dappsMaker.projectedLiquidation') }}</p>\n              <p>\n                <b>{{ displayFixedValue(newLiquidationPrice, 2) }}</b>\n                {{ fiatCurrency }}\n              </p>\n            </li>\n            <li>\n              <p>{{ $t('dappsMaker.projectedCollatRatio') }}</p>\n              <p>\n                <b\n                  >{{\n                    displayFixedValue(\n                      displayPercentValue(newCollateralRatio),\n                      3\n                    )\n                  }}%</b\n                >\n              </p>\n            </li>\n          </ul>\n        </expanding-option>\n        <div class=\"buttons\">\n          <div v-if=\"needsDaiApprove\">\n            <standard-button\n              :options=\"approveDaiButton\"\n              @click.native=\"approveDai\"\n            />\n          </div>\n          <div v-if=\"needsMkrApprove\">\n            <standard-button\n              :options=\"approveMkrButton\"\n              @click.native=\"approveMkr\"\n            />\n          </div>\n        </div>\n        <div class=\"buttons\">\n          <standard-button\n            :options=\"cancelButton\"\n            :click-function=\"closeModal\"\n          />\n          <standard-button\n            :options=\"submitButton\"\n            :button-disabled=\"canProceed ? false : true\"\n            :click-function=\"submitBtn\"\n          />\n        </div>\n        <help-center-button />\n      </div>\n    </b-modal>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport ethUnit from 'ethjs-unit';\nimport ExpandingOption from '@/components/ExpandingOption';\nimport HelpCenterButton from '@/components/Buttons/HelpCenterButton';\nimport CheckBox from '../CheckBox';\nimport BigNumber from 'bignumber.js/bignumber.js';\nimport { displayFixedValue, displayPercentValue } from '../../helpers';\nimport StandardButton from '@/components/Buttons/StandardButton';\n\nconst toBigNumber = num => {\n  return new BigNumber(num);\n};\n\nexport default {\n  components: {\n    'help-center-button': HelpCenterButton,\n    'check-box': CheckBox,\n    'expanding-option': ExpandingOption,\n    'standard-button': StandardButton\n  },\n  props: {\n    tokensWithBalance: {\n      type: Array,\n      default: function() {\n        return [];\n      }\n    },\n    action: {\n      type: String,\n      default: ''\n    },\n    values: {\n      type: Object,\n      default: function() {\n        return {\n          maxPethDraw: '',\n          maxEthDraw: '',\n          maxUsdDraw: '',\n          ethCollateral: '',\n          pethCollateral: '',\n          usdCollateral: '',\n          debtValue: '',\n          maxDai: '',\n          collateralRatio: '',\n          cdpId: ''\n        };\n      }\n    },\n    calcCollatRatioEthChg: {\n      type: Function,\n      default: function() {}\n    },\n    calcLiquidationPriceEthChg: {\n      type: Function,\n      default: function() {}\n    },\n    calcCollatRatioDaiChg: {\n      type: Function,\n      default: function() {}\n    },\n    calcLiquidationPriceDaiChg: {\n      type: Function,\n      default: function() {}\n    }\n  },\n  data() {\n    return {\n      amount: 0,\n      amountEth: 0,\n      amountDai: 0,\n      mkrToken: {},\n      daiToken: {},\n      riskyBypass: false,\n      modalDetailInformation: false,\n      textValues: {},\n      fiatCurrency: 'USD',\n      digitalCurrency: 'ETH',\n      cancelButton: {\n        title: 'Cancel',\n        buttonStyle: 'green-border',\n        noMinWidth: true,\n        fullWidth: true\n      },\n      submitButton: {\n        title: 'Submit',\n        buttonStyle: 'green',\n        noMinWidth: true,\n        fullWidth: true\n      },\n      approveMkrButton: {\n        title: 'Approve Maker',\n        buttonStyle: 'green-border',\n        fullWidth: true,\n        noMinWidth: true\n      },\n      approveDaiButton: {\n        title: 'Approve Dai',\n        buttonStyle: 'green-border',\n        fullWidth: true,\n        noMinWidth: true\n      },\n      suppliedFrom: {\n        symbol: 'ETH',\n        name: 'Ethereum'\n      },\n      suppliedTo: {\n        symbol: 'MKR',\n        name: 'Maker'\n      },\n      suppliedToAmount: 0,\n      destAddress: ''\n    };\n  },\n  computed: {\n    ...mapState(['account', 'gasPrice', 'web3', 'network', 'ens']),\n    amountPresent() {\n      return (\n        (this.amount || this.amount !== '') && !toBigNumber(this.amount).lte(0)\n      );\n    },\n    canCompute() {\n      return this.values && this.amountPresent;\n    },\n    allOk() {\n      if (this.amountPresent) {\n        return this.newCollateralRatioSafe && this.canGenerateDaiAmount;\n      }\n      return true;\n    },\n    hasEnoughEth() {\n      if (this.canCompute) {\n        const asEth = ethUnit.fromWei(this.account.balance, 'ether');\n        return toBigNumber(this.amount).lte(toBigNumber(asEth));\n      }\n      return true;\n    },\n    paybackFee() {\n      if (this.canCompute) {\n        return toBigNumber(this.amount)\n          .div(this.values.debtValue)\n          .times(this.values.governanceFeeOwed);\n      }\n      return 0;\n    },\n    hasEnoughMkr() {\n      if (this.canCompute) {\n        return toBigNumber(this.mkrBalance).gte(toBigNumber(this.paybackFee));\n      }\n      return true;\n    },\n    hasEnoughDai() {\n      if (this.canCompute) {\n        return toBigNumber(this.amount).lte(toBigNumber(this.daiBalance));\n      }\n      return true;\n    },\n    canWithdrawEthAmount() {\n      if (this.canCompute) {\n        return toBigNumber(this.amount).lte(\n          toBigNumber(this.values.ethCollateral)\n        );\n      }\n      return false;\n    },\n    canGenerateDaiAmount() {\n      if (this.canCompute) {\n        return toBigNumber(this.amount).lte(toBigNumber(this.values.maxDai));\n      }\n      return true;\n    },\n    canProceed() {\n      return this.hasEnoughDai;\n    },\n    calcCollateralRatio() {\n      if (this.canCompute) {\n        return this.calcCollatRatioDaiChg(\n          toBigNumber(this.values.debtValue).minus(this.amount)\n        );\n      }\n      if (this.values) {\n        return this.values.collateralRatio;\n      }\n      return '--';\n    },\n    newCollateralRatio() {\n      if (this.amount > 0) {\n        return this.calcCollateralRatio;\n      } else if (this.values) {\n        return this.values.collatRatio;\n      }\n      return '--';\n    },\n    newCollateralRatioSafe() {\n      if (this.amount > 0) {\n        if (this.calcCollateralRatio.lte(new BigNumber(0.000009))) {\n          return true;\n        }\n        return this.calcCollateralRatio.gte(2);\n      } else if (this.values) {\n        return toBigNumber(this.values.collatRatio).gte(2);\n      }\n      return true;\n    },\n    newCollateralRatioInvalid() {\n      if (this.amount > 0) {\n        // If less than a very small number\n        if (this.calcCollateralRatio.lte(new BigNumber(0.000009))) {\n          return true;\n        }\n        return this.calcCollateralRatio.gte(1.5);\n      } else if (this.values) {\n        return toBigNumber(this.values.collatRatio).lte(1.5);\n      }\n      return true;\n    },\n    newLiquidationPrice() {\n      if (this.values.debtValue && this.amount > 0) {\n        return this.calcLiquidationPriceDaiChg(\n          toBigNumber(this.values.debtValue).minus(this.amount)\n        );\n      } else if (this.values.liquidationPrice) {\n        return this.values.liquidationPrice;\n      }\n      return 0;\n    },\n    mkrBalance() {\n      if (this.mkrToken) {\n        return this.mkrToken.balance;\n      }\n      return 0;\n    },\n    daiBalance() {\n      if (this.daiToken) {\n        return this.daiToken.balance;\n      }\n      return 0;\n    },\n    needsDaiApprove() {\n      if (toBigNumber(this.values.proxyAllowanceDai).gt(0)) {\n        if (\n          toBigNumber(this.values.proxyAllowanceDai).lt(this.values.debtValue)\n        ) {\n          return true;\n        }\n      }\n      return toBigNumber(this.values.proxyAllowanceDai).eq(0);\n    },\n    needsMkrApprove() {\n      if (toBigNumber(this.values.proxyAllowanceMkr).gt(0)) {\n        if (\n          toBigNumber(this.values.proxyAllowanceMkr).lt(\n            this.values.governanceFeeOwed\n          )\n        ) {\n          return true;\n        }\n      }\n      return toBigNumber(this.values.proxyAllowanceMkr).eq(0);\n    }\n  },\n  watch: {},\n  mounted() {\n    this.$refs.modal.$on('shown', () => {\n      this.amount = 0;\n      this.getBalances();\n    });\n  },\n  methods: {\n    submitBtn() {\n      if (!this.canProceed) return;\n      this.wipeDai();\n    },\n    checkBoxClicked() {\n      this.riskyBypass = !this.riskyBypass;\n    },\n    displayPercentValue,\n    displayFixedValue,\n    notZero(val) {\n      return toBigNumber(val).gt(0);\n    },\n    maxDai() {\n      this.amount = toBigNumber(this.values.maxDai).minus(\n        toBigNumber(this.values.maxDai).times(0.01)\n      );\n    },\n    currentDai() {\n      this.amount = this.values.debtValue;\n    },\n    async wipeDai() {\n      if (toBigNumber(this.amount).gte(0)) {\n        this.delayCloseModal();\n        if (toBigNumber(this.amount).gt(this.values.debtValue)) {\n          this.$emit('wipeDai', this.values.debtValue);\n        } else {\n          this.$emit('wipeDai', this.amount);\n        }\n      }\n    },\n    getBalances() {\n      this.mkrToken = this.tokensWithBalance.find(item => {\n        return item.symbol === 'MKR';\n      });\n      this.daiToken = this.tokensWithBalance.find(item => {\n        return item.symbol === 'DAI';\n      });\n    },\n    getMkr() {\n      const mkrNeeded = this.paybackFee;\n      if (toBigNumber(this.mkrBalance).lt(mkrNeeded)) {\n        this.suppliedToAmount = toBigNumber(mkrNeeded)\n          .minus(toBigNumber(this.mkrBalance))\n          .plus(toBigNumber(mkrNeeded).times(0.01))\n          .toNumber();\n        if (toBigNumber(this.suppliedToAmount).lt(0.000001)) {\n          this.suppliedToAmount = 0.000001;\n        }\n        this.suppliedFrom = {\n          symbol: 'ETH',\n          name: 'Ethereum'\n        };\n        this.suppliedTo = {\n          symbol: 'MKR',\n          name: 'Maker'\n        };\n        this.$eventHub.$emit(\n          'showSwapWidgetTo',\n          this.account.address,\n          this.suppliedFrom,\n          this.suppliedTo,\n          this.suppliedToAmount\n        );\n      }\n    },\n    closeModal() {\n      this.$refs.modal.hide();\n    },\n    delayCloseModal() {\n      setTimeout(() => {\n        this.closeModal();\n      }, 200);\n    },\n    async approveDai() {\n      this.$emit('approveDai');\n    },\n    async approveMkr() {\n      this.$emit('approveMkr');\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'PaybackModal';\n</style>\n"]}]}