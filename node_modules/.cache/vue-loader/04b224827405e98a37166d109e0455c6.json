{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/layouts/AccessWalletLayout/components/LedgerAppModal/LedgerAppModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/layouts/AccessWalletLayout/components/LedgerAppModal/LedgerAppModal.vue","mtime":1574664278286},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js","mtime":1574664275010},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js","mtime":1574664277774}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport apps from '@/wallets/hardware/ledger/appPaths.js';\nimport cust from '@/assets/images/icons/network.svg';\nimport { Toast, pathHelpers } from '@/helpers';\nimport { LedgerWallet } from '@/wallets';\nimport { mapState } from 'vuex';\nimport { ethereum } from '@/wallets/bip44/paths';\nexport default {\n  props: {\n    networks: {\n      type: Object,\n      default: () => {\n        return {};\n      }\n    }\n  },\n  data() {\n    return {\n      apps: apps,\n      selectedApp: {\n        network: {\n          name_long: apps[0].network.name_long,\n          icon: apps[0].network.icon\n        },\n        paths: apps[0].paths\n      },\n      toggled: false,\n      selectedPath: apps[0].paths[0],\n      flipButton: false,\n      customLabel: '',\n      customPath: ''\n    };\n  },\n  computed: {\n    fieldsFilled() {\n      const emptyApp = Object.keys(this.selectedApp).length;\n      return (\n        this.selected === '' &&\n        emptyApp === 0 &&\n        this.selectedPathText === 'Select Path' &&\n        this.selectedPath === ''\n      );\n    },\n    dropDownDefaultText() {\n      return `${this.selectedPath.label} - ${this.selectedPath.path}`;\n    },\n    ...mapState(['customPaths'])\n  },\n  watch: {\n    selectedApp: {\n      handler: function(newVal) {\n        this.selectedPath = newVal.paths[0];\n      },\n      deep: true\n    },\n    customPaths() {\n      this.setupCustomPaths();\n    }\n  },\n  mounted() {\n    this.setupCustomPaths();\n    this.$root.$on('bv::dropdown::show', () => {\n      this.flipButton = true;\n    });\n    this.$root.$on('bv::dropdown::hide', () => {\n      this.flipButton = false;\n    });\n  },\n  methods: {\n    remove(path, idx) {\n      const mappedPaths = this.selectedApp.paths.filter((item, itemIdx) => {\n        if (itemIdx !== idx) return item;\n      });\n      this.$store.dispatch('removeCustomPath', path);\n      this.setupCustomPaths();\n      this.selectedApp.paths = mappedPaths;\n      this.selectedPath =\n        this.selectedApp.paths.length > 1\n          ? this.selectedApp.paths[0]\n          : apps[0].paths[0];\n      this.$refs.pathDropdown[0].closeDropdown();\n    },\n    setupCustomPaths() {\n      const loc = apps.map(item => {\n        return item;\n      });\n      const customPathArr = Object.keys(this.customPaths);\n      const customApp = {\n        paths: [\n          {\n            label: 'Ethereum (Trezor)',\n            path: ethereum.path,\n            default: true\n          },\n          {\n            label: 'Add Custom Paths',\n            path: 'custom',\n            default: true\n          }\n        ],\n        network: {\n          icon: cust,\n          name_long: 'Custom Paths',\n          name: 'Custom'\n        }\n      };\n\n      customPathArr.forEach(item => {\n        customApp.paths.unshift(this.customPaths[item]);\n      });\n\n      loc.push(customApp);\n\n      this.apps = loc;\n    },\n    addCustomPath() {\n      const customPath = pathHelpers.checkCustomPath(this.customPath);\n      if (customPath) {\n        this.selectedPath = {\n          path: customPath,\n          label: this.customLabel\n        };\n        this.$store\n          .dispatch('addCustomPath', {\n            label: this.customLabel,\n            path: customPath\n          })\n          .then(() => {\n            this.setupCustomPaths();\n            this.selectedApp.paths.unshift(this.selectedPath);\n          });\n      } else {\n        Toast.responseHandler('Invalid Custom Path', Toast.ERROR);\n      }\n    },\n    cancel() {\n      this.customLabel = '';\n      this.customPath = '';\n      this.selectedPath =\n        this.selectedApp.paths.length > 1\n          ? this.selectedApp.paths[0]\n          : apps[0].paths[0];\n    },\n    selectDapp(app) {\n      this.selectedApp = app;\n    },\n    setPath(path) {\n      this.selectedPath = path;\n    },\n    next() {\n      this.$refs.ledgerApp.hide();\n      LedgerWallet(this.selectedPath.path)\n        .then(_newWallet => {\n          this.$emit('hardwareWalletOpen', _newWallet);\n        })\n        .catch(e => {\n          LedgerWallet.errorHandler(e);\n        });\n    },\n    reset() {\n      this.selectedApp = this.apps[0];\n      this.selectedPath = this.apps[0].paths[0];\n    }\n  }\n};\n",{"version":3,"sources":["LedgerAppModal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"LedgerAppModal.vue","sourceRoot":"src/layouts/AccessWalletLayout/components/LedgerAppModal","sourcesContent":["<template>\n  <div>\n    <b-modal\n      ref=\"ledgerApp\"\n      title=\"Choose the App\"\n      hide-footer\n      class=\"bootstrap-modal\"\n      centered\n      static\n      lazy\n      @hidden=\"reset\"\n    >\n      <div class=\"ledger-app-selection-container\">\n        <h4>Please choose the App you have opened in Ledger</h4>\n        <div class=\"ledger-app-info\">\n          <div class=\"selected-app-icon\">\n            <img :src=\"selectedApp.network.icon\" alt />\n          </div>\n          <div class=\"toggle-apps\" @click=\"toggled = !toggled\">\n            <div>\n              <h2>{{ selectedApp.network.name_long }}</h2>\n            </div>\n            <div class=\"toggle-indicator-container\">\n              <i\n                :class=\"[toggled ? 'fa-chevron-up' : 'fa-chevron-down', 'fa']\"\n              />\n            </div>\n          </div>\n          <div\n            :class=\"[toggled ? 'shown' : 'hide-box', 'app-selection-container']\"\n          >\n            <div\n              v-for=\"app in apps\"\n              :key=\"app.network.name\"\n              :class=\"[\n                selectedApp.network.name_long === app.network.name_long\n                  ? 'selected'\n                  : '',\n                'item'\n              ]\"\n              @click=\"selectDapp(app)\"\n            >\n              <i class=\"fa fa-check-circle\"></i>\n              <span> {{ app.network.name_long }} </span>\n            </div>\n          </div>\n          <div\n            v-show=\"selectedPath.path === 'custom'\"\n            class=\"custom-path-inputs\"\n          >\n            <div class=\"path-input\">\n              <label for=\"custom-label\"> Alias </label>\n              <input\n                v-model=\"customLabel\"\n                name=\"custom-label\"\n                placeholder=\"my custom path\"\n              />\n            </div>\n            <div class=\"path-input\">\n              <label for=\"custom-path\"> Path </label>\n              <input\n                v-model=\"customPath\"\n                name=\"custom-path\"\n                placeholder=\"m/44'/1'/0'/0\"\n              />\n            </div>\n            <div class=\"custom-path-actions\">\n              <div class=\"cancel\" @click=\"cancel\">\n                Cancel\n              </div>\n              <div class=\"proceed\" @click=\"addCustomPath\">\n                Add Custom Path\n              </div>\n            </div>\n          </div>\n          <b-dropdown :no-caret=\"true\" class=\"dropdown-button-3\">\n            <template slot=\"button-content\">\n              <span> {{ dropDownDefaultText }} </span>\n              <i\n                :class=\"[\n                  flipButton ? 'fa-chevron-up' : 'fa-chevron-down',\n                  'fa'\n                ]\"\n              ></i>\n            </template>\n            <b-dropdown-item\n              v-for=\"(path, idx) in selectedApp.paths\"\n              ref=\"pathDropdown\"\n              :key=\"path.label\"\n              :active=\"path.path === selectedPath.path\"\n              @click=\"setPath(path, idx)\"\n            >\n              {{ path.label }} - {{ path.path }}\n              <i\n                v-show=\"\n                  selectedApp.network.name_long === 'Custom Paths' &&\n                    !path.hasOwnProperty('default')\n                \"\n                class=\"fa fa-times remove-custom\"\n                @click.stop=\"remove(path, idx)\"\n              />\n            </b-dropdown-item>\n          </b-dropdown>\n          <button\n            :class=\"[\n              selectedPath.path === 'custom' ? 'disabled' : '',\n              'mid-round-button-green-filled next-button'\n            ]\"\n            @click=\"next\"\n          >\n            Next\n          </button>\n        </div>\n      </div>\n    </b-modal>\n  </div>\n</template>\n\n<script>\nimport apps from '@/wallets/hardware/ledger/appPaths.js';\nimport cust from '@/assets/images/icons/network.svg';\nimport { Toast, pathHelpers } from '@/helpers';\nimport { LedgerWallet } from '@/wallets';\nimport { mapState } from 'vuex';\nimport { ethereum } from '@/wallets/bip44/paths';\nexport default {\n  props: {\n    networks: {\n      type: Object,\n      default: () => {\n        return {};\n      }\n    }\n  },\n  data() {\n    return {\n      apps: apps,\n      selectedApp: {\n        network: {\n          name_long: apps[0].network.name_long,\n          icon: apps[0].network.icon\n        },\n        paths: apps[0].paths\n      },\n      toggled: false,\n      selectedPath: apps[0].paths[0],\n      flipButton: false,\n      customLabel: '',\n      customPath: ''\n    };\n  },\n  computed: {\n    fieldsFilled() {\n      const emptyApp = Object.keys(this.selectedApp).length;\n      return (\n        this.selected === '' &&\n        emptyApp === 0 &&\n        this.selectedPathText === 'Select Path' &&\n        this.selectedPath === ''\n      );\n    },\n    dropDownDefaultText() {\n      return `${this.selectedPath.label} - ${this.selectedPath.path}`;\n    },\n    ...mapState(['customPaths'])\n  },\n  watch: {\n    selectedApp: {\n      handler: function(newVal) {\n        this.selectedPath = newVal.paths[0];\n      },\n      deep: true\n    },\n    customPaths() {\n      this.setupCustomPaths();\n    }\n  },\n  mounted() {\n    this.setupCustomPaths();\n    this.$root.$on('bv::dropdown::show', () => {\n      this.flipButton = true;\n    });\n    this.$root.$on('bv::dropdown::hide', () => {\n      this.flipButton = false;\n    });\n  },\n  methods: {\n    remove(path, idx) {\n      const mappedPaths = this.selectedApp.paths.filter((item, itemIdx) => {\n        if (itemIdx !== idx) return item;\n      });\n      this.$store.dispatch('removeCustomPath', path);\n      this.setupCustomPaths();\n      this.selectedApp.paths = mappedPaths;\n      this.selectedPath =\n        this.selectedApp.paths.length > 1\n          ? this.selectedApp.paths[0]\n          : apps[0].paths[0];\n      this.$refs.pathDropdown[0].closeDropdown();\n    },\n    setupCustomPaths() {\n      const loc = apps.map(item => {\n        return item;\n      });\n      const customPathArr = Object.keys(this.customPaths);\n      const customApp = {\n        paths: [\n          {\n            label: 'Ethereum (Trezor)',\n            path: ethereum.path,\n            default: true\n          },\n          {\n            label: 'Add Custom Paths',\n            path: 'custom',\n            default: true\n          }\n        ],\n        network: {\n          icon: cust,\n          name_long: 'Custom Paths',\n          name: 'Custom'\n        }\n      };\n\n      customPathArr.forEach(item => {\n        customApp.paths.unshift(this.customPaths[item]);\n      });\n\n      loc.push(customApp);\n\n      this.apps = loc;\n    },\n    addCustomPath() {\n      const customPath = pathHelpers.checkCustomPath(this.customPath);\n      if (customPath) {\n        this.selectedPath = {\n          path: customPath,\n          label: this.customLabel\n        };\n        this.$store\n          .dispatch('addCustomPath', {\n            label: this.customLabel,\n            path: customPath\n          })\n          .then(() => {\n            this.setupCustomPaths();\n            this.selectedApp.paths.unshift(this.selectedPath);\n          });\n      } else {\n        Toast.responseHandler('Invalid Custom Path', Toast.ERROR);\n      }\n    },\n    cancel() {\n      this.customLabel = '';\n      this.customPath = '';\n      this.selectedPath =\n        this.selectedApp.paths.length > 1\n          ? this.selectedApp.paths[0]\n          : apps[0].paths[0];\n    },\n    selectDapp(app) {\n      this.selectedApp = app;\n    },\n    setPath(path) {\n      this.selectedPath = path;\n    },\n    next() {\n      this.$refs.ledgerApp.hide();\n      LedgerWallet(this.selectedPath.path)\n        .then(_newWallet => {\n          this.$emit('hardwareWalletOpen', _newWallet);\n        })\n        .catch(e => {\n          LedgerWallet.errorHandler(e);\n        });\n    },\n    reset() {\n      this.selectedApp = this.apps[0];\n      this.selectedPath = this.apps[0].paths[0];\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'LedgerAppModal.scss';\n</style>\n"]}]}