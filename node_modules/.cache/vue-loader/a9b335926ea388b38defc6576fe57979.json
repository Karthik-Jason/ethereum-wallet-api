{"remainingRequest":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/dapps/MakerDai/components/CloseCdpModal/CloseCdpModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/dapps/MakerDai/components/CloseCdpModal/CloseCdpModal.vue","mtime":1573477611644},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapState } from 'vuex';\nimport StandardButton from '@/components/Buttons/StandardButton';\nimport HelpCenterButton from '@/components/Buttons/HelpCenterButton';\nimport BigNumber from 'bignumber.js/bignumber.js';\n\nconst toBigNumber = num => {\n  return new BigNumber(num);\n};\n\nexport default {\n  components: {\n    'help-center-button': HelpCenterButton,\n    'standard-button': StandardButton\n  },\n  props: {\n    tokensWithBalance: {\n      type: Array,\n      default: function() {\n        return [];\n      }\n    },\n    action: {\n      type: String,\n      default: ''\n    },\n    values: {\n      type: Object,\n      default: function() {\n        return {\n          maxPethDraw: '',\n          maxEthDraw: '',\n          maxUsdDraw: '',\n          ethCollateral: '',\n          pethCollateral: '',\n          usdCollateral: '',\n          debtValue: '',\n          maxDai: '',\n          collateralRatio: '',\n          cdpId: ''\n        };\n      }\n    },\n    makerManager: {\n      type: Object,\n      default: function() {\n        return {};\n      }\n    }\n  },\n  data() {\n    return {\n      amount: 0,\n      amountEth: 0,\n      amountDai: 0,\n      govFee: 0,\n      closable: false,\n      modalDetailInformation: false,\n      textValues: {},\n      mkrToken: {},\n      daiToken: {},\n      approveMkrButton: {\n        title: 'Approve Maker',\n        buttonStyle: 'green-border',\n        fullWidth: true,\n        noMinWidth: true\n      },\n      approveDaiButton: {\n        title: 'Approve Dai',\n        buttonStyle: 'green-border',\n        fullWidth: true,\n        noMinWidth: true\n      },\n      cancelButton: {\n        title: 'Cancel',\n        buttonStyle: 'green-border',\n        fullWidth: true,\n        noMinWidth: true\n      },\n      closeButton: {\n        title: 'Close',\n        buttonStyle: 'green',\n        fullWidth: true,\n        noMinWidth: true\n      },\n      suppliedFrom: {\n        symbol: 'ETH',\n        name: 'Ethereum'\n      },\n      suppliedTo: {\n        symbol: 'MKR',\n        name: 'Maker'\n      },\n      suppliedToAmount: 0,\n      destAddress: ''\n    };\n  },\n  computed: {\n    ...mapState(['account', 'gasPrice', 'web3', 'network', 'ens']),\n    getfeeOwed() {\n      const result = this.values.governanceFeeOwed;\n      return this.displayFixedValue(result, 8);\n    },\n    newCollateralRatio() {\n      if (this.values) {\n        return this.values.collatRatio;\n      }\n      return 0;\n    },\n    newCollateralRatioSafe() {\n      if (this.values) {\n        return toBigNumber(this.values.collatRatio).gte(2);\n      }\n      return true;\n    },\n    newLiquidationPrice() {\n      if (this.values) {\n        return this.values.liquidationPrice;\n      }\n      return 0;\n    },\n    mkrBalance() {\n      if (this.mkrToken) {\n        return this.mkrToken.balance;\n      }\n      return 0;\n    },\n    daiBalance() {\n      if (this.daiToken) {\n        return this.daiToken.balance;\n      }\n      return 0;\n    },\n    enoughMkr() {\n      const mkrNeeded = this.values.governanceFeeOwed;\n      if (mkrNeeded) {\n        return toBigNumber(this.mkrBalance)\n          .minus(mkrNeeded)\n          .gte(0);\n      }\n      return false;\n    },\n    enoughDai() {\n      if (this.values.zeroDebt) return true;\n      const daiNeeded = this.values.debtValue;\n      if (daiNeeded) {\n        return toBigNumber(this.daiBalance)\n          .minus(daiNeeded)\n          .gte(0);\n      }\n      return false;\n    },\n    needsDaiApprove() {\n      if (toBigNumber(this.values.proxyAllowanceDai).gt(0)) {\n        if (\n          toBigNumber(this.values.proxyAllowanceDai).lte(this.values.debtValue)\n        ) {\n          return true;\n        }\n      }\n      return toBigNumber(this.values.proxyAllowanceDai).eq(0);\n    },\n    needsMkrApprove() {\n      if (toBigNumber(this.values.proxyAllowanceMkr).gt(0)) {\n        if (\n          toBigNumber(this.values.proxyAllowanceMkr).lt(\n            this.values.governanceFeeOwed\n          )\n        ) {\n          return true;\n        }\n      }\n      return toBigNumber(this.values.proxyAllowanceMkr).eq(0);\n    },\n    canClose() {\n      return (\n        this.enoughMkr &&\n        this.enoughDai &&\n        !this.needsDaiApprove &&\n        !this.needsMkrApprove\n      );\n    }\n  },\n  watch: {\n    tokensWithBalance() {\n      this.getBalances();\n    }\n  },\n  async mounted() {\n    this.destAddress = this.account.address;\n    this.getBalances();\n    this.$refs.modal.$on('shown', async () => {\n      this.getBalances();\n    });\n  },\n  methods: {\n    closeModal() {\n      this.$refs.modal.hide();\n    },\n    delayCloseModal() {\n      setTimeout(() => {\n        this.closeModal();\n      }, 200);\n    },\n    async closeCdp() {\n      this.delayCloseModal();\n      this.$emit('closeCdp');\n    },\n    displayPercentValue(raw) {\n      if (!BigNumber.isBigNumber(raw)) raw = new BigNumber(raw);\n      return raw.times(100).toString();\n    },\n    displayFixedValue(raw, decimals = 3) {\n      if (!BigNumber.isBigNumber(raw)) raw = new BigNumber(raw);\n      return raw.toFixed(decimals, BigNumber.ROUND_DOWN).toString();\n    },\n    maxDai() {\n      this.amount = this.values.maxDai;\n    },\n    currentDai() {\n      this.amount = this.values.debtValue;\n    },\n    getBalances() {\n      this.mkrToken = this.tokensWithBalance.find(item => {\n        return item.symbol === 'MKR';\n      });\n      this.daiToken = this.tokensWithBalance.find(item => {\n        return item.symbol === 'DAI';\n      });\n    },\n    getMkr() {\n      const mkrNeeded = this.getfeeOwed;\n      if (toBigNumber(this.mkrBalance).lt(mkrNeeded)) {\n        this.suppliedToAmount = toBigNumber(mkrNeeded)\n          .minus(toBigNumber(this.mkrBalance))\n          .plus(toBigNumber(mkrNeeded).times(0.01))\n          .toNumber();\n        if (toBigNumber(this.suppliedToAmount).lt(0.000001)) {\n          this.suppliedToAmount = 0.000001;\n        }\n        this.suppliedFrom = {\n          symbol: 'ETH',\n          name: 'Ethereum'\n        };\n        this.suppliedTo = {\n          symbol: 'MKR',\n          name: 'Maker'\n        };\n        this.$nextTick(() => {\n          this.$refs.swapWidget.$refs.modal.show();\n        });\n      }\n    },\n    getDai() {\n      const daiNeeded = this.values.debtValue;\n      if (toBigNumber(this.daiBalance).lt(daiNeeded)) {\n        this.suppliedToAmount = toBigNumber(daiNeeded)\n          .minus(toBigNumber(this.daiBalance))\n          .toNumber();\n        if (toBigNumber(this.suppliedToAmount).lt(0.000001)) {\n          this.suppliedToAmount = 0.000001;\n        }\n        this.suppliedFrom = {\n          symbol: 'ETH',\n          name: 'Ethereum'\n        };\n        this.suppliedTo = {\n          symbol: 'DAI',\n          name: 'Dai'\n        };\n        this.$eventHub.$emit(\n          'showSwapWidgetTo',\n          this.account.address,\n          this.suppliedFrom,\n          this.suppliedTo,\n          this.suppliedToAmount\n        );\n      }\n    },\n\n    async approveDai() {\n      this.$emit('approveDai');\n    },\n    async approveMkr() {\n      this.$emit('approveMkr');\n    }\n  }\n};\n",{"version":3,"sources":["CloseCdpModal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"CloseCdpModal.vue","sourceRoot":"src/dapps/MakerDai/components/CloseCdpModal","sourcesContent":["<template>\n  <div class=\"modal-container\">\n    <b-modal\n      ref=\"modal\"\n      :title=\"$t('dappsMaker.closeTitle')\"\n      centered\n      class=\"bootstrap-modal nopadding\"\n      static\n      lazy\n      hide-footer\n    >\n      <div class=\"contents\">\n        <div v-if=\"!enoughMkr\" class=\"message-container\">\n          {{ $t('dappsMaker.notEnoughMkrClose') }}\n        </div>\n        <div v-if=\"!enoughDai\" class=\"message-container\">\n          {{ $t('dappsMaker.notEnoughDaiClose') }}\n        </div>\n        <p class=\"top-text\">\n          {{ $t('dappsMaker.closingNotice') }}\n        </p>\n\n        <div class=\"value-table-container\">\n          <div class=\"value-table mkr-balance\">\n            <div class=\"value-block\">\n              <p>\n                <b>{{ $t('dappsMaker.mkrBalance') }}</b>\n              </p>\n              <p>\n                <b>{{ mkrBalance }} MKR</b>\n              </p>\n            </div>\n            <p v-show=\"!enoughMkr\" class=\"get-mkr\" @click=\"getMkr()\">\n              {{ $t('dappsMaker.getMkr') }}\n            </p>\n          </div>\n\n          <div class=\"value-table mkr-balance\">\n            <div class=\"value-block\">\n              <p>\n                <b>{{ $t('dappsMaker.daiBalance') }}</b>\n              </p>\n              <p>\n                <b>{{ daiBalance }} DAI</b>\n              </p>\n            </div>\n            <p v-show=\"!enoughDai\" class=\"get-mkr\" @click=\"getDai()\">\n              {{ $t('dappsMaker.getDai') }}\n            </p>\n          </div>\n          <div class=\"value-table other-values\">\n            <div class=\"value-block\">\n              <p>{{ $t('dappsMaker.outstandingDai') }}</p>\n              <p>\n                <b>{{ values.debtValue }} DAI</b>\n              </p>\n            </div>\n            <div class=\"value-block\">\n              <p>\n                {{\n                  $t('dappsMaker.stabilityFeeInMkr', {\n                    value: displayFixedValue(\n                      displayPercentValue(values.stabilityFee)\n                    )\n                  })\n                }}\n              </p>\n              <p>\n                <b>{{ getfeeOwed }} MKR</b>\n              </p>\n            </div>\n          </div>\n        </div>\n        <!-- TODO: work these into the user flow.  Batch transaction would be better, but an initial try brought the browser crashing issue back -->\n        <div class=\"buttons\">\n          <div v-if=\"needsDaiApprove\">\n            <standard-button\n              :options=\"approveDaiButton\"\n              @click.native=\"approveDai\"\n            />\n          </div>\n          <div v-if=\"needsMkrApprove\">\n            <standard-button\n              :options=\"approveMkrButton\"\n              @click.native=\"approveMkr\"\n            />\n          </div>\n        </div>\n        <div class=\"buttons\">\n          <standard-button :options=\"cancelButton\" @click.native=\"closeModal\" />\n          <standard-button\n            :options=\"closeButton\"\n            :button-disabled=\"canClose ? false : true\"\n            :click-function=\"closeCdp\"\n          />\n        </div>\n        <help-center-button />\n      </div>\n    </b-modal>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport StandardButton from '@/components/Buttons/StandardButton';\nimport HelpCenterButton from '@/components/Buttons/HelpCenterButton';\nimport BigNumber from 'bignumber.js/bignumber.js';\n\nconst toBigNumber = num => {\n  return new BigNumber(num);\n};\n\nexport default {\n  components: {\n    'help-center-button': HelpCenterButton,\n    'standard-button': StandardButton\n  },\n  props: {\n    tokensWithBalance: {\n      type: Array,\n      default: function() {\n        return [];\n      }\n    },\n    action: {\n      type: String,\n      default: ''\n    },\n    values: {\n      type: Object,\n      default: function() {\n        return {\n          maxPethDraw: '',\n          maxEthDraw: '',\n          maxUsdDraw: '',\n          ethCollateral: '',\n          pethCollateral: '',\n          usdCollateral: '',\n          debtValue: '',\n          maxDai: '',\n          collateralRatio: '',\n          cdpId: ''\n        };\n      }\n    },\n    makerManager: {\n      type: Object,\n      default: function() {\n        return {};\n      }\n    }\n  },\n  data() {\n    return {\n      amount: 0,\n      amountEth: 0,\n      amountDai: 0,\n      govFee: 0,\n      closable: false,\n      modalDetailInformation: false,\n      textValues: {},\n      mkrToken: {},\n      daiToken: {},\n      approveMkrButton: {\n        title: 'Approve Maker',\n        buttonStyle: 'green-border',\n        fullWidth: true,\n        noMinWidth: true\n      },\n      approveDaiButton: {\n        title: 'Approve Dai',\n        buttonStyle: 'green-border',\n        fullWidth: true,\n        noMinWidth: true\n      },\n      cancelButton: {\n        title: 'Cancel',\n        buttonStyle: 'green-border',\n        fullWidth: true,\n        noMinWidth: true\n      },\n      closeButton: {\n        title: 'Close',\n        buttonStyle: 'green',\n        fullWidth: true,\n        noMinWidth: true\n      },\n      suppliedFrom: {\n        symbol: 'ETH',\n        name: 'Ethereum'\n      },\n      suppliedTo: {\n        symbol: 'MKR',\n        name: 'Maker'\n      },\n      suppliedToAmount: 0,\n      destAddress: ''\n    };\n  },\n  computed: {\n    ...mapState(['account', 'gasPrice', 'web3', 'network', 'ens']),\n    getfeeOwed() {\n      const result = this.values.governanceFeeOwed;\n      return this.displayFixedValue(result, 8);\n    },\n    newCollateralRatio() {\n      if (this.values) {\n        return this.values.collatRatio;\n      }\n      return 0;\n    },\n    newCollateralRatioSafe() {\n      if (this.values) {\n        return toBigNumber(this.values.collatRatio).gte(2);\n      }\n      return true;\n    },\n    newLiquidationPrice() {\n      if (this.values) {\n        return this.values.liquidationPrice;\n      }\n      return 0;\n    },\n    mkrBalance() {\n      if (this.mkrToken) {\n        return this.mkrToken.balance;\n      }\n      return 0;\n    },\n    daiBalance() {\n      if (this.daiToken) {\n        return this.daiToken.balance;\n      }\n      return 0;\n    },\n    enoughMkr() {\n      const mkrNeeded = this.values.governanceFeeOwed;\n      if (mkrNeeded) {\n        return toBigNumber(this.mkrBalance)\n          .minus(mkrNeeded)\n          .gte(0);\n      }\n      return false;\n    },\n    enoughDai() {\n      if (this.values.zeroDebt) return true;\n      const daiNeeded = this.values.debtValue;\n      if (daiNeeded) {\n        return toBigNumber(this.daiBalance)\n          .minus(daiNeeded)\n          .gte(0);\n      }\n      return false;\n    },\n    needsDaiApprove() {\n      if (toBigNumber(this.values.proxyAllowanceDai).gt(0)) {\n        if (\n          toBigNumber(this.values.proxyAllowanceDai).lte(this.values.debtValue)\n        ) {\n          return true;\n        }\n      }\n      return toBigNumber(this.values.proxyAllowanceDai).eq(0);\n    },\n    needsMkrApprove() {\n      if (toBigNumber(this.values.proxyAllowanceMkr).gt(0)) {\n        if (\n          toBigNumber(this.values.proxyAllowanceMkr).lt(\n            this.values.governanceFeeOwed\n          )\n        ) {\n          return true;\n        }\n      }\n      return toBigNumber(this.values.proxyAllowanceMkr).eq(0);\n    },\n    canClose() {\n      return (\n        this.enoughMkr &&\n        this.enoughDai &&\n        !this.needsDaiApprove &&\n        !this.needsMkrApprove\n      );\n    }\n  },\n  watch: {\n    tokensWithBalance() {\n      this.getBalances();\n    }\n  },\n  async mounted() {\n    this.destAddress = this.account.address;\n    this.getBalances();\n    this.$refs.modal.$on('shown', async () => {\n      this.getBalances();\n    });\n  },\n  methods: {\n    closeModal() {\n      this.$refs.modal.hide();\n    },\n    delayCloseModal() {\n      setTimeout(() => {\n        this.closeModal();\n      }, 200);\n    },\n    async closeCdp() {\n      this.delayCloseModal();\n      this.$emit('closeCdp');\n    },\n    displayPercentValue(raw) {\n      if (!BigNumber.isBigNumber(raw)) raw = new BigNumber(raw);\n      return raw.times(100).toString();\n    },\n    displayFixedValue(raw, decimals = 3) {\n      if (!BigNumber.isBigNumber(raw)) raw = new BigNumber(raw);\n      return raw.toFixed(decimals, BigNumber.ROUND_DOWN).toString();\n    },\n    maxDai() {\n      this.amount = this.values.maxDai;\n    },\n    currentDai() {\n      this.amount = this.values.debtValue;\n    },\n    getBalances() {\n      this.mkrToken = this.tokensWithBalance.find(item => {\n        return item.symbol === 'MKR';\n      });\n      this.daiToken = this.tokensWithBalance.find(item => {\n        return item.symbol === 'DAI';\n      });\n    },\n    getMkr() {\n      const mkrNeeded = this.getfeeOwed;\n      if (toBigNumber(this.mkrBalance).lt(mkrNeeded)) {\n        this.suppliedToAmount = toBigNumber(mkrNeeded)\n          .minus(toBigNumber(this.mkrBalance))\n          .plus(toBigNumber(mkrNeeded).times(0.01))\n          .toNumber();\n        if (toBigNumber(this.suppliedToAmount).lt(0.000001)) {\n          this.suppliedToAmount = 0.000001;\n        }\n        this.suppliedFrom = {\n          symbol: 'ETH',\n          name: 'Ethereum'\n        };\n        this.suppliedTo = {\n          symbol: 'MKR',\n          name: 'Maker'\n        };\n        this.$nextTick(() => {\n          this.$refs.swapWidget.$refs.modal.show();\n        });\n      }\n    },\n    getDai() {\n      const daiNeeded = this.values.debtValue;\n      if (toBigNumber(this.daiBalance).lt(daiNeeded)) {\n        this.suppliedToAmount = toBigNumber(daiNeeded)\n          .minus(toBigNumber(this.daiBalance))\n          .toNumber();\n        if (toBigNumber(this.suppliedToAmount).lt(0.000001)) {\n          this.suppliedToAmount = 0.000001;\n        }\n        this.suppliedFrom = {\n          symbol: 'ETH',\n          name: 'Ethereum'\n        };\n        this.suppliedTo = {\n          symbol: 'DAI',\n          name: 'Dai'\n        };\n        this.$eventHub.$emit(\n          'showSwapWidgetTo',\n          this.account.address,\n          this.suppliedFrom,\n          this.suppliedTo,\n          this.suppliedToAmount\n        );\n      }\n    },\n\n    async approveDai() {\n      this.$emit('approveDai');\n    },\n    async approveMkr() {\n      this.$emit('approveMkr');\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'CloseCdpModal';\n</style>\n"]}]}