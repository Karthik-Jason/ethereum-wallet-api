{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/dapps/ScheduleTransaction/components/ScheduledSuccess.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/dapps/ScheduleTransaction/components/ScheduledSuccess.vue","mtime":1573477611660},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapState } from 'vuex';\nimport { Transaction } from 'ethereumjs-tx';\nimport BigNumber from 'bignumber.js';\nimport { Util } from '@ethereum-alarm-clock/lib';\n\nimport { Toast } from '@/helpers';\nimport { ERC20 } from '@/partners';\nimport ScheduledTransactionExplorerLink from '../components/ScheduledTransactionExplorerLink';\nimport { EAC_SCHEDULING_CONFIG } from '../ScheduleHelpers';\n\nexport default {\n  name: 'Scheduled',\n  components: {\n    'scheduled-transaction-explorer-link': ScheduledTransactionExplorerLink\n  },\n  props: {\n    txHash: {\n      type: String,\n      default: ''\n    },\n    isTokenTransfer: {\n      type: Boolean,\n      default: false\n    },\n    toAddress: {\n      type: String,\n      default: ''\n    },\n    amount: {\n      type: String,\n      default: ''\n    },\n    selectedCurrency: {\n      type: Object,\n      default: null\n    }\n  },\n  data() {\n    return {\n      approved: this.isTokenTransfer ? false : true,\n      receipt: null,\n      scheduledTxAddress: null,\n      mined: false\n    };\n  },\n  computed: {\n    ...mapState(['notifications', 'web3', 'account', 'gasPrice', 'network'])\n  },\n  watch: {\n    async notifications() {\n      const notifications = this.notifications[this.account.address];\n      const latestNotification = notifications[0];\n\n      if (latestNotification.hash) {\n        if (\n          latestNotification.status === 'complete' &&\n          this.txHash === latestNotification.hash\n        ) {\n          const receipt = await this.web3.eth.getTransactionReceipt(\n            this.txHash\n          );\n          const util = new Util(this.web3);\n          this.receipt = receipt;\n          this.scheduledTxAddress = util.getTransactionRequestAddressFromReceipt(\n            receipt\n          );\n          this.mined = true;\n        } else if (latestNotification.status === 'pending') {\n          const transaction = await this.web3.eth.getTransaction(\n            latestNotification.hash\n          );\n\n          if (transaction === null) {\n            Toast.responseHandler(\n              new Error('Non-existing transaction detected'),\n              Toast.ERROR\n            );\n            return;\n          }\n\n          if (\n            transaction.input.includes(\n              EAC_SCHEDULING_CONFIG.APPROVE_TOKEN_TRANSFER_METHOD_ID\n            )\n          ) {\n            if (\n              transaction.input.includes(this.scheduledTxAddress.substring(2))\n            ) {\n              this.approved = true;\n            }\n          }\n        }\n      }\n    }\n  },\n  methods: {\n    async approveToken() {\n      if (!this.selectedCurrency) {\n        Toast.responseHandler(\n          new Error(`${this.txHash} is not a token transfer.`),\n          Toast.ERROR\n        );\n        return;\n      }\n\n      const tokenContract = await new this.web3.eth.Contract(\n        ERC20,\n        this.selectedCurrency.address\n      );\n\n      const coinbase = await this.web3.eth.getCoinbase();\n      const tokenAmount = new BigNumber(\n        this.amount * Math.pow(10, this.selectedCurrency.decimals)\n      );\n\n      const approveTokensData = tokenContract.methods\n        .approve(this.scheduledTxAddress, tokenAmount.toString())\n        .encodeABI();\n      const nonce = await this.web3.eth.getTransactionCount(coinbase, 'latest');\n\n      const numIfHex = input =>\n        this.web3.utils.isHexStrict(input)\n          ? this.web3.utils.hexToNumber(input)\n          : input;\n\n      const scheduledTokensApproveTransaction = {\n        from: coinbase,\n        to: this.selectedCurrency.address,\n        value: '',\n        data: approveTokensData,\n        nonce: numIfHex(nonce),\n        gasPrice: this.web3.utils.toWei(\n          numIfHex(this.gasPrice).toString(),\n          'gwei'\n        )\n      };\n\n      const estimatedGasLimit = await this.web3.eth.estimateGas(\n        scheduledTokensApproveTransaction\n      );\n      scheduledTokensApproveTransaction.gasLimit = estimatedGasLimit + 1000000;\n      const approveTx = new Transaction(scheduledTokensApproveTransaction);\n\n      const json = approveTx.toJSON(true);\n      json.from = coinbase;\n      this.web3.eth.sendTransaction(json).catch(err => {\n        Toast.responseHandler(err, Toast.ERROR);\n      });\n    }\n  }\n};\n",{"version":3,"sources":["ScheduledSuccess.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqfile":"ScheduledSuccess.vue","sourceRoot":"src/dapps/ScheduleTransaction/components","sourcesContent":["<template>\n  <div class=\"scheduled-success-container\">\n    <h3 class=\"page-title\">\n      {{ isTokenTransfer && approved ? 'Approved' : 'Scheduled' }}\n    </h3>\n\n    <div class=\"page-container\">\n      <div class=\"break-word\">\n        Your TX has been scheduled with the transaction hash\n        <scheduled-transaction-explorer-link :tx-hash=\"txHash\" />{{\n          !mined ? ' and is waiting to be mined' : ''\n        }}.\n      </div>\n\n      <b-alert\n        :show=\"!approved && isTokenTransfer\"\n        variant=\"warning\"\n        class=\"m-5 horizontal-center\"\n      >\n        <div v-if=\"!mined\">\n          <div>\n            Please wait for the transaction to be mined before approving...\n          </div>\n          <div class=\"fa-3x\">\n            <i class=\"fa fa-spinner fa-spin fa-lg\" />\n          </div>\n          <div>\n            <strong>Note:</strong> If this is taking too long, follow\n            <scheduled-transaction-explorer-link\n              :tx-hash=\"txHash\"\n              :link-text=\"'this'\"\n            />\n            link to approve the transaction.\n          </div>\n        </div>\n        <div v-if=\"mined\">\n          <div>\n            The transaction has been mined. Please\n            <strong>approve</strong> the token transfer now.\n          </div>\n          <div\n            class=\"submit-button large-round-button-green-filled mt-3\"\n            @click=\"approveToken()\"\n          >\n            Approve Token Transfer\n          </div>\n        </div>\n      </b-alert>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport { Transaction } from 'ethereumjs-tx';\nimport BigNumber from 'bignumber.js';\nimport { Util } from '@ethereum-alarm-clock/lib';\n\nimport { Toast } from '@/helpers';\nimport { ERC20 } from '@/partners';\nimport ScheduledTransactionExplorerLink from '../components/ScheduledTransactionExplorerLink';\nimport { EAC_SCHEDULING_CONFIG } from '../ScheduleHelpers';\n\nexport default {\n  name: 'Scheduled',\n  components: {\n    'scheduled-transaction-explorer-link': ScheduledTransactionExplorerLink\n  },\n  props: {\n    txHash: {\n      type: String,\n      default: ''\n    },\n    isTokenTransfer: {\n      type: Boolean,\n      default: false\n    },\n    toAddress: {\n      type: String,\n      default: ''\n    },\n    amount: {\n      type: String,\n      default: ''\n    },\n    selectedCurrency: {\n      type: Object,\n      default: null\n    }\n  },\n  data() {\n    return {\n      approved: this.isTokenTransfer ? false : true,\n      receipt: null,\n      scheduledTxAddress: null,\n      mined: false\n    };\n  },\n  computed: {\n    ...mapState(['notifications', 'web3', 'account', 'gasPrice', 'network'])\n  },\n  watch: {\n    async notifications() {\n      const notifications = this.notifications[this.account.address];\n      const latestNotification = notifications[0];\n\n      if (latestNotification.hash) {\n        if (\n          latestNotification.status === 'complete' &&\n          this.txHash === latestNotification.hash\n        ) {\n          const receipt = await this.web3.eth.getTransactionReceipt(\n            this.txHash\n          );\n          const util = new Util(this.web3);\n          this.receipt = receipt;\n          this.scheduledTxAddress = util.getTransactionRequestAddressFromReceipt(\n            receipt\n          );\n          this.mined = true;\n        } else if (latestNotification.status === 'pending') {\n          const transaction = await this.web3.eth.getTransaction(\n            latestNotification.hash\n          );\n\n          if (transaction === null) {\n            Toast.responseHandler(\n              new Error('Non-existing transaction detected'),\n              Toast.ERROR\n            );\n            return;\n          }\n\n          if (\n            transaction.input.includes(\n              EAC_SCHEDULING_CONFIG.APPROVE_TOKEN_TRANSFER_METHOD_ID\n            )\n          ) {\n            if (\n              transaction.input.includes(this.scheduledTxAddress.substring(2))\n            ) {\n              this.approved = true;\n            }\n          }\n        }\n      }\n    }\n  },\n  methods: {\n    async approveToken() {\n      if (!this.selectedCurrency) {\n        Toast.responseHandler(\n          new Error(`${this.txHash} is not a token transfer.`),\n          Toast.ERROR\n        );\n        return;\n      }\n\n      const tokenContract = await new this.web3.eth.Contract(\n        ERC20,\n        this.selectedCurrency.address\n      );\n\n      const coinbase = await this.web3.eth.getCoinbase();\n      const tokenAmount = new BigNumber(\n        this.amount * Math.pow(10, this.selectedCurrency.decimals)\n      );\n\n      const approveTokensData = tokenContract.methods\n        .approve(this.scheduledTxAddress, tokenAmount.toString())\n        .encodeABI();\n      const nonce = await this.web3.eth.getTransactionCount(coinbase, 'latest');\n\n      const numIfHex = input =>\n        this.web3.utils.isHexStrict(input)\n          ? this.web3.utils.hexToNumber(input)\n          : input;\n\n      const scheduledTokensApproveTransaction = {\n        from: coinbase,\n        to: this.selectedCurrency.address,\n        value: '',\n        data: approveTokensData,\n        nonce: numIfHex(nonce),\n        gasPrice: this.web3.utils.toWei(\n          numIfHex(this.gasPrice).toString(),\n          'gwei'\n        )\n      };\n\n      const estimatedGasLimit = await this.web3.eth.estimateGas(\n        scheduledTokensApproveTransaction\n      );\n      scheduledTokensApproveTransaction.gasLimit = estimatedGasLimit + 1000000;\n      const approveTx = new Transaction(scheduledTokensApproveTransaction);\n\n      const json = approveTx.toJSON(true);\n      json.from = coinbase;\n      this.web3.eth.sendTransaction(json).catch(err => {\n        Toast.responseHandler(err, Toast.ERROR);\n      });\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\">\n@import 'ScheduledSuccess.scss';\n</style>\n"]}]}