{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/layouts/InterfaceLayout/components/CurrencyPicker/CurrencyPicker.vue?vue&type=style&index=0&id=5bfb0fc0&lang=scss&scoped=true&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/layouts/InterfaceLayout/components/CurrencyPicker/CurrencyPicker.vue","mtime":1573477611940},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import 'CurrencyPicker.scss';\n",{"version":3,"sources":["CurrencyPicker.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgJA","file":"CurrencyPicker.vue","sourceRoot":"src/layouts/InterfaceLayout/components/CurrencyPicker","sourcesContent":["<template lang=\"html\">\n  <div v-click-outside=\"openDropdown\" class=\"currency-picker-container\">\n    <div>\n      <div\n        :class=\"[\n          open ? 'open' : '',\n          'dropdown-container',\n          token ? 'dropdown-text-container' : 'dropdown-text-container-white'\n        ]\"\n        @click=\"openDropdown\"\n      >\n        <p v-show=\"token\">\n          {{ selectedCurrency.symbol }}\n          <span class=\"subname\">- {{ selectedCurrency.name }}</span>\n        </p>\n        <p v-show=\"!token\">{{ selectedCurrency.name }}</p>\n        <i :class=\"['fa', open ? 'fa-angle-up' : 'fa-angle-down']\" />\n      </div>\n      <div :class=\"[open ? 'open' : 'hide', 'dropdown-item-container']\">\n        <div class=\"dropdown-search-container\">\n          <input v-model=\"search\" placeholder=\"Search\" />\n          <i class=\"fa fa-search\" />\n        </div>\n        <div class=\"item-container\">\n          <div\n            v-for=\"(curr, idx) in localCurrency\"\n            :class=\"[\n              token\n                ? selectedCurrency.symbol === curr.symbol\n                  ? 'selected'\n                  : ''\n                : selectedCurrency.name === curr.name\n                ? 'selected'\n                : '',\n              'item'\n            ]\"\n            :key=\"\n              token\n                ? curr.name + idx + curr.symbol + page\n                : curr.name + page + idx\n            \"\n            @click=\"selectCurrency(curr)\"\n          >\n            <p v-show=\"token\">\n              {{ curr.symbol }}<span class=\"subname\"> - {{ curr.name }}</span>\n            </p>\n            <p />\n            <p v-show=\"!token\">{{ curr.name }}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nexport default {\n  props: {\n    currency: {\n      type: Array,\n      default: function() {\n        return [];\n      }\n    },\n    page: {\n      type: String,\n      default: ''\n    },\n    token: {\n      type: Boolean,\n      default: true\n    },\n    default: {\n      type: Object,\n      default: () => {\n        return {};\n      }\n    }\n  },\n  data() {\n    return {\n      selectedCurrency: { name: 'Select an item', abi: '', address: '' },\n      open: false,\n      search: '',\n      abi: '',\n      address: ''\n    };\n  },\n  computed: {\n    ...mapState(['network']),\n    networkToken() {\n      return {\n        name: this.network.type.name_long,\n        symbol: this.network.type.currencyName\n      };\n    },\n    localCurrency() {\n      if (this.search !== '') {\n        return this.currency.filter(curr => {\n          if (curr.name.toLowerCase().includes(this.search.toLowerCase())) {\n            return curr;\n          }\n        });\n      }\n      if (this.token) {\n        return [this.networkToken, ...this.currency];\n      }\n      return [\n        { name: 'Select an item', abi: '', address: '' },\n        ...this.currency\n      ];\n    }\n  },\n  watch: {\n    networkToken() {\n      if (this.token) this.selectedCurrency = this.networkToken;\n    },\n    selectedCurrency(newVal) {\n      this.$emit('selectedCurrency', newVal);\n    },\n    default(newVal) {\n      if (newVal.hasOwnProperty('symbol')) this.selectedCurrency = newVal;\n    }\n  },\n  mounted() {\n    this.selectedCurrency =\n      this.token === true\n        ? this.networkToken\n        : { name: 'Select an item', abi: '', address: '' };\n  },\n  methods: {\n    openDropdown() {\n      this.open = !this.open;\n    },\n    selectCurrency(currency) {\n      this.openDropdown();\n      this.selectedCurrency = currency;\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'CurrencyPicker.scss';\n</style>\n"]}]}