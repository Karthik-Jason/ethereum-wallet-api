{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/layouts/InterfaceLayout/InterfaceLayout.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/layouts/InterfaceLayout/InterfaceLayout.vue","mtime":1574664278302},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js","mtime":1574664275010},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js","mtime":1574664277774}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapState } from 'vuex';\nimport ENS from 'ethereum-ens';\nimport WalletPasswordModal from '@/components/WalletPasswordModal';\nimport EnterPinNumberModal from '@/components/EnterPinNumberModal';\nimport NetworkAndAddressModal from '@/layouts/AccessWalletLayout/components/NetworkAndAddressModal';\nimport HardwarePasswordModal from '@/layouts/AccessWalletLayout/components/HardwarePasswordModal';\nimport MnemonicPasswordModal from '@/layouts/AccessWalletLayout/components/MnemonicPasswordModal';\nimport MnemonicModal from '@/layouts/AccessWalletLayout/components/MnemonicModal';\nimport LedgerAppModal from '@/layouts/AccessWalletLayout/components/LedgerAppModal';\nimport InterfaceAddress from './components/InterfaceAddress';\nimport InterfaceBalance from './components/InterfaceBalance';\nimport InterfaceNetwork from './components/InterfaceNetwork';\nimport InterfaceSideMenu from './components/InterfaceSideMenu';\nimport InterfaceTokens from './components/InterfaceTokens';\nimport MobileInterfaceAddress from './components/MobileInterfaceAddress';\nimport PrintModal from './components/PrintModal';\nimport { Web3Wallet } from '@/wallets/software';\nimport { Toast } from '@/helpers';\nimport { toChecksumAddress } from '@/helpers/addressUtils';\nimport * as networkTypes from '@/networks/types';\nimport { BigNumber } from 'bignumber.js';\nimport store from 'store';\nimport TokenBalance from '@myetherwallet/eth-token-balance';\nimport sortByBalance from '@/helpers/sortByBalance.js';\nimport AddressQrcodeModal from '@/components/AddressQrcodeModal';\nimport web3Utils from 'web3-utils';\nimport { isAddress } from '@/helpers/addressUtils';\nimport {\n  LedgerWallet,\n  TrezorWallet,\n  BitBoxWallet,\n  SecalotWallet,\n  KeepkeyWallet\n} from '@/wallets';\nimport {\n  WEB3_WALLET as WEB3_TYPE,\n  LEDGER as LEDGER_TYPE,\n  TREZOR as TREZOR_TYPE,\n  BITBOX as BITBOX_TYPE,\n  SECALOT as SECALOT_TYPE,\n  KEEPKEY as KEEPKEY_TYPE,\n  MNEMONIC as MNEMONIC_TYPE\n} from '@/wallets/bip44/walletTypes';\nexport default {\n  name: 'Interface',\n  components: {\n    'interface-side-menu': InterfaceSideMenu,\n    'interface-address': InterfaceAddress,\n    'interface-balance': InterfaceBalance,\n    'interface-network': InterfaceNetwork,\n    'interface-tokens': InterfaceTokens,\n    'wallet-password-modal': WalletPasswordModal,\n    'print-modal': PrintModal,\n    'network-and-address-modal': NetworkAndAddressModal,\n    'hardware-password-modal': HardwarePasswordModal,\n    'mnemonic-modal': MnemonicModal,\n    'mnemonic-password-modal': MnemonicPasswordModal,\n    'enter-pin-number-modal': EnterPinNumberModal,\n    'mobile-interface-address': MobileInterfaceAddress,\n    'address-qrcode-modal': AddressQrcodeModal,\n    'ledger-app-modal': LedgerAppModal\n  },\n  data() {\n    return {\n      balance: '0',\n      blockNumber: 0,\n      tokens: [],\n      receivedTokens: false,\n      tokensWithBalance: [],\n      pollBlock: () => {},\n      pollNetwork: () => {},\n      pollddress: () => {},\n      highestGas: '0',\n      alert: {\n        show: false,\n        msg: ''\n      },\n      hws: {\n        ledger: LedgerWallet,\n        trezor: TrezorWallet,\n        bitbox: BitBoxWallet,\n        secalot: SecalotWallet\n      },\n      hwInstance: {},\n      walletConstructor: () => {},\n      hardwareBrand: '',\n      phrase: '',\n      nonce: '0',\n      value: '0',\n      data: '',\n      to: '',\n      gaslimit: '21000',\n      gas: 0,\n      tokensymbol: '',\n      prefilled: false\n    };\n  },\n  computed: {\n    isSidemenuOpen() {\n      return this.sidemenuOpen;\n    },\n    address() {\n      if (this.wallet !== null) {\n        return toChecksumAddress(this.account.address);\n      }\n    },\n    ...mapState([\n      'network',\n      'account',\n      'online',\n      'web3',\n      'Networks',\n      'sidemenuOpen',\n      'wallet',\n      'linkQuery'\n    ])\n  },\n  watch: {\n    web3() {\n      this.setupOnlineEnvironment();\n    },\n    address(val) {\n      if (val) this.setupOnlineEnvironment();\n    }\n  },\n  mounted() {\n    this.setupOnlineEnvironment();\n  },\n  destroyed() {\n    this.clearIntervals();\n  },\n  methods: {\n    checkPrefilled() {\n      const _self = this;\n      const hasLinkQuery = Object.keys(_self.linkQuery).length;\n      if (hasLinkQuery > 0) {\n        _self.prefilled = true;\n        const {\n          value,\n          data,\n          to,\n          gaslimit,\n          gas,\n          tokensymbol,\n          network\n        } = _self.linkQuery;\n        _self.value =\n          value && new BigNumber(value).gt(0)\n            ? new BigNumber(value).toFixed()\n            : '0';\n        _self.data = data && web3Utils.isHexStrict(data) ? data : '';\n        _self.to = to && isAddress(to) ? to : '';\n        _self.gaslimit =\n          gaslimit && new BigNumber(gaslimit).gt(0) ? gaslimit : '21000';\n        _self.gas = gas && new BigNumber(gas).gt(0) ? new BigNumber(gas) : 0;\n        _self.tokensymbol = tokensymbol ? tokensymbol : '';\n        if (network) {\n          const foundNetwork = _self.Networks[network.toUpperCase()];\n          // eslint-disable-next-line\n          if (!!foundNetwork) {\n            _self.$store.dispatch('switchNetwork', foundNetwork[0]).then(() => {\n              _self.$store.dispatch('setWeb3Instance');\n            });\n          }\n        }\n        _self.$store.dispatch('saveQueryVal', {});\n      }\n    },\n    clearPrefilled() {\n      this.value = '0';\n      this.data = '';\n      this.to = '';\n      this.gaslimit = '21000';\n      this.gas = 0;\n      this.tokensymbol = '';\n      this.prefilled = false;\n    },\n    openAddressQrcode() {\n      this.$refs.addressQrcodeModal.$refs.addressQrcode.show();\n    },\n    mnemonicphrasePasswordModalOpen(phrase) {\n      this.phrase = phrase;\n      this.$refs.mnemonicPhraseModal.$refs.mnemonicPhrase.hide();\n      this.$refs.mnemonicPhrasePassword.$refs.password.show();\n    },\n    toggleNetworkAddrModal(walletInstance) {\n      this.$refs.hardwareModal.$refs.password.hide();\n      this.$refs.mnemonicPhrasePassword.$refs.password.hide();\n      this.hwInstance = walletInstance;\n      this.$refs.networkAddress.$refs.networkAndAddress.show();\n    },\n    togglePasswordModal(construct, brand) {\n      this.walletConstructor = construct;\n      this.hardwareBrand = brand;\n      this.$refs.hardwareModal.$refs.password.show();\n    },\n    ledgerAppModalOpen() {\n      this.$refs.ledgerAppModal.$refs.ledgerApp.show();\n    },\n    switchAddress() {\n      switch (this.account.identifier) {\n        case LEDGER_TYPE:\n          this.ledgerAppModalOpen();\n          break;\n        case TREZOR_TYPE:\n          TrezorWallet()\n            .then(_newWallet => {\n              this.toggleNetworkAddrModal(_newWallet);\n            })\n            .catch(TrezorWallet.errorHandler);\n          break;\n        case BITBOX_TYPE:\n          this.togglePasswordModal(BitBoxWallet, 'BitBox');\n          break;\n        case SECALOT_TYPE:\n          this.togglePasswordModal(SecalotWallet, 'Secalot');\n          break;\n        case MNEMONIC_TYPE:\n          this.$refs.mnemonicPhraseModal.$refs.mnemonicPhrase.show();\n          break;\n        case KEEPKEY_TYPE:\n          KeepkeyWallet(false, this.$eventHub)\n            .then(_newWallet => {\n              this.toggleNetworkAddrModal(_newWallet);\n            })\n            .catch(KeepkeyWallet.errorHandler);\n          break;\n        default:\n          Toast.responseHandler(\n            new Error(\n              `Wallet type ${this.account.identifier} can't switch addresses`\n            ),\n            false\n          );\n      }\n    },\n    print() {\n      this.$refs.printModal.$refs.print.show();\n    },\n    toggleSideMenu() {\n      this.$store.commit('TOGGLE_SIDEMENU');\n    },\n    async fetchTokens() {\n      this.receivedTokens = false;\n      let tokens = [];\n      if (this.network.type.chainID === 1 || this.network.type.chainID === 3) {\n        const tb = new TokenBalance(this.web3.currentProvider);\n        try {\n          tokens = await tb.getBalance(this.account.address);\n          tokens = tokens.map(token => {\n            token.address = token.addr;\n            delete token.addr;\n            return token;\n          });\n        } catch (e) {\n          tokens = this.network.type.tokens.map(token => {\n            token.balance = 'Load';\n            return token;\n          });\n        }\n      } else {\n        tokens = this.network.type.tokens.map(token => {\n          token.balance = 'Load';\n          return token;\n        });\n      }\n      return tokens;\n    },\n    async setNonce() {\n      store.set(this.web3.utils.sha3(this.account.address), {\n        nonce: '0x00',\n        timestamp: 0\n      });\n      const fetchedNonce = await this.web3.eth\n        .getTransactionCount(this.account.address)\n        .catch(e => {\n          Toast.responseHandler(e, Toast.ERROR);\n        });\n      this.nonce = new BigNumber(fetchedNonce).toString();\n    },\n    async getTokenBalance(token) {\n      try {\n        const web3 = this.web3;\n        const contractAbi = [\n          {\n            name: 'balanceOf',\n            type: 'function',\n            constant: true,\n            inputs: [{ name: 'address', type: 'address' }],\n            outputs: [{ name: 'out', type: 'uint256' }]\n          }\n        ];\n        const contract = new web3.eth.Contract(contractAbi);\n        const data = contract.methods\n          .balanceOf(this.account.address)\n          .encodeABI();\n        const balance = await web3.eth\n          .call({\n            to: token.address,\n            data: data\n          })\n          .then(res => {\n            let tokenBalance;\n            if (Number(res) === 0 || res === '0x') {\n              tokenBalance = 0;\n            } else {\n              const denominator = new BigNumber(10).pow(token.decimals);\n              tokenBalance = new BigNumber(res).div(denominator).toString();\n            }\n            return tokenBalance;\n          })\n          .catch(e => {\n            Toast.responseHandler(e, false);\n          });\n\n        return balance;\n      } catch (e) {\n        Toast.responseHandler(e, Toast.ERROR);\n      }\n    },\n    setCustomTokenStore() {\n      const customTokenStore = store.get('customTokens');\n      Object.keys(networkTypes).forEach(network => {\n        if (customTokenStore[networkTypes[network].name] === undefined) {\n          customTokenStore[networkTypes[network].name] = [];\n        }\n      });\n      store.set('customTokens', customTokenStore);\n    },\n    async setTokens() {\n      this.tokens = [];\n      let tokens = await this.fetchTokens();\n      tokens = tokens\n        .sort((a, b) => {\n          if (a.name.toUpperCase() < b.name.toUpperCase()) {\n            return -1;\n          } else if (a.name.toUpperCase() > b.name.toUpperCase()) {\n            return 1;\n          }\n          return 0;\n        })\n        .map(token => {\n          const balanceCheck = new BigNumber(token.balance);\n          const balance = balanceCheck.isNaN()\n            ? token.balance\n            : balanceCheck.div(new BigNumber(10).pow(token.decimals)).toFixed();\n          const convertedToken = {\n            address: token.address,\n            balance: balance,\n            decimals: token.decimals,\n            email: token.email,\n            name: token.name,\n            symbol: token.symbol,\n            website: token.website\n          };\n          return convertedToken;\n        });\n\n      this.tokens = tokens.sort(sortByBalance);\n      this.setTokensWithBalance();\n    },\n    setTokensWithBalance() {\n      const customStore = store.get('customTokens');\n      if (\n        customStore !== undefined &&\n        customStore[this.network.type.name] !== undefined &&\n        customStore[this.network.type.name].length > 0\n      ) {\n        new Promise(resolve => {\n          const newArr = customStore[this.network.type.name].map(\n            async token => {\n              token.balance = await this.getTokenBalance(token);\n              return token;\n            }\n          );\n          Promise.all(newArr).then(res => {\n            customStore[this.network.type.name] = res;\n            store.set('customTokens', customStore);\n            resolve(res);\n          });\n        })\n          .then(res => {\n            const allTokens = this.tokens\n              .filter(token => token.balance > 0)\n              .concat(res.filter(token => token.balance > 0));\n            this.tokensWithBalance = allTokens;\n            this.receivedTokens = true;\n          })\n          .catch(e => {\n            Toast.responseHandler(e, Toast.ERROR);\n          });\n      } else {\n        this.receivedTokens = true;\n        this.tokensWithBalance = this.tokens.filter(token => token.balance > 0);\n      }\n    },\n    getBlock() {\n      this.web3.eth\n        .getBlockNumber()\n        .then(res => {\n          this.blockNumber = res;\n          this.$store.dispatch('updateBlockNumber', res);\n        })\n        .catch(e => {\n          Toast.responseHandler(e, Toast.ERROR);\n        });\n    },\n    getBalance() {\n      const web3 = this.web3;\n      web3.eth\n        .getBalance(this.address.toLowerCase())\n        .then(res => {\n          this.balance = web3.utils.fromWei(res, 'ether');\n          this.$store.dispatch('setAccountBalance', res);\n        })\n        .catch(e => {\n          Toast.responseHandler(e, Toast.ERROR);\n        });\n    },\n    checkWeb3WalletAddrChange() {\n      const web3 = this.web3;\n      window.ethereum.on('accountsChanged', account => {\n        if (account.length > 1) {\n          const wallet = new Web3Wallet(account[0]);\n          this.$store.dispatch('decryptWallet', [wallet, web3]);\n        }\n      });\n    },\n    checkAndSetNetwork(id) {\n      if (this.network.type.chainID.toString() !== `${id}`) {\n        Object.keys(networkTypes).some(net => {\n          if (\n            networkTypes[net].chainID.toString() === `${id}` &&\n            this.Networks[net]\n          ) {\n            this.$store.dispatch('switchNetwork', this.Networks[net][0]);\n            return true;\n          }\n        });\n      }\n    },\n    matchWeb3WalletNetwork() {\n      this.web3.eth.net.getId().then(id => {\n        this.checkAndSetNetwork(id);\n      });\n      window.ethereum.on('networkChanged', netId => {\n        this.checkAndSetNetwork(netId);\n      });\n    },\n    setupOnlineEnvironment: web3Utils._.debounce(function() {\n      this.clearIntervals();\n      if (store.get('customTokens') === undefined) {\n        store.set('customTokens', {});\n        this.setCustomTokenStore();\n      } else {\n        this.setCustomTokenStore();\n      }\n      if (this.online) {\n        if (this.account.address !== null) {\n          if (this.account.identifier === WEB3_TYPE) {\n            if (window.ethereum.isMetaMask || window.ethereum.isMew) {\n              this.checkWeb3WalletAddrChange();\n              this.matchWeb3WalletNetwork();\n            } else {\n              this.web3WalletPollNetwork();\n              this.web3WalletPollAddress();\n            }\n          }\n          this.setENS();\n          this.getBlock();\n          this.getBalance();\n          this.setTokens();\n          this.setNonce();\n          this.getHighestGas();\n          this.getBlockUpdater().then(_sub => {\n            this.pollBlock = _sub;\n          });\n        }\n      }\n    }),\n    async getBlockUpdater() {\n      return new Promise(resolve => {\n        let subscription = this.web3.eth\n          .subscribe('newBlockHeaders', err => {\n            if (err) {\n              subscription = setInterval(this.getBlock, 14000);\n            }\n            resolve(subscription);\n          })\n          .on('data', headers => {\n            this.blockNumber = headers.number;\n          });\n      });\n    },\n    getHighestGas() {\n      this.web3.eth\n        .getGasPrice()\n        .then(res => {\n          this.highestGas = new BigNumber(\n            this.web3.utils.fromWei(res, 'gwei')\n          ).toString();\n        })\n        .catch(e => {\n          Toast.responseHandler(e, Toast.ERROR);\n        });\n    },\n    setENS() {\n      if (this.network.type.ens) {\n        this.$store.dispatch(\n          'setENS',\n          new ENS(this.web3.currentProvider, this.network.type.ens.registry)\n        );\n      } else {\n        this.$store.dispatch('setENS', null);\n      }\n    },\n    clearIntervals() {\n      if (this.pollBlock.unsubscribe) this.pollBlock.unsubscribe();\n      else clearInterval(this.pollBlock);\n      clearInterval(this.pollNetwork);\n      clearInterval(this.pollAddress);\n    },\n    web3WalletPollNetwork() {\n      if (\n        !window.web3.eth.net ||\n        typeof window.web3.eth.net.getId !== 'function'\n      )\n        return;\n      this.pollNetwork = setInterval(() => {\n        window.web3.eth.net\n          .getId()\n          .then(id => {\n            if (this.network.type.chainID.toString() !== id) {\n              Object.keys(networkTypes).some(net => {\n                if (networkTypes[net].chainID === id && this.Networks[net]) {\n                  this.$store.dispatch('switchNetwork', this.Networks[net]);\n                  clearInterval(this.pollNetwork);\n                  return true;\n                }\n              });\n            }\n          })\n          .catch(e => {\n            Toast.responseHandler(e, false);\n          });\n      }, 500);\n    },\n    web3WalletPollAddress() {\n      this.pollAddress = setInterval(() => {\n        if (!window.web3.eth) {\n          Toast.responseHandler(\n            new Error('Web3 Instance not found!'),\n            Toast.ERROR\n          );\n          clearInterval(this.pollAddress);\n        }\n\n        window.web3.eth.getAccounts((err, accounts) => {\n          if (err) {\n            Toast.responseHandler(err, false);\n            clearInterval(this.pollAddress);\n          }\n          if (!accounts.length) {\n            Toast.responseHandler(\n              new Error('Please make sure that your Web3 Wallet is unlocked'),\n              Toast.ERROR\n            );\n            clearInterval(this.pollAddress);\n          }\n          const address = accounts[0];\n\n          if (\n            this.account.address !== null &&\n            address.toLowerCase() !== this.account.address.toLowerCase()\n          ) {\n            const wallet = new Web3Wallet(address);\n            this.$store.dispatch('decryptWallet', [\n              wallet,\n              window.web3.currentProvider\n            ]);\n            clearInterval(this.pollAddress);\n          }\n        });\n      }, 500);\n    }\n  }\n};\n",{"version":3,"sources":["InterfaceLayout.vue"],"names":[],"mappingsfile":"InterfaceLayout.vue","sourceRoot":"src/layouts/InterfaceLayout","sourcesContent":["<template>\n  <div class=\"interface-layout\">\n    <!-- Modals ******************************************************** -->\n    <!-- Modals ******************************************************** -->\n    <!-- Modals ******************************************************** -->\n    <wallet-password-modal />\n    <enter-pin-number-modal />\n    <ledger-app-modal\n      ref=\"ledgerAppModal\"\n      :networks=\"Networks\"\n      @hardwareWalletOpen=\"toggleNetworkAddrModal\"\n    />\n    <mnemonic-modal\n      ref=\"mnemonicPhraseModal\"\n      :hardware-wallet-open=\"toggleNetworkAddrModal\"\n    />\n\n    <mnemonic-password-modal\n      ref=\"mnemonicPhrasePassword\"\n      :hardware-wallet-open=\"toggleNetworkAddrModal\"\n      :phrase=\"phrase\"\n    />\n    <network-and-address-modal\n      ref=\"networkAddress\"\n      :hardware-wallet=\"hwInstance\"\n    />\n    <hardware-password-modal\n      ref=\"hardwareModal\"\n      :wallet-constructor=\"walletConstructor\"\n      :hardware-brand=\"hardwareBrand\"\n      @hardwareWalletOpen=\"toggleNetworkAddrModal\"\n    />\n    <print-modal\n      ref=\"printModal\"\n      :priv-key=\"!wallet\"\n      :address=\"account.address\"\n    />\n    <address-qrcode-modal ref=\"addressQrcodeModal\" :address=\"account.address\" />\n    <!-- Modals ******************************************************** -->\n    <!-- Modals ******************************************************** -->\n    <!-- Modals ******************************************************** -->\n    <div class=\"mobile-interface-address-block\">\n      <mobile-interface-address\n        :address=\"address\"\n        :print=\"print\"\n        :switch-addr=\"switchAddress\"\n      />\n    </div>\n\n    <div class=\"wrap\">\n      <div class=\"sidemenu\">\n        <div\n          :class=\"isSidemenuOpen && 'side-nav-open'\"\n          class=\"side-nav-background\"\n          @click=\"toggleSideMenu;\"\n        />\n        <div :class=\"isSidemenuOpen && 'side-nav-open'\" class=\"side-nav\">\n          <interface-side-menu />\n        </div>\n      </div>\n      <div class=\"contents\">\n        <div class=\"tx-contents\">\n          <div class=\"content-container mobile-hide\">\n            <interface-address\n              v-if=\"Object.keys(wallet).length > 1\"\n              :address=\"address\"\n              :print=\"print\"\n              :switch-addr=\"switchAddress\"\n              :display-addr=\"wallet.displayAddress\"\n              :qrcode=\"openAddressQrcode\"\n            />\n          </div>\n          <div class=\"content-container mobile-hide\">\n            <interface-balance :balance=\"balance\" :get-balance=\"getBalance\" />\n          </div>\n          <div class=\"content-container mobile-hide\">\n            <interface-network :block-number=\"blockNumber\" />\n          </div>\n          <router-view\n            :tokens-with-balance=\"tokensWithBalance\"\n            :get-balance=\"getBalance\"\n            :tokens=\"tokens\"\n            :highest-gas=\"highestGas\"\n            :nonce=\"nonce\"\n            :value=\"value\"\n            :data=\"data\"\n            :to=\"to\"\n            :gaslimit=\"gaslimit\"\n            :gas=\"gas\"\n            :tokensymbol=\"tokensymbol\"\n            :is-prefilled=\"prefilled\"\n            :clear-prefilled=\"clearPrefilled\"\n            :check-prefilled=\"checkPrefilled\"\n          />\n          <div class=\"tokens\">\n            <interface-tokens\n              :fetch-tokens=\"setTokens\"\n              :get-token-balance=\"getTokenBalance\"\n              :tokens=\"tokens\"\n              :received-tokens=\"receivedTokens\"\n              :reset-token-selection=\"setTokensWithBalance\"\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport ENS from 'ethereum-ens';\nimport WalletPasswordModal from '@/components/WalletPasswordModal';\nimport EnterPinNumberModal from '@/components/EnterPinNumberModal';\nimport NetworkAndAddressModal from '@/layouts/AccessWalletLayout/components/NetworkAndAddressModal';\nimport HardwarePasswordModal from '@/layouts/AccessWalletLayout/components/HardwarePasswordModal';\nimport MnemonicPasswordModal from '@/layouts/AccessWalletLayout/components/MnemonicPasswordModal';\nimport MnemonicModal from '@/layouts/AccessWalletLayout/components/MnemonicModal';\nimport LedgerAppModal from '@/layouts/AccessWalletLayout/components/LedgerAppModal';\nimport InterfaceAddress from './components/InterfaceAddress';\nimport InterfaceBalance from './components/InterfaceBalance';\nimport InterfaceNetwork from './components/InterfaceNetwork';\nimport InterfaceSideMenu from './components/InterfaceSideMenu';\nimport InterfaceTokens from './components/InterfaceTokens';\nimport MobileInterfaceAddress from './components/MobileInterfaceAddress';\nimport PrintModal from './components/PrintModal';\nimport { Web3Wallet } from '@/wallets/software';\nimport { Toast } from '@/helpers';\nimport { toChecksumAddress } from '@/helpers/addressUtils';\nimport * as networkTypes from '@/networks/types';\nimport { BigNumber } from 'bignumber.js';\nimport store from 'store';\nimport TokenBalance from '@myetherwallet/eth-token-balance';\nimport sortByBalance from '@/helpers/sortByBalance.js';\nimport AddressQrcodeModal from '@/components/AddressQrcodeModal';\nimport web3Utils from 'web3-utils';\nimport { isAddress } from '@/helpers/addressUtils';\nimport {\n  LedgerWallet,\n  TrezorWallet,\n  BitBoxWallet,\n  SecalotWallet,\n  KeepkeyWallet\n} from '@/wallets';\nimport {\n  WEB3_WALLET as WEB3_TYPE,\n  LEDGER as LEDGER_TYPE,\n  TREZOR as TREZOR_TYPE,\n  BITBOX as BITBOX_TYPE,\n  SECALOT as SECALOT_TYPE,\n  KEEPKEY as KEEPKEY_TYPE,\n  MNEMONIC as MNEMONIC_TYPE\n} from '@/wallets/bip44/walletTypes';\nexport default {\n  name: 'Interface',\n  components: {\n    'interface-side-menu': InterfaceSideMenu,\n    'interface-address': InterfaceAddress,\n    'interface-balance': InterfaceBalance,\n    'interface-network': InterfaceNetwork,\n    'interface-tokens': InterfaceTokens,\n    'wallet-password-modal': WalletPasswordModal,\n    'print-modal': PrintModal,\n    'network-and-address-modal': NetworkAndAddressModal,\n    'hardware-password-modal': HardwarePasswordModal,\n    'mnemonic-modal': MnemonicModal,\n    'mnemonic-password-modal': MnemonicPasswordModal,\n    'enter-pin-number-modal': EnterPinNumberModal,\n    'mobile-interface-address': MobileInterfaceAddress,\n    'address-qrcode-modal': AddressQrcodeModal,\n    'ledger-app-modal': LedgerAppModal\n  },\n  data() {\n    return {\n      balance: '0',\n      blockNumber: 0,\n      tokens: [],\n      receivedTokens: false,\n      tokensWithBalance: [],\n      pollBlock: () => {},\n      pollNetwork: () => {},\n      pollddress: () => {},\n      highestGas: '0',\n      alert: {\n        show: false,\n        msg: ''\n      },\n      hws: {\n        ledger: LedgerWallet,\n        trezor: TrezorWallet,\n        bitbox: BitBoxWallet,\n        secalot: SecalotWallet\n      },\n      hwInstance: {},\n      walletConstructor: () => {},\n      hardwareBrand: '',\n      phrase: '',\n      nonce: '0',\n      value: '0',\n      data: '',\n      to: '',\n      gaslimit: '21000',\n      gas: 0,\n      tokensymbol: '',\n      prefilled: false\n    };\n  },\n  computed: {\n    isSidemenuOpen() {\n      return this.sidemenuOpen;\n    },\n    address() {\n      if (this.wallet !== null) {\n        return toChecksumAddress(this.account.address);\n      }\n    },\n    ...mapState([\n      'network',\n      'account',\n      'online',\n      'web3',\n      'Networks',\n      'sidemenuOpen',\n      'wallet',\n      'linkQuery'\n    ])\n  },\n  watch: {\n    web3() {\n      this.setupOnlineEnvironment();\n    },\n    address(val) {\n      if (val) this.setupOnlineEnvironment();\n    }\n  },\n  mounted() {\n    this.setupOnlineEnvironment();\n  },\n  destroyed() {\n    this.clearIntervals();\n  },\n  methods: {\n    checkPrefilled() {\n      const _self = this;\n      const hasLinkQuery = Object.keys(_self.linkQuery).length;\n      if (hasLinkQuery > 0) {\n        _self.prefilled = true;\n        const {\n          value,\n          data,\n          to,\n          gaslimit,\n          gas,\n          tokensymbol,\n          network\n        } = _self.linkQuery;\n        _self.value =\n          value && new BigNumber(value).gt(0)\n            ? new BigNumber(value).toFixed()\n            : '0';\n        _self.data = data && web3Utils.isHexStrict(data) ? data : '';\n        _self.to = to && isAddress(to) ? to : '';\n        _self.gaslimit =\n          gaslimit && new BigNumber(gaslimit).gt(0) ? gaslimit : '21000';\n        _self.gas = gas && new BigNumber(gas).gt(0) ? new BigNumber(gas) : 0;\n        _self.tokensymbol = tokensymbol ? tokensymbol : '';\n        if (network) {\n          const foundNetwork = _self.Networks[network.toUpperCase()];\n          // eslint-disable-next-line\n          if (!!foundNetwork) {\n            _self.$store.dispatch('switchNetwork', foundNetwork[0]).then(() => {\n              _self.$store.dispatch('setWeb3Instance');\n            });\n          }\n        }\n        _self.$store.dispatch('saveQueryVal', {});\n      }\n    },\n    clearPrefilled() {\n      this.value = '0';\n      this.data = '';\n      this.to = '';\n      this.gaslimit = '21000';\n      this.gas = 0;\n      this.tokensymbol = '';\n      this.prefilled = false;\n    },\n    openAddressQrcode() {\n      this.$refs.addressQrcodeModal.$refs.addressQrcode.show();\n    },\n    mnemonicphrasePasswordModalOpen(phrase) {\n      this.phrase = phrase;\n      this.$refs.mnemonicPhraseModal.$refs.mnemonicPhrase.hide();\n      this.$refs.mnemonicPhrasePassword.$refs.password.show();\n    },\n    toggleNetworkAddrModal(walletInstance) {\n      this.$refs.hardwareModal.$refs.password.hide();\n      this.$refs.mnemonicPhrasePassword.$refs.password.hide();\n      this.hwInstance = walletInstance;\n      this.$refs.networkAddress.$refs.networkAndAddress.show();\n    },\n    togglePasswordModal(construct, brand) {\n      this.walletConstructor = construct;\n      this.hardwareBrand = brand;\n      this.$refs.hardwareModal.$refs.password.show();\n    },\n    ledgerAppModalOpen() {\n      this.$refs.ledgerAppModal.$refs.ledgerApp.show();\n    },\n    switchAddress() {\n      switch (this.account.identifier) {\n        case LEDGER_TYPE:\n          this.ledgerAppModalOpen();\n          break;\n        case TREZOR_TYPE:\n          TrezorWallet()\n            .then(_newWallet => {\n              this.toggleNetworkAddrModal(_newWallet);\n            })\n            .catch(TrezorWallet.errorHandler);\n          break;\n        case BITBOX_TYPE:\n          this.togglePasswordModal(BitBoxWallet, 'BitBox');\n          break;\n        case SECALOT_TYPE:\n          this.togglePasswordModal(SecalotWallet, 'Secalot');\n          break;\n        case MNEMONIC_TYPE:\n          this.$refs.mnemonicPhraseModal.$refs.mnemonicPhrase.show();\n          break;\n        case KEEPKEY_TYPE:\n          KeepkeyWallet(false, this.$eventHub)\n            .then(_newWallet => {\n              this.toggleNetworkAddrModal(_newWallet);\n            })\n            .catch(KeepkeyWallet.errorHandler);\n          break;\n        default:\n          Toast.responseHandler(\n            new Error(\n              `Wallet type ${this.account.identifier} can't switch addresses`\n            ),\n            false\n          );\n      }\n    },\n    print() {\n      this.$refs.printModal.$refs.print.show();\n    },\n    toggleSideMenu() {\n      this.$store.commit('TOGGLE_SIDEMENU');\n    },\n    async fetchTokens() {\n      this.receivedTokens = false;\n      let tokens = [];\n      if (this.network.type.chainID === 1 || this.network.type.chainID === 3) {\n        const tb = new TokenBalance(this.web3.currentProvider);\n        try {\n          tokens = await tb.getBalance(this.account.address);\n          tokens = tokens.map(token => {\n            token.address = token.addr;\n            delete token.addr;\n            return token;\n          });\n        } catch (e) {\n          tokens = this.network.type.tokens.map(token => {\n            token.balance = 'Load';\n            return token;\n          });\n        }\n      } else {\n        tokens = this.network.type.tokens.map(token => {\n          token.balance = 'Load';\n          return token;\n        });\n      }\n      return tokens;\n    },\n    async setNonce() {\n      store.set(this.web3.utils.sha3(this.account.address), {\n        nonce: '0x00',\n        timestamp: 0\n      });\n      const fetchedNonce = await this.web3.eth\n        .getTransactionCount(this.account.address)\n        .catch(e => {\n          Toast.responseHandler(e, Toast.ERROR);\n        });\n      this.nonce = new BigNumber(fetchedNonce).toString();\n    },\n    async getTokenBalance(token) {\n      try {\n        const web3 = this.web3;\n        const contractAbi = [\n          {\n            name: 'balanceOf',\n            type: 'function',\n            constant: true,\n            inputs: [{ name: 'address', type: 'address' }],\n            outputs: [{ name: 'out', type: 'uint256' }]\n          }\n        ];\n        const contract = new web3.eth.Contract(contractAbi);\n        const data = contract.methods\n          .balanceOf(this.account.address)\n          .encodeABI();\n        const balance = await web3.eth\n          .call({\n            to: token.address,\n            data: data\n          })\n          .then(res => {\n            let tokenBalance;\n            if (Number(res) === 0 || res === '0x') {\n              tokenBalance = 0;\n            } else {\n              const denominator = new BigNumber(10).pow(token.decimals);\n              tokenBalance = new BigNumber(res).div(denominator).toString();\n            }\n            return tokenBalance;\n          })\n          .catch(e => {\n            Toast.responseHandler(e, false);\n          });\n\n        return balance;\n      } catch (e) {\n        Toast.responseHandler(e, Toast.ERROR);\n      }\n    },\n    setCustomTokenStore() {\n      const customTokenStore = store.get('customTokens');\n      Object.keys(networkTypes).forEach(network => {\n        if (customTokenStore[networkTypes[network].name] === undefined) {\n          customTokenStore[networkTypes[network].name] = [];\n        }\n      });\n      store.set('customTokens', customTokenStore);\n    },\n    async setTokens() {\n      this.tokens = [];\n      let tokens = await this.fetchTokens();\n      tokens = tokens\n        .sort((a, b) => {\n          if (a.name.toUpperCase() < b.name.toUpperCase()) {\n            return -1;\n          } else if (a.name.toUpperCase() > b.name.toUpperCase()) {\n            return 1;\n          }\n          return 0;\n        })\n        .map(token => {\n          const balanceCheck = new BigNumber(token.balance);\n          const balance = balanceCheck.isNaN()\n            ? token.balance\n            : balanceCheck.div(new BigNumber(10).pow(token.decimals)).toFixed();\n          const convertedToken = {\n            address: token.address,\n            balance: balance,\n            decimals: token.decimals,\n            email: token.email,\n            name: token.name,\n            symbol: token.symbol,\n            website: token.website\n          };\n          return convertedToken;\n        });\n\n      this.tokens = tokens.sort(sortByBalance);\n      this.setTokensWithBalance();\n    },\n    setTokensWithBalance() {\n      const customStore = store.get('customTokens');\n      if (\n        customStore !== undefined &&\n        customStore[this.network.type.name] !== undefined &&\n        customStore[this.network.type.name].length > 0\n      ) {\n        new Promise(resolve => {\n          const newArr = customStore[this.network.type.name].map(\n            async token => {\n              token.balance = await this.getTokenBalance(token);\n              return token;\n            }\n          );\n          Promise.all(newArr).then(res => {\n            customStore[this.network.type.name] = res;\n            store.set('customTokens', customStore);\n            resolve(res);\n          });\n        })\n          .then(res => {\n            const allTokens = this.tokens\n              .filter(token => token.balance > 0)\n              .concat(res.filter(token => token.balance > 0));\n            this.tokensWithBalance = allTokens;\n            this.receivedTokens = true;\n          })\n          .catch(e => {\n            Toast.responseHandler(e, Toast.ERROR);\n          });\n      } else {\n        this.receivedTokens = true;\n        this.tokensWithBalance = this.tokens.filter(token => token.balance > 0);\n      }\n    },\n    getBlock() {\n      this.web3.eth\n        .getBlockNumber()\n        .then(res => {\n          this.blockNumber = res;\n          this.$store.dispatch('updateBlockNumber', res);\n        })\n        .catch(e => {\n          Toast.responseHandler(e, Toast.ERROR);\n        });\n    },\n    getBalance() {\n      const web3 = this.web3;\n      web3.eth\n        .getBalance(this.address.toLowerCase())\n        .then(res => {\n          this.balance = web3.utils.fromWei(res, 'ether');\n          this.$store.dispatch('setAccountBalance', res);\n        })\n        .catch(e => {\n          Toast.responseHandler(e, Toast.ERROR);\n        });\n    },\n    checkWeb3WalletAddrChange() {\n      const web3 = this.web3;\n      window.ethereum.on('accountsChanged', account => {\n        if (account.length > 1) {\n          const wallet = new Web3Wallet(account[0]);\n          this.$store.dispatch('decryptWallet', [wallet, web3]);\n        }\n      });\n    },\n    checkAndSetNetwork(id) {\n      if (this.network.type.chainID.toString() !== `${id}`) {\n        Object.keys(networkTypes).some(net => {\n          if (\n            networkTypes[net].chainID.toString() === `${id}` &&\n            this.Networks[net]\n          ) {\n            this.$store.dispatch('switchNetwork', this.Networks[net][0]);\n            return true;\n          }\n        });\n      }\n    },\n    matchWeb3WalletNetwork() {\n      this.web3.eth.net.getId().then(id => {\n        this.checkAndSetNetwork(id);\n      });\n      window.ethereum.on('networkChanged', netId => {\n        this.checkAndSetNetwork(netId);\n      });\n    },\n    setupOnlineEnvironment: web3Utils._.debounce(function() {\n      this.clearIntervals();\n      if (store.get('customTokens') === undefined) {\n        store.set('customTokens', {});\n        this.setCustomTokenStore();\n      } else {\n        this.setCustomTokenStore();\n      }\n      if (this.online) {\n        if (this.account.address !== null) {\n          if (this.account.identifier === WEB3_TYPE) {\n            if (window.ethereum.isMetaMask || window.ethereum.isMew) {\n              this.checkWeb3WalletAddrChange();\n              this.matchWeb3WalletNetwork();\n            } else {\n              this.web3WalletPollNetwork();\n              this.web3WalletPollAddress();\n            }\n          }\n          this.setENS();\n          this.getBlock();\n          this.getBalance();\n          this.setTokens();\n          this.setNonce();\n          this.getHighestGas();\n          this.getBlockUpdater().then(_sub => {\n            this.pollBlock = _sub;\n          });\n        }\n      }\n    }),\n    async getBlockUpdater() {\n      return new Promise(resolve => {\n        let subscription = this.web3.eth\n          .subscribe('newBlockHeaders', err => {\n            if (err) {\n              subscription = setInterval(this.getBlock, 14000);\n            }\n            resolve(subscription);\n          })\n          .on('data', headers => {\n            this.blockNumber = headers.number;\n          });\n      });\n    },\n    getHighestGas() {\n      this.web3.eth\n        .getGasPrice()\n        .then(res => {\n          this.highestGas = new BigNumber(\n            this.web3.utils.fromWei(res, 'gwei')\n          ).toString();\n        })\n        .catch(e => {\n          Toast.responseHandler(e, Toast.ERROR);\n        });\n    },\n    setENS() {\n      if (this.network.type.ens) {\n        this.$store.dispatch(\n          'setENS',\n          new ENS(this.web3.currentProvider, this.network.type.ens.registry)\n        );\n      } else {\n        this.$store.dispatch('setENS', null);\n      }\n    },\n    clearIntervals() {\n      if (this.pollBlock.unsubscribe) this.pollBlock.unsubscribe();\n      else clearInterval(this.pollBlock);\n      clearInterval(this.pollNetwork);\n      clearInterval(this.pollAddress);\n    },\n    web3WalletPollNetwork() {\n      if (\n        !window.web3.eth.net ||\n        typeof window.web3.eth.net.getId !== 'function'\n      )\n        return;\n      this.pollNetwork = setInterval(() => {\n        window.web3.eth.net\n          .getId()\n          .then(id => {\n            if (this.network.type.chainID.toString() !== id) {\n              Object.keys(networkTypes).some(net => {\n                if (networkTypes[net].chainID === id && this.Networks[net]) {\n                  this.$store.dispatch('switchNetwork', this.Networks[net]);\n                  clearInterval(this.pollNetwork);\n                  return true;\n                }\n              });\n            }\n          })\n          .catch(e => {\n            Toast.responseHandler(e, false);\n          });\n      }, 500);\n    },\n    web3WalletPollAddress() {\n      this.pollAddress = setInterval(() => {\n        if (!window.web3.eth) {\n          Toast.responseHandler(\n            new Error('Web3 Instance not found!'),\n            Toast.ERROR\n          );\n          clearInterval(this.pollAddress);\n        }\n\n        window.web3.eth.getAccounts((err, accounts) => {\n          if (err) {\n            Toast.responseHandler(err, false);\n            clearInterval(this.pollAddress);\n          }\n          if (!accounts.length) {\n            Toast.responseHandler(\n              new Error('Please make sure that your Web3 Wallet is unlocked'),\n              Toast.ERROR\n            );\n            clearInterval(this.pollAddress);\n          }\n          const address = accounts[0];\n\n          if (\n            this.account.address !== null &&\n            address.toLowerCase() !== this.account.address.toLowerCase()\n          ) {\n            const wallet = new Web3Wallet(address);\n            this.$store.dispatch('decryptWallet', [\n              wallet,\n              window.web3.currentProvider\n            ]);\n            clearInterval(this.pollAddress);\n          }\n        });\n      }, 500);\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'InterfaceLayout-desktop.scss';\n@import 'InterfaceLayout-tablet.scss';\n@import 'InterfaceLayout-mobile.scss';\n</style>\n"]}]}