{"remainingRequest":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/layouts/SendOfflineHelper/SendOfflineHelper.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/layouts/SendOfflineHelper/SendOfflineHelper.vue","mtime":1573477612088},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { Transaction } from 'ethereumjs-tx';\nimport { mapState } from 'vuex';\nimport Misc from '@/helpers/misc';\nimport BigNumber from 'bignumber.js';\nimport web3Utils from 'web3-utils';\nimport * as networkTypes from '@/networks/types';\nimport store from 'store';\nimport TitleTextContentsLayout from '@/layouts/InformationPages/Components/TitleTextContentsLayout';\nimport AccordionMenu from '@/components/AccordionMenu';\nimport DropDownAddressSelector from '@/components/DropDownAddressSelector';\nimport StandardButton from '@/components/Buttons/StandardButton';\nimport StandardInput from '@/components/StandardInput';\nimport ExpandingOption from '@/components/ExpandingOption';\nimport ConfirmationModal from './components/ConfirmationModal';\n\nexport default {\n  components: {\n    'page-title': TitleTextContentsLayout,\n    'accordion-menu': AccordionMenu,\n    'dropdown-address-selector': DropDownAddressSelector,\n    'standard-button': StandardButton,\n    'standard-input': StandardInput,\n    'expanding-option': ExpandingOption,\n    'confirmation-modal': ConfirmationModal\n  },\n  data() {\n    return {\n      networkTypes: Object.values(networkTypes),\n      selectedNetwork: this.$store.state.network,\n      stage1: false, // Select Network\n      stage2: true, // Generate Information\n      stage3: false, // Enter/Upload Signed Transaction\n      stage4: false, // Review and Send\n      stage5: false, // Show Transaction Hash and Transaction Receipt\n      showAllData: false,\n      informationGenerated: false,\n      downloadable: false,\n      from: '0x',\n      rawSigned: '',\n      minAccountBalance: 0,\n      fee: 0,\n      nonce: 0,\n      gasPrice: 0,\n      gasLimit: 0,\n      to: '0x',\n      value: 0,\n      data: '0x',\n      chainID: 0,\n      ethPrice: 0,\n      genInfo: {\n        address: '0x',\n        gasPrice: 0,\n        nonce: 0,\n        chainID: this.$store.state.network.type.chainID,\n        networkName: this.$store.state.network.type.name_long\n      },\n      generatedJson: {},\n      file: '',\n      exportFileName: 'Generated Information',\n      //Error Flags\n      invalidSignature: false,\n      wrongNetwork: false,\n      correctNetwork: '',\n      txHash: '',\n      txReceipt: {},\n      error: ''\n    };\n  },\n  computed: {\n    ...mapState([\n      'network',\n      'Networks',\n      'customPaths',\n      'path',\n      'web3',\n      'wallet',\n      'online'\n    ]),\n    reorderNetworkList() {\n      const customNetworks =\n        store.get('customNetworks') !== undefined\n          ? store.get('customNetworks')\n          : [];\n      const currentNetworks = Misc.reorderNetworks();\n      const newObj = Object.assign({}, currentNetworks, {\n        'Custom Networks': customNetworks\n      });\n      if (customNetworks.length === 0) delete newObj['Custom Networks'];\n      return newObj;\n    },\n    networkTitle() {\n      return `${this.selectedNetwork.type.name} - ${this.selectedNetwork.service} `;\n    },\n    rawTx() {\n      return {\n        from: this.from,\n        nonce: this.nonce,\n        gasPrice: this.toGwei(this.gasPrice),\n        gasLimit: this.gasLimit,\n        to: this.to,\n        value: this.toEth(this.value),\n        data: this.data,\n        chainID: this.chainID\n      };\n    },\n    envDetails() {\n      return {\n        network: this.selectedNetwork,\n        ethPrice: this.ethPrice\n      };\n    }\n  },\n  watch: {\n    rawSigned(newVal) {\n      this.getTransactionDetails(newVal);\n    }\n  },\n  mounted() {\n    this.switchNetwork(this.$store.state.network);\n    if (this.online) {\n      this.fetchBalanceData();\n    }\n  },\n  methods: {\n    replaceUrl(type, hash) {\n      if (type === 'address') {\n        return this.network.type.blockExplorerAddr.replace('[[address]]', hash);\n      }\n      return this.network.type.blockExplorerTX.replace('[[txHash]]', hash);\n    },\n    stage1Btn() {\n      this.stage1 = false;\n      this.stage2 = true;\n    },\n    stage2Btn() {\n      this.stage2 = false;\n      this.stage3 = true;\n    },\n    stage3Btn() {\n      this.stage3 = false;\n      this.stage4 = true;\n    },\n    stage4Btn() {\n      this.stage4 = false;\n      this.stage5 = true;\n      if (this.rawSigned !== '') {\n        this.error = this.txHash = '';\n        this.txReceipt = {};\n        this.web3.eth\n          .sendSignedTransaction(this.rawSigned)\n          .once('transactionHash', hash => {\n            this.txHash = hash;\n          })\n          .then(receipt => {\n            this.txReceipt = receipt;\n          })\n          .catch(e => {\n            this.error = e;\n          });\n      }\n    },\n    switchNetwork(network) {\n      this.$store.dispatch('switchNetwork', network).then(() => {\n        this.selectedNetwork = network;\n        this.$store.dispatch('setWeb3Instance');\n        this.stage1Btn();\n        this.getTransactionDetails();\n      });\n    },\n    truncateData(data) {\n      if (!data) return '';\n      return `${data.slice(0, 20)}...${data.slice(-10)}`;\n    },\n    getTransactionDetails(rawSigned) {\n      const positions = {\n        nonce: 0,\n        gasPrice: 1,\n        gasLimit: 2,\n        to: 3,\n        value: 4,\n        data: 5,\n        v: 6,\n        r: 7,\n        s: 8\n      };\n      if (rawSigned) this.rawSigned = rawSigned;\n      if (this.rawSigned !== '') {\n        const sanitizedRawSigned = Misc.sanitizeHex(this.rawSigned);\n        const tx = new Transaction(sanitizedRawSigned);\n        this.invalidSignature = !tx.verifySignature();\n        this.chainID = tx.getChainId();\n        this.wrongNetwork = !new BigNumber(\n          this.selectedNetwork.type.chainID\n        ).eq(new BigNumber(this.chainID));\n        this.chainID = tx.getChainId();\n\n        if (this.wrongNetwork) {\n          const correctNetwork = this.networkTypes.filter(\n            entry => entry.chainID === this.chainID\n          );\n          if (correctNetwork) this.correctNetwork = correctNetwork[0].name_long;\n        }\n        this.from = Misc.sanitizeHex(tx.getSenderAddress().toString('hex'));\n        const asJson = tx.toJSON();\n        this.to = asJson[positions.to];\n        this.gasLimit = new BigNumber(asJson[positions.gasLimit]).toFixed();\n        this.nonce = new BigNumber(asJson[positions.nonce]).toFixed();\n        this.value = new BigNumber(asJson[positions.value]).toFixed();\n\n        this.data = asJson[positions.data];\n        this.minAccountBalance = tx.getUpfrontCost().toString();\n        this.gasPrice = new BigNumber(\n          Misc.sanitizeHex(tx.gasPrice.toString('hex'))\n        ).toFixed();\n        this.fee = new BigNumber(this.toGwei(this.gasPrice))\n          .times(this.gasLimit)\n          .toFixed();\n      }\n    },\n    async fetchBalanceData() {\n      const url = 'https://cryptorates.mewapi.io/ticker';\n      const fetchValues = await fetch(url);\n      const result = await fetchValues.json();\n      const values = result.data;\n      if (!values['ETH']) return 0;\n      this.ethPrice = new BigNumber(values['ETH'].quotes.USD.price);\n    },\n    toEth(val) {\n      if (!val || isNaN(val)) return 0;\n      return web3Utils.fromWei(new BigNumber(val).toFixed(), 'ether');\n    },\n    toWei(val) {\n      if (!val) return 0;\n      return web3Utils.toWei(new BigNumber(val).toFixed(), 'gwei');\n    },\n    toGwei(val) {\n      if (!val) return 0;\n      return web3Utils.fromWei(new BigNumber(val).toFixed(), 'gwei');\n    },\n    dateTimeDisplay(unixTimeStamp) {\n      return new Date(unixTimeStamp).toString();\n    },\n    calculateCost(inGwei) {\n      const fromGweiToWei = this.toWei(inGwei);\n      return new BigNumber(this.ethPrice)\n        .times(this.toEth(fromGweiToWei))\n        .precision(2, BigNumber.ROUND_UP)\n        .toNumber();\n    },\n    async generateInformation(address) {\n      if (address === '') return;\n      this.genInfo.address = address;\n      this.genInfo.gasPrice = await this.web3.eth.getGasPrice();\n      this.genInfo.nonce = await this.web3.eth.getTransactionCount(address);\n      this.genInfo.blockNumber = await this.web3.eth.getBlockNumber();\n      this.genInfo.chainID = this.selectedNetwork.type.chainID;\n      this.genInfo.timestamp = Date.now(); //;\n      this.exportGeneratedInfo();\n      this.informationGenerated = true;\n    },\n    exportGeneratedInfo() {\n      const createBlob = (mime, str) => {\n        const string = typeof str === 'object' ? JSON.stringify(str) : str;\n        if (string === null) return '';\n        const blob = new Blob([string], {\n          type: mime\n        });\n        this.downloadable = true;\n        return window.URL.createObjectURL(blob);\n      };\n      this.generatedJson = createBlob(this.genInfo, 'mime');\n      this.exportFileName = `generated-offline-tx-${Date.now()}.json`;\n    },\n    uploadClick() {\n      const jsonInput = this.$refs.jsonInput;\n      jsonInput.value = '';\n      jsonInput.click();\n    },\n    uploadFile(e) {\n      const self = this;\n      const reader = new FileReader();\n      reader.onloadend = function(evt) {\n        self.file = JSON.parse(evt.target.result);\n        self.getTransactionDetails(self.file.rawTransaction);\n      };\n      reader.readAsBinaryString(e.target.files[0]);\n    }\n  }\n};\n",{"version":3,"sources":["SendOfflineHelper.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2VA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"SendOfflineHelper.vue","sourceRoot":"src/layouts/SendOfflineHelper","sourcesContent":["<template>\n  <div class=\"send-offline-helper\">\n    <div class=\"page-container\">\n      <div class=\"wrap\">\n        <div class=\"page-title\">\n          <page-title\n            :options=\"{\n              title: 'Send Offline Helper',\n              boldSubTitle: '',\n              textContent: [\n                'Customize actions, debug reveals, and more with this set of advance tools. Please be mindful of the capabilities and limitations of these tools before using.'\n              ]\n            }\"\n          />\n        </div>\n        <div class=\"page-content-container\">\n          <!-- Select Network-->\n          <div class=\"collapse-container\">\n            <accordion-menu\n              :greytitle=\"false\"\n              :isopen=\"stage1\"\n              :title=\"$t('withoutWallet.selectNetwork')\"\n              :right-text=\"networkTitle\"\n              number=\"1\"\n              @titleClicked=\"stage1 = !stage1\"\n            >\n              <ul class=\"networks\">\n                <li\n                  v-for=\"(key, index) in Object.keys(reorderNetworkList)\"\n                  :key=\"$router.path + key + index\"\n                >\n                  <div class=\"network-title\">\n                    <div class=\"network-icon\">\n                      <img\n                        v-if=\"\n                          key !== 'Custom Networks' &&\n                            Networks[key][0].type.icon\n                        \"\n                        :src=\"Networks[key][0].type.icon\"\n                        alt\n                      />\n                      <div\n                        v-if=\"\n                          key !== 'Custom Networks' &&\n                            !Networks[key][0].type.icon\n                        \"\n                        class=\"no-icon\"\n                      >\n                        <p>No</p>\n                        <p>Icon</p>\n                      </div>\n                    </div>\n                    <p>{{ key }}</p>\n                  </div>\n                  <div class=\"network-content\">\n                    <p\n                      v-for=\"net in reorderNetworkList[key]\"\n                      :key=\"net.service\"\n                      :class=\"\n                        net.service === selectedNetwork.service &&\n                        net.type &&\n                        net.type.name === selectedNetwork.type.name\n                          ? 'current-network'\n                          : ''\n                      \"\n                      @click=\"switchNetwork(net)\"\n                    >\n                      {{ net.service }}\n                    </p>\n                  </div>\n                </li>\n              </ul>\n            </accordion-menu>\n          </div>\n\n          <!-- Generate Info -->\n          <accordion-menu\n            :greytitle=\"false\"\n            :editbutton=\"true\"\n            :isopen=\"stage2\"\n            :title=\"$t('withoutWallet.generateInfo')\"\n            number=\"2\"\n            @titleClicked=\"stage2 = !stage2\"\n          >\n            <dropdown-address-selector\n              title=\"From Address\"\n              @toAddress=\"generateInformation($event)\"\n            />\n            <div v-if=\"informationGenerated\">\n              <ul>\n                <li class=\"detail-container\">\n                  <span class=\"detail-name\">Sender:</span>\n                  <span class=\"detail-text\">{{ genInfo.address }}</span>\n                </li>\n                <li class=\"detail-container\">\n                  <span class=\"detail-name\">Nonce:</span>\n                  <span class=\"detail-text\">{{ genInfo.nonce }}</span>\n                </li>\n                <li class=\"detail-container\">\n                  <span class=\"detail-name\">Chain ID:</span>\n                  <span class=\"detail-text\"\n                    >{{ genInfo.chainID }} ({{ genInfo.networkName }})</span\n                  >\n                </li>\n                <li class=\"detail-container with-divider\">\n                  <span class=\"detail-name\">Current Gas Price:</span>\n                  <span class=\"detail-text\"\n                    >{{ toGwei(genInfo.gasPrice) }} Gwei</span\n                  >\n                </li>\n                <li class=\"detail-container\">\n                  <span class=\"detail-name\">Retrieved:</span>\n                  <span class=\"detail-text\">\n                    {{ dateTimeDisplay(genInfo.timestamp) }}\n                  </span>\n                </li>\n                <li class=\"detail-container\">\n                  <span class=\"detail-name\">at block:</span>\n                  <span class=\"detail-text\">{{ genInfo.blockNumber }}</span>\n                </li>\n              </ul>\n            </div>\n            <div v-show=\"informationGenerated\" class=\"button-container\">\n              <a\n                ref=\"generatedDownloadLink\"\n                :href=\"generatedJson\"\n                :download=\"exportFileName\"\n              >\n                <standard-button\n                  :options=\"{\n                    title: 'Export JSON File',\n                    buttonStyle: 'green-border',\n                    noWalletTerms: true,\n                    noMinWidth: true\n                  }\"\n                />\n              </a>\n\n              <standard-button\n                :options=\"{\n                  title: 'Continue',\n                  buttonStyle: 'green',\n                  noWalletTerms: true,\n                  rightArrow: true\n                }\"\n                @click.native=\"stage2Btn\"\n              />\n            </div>\n          </accordion-menu>\n\n          <!-- Paste/Upload Signed Tx-->\n          <accordion-menu\n            :greytitle=\"false\"\n            :isopen=\"stage3\"\n            :title=\"$t('withoutWallet.signedTx')\"\n            number=\"3\"\n            @titleClicked=\"stage3 = !stage3\"\n          >\n            <textarea v-model=\"rawSigned\" class=\"no-margin raw-tx-input\" />\n            <p v-if=\"invalidSignature\">Invalid Signature</p>\n            <p v-if=\"wrongNetwork && correctNetwork === ''\">\n              Signed Chain ID does not match chain id for selected network\n            </p>\n            <p v-if=\"wrongNetwork && correctNetwork !== ''\">\n              Signed Chain ID ({{ correctNetwork }}) does not match chain id for\n              selected network\n            </p>\n            <expanding-option title=\"Raw Transaction\">\n              <textarea\n                :value=\"JSON.stringify(rawTx)\"\n                class=\"no-margin raw-tx-input\"\n                disabled\n              />\n            </expanding-option>\n            <div class=\"button-container\">\n              <input\n                ref=\"jsonInput\"\n                type=\"file\"\n                name=\"file\"\n                style=\"display: none\"\n                @change=\"uploadFile\"\n              />\n              <standard-button\n                :options=\"{\n                  title: 'Upload JSON File',\n                  buttonStyle: 'green-border',\n                  noWalletTerms: true,\n                  noMinWidth: true\n                }\"\n                @click.native=\"uploadClick()\"\n              />\n              <standard-button\n                :options=\"{\n                  title: 'Continue',\n                  buttonStyle: 'green',\n                  noWalletTerms: true\n                }\"\n                @click.native=\"stage3Btn\"\n              />\n            </div>\n          </accordion-menu>\n\n          <!-- Review and Send-->\n          <accordion-menu\n            :greytitle=\"false\"\n            :editbutton=\"false\"\n            :isopen=\"stage4\"\n            :title=\"$t('withoutWallet.txDetails')\"\n            number=\"4\"\n            @titleClicked=\"stage4 = !stage4\"\n          >\n            <ul>\n              <li class=\"detail-container\">\n                <span class=\"detail-name\">Sender:</span>\n                <span class=\"detail-text\">{{ from }}</span>\n              </li>\n              <li class=\"detail-container\">\n                <span class=\"detail-name\">Receiver:</span>\n                <span class=\"detail-text\">{{ to }}</span>\n              </li>\n              <li class=\"detail-container\">\n                <span class=\"detail-name\">Nonce:</span>\n                <span class=\"detail-text\">{{ nonce }}</span>\n              </li>\n              <li class=\"detail-container\">\n                <span class=\"detail-name\">Value:</span>\n                <span class=\"detail-text\">\n                  {{ toEth(value) }}\n                  {{ selectedNetwork.type.currencyName }}\n                </span>\n              </li>\n              <li class=\"detail-container\">\n                <span class=\"detail-name\">Data:</span>\n                <span v-if=\"data !== '0x'\" class=\"detail-text\">\n                  {{ truncateData(data) }}\n                  <span class=\"show-all-btn\" @click=\"showAllData = !showAllData\"\n                    >Show All</span\n                  >\n                </span>\n                <span v-else class=\"data-all\">{{ data }}</span>\n                <span v-if=\"showAllData\" class=\"data-all\">{{ data }}</span>\n              </li>\n\n              <li class=\"detail-container with-divider\">\n                <span class=\"detail-name\">Chain ID:</span>\n                <span class=\"detail-text\"\n                  >{{ chainID }} ({{ selectedNetwork.type.name_long }})</span\n                >\n              </li>\n              <li class=\"detail-container\">\n                <span class=\"detail-name\">Gas Limit:</span>\n                <span class=\"detail-text\">{{ gasLimit }}</span>\n              </li>\n              <li class=\"detail-container\">\n                <span class=\"detail-name\">Gas Price:</span>\n                <span class=\"detail-text\">{{ toGwei(gasPrice) }} Gwei</span>\n              </li>\n              <li class=\"detail-container\">\n                <span class=\"detail-name\">Fee:</span>\n                <span class=\"detail-text\">\n                  {{ toEth(fee) }}\n                  {{ selectedNetwork.type.currencyName }}\n                  ($ {{ calculateCost(fee) }})\n                </span>\n              </li>\n            </ul>\n            <div class=\"button-container\">\n              <standard-button\n                :options=\"{\n                  title: 'Send',\n                  buttonStyle: 'green',\n                  noWalletTerms: true,\n                  rightArrow: true\n                }\"\n                @click.native=\"stage4Btn\"\n              />\n            </div>\n          </accordion-menu>\n\n          <!-- Sent Tx Details & Hash-->\n          <accordion-menu\n            :greytitle=\"false\"\n            :editbutton=\"false\"\n            :isopen=\"stage5\"\n            :title=\"$t('withoutWallet.txStatus')\"\n            number=\"5\"\n            @titleClicked=\"stage5 = !stage5\"\n          >\n            <ul v-if=\"error === ''\">\n              <li class=\"tx-hash-container\">\n                <p>Transaction Hash:</p>\n                <a\n                  :href=\"replaceUrl('', txHash)\"\n                  class=\"detail-text\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  >{{ txHash }}</a\n                >\n              </li>\n              <li class=\"tx-receipt-container\">\n                <p>Transaction Receipt:</p>\n                <div\n                  v-if=\"Object.keys(txReceipt).length > 0\"\n                  class=\"tx-receipt-items\"\n                >\n                  <div\n                    v-for=\"(item, idx) in Object.keys(txReceipt)\"\n                    :key=\"item + idx\"\n                  >\n                    <span>{{ item }}</span>\n                    <a\n                      v-if=\"item === 'transactionHash'\"\n                      :href=\"replaceUrl('', txReceipt[item])\"\n                      target=\"_blank\"\n                      class=\"right-side\"\n                      >{{ txReceipt[item] }}</a\n                    >\n                    <a\n                      v-else-if=\"item === 'contractAddress'\"\n                      :href=\"replaceUrl('address', txReceipt[item])\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      class=\"right-side\"\n                      >{{ txReceipt[item] }}</a\n                    >\n                    <span v-else class=\"right-side\">{{ txReceipt[item] }}</span>\n                  </div>\n                </div>\n                <div v-else class=\"loading\">Loading....</div>\n              </li>\n            </ul>\n            <div v-else>{{ error }}</div>\n          </accordion-menu>\n        </div>\n      </div>\n    </div>\n\n    <confirmation-modal\n      ref=\"offlineConfirm\"\n      :raw-tx=\"rawTx\"\n      :signed-tx=\"rawSigned\"\n      :env-details=\"envDetails\"\n    />\n  </div>\n</template>\n\n<script>\nimport { Transaction } from 'ethereumjs-tx';\nimport { mapState } from 'vuex';\nimport Misc from '@/helpers/misc';\nimport BigNumber from 'bignumber.js';\nimport web3Utils from 'web3-utils';\nimport * as networkTypes from '@/networks/types';\nimport store from 'store';\nimport TitleTextContentsLayout from '@/layouts/InformationPages/Components/TitleTextContentsLayout';\nimport AccordionMenu from '@/components/AccordionMenu';\nimport DropDownAddressSelector from '@/components/DropDownAddressSelector';\nimport StandardButton from '@/components/Buttons/StandardButton';\nimport StandardInput from '@/components/StandardInput';\nimport ExpandingOption from '@/components/ExpandingOption';\nimport ConfirmationModal from './components/ConfirmationModal';\n\nexport default {\n  components: {\n    'page-title': TitleTextContentsLayout,\n    'accordion-menu': AccordionMenu,\n    'dropdown-address-selector': DropDownAddressSelector,\n    'standard-button': StandardButton,\n    'standard-input': StandardInput,\n    'expanding-option': ExpandingOption,\n    'confirmation-modal': ConfirmationModal\n  },\n  data() {\n    return {\n      networkTypes: Object.values(networkTypes),\n      selectedNetwork: this.$store.state.network,\n      stage1: false, // Select Network\n      stage2: true, // Generate Information\n      stage3: false, // Enter/Upload Signed Transaction\n      stage4: false, // Review and Send\n      stage5: false, // Show Transaction Hash and Transaction Receipt\n      showAllData: false,\n      informationGenerated: false,\n      downloadable: false,\n      from: '0x',\n      rawSigned: '',\n      minAccountBalance: 0,\n      fee: 0,\n      nonce: 0,\n      gasPrice: 0,\n      gasLimit: 0,\n      to: '0x',\n      value: 0,\n      data: '0x',\n      chainID: 0,\n      ethPrice: 0,\n      genInfo: {\n        address: '0x',\n        gasPrice: 0,\n        nonce: 0,\n        chainID: this.$store.state.network.type.chainID,\n        networkName: this.$store.state.network.type.name_long\n      },\n      generatedJson: {},\n      file: '',\n      exportFileName: 'Generated Information',\n      //Error Flags\n      invalidSignature: false,\n      wrongNetwork: false,\n      correctNetwork: '',\n      txHash: '',\n      txReceipt: {},\n      error: ''\n    };\n  },\n  computed: {\n    ...mapState([\n      'network',\n      'Networks',\n      'customPaths',\n      'path',\n      'web3',\n      'wallet',\n      'online'\n    ]),\n    reorderNetworkList() {\n      const customNetworks =\n        store.get('customNetworks') !== undefined\n          ? store.get('customNetworks')\n          : [];\n      const currentNetworks = Misc.reorderNetworks();\n      const newObj = Object.assign({}, currentNetworks, {\n        'Custom Networks': customNetworks\n      });\n      if (customNetworks.length === 0) delete newObj['Custom Networks'];\n      return newObj;\n    },\n    networkTitle() {\n      return `${this.selectedNetwork.type.name} - ${this.selectedNetwork.service} `;\n    },\n    rawTx() {\n      return {\n        from: this.from,\n        nonce: this.nonce,\n        gasPrice: this.toGwei(this.gasPrice),\n        gasLimit: this.gasLimit,\n        to: this.to,\n        value: this.toEth(this.value),\n        data: this.data,\n        chainID: this.chainID\n      };\n    },\n    envDetails() {\n      return {\n        network: this.selectedNetwork,\n        ethPrice: this.ethPrice\n      };\n    }\n  },\n  watch: {\n    rawSigned(newVal) {\n      this.getTransactionDetails(newVal);\n    }\n  },\n  mounted() {\n    this.switchNetwork(this.$store.state.network);\n    if (this.online) {\n      this.fetchBalanceData();\n    }\n  },\n  methods: {\n    replaceUrl(type, hash) {\n      if (type === 'address') {\n        return this.network.type.blockExplorerAddr.replace('[[address]]', hash);\n      }\n      return this.network.type.blockExplorerTX.replace('[[txHash]]', hash);\n    },\n    stage1Btn() {\n      this.stage1 = false;\n      this.stage2 = true;\n    },\n    stage2Btn() {\n      this.stage2 = false;\n      this.stage3 = true;\n    },\n    stage3Btn() {\n      this.stage3 = false;\n      this.stage4 = true;\n    },\n    stage4Btn() {\n      this.stage4 = false;\n      this.stage5 = true;\n      if (this.rawSigned !== '') {\n        this.error = this.txHash = '';\n        this.txReceipt = {};\n        this.web3.eth\n          .sendSignedTransaction(this.rawSigned)\n          .once('transactionHash', hash => {\n            this.txHash = hash;\n          })\n          .then(receipt => {\n            this.txReceipt = receipt;\n          })\n          .catch(e => {\n            this.error = e;\n          });\n      }\n    },\n    switchNetwork(network) {\n      this.$store.dispatch('switchNetwork', network).then(() => {\n        this.selectedNetwork = network;\n        this.$store.dispatch('setWeb3Instance');\n        this.stage1Btn();\n        this.getTransactionDetails();\n      });\n    },\n    truncateData(data) {\n      if (!data) return '';\n      return `${data.slice(0, 20)}...${data.slice(-10)}`;\n    },\n    getTransactionDetails(rawSigned) {\n      const positions = {\n        nonce: 0,\n        gasPrice: 1,\n        gasLimit: 2,\n        to: 3,\n        value: 4,\n        data: 5,\n        v: 6,\n        r: 7,\n        s: 8\n      };\n      if (rawSigned) this.rawSigned = rawSigned;\n      if (this.rawSigned !== '') {\n        const sanitizedRawSigned = Misc.sanitizeHex(this.rawSigned);\n        const tx = new Transaction(sanitizedRawSigned);\n        this.invalidSignature = !tx.verifySignature();\n        this.chainID = tx.getChainId();\n        this.wrongNetwork = !new BigNumber(\n          this.selectedNetwork.type.chainID\n        ).eq(new BigNumber(this.chainID));\n        this.chainID = tx.getChainId();\n\n        if (this.wrongNetwork) {\n          const correctNetwork = this.networkTypes.filter(\n            entry => entry.chainID === this.chainID\n          );\n          if (correctNetwork) this.correctNetwork = correctNetwork[0].name_long;\n        }\n        this.from = Misc.sanitizeHex(tx.getSenderAddress().toString('hex'));\n        const asJson = tx.toJSON();\n        this.to = asJson[positions.to];\n        this.gasLimit = new BigNumber(asJson[positions.gasLimit]).toFixed();\n        this.nonce = new BigNumber(asJson[positions.nonce]).toFixed();\n        this.value = new BigNumber(asJson[positions.value]).toFixed();\n\n        this.data = asJson[positions.data];\n        this.minAccountBalance = tx.getUpfrontCost().toString();\n        this.gasPrice = new BigNumber(\n          Misc.sanitizeHex(tx.gasPrice.toString('hex'))\n        ).toFixed();\n        this.fee = new BigNumber(this.toGwei(this.gasPrice))\n          .times(this.gasLimit)\n          .toFixed();\n      }\n    },\n    async fetchBalanceData() {\n      const url = 'https://cryptorates.mewapi.io/ticker';\n      const fetchValues = await fetch(url);\n      const result = await fetchValues.json();\n      const values = result.data;\n      if (!values['ETH']) return 0;\n      this.ethPrice = new BigNumber(values['ETH'].quotes.USD.price);\n    },\n    toEth(val) {\n      if (!val || isNaN(val)) return 0;\n      return web3Utils.fromWei(new BigNumber(val).toFixed(), 'ether');\n    },\n    toWei(val) {\n      if (!val) return 0;\n      return web3Utils.toWei(new BigNumber(val).toFixed(), 'gwei');\n    },\n    toGwei(val) {\n      if (!val) return 0;\n      return web3Utils.fromWei(new BigNumber(val).toFixed(), 'gwei');\n    },\n    dateTimeDisplay(unixTimeStamp) {\n      return new Date(unixTimeStamp).toString();\n    },\n    calculateCost(inGwei) {\n      const fromGweiToWei = this.toWei(inGwei);\n      return new BigNumber(this.ethPrice)\n        .times(this.toEth(fromGweiToWei))\n        .precision(2, BigNumber.ROUND_UP)\n        .toNumber();\n    },\n    async generateInformation(address) {\n      if (address === '') return;\n      this.genInfo.address = address;\n      this.genInfo.gasPrice = await this.web3.eth.getGasPrice();\n      this.genInfo.nonce = await this.web3.eth.getTransactionCount(address);\n      this.genInfo.blockNumber = await this.web3.eth.getBlockNumber();\n      this.genInfo.chainID = this.selectedNetwork.type.chainID;\n      this.genInfo.timestamp = Date.now(); //;\n      this.exportGeneratedInfo();\n      this.informationGenerated = true;\n    },\n    exportGeneratedInfo() {\n      const createBlob = (mime, str) => {\n        const string = typeof str === 'object' ? JSON.stringify(str) : str;\n        if (string === null) return '';\n        const blob = new Blob([string], {\n          type: mime\n        });\n        this.downloadable = true;\n        return window.URL.createObjectURL(blob);\n      };\n      this.generatedJson = createBlob(this.genInfo, 'mime');\n      this.exportFileName = `generated-offline-tx-${Date.now()}.json`;\n    },\n    uploadClick() {\n      const jsonInput = this.$refs.jsonInput;\n      jsonInput.value = '';\n      jsonInput.click();\n    },\n    uploadFile(e) {\n      const self = this;\n      const reader = new FileReader();\n      reader.onloadend = function(evt) {\n        self.file = JSON.parse(evt.target.result);\n        self.getTransactionDetails(self.file.rawTransaction);\n      };\n      reader.readAsBinaryString(e.target.files[0]);\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'SendOfflineHelper.scss';\n</style>\n"]}]}