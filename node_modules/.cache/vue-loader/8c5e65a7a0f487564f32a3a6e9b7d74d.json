{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/components/SettingsModal/SettingsModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/components/SettingsModal/SettingsModal.vue","mtime":1573477611624},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport FullWidthDropdownMenu from '@/components/FullWidthDropdownMenu';\nimport BigNumber from 'bignumber.js';\nimport utils from 'web3-utils';\nimport store from 'store';\nimport { Toast } from '@/helpers';\nimport { mapState } from 'vuex';\n\nexport default {\n  name: 'Settings',\n  components: {\n    'full-width-dropdown': FullWidthDropdownMenu\n  },\n  props: {\n    gasPrice: {\n      type: String,\n      default: '0'\n    },\n    address: {\n      type: String,\n      default: ''\n    }\n  },\n  data() {\n    return {\n      buttonSave: {\n        title: 'Save',\n        buttonStyle: 'green',\n        rightArrow: false,\n        leftArrow: false,\n        mobileFullWidth: true\n      },\n      buttonExport: {\n        title: 'Export',\n        buttonStyle: 'green',\n        rightArrow: false,\n        leftArrow: false,\n        mobileFullWidth: true\n      },\n      buttonUploadFile: {\n        title: 'Upload File...',\n        buttonStyle: 'green-border',\n        rightArrow: false,\n        leftArrow: false,\n        fullWidth: true,\n        noMinWidth: true\n      },\n      buttonImport: {\n        title: 'Import',\n        buttonStyle: 'green',\n        rightArrow: false,\n        leftArrow: false,\n        fullWidth: true,\n        noMinWidth: false\n      },\n      inputFileName: '',\n      selectedGasType: 'regular',\n      customGas: 0,\n      customGasEth: 0,\n      ethPrice: 0,\n      fileName: '',\n      file: '',\n      importedFile: '',\n      popup: false\n    };\n  },\n  computed: {\n    ...mapState(['network', 'online']),\n    gasPriceInputs() {\n      return {\n        economy: {\n          gwei: new BigNumber(\n            utils.fromWei(\n              new BigNumber(this.gasPrice).div(1).toFixed(0),\n              'gwei'\n            )\n          ).toFixed(),\n          eth: new BigNumber(\n            utils.fromWei(\n              new BigNumber(this.gasPrice).div(1).toFixed(0),\n              'ether'\n            )\n          ).toFixed()\n        },\n        regular: {\n          gwei: new BigNumber(\n            utils.fromWei(\n              new BigNumber(this.gasPrice).times(1.5).toFixed(0),\n              'gwei'\n            )\n          ).toFixed(),\n          eth: new BigNumber(\n            utils.fromWei(\n              new BigNumber(this.gasPrice).times(1.5).toFixed(0),\n              'ether'\n            )\n          ).toFixed()\n        },\n        fast: {\n          gwei: new BigNumber(\n            utils.fromWei(\n              new BigNumber(this.gasPrice).times(2).toFixed(0),\n              'gwei'\n            )\n          ).toFixed(),\n          eth: new BigNumber(\n            utils.fromWei(\n              new BigNumber(this.gasPrice).div(2).toFixed(0),\n              'ether'\n            )\n          ).toFixed()\n        }\n      };\n    }\n  },\n  watch: {\n    customGas(newVal) {\n      if (newVal !== '') {\n        if (new BigNumber(newVal).gte(1)) {\n          const toGwei = new BigNumber(\n            utils.toWei(`${newVal}`, 'gwei')\n          ).toFixed();\n          this.customGasEth = new BigNumber(\n            `${utils.fromWei(toGwei, 'ether')}`\n          ).toFixed();\n        } else {\n          this.customGas = 1;\n        }\n      }\n    },\n    gasPrice() {\n      this.saveGasChanges();\n    }\n  },\n  mounted() {\n    if (this.online) {\n      this.getEthPrice();\n    }\n    this.exportConfig();\n    this.getGasType();\n  },\n  methods: {\n    setDataFromImportedFile() {\n      const reader = new FileReader();\n      const notifObj = {};\n      notifObj[this.address] = [];\n      reader.onloadend = evt => {\n        try {\n          const notifications = store.get('notifications') || notifObj;\n          const file = JSON.parse(evt.target.result);\n          const fNotifications = file.notifications || [];\n          fNotifications.forEach(objAddr => {\n            const addr = Object.keys(objAddr)[0];\n            notifications[addr] = objAddr[addr];\n          });\n          store.set('notifications', notifications);\n          store.set('skipTutorial', file.main.skipTutorial);\n          store.set('customTokens', file.main.customTokens);\n          store.set('customNetworks', file.main.customNetworks);\n          store.set('customDeriviationPaths', file.main.customDeriviationPaths);\n          store.set('gas', file.main.gas);\n\n          this.popup = true;\n\n          setTimeout(() => {\n            this.popup = false;\n          }, 1500);\n        } catch (e) {\n          Toast.responseHandler(\n            new Error(\n              'Something went wrong while importing file, please make sure it is a valid file'\n            ),\n            Toast.ERROR\n          );\n        }\n      };\n      reader.readAsBinaryString(this.importedFile);\n    },\n    receiveUploadedFile(e) {\n      const pathParts = e.target.value.split('\\\\');\n      this.inputFileName = pathParts[pathParts.length - 1];\n\n      this.importedFile = e.target.files[0];\n    },\n    getGasType() {\n      const type = store.get('gasPriceType');\n      const amt = store.get('gasPrice');\n      if (type) {\n        this.selectedGasType = type;\n      }\n\n      if (amt) {\n        if (this.gasPriceInputs[type] !== undefined) {\n          this.$store.dispatch(\n            'setGasPrice',\n            new BigNumber(this.gasPriceInputs[type].gwei).toNumber()\n          );\n        } else {\n          this.customGas = amt;\n          this.$store.dispatch('setGasPrice', new BigNumber(amt).toNumber());\n        }\n      }\n    },\n    uploadFile() {\n      const uploadInput = this.$refs.uploadInput;\n      uploadInput.value = '';\n      uploadInput.click();\n    },\n    saveGasChanges() {\n      if (this.gasPriceInputs[this.selectedGasType] !== undefined) {\n        this.$store.dispatch(\n          'setGasPrice',\n          new BigNumber(\n            this.gasPriceInputs[this.selectedGasType].gwei\n          ).toNumber()\n        );\n      } else {\n        this.$store.dispatch(\n          'setGasPrice',\n          new BigNumber(this.customGas).toNumber()\n        );\n      }\n      if (this.$refs.gasDropdown) {\n        this.$refs.gasDropdown.dropdownOpen = false;\n      }\n    },\n    selectGasType(type) {\n      store.set('gasPriceType', type);\n      this.selectedGasType = type;\n      if (type === 'other') {\n        this.$refs.customInput.focus();\n      }\n    },\n    exportConfig() {\n      const time = new Date().toISOString();\n      const notifications = [];\n      const storedNotifs = store.get('notifications') || {};\n      Object.keys(storedNotifs).forEach(item => {\n        if (storedNotifs[item].length > 0) {\n          const obj = {};\n          obj[item] = storedNotifs[item];\n          notifications.push(obj);\n        }\n      });\n      const gas = {};\n      if (this.gasPriceInputs[this.selectedGasType] !== undefined) {\n        gas['speed'] = this.selectedGasType;\n      } else {\n        gas['price'] = this.customGas;\n      }\n\n      const exportableObject = {\n        timestamp: time,\n        main: {\n          customNetworks:\n            store.get('customNetworks') !== undefined\n              ? store.get('customNetworks')\n              : [],\n          customTokens:\n            store.get('customTokens') !== undefined\n              ? store.get('customTokens')\n              : {},\n          customDeriviationPaths:\n            store.get('customDeriviationPaths') !== undefined\n              ? store.get('customDeriviationPaths')\n              : [],\n          gas: gas,\n          skipTutorial: true\n        },\n        notifications: notifications\n      };\n\n      this.fileName = `mew-export-${time}.json`;\n\n      const file = new Blob([JSON.stringify(exportableObject)], {\n        type: 'application/json'\n      });\n      this.file = window.URL.createObjectURL(file);\n    },\n    convert(price) {\n      const convertedPrice = new BigNumber(price * this.ethPrice).toFixed();\n      return this.$options.filters.concatAddr(convertedPrice);\n    },\n    async getEthPrice() {\n      const price = await fetch(\n        'https://cryptorates.mewapi.io/ticker?filter=ETH'\n      )\n        .then(res => {\n          return res.json();\n        })\n        .catch(e => {\n          Toast.responseHandler(e, Toast.ERROR);\n        });\n\n      this.ethPrice = price.data.ETH.quotes.USD.price;\n    }\n  }\n};\n",{"version":3,"sources":["SettingsModal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAifile":"SettingsModal.vue","sourceRoot":"src/components/SettingsModal","sourcesContent":["<template>\n  <div class=\"settings-modal\">\n    <div class=\"modal-container\">\n      <b-modal\n        ref=\"settings\"\n        title=\"Settings\"\n        hide-footer\n        centered\n        class=\"bootstrap-modal nopadding\"\n        static\n        lazy\n      >\n        <div class=\"modal-contents\">\n          <full-width-dropdown\n            ref=\"gasDropdown\"\n            title=\"Transaction Speed\"\n            class=\"tx-speed\"\n          >\n            <div class=\"radio-buttons\">\n              <ul>\n                <li\n                  v-for=\"(val, key) in gasPriceInputs\"\n                  :key=\"key\"\n                  :class=\"selectedGasType === key ? 'selected' : ''\"\n                >\n                  <div>\n                    <input\n                      :id=\"key\"\n                      :value=\"key\"\n                      :checked=\"selectedGasType === key\"\n                      name=\"speedRadioInputs\"\n                      type=\"radio\"\n                      @change=\"selectGasType(key)\"\n                    />\n                    <label :for=\"key\">\n                      {{ key | capitalize }} ({{ gasPriceInputs[key].gwei }}\n                      Gwei)\n                    </label>\n                  </div>\n                  <p class=\"hidden\">\n                    {{ gasPriceInputs[key].eth }} {{ network.type.name }}\n                    <span v-if=\"ethPrice !== 0 && network.type.name === 'ETH'\">\n                      ($\n                      {{ convert(gasPriceInputs[key].eth) }})\n                    </span>\n                  </p>\n                </li>\n                <li :class=\"selectedGasType === 'other' ? 'selected' : ''\">\n                  <div>\n                    <input\n                      id=\"ccc\"\n                      :checked=\"selectedGasType === 'other'\"\n                      type=\"radio\"\n                      name=\"speedRadioInputs\"\n                      value=\"other\"\n                      @change=\"selectGasType('other')\"\n                    />\n                    <input\n                      ref=\"customInput\"\n                      v-model=\"customGas\"\n                      type=\"number\"\n                      @focus=\"selectedGasType = 'other'\"\n                    />\n                    <p class=\"gwei\">Gwei</p>\n                  </div>\n                  <p class=\"hidden\">\n                    {{ customGasEth }}\n                    {{ network.type.currencyName }}\n                    <span\n                      v-if=\"\n                        ethPrice !== 0 &&\n                          customGasEth !== 0 &&\n                          network.type.name === 'ETH'\n                      \"\n                      >($ {{ convert(customGasEth) }})</span\n                    >\n                  </p>\n                </li>\n              </ul>\n            </div>\n            <div class=\"button-block\">\n              <standard-button\n                :options=\"buttonSave\"\n                :button-disabled=\"selectedGasType === 'other' && customGas < 1\"\n                @click.native=\"saveGasChanges\"\n              />\n            </div>\n          </full-width-dropdown>\n\n          <full-width-dropdown\n            title=\"Import Configurations\"\n            class=\"import-config\"\n          >\n            <b-alert :show=\"popup\" fade variant=\"info\"\n              >Imported file successfully!</b-alert\n            >\n            <p>\n              Please click the button below to open and import you configuration\n              file from your local computer.\n            </p>\n            <div class=\"import-button-block\">\n              <div class=\"filename\">\n                {{ inputFileName }}\n              </div>\n              <input\n                ref=\"uploadInput\"\n                type=\"file\"\n                name=\"file\"\n                @change=\"receiveUploadedFile\"\n              />\n              <standard-button\n                :options=\"buttonUploadFile\"\n                @click.native=\"uploadFile\"\n              />\n            </div>\n            <div class=\"button-block\">\n              <standard-button\n                :options=\"buttonImport\"\n                :button-disabled=\"importedFile === ''\"\n                @click.native=\"setDataFromImportedFile\"\n              />\n            </div>\n          </full-width-dropdown>\n\n          <full-width-dropdown\n            title=\"Export Configurations\"\n            class=\"export-config\"\n          >\n            <p>\n              Please click the button below to download your configuration file\n              into your local computer.\n            </p>\n            <div class=\"button-block\">\n              <a :href=\"file\" :download=\"fileName\" class=\"export-button\">\n                <standard-button :options=\"buttonExport\" />\n              </a>\n            </div>\n          </full-width-dropdown>\n        </div>\n      </b-modal>\n    </div>\n  </div>\n</template>\n\n<script>\nimport FullWidthDropdownMenu from '@/components/FullWidthDropdownMenu';\nimport BigNumber from 'bignumber.js';\nimport utils from 'web3-utils';\nimport store from 'store';\nimport { Toast } from '@/helpers';\nimport { mapState } from 'vuex';\n\nexport default {\n  name: 'Settings',\n  components: {\n    'full-width-dropdown': FullWidthDropdownMenu\n  },\n  props: {\n    gasPrice: {\n      type: String,\n      default: '0'\n    },\n    address: {\n      type: String,\n      default: ''\n    }\n  },\n  data() {\n    return {\n      buttonSave: {\n        title: 'Save',\n        buttonStyle: 'green',\n        rightArrow: false,\n        leftArrow: false,\n        mobileFullWidth: true\n      },\n      buttonExport: {\n        title: 'Export',\n        buttonStyle: 'green',\n        rightArrow: false,\n        leftArrow: false,\n        mobileFullWidth: true\n      },\n      buttonUploadFile: {\n        title: 'Upload File...',\n        buttonStyle: 'green-border',\n        rightArrow: false,\n        leftArrow: false,\n        fullWidth: true,\n        noMinWidth: true\n      },\n      buttonImport: {\n        title: 'Import',\n        buttonStyle: 'green',\n        rightArrow: false,\n        leftArrow: false,\n        fullWidth: true,\n        noMinWidth: false\n      },\n      inputFileName: '',\n      selectedGasType: 'regular',\n      customGas: 0,\n      customGasEth: 0,\n      ethPrice: 0,\n      fileName: '',\n      file: '',\n      importedFile: '',\n      popup: false\n    };\n  },\n  computed: {\n    ...mapState(['network', 'online']),\n    gasPriceInputs() {\n      return {\n        economy: {\n          gwei: new BigNumber(\n            utils.fromWei(\n              new BigNumber(this.gasPrice).div(1).toFixed(0),\n              'gwei'\n            )\n          ).toFixed(),\n          eth: new BigNumber(\n            utils.fromWei(\n              new BigNumber(this.gasPrice).div(1).toFixed(0),\n              'ether'\n            )\n          ).toFixed()\n        },\n        regular: {\n          gwei: new BigNumber(\n            utils.fromWei(\n              new BigNumber(this.gasPrice).times(1.5).toFixed(0),\n              'gwei'\n            )\n          ).toFixed(),\n          eth: new BigNumber(\n            utils.fromWei(\n              new BigNumber(this.gasPrice).times(1.5).toFixed(0),\n              'ether'\n            )\n          ).toFixed()\n        },\n        fast: {\n          gwei: new BigNumber(\n            utils.fromWei(\n              new BigNumber(this.gasPrice).times(2).toFixed(0),\n              'gwei'\n            )\n          ).toFixed(),\n          eth: new BigNumber(\n            utils.fromWei(\n              new BigNumber(this.gasPrice).div(2).toFixed(0),\n              'ether'\n            )\n          ).toFixed()\n        }\n      };\n    }\n  },\n  watch: {\n    customGas(newVal) {\n      if (newVal !== '') {\n        if (new BigNumber(newVal).gte(1)) {\n          const toGwei = new BigNumber(\n            utils.toWei(`${newVal}`, 'gwei')\n          ).toFixed();\n          this.customGasEth = new BigNumber(\n            `${utils.fromWei(toGwei, 'ether')}`\n          ).toFixed();\n        } else {\n          this.customGas = 1;\n        }\n      }\n    },\n    gasPrice() {\n      this.saveGasChanges();\n    }\n  },\n  mounted() {\n    if (this.online) {\n      this.getEthPrice();\n    }\n    this.exportConfig();\n    this.getGasType();\n  },\n  methods: {\n    setDataFromImportedFile() {\n      const reader = new FileReader();\n      const notifObj = {};\n      notifObj[this.address] = [];\n      reader.onloadend = evt => {\n        try {\n          const notifications = store.get('notifications') || notifObj;\n          const file = JSON.parse(evt.target.result);\n          const fNotifications = file.notifications || [];\n          fNotifications.forEach(objAddr => {\n            const addr = Object.keys(objAddr)[0];\n            notifications[addr] = objAddr[addr];\n          });\n          store.set('notifications', notifications);\n          store.set('skipTutorial', file.main.skipTutorial);\n          store.set('customTokens', file.main.customTokens);\n          store.set('customNetworks', file.main.customNetworks);\n          store.set('customDeriviationPaths', file.main.customDeriviationPaths);\n          store.set('gas', file.main.gas);\n\n          this.popup = true;\n\n          setTimeout(() => {\n            this.popup = false;\n          }, 1500);\n        } catch (e) {\n          Toast.responseHandler(\n            new Error(\n              'Something went wrong while importing file, please make sure it is a valid file'\n            ),\n            Toast.ERROR\n          );\n        }\n      };\n      reader.readAsBinaryString(this.importedFile);\n    },\n    receiveUploadedFile(e) {\n      const pathParts = e.target.value.split('\\\\');\n      this.inputFileName = pathParts[pathParts.length - 1];\n\n      this.importedFile = e.target.files[0];\n    },\n    getGasType() {\n      const type = store.get('gasPriceType');\n      const amt = store.get('gasPrice');\n      if (type) {\n        this.selectedGasType = type;\n      }\n\n      if (amt) {\n        if (this.gasPriceInputs[type] !== undefined) {\n          this.$store.dispatch(\n            'setGasPrice',\n            new BigNumber(this.gasPriceInputs[type].gwei).toNumber()\n          );\n        } else {\n          this.customGas = amt;\n          this.$store.dispatch('setGasPrice', new BigNumber(amt).toNumber());\n        }\n      }\n    },\n    uploadFile() {\n      const uploadInput = this.$refs.uploadInput;\n      uploadInput.value = '';\n      uploadInput.click();\n    },\n    saveGasChanges() {\n      if (this.gasPriceInputs[this.selectedGasType] !== undefined) {\n        this.$store.dispatch(\n          'setGasPrice',\n          new BigNumber(\n            this.gasPriceInputs[this.selectedGasType].gwei\n          ).toNumber()\n        );\n      } else {\n        this.$store.dispatch(\n          'setGasPrice',\n          new BigNumber(this.customGas).toNumber()\n        );\n      }\n      if (this.$refs.gasDropdown) {\n        this.$refs.gasDropdown.dropdownOpen = false;\n      }\n    },\n    selectGasType(type) {\n      store.set('gasPriceType', type);\n      this.selectedGasType = type;\n      if (type === 'other') {\n        this.$refs.customInput.focus();\n      }\n    },\n    exportConfig() {\n      const time = new Date().toISOString();\n      const notifications = [];\n      const storedNotifs = store.get('notifications') || {};\n      Object.keys(storedNotifs).forEach(item => {\n        if (storedNotifs[item].length > 0) {\n          const obj = {};\n          obj[item] = storedNotifs[item];\n          notifications.push(obj);\n        }\n      });\n      const gas = {};\n      if (this.gasPriceInputs[this.selectedGasType] !== undefined) {\n        gas['speed'] = this.selectedGasType;\n      } else {\n        gas['price'] = this.customGas;\n      }\n\n      const exportableObject = {\n        timestamp: time,\n        main: {\n          customNetworks:\n            store.get('customNetworks') !== undefined\n              ? store.get('customNetworks')\n              : [],\n          customTokens:\n            store.get('customTokens') !== undefined\n              ? store.get('customTokens')\n              : {},\n          customDeriviationPaths:\n            store.get('customDeriviationPaths') !== undefined\n              ? store.get('customDeriviationPaths')\n              : [],\n          gas: gas,\n          skipTutorial: true\n        },\n        notifications: notifications\n      };\n\n      this.fileName = `mew-export-${time}.json`;\n\n      const file = new Blob([JSON.stringify(exportableObject)], {\n        type: 'application/json'\n      });\n      this.file = window.URL.createObjectURL(file);\n    },\n    convert(price) {\n      const convertedPrice = new BigNumber(price * this.ethPrice).toFixed();\n      return this.$options.filters.concatAddr(convertedPrice);\n    },\n    async getEthPrice() {\n      const price = await fetch(\n        'https://cryptorates.mewapi.io/ticker?filter=ETH'\n      )\n        .then(res => {\n          return res.json();\n        })\n        .catch(e => {\n          Toast.responseHandler(e, Toast.ERROR);\n        });\n\n      this.ethPrice = price.data.ETH.quotes.USD.price;\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'SettingsModal.scss';\n</style>\n"]}]}