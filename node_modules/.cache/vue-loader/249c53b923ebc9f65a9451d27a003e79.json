{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/layouts/AccessWalletLayout/components/PrivateKeyModal/PrivateKeyModal.vue?vue&type=style&index=0&id=8dd0b21a&lang=scss&scoped=true&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/layouts/AccessWalletLayout/components/PrivateKeyModal/PrivateKeyModal.vue","mtime":1573477611668},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import 'PrivateKeyModal-desktop.scss';\n@import 'PrivateKeyModal-tablet.scss';\n@import 'PrivateKeyModal-mobile.scss';\n",{"version":3,"sources":["PrivateKeyModal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgGA;AACA;AACA","file":"PrivateKeyModal.vue","sourceRoot":"src/layouts/AccessWalletLayout/components/PrivateKeyModal","sourcesContent":["<template>\n  <b-modal\n    ref=\"privateKey\"\n    :title=\"$t('accessWallet.accessByPrivateKey')\"\n    hide-footer\n    class=\"bootstrap-modal nopadding modal-software\"\n    centered\n    static\n    lazy\n    @shown=\"focusInput\"\n    @hide=\"privateKey = ''\"\n  >\n    <div class=\"warning\">\n      <warning-message />\n    </div>\n    <div class=\"modal-content-block\">\n      <form class=\"private-key-form\">\n        <div class=\"input-container\">\n          <input\n            ref=\"privateKeyInput\"\n            v-model=\"privateKey\"\n            type=\"text\"\n            name=\"PrivateKey\"\n            autocomplete=\"off\"\n            placeholder=\"Enter Private Key\"\n          />\n        </div>\n        <standard-button\n          :button-disabled=\"notValid\"\n          :options=\"accessWalletButtonOptions\"\n          class=\"submit-button\"\n          @click.native.prevent=\"unlockWallet\"\n        />\n      </form>\n      <div class=\"customer-support-block\">\n        <customer-support />\n      </div>\n    </div>\n  </b-modal>\n</template>\n\n<script>\nimport { WalletInterface } from '@/wallets';\nimport { PRIV_KEY as privKeyType } from '@/wallets/bip44/walletTypes';\nimport { mapState } from 'vuex';\nimport { isHexString } from 'ethereumjs-util';\nimport WarningMessage from '@/components/WarningMessage';\nimport CustomerSupport from '@/components/CustomerSupport';\nimport StandardButton from '@/components/Buttons/StandardButton';\nexport default {\n  components: {\n    'customer-support': CustomerSupport,\n    'warning-message': WarningMessage,\n    'standard-button': StandardButton\n  },\n  data() {\n    return {\n      accessWalletButtonOptions: {\n        title: this.$t('common.accessWallet'),\n        buttonStyle: 'green',\n        noMinWidth: true\n      },\n      privateKey: '',\n      spinner: false\n    };\n  },\n  computed: {\n    ...mapState(['path']),\n    notValid() {\n      const _priv = this.privateKey.replace('0x', '');\n      return !isHexString('0x' + _priv, 32);\n    }\n  },\n  mounted() {},\n  methods: {\n    unlockWallet() {\n      this.spinner = true;\n      this.$store\n        .dispatch('decryptWallet', [\n          new WalletInterface(this.privateKey, false, privKeyType)\n        ])\n        .then(() => {\n          this.privateKey = '';\n          this.spinner = false;\n          this.$router.push({\n            path: 'interface'\n          });\n        });\n    },\n    focusInput() {\n      this.$refs.privateKeyInput.focus();\n    }\n  }\n};\n</script>\n<style lang=\"scss\" scoped>\n@import 'PrivateKeyModal-desktop.scss';\n@import 'PrivateKeyModal-tablet.scss';\n@import 'PrivateKeyModal-mobile.scss';\n</style>\n"]}]}