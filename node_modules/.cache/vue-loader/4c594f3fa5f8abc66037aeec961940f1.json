{"remainingRequest":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/layouts/InterfaceLayout/components/InterfaceTokens/InterfaceTokens.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/layouts/InterfaceLayout/components/InterfaceTokens/InterfaceTokens.vue","mtime":1573477611976},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport store from 'store';\nimport { mapState } from 'vuex';\nimport { Toast } from '@/helpers';\nimport { toChecksumAddress } from '@/helpers/addressUtils';\nimport InterfaceTokensModal from '../InterfaceTokensModal';\nimport InterfaceAds from '../InterfaceAds';\nimport sortByBalance from '@/helpers/sortByBalance.js';\nimport utils from 'web3-utils';\nimport * as networkTypes from '@/networks/types';\n\nexport default {\n  components: {\n    'interface-tokens-modal': InterfaceTokensModal,\n    'interface-ads': InterfaceAds\n  },\n  props: {\n    tokens: {\n      type: Array,\n      default: function() {\n        return [];\n      }\n    },\n    receivedTokens: {\n      type: Boolean,\n      default: false\n    },\n    getTokenBalance: {\n      type: Function,\n      default: function() {}\n    },\n    fetchTokens: {\n      type: Function,\n      default: function() {}\n    },\n    resetTokenSelection: {\n      type: Function,\n      default: function() {}\n    },\n    ads: {\n      type: Boolean,\n      default: true\n    },\n    address: {\n      type: String,\n      default: ''\n    }\n  },\n  data() {\n    return {\n      search: '',\n      localTokens: [],\n      customTokens: [],\n      util: utils,\n      tokenExists: false\n    };\n  },\n  computed: {\n    ...mapState(['network', 'web3', 'online'])\n  },\n  watch: {\n    receivedTokens() {\n      this.getCustomTokens();\n    },\n    tokens(newVal) {\n      this.assignTokens(newVal, this.search);\n      this.getCustomTokens();\n    },\n    search(newVal) {\n      this.assignTokens(this.tokens, newVal);\n    }\n  },\n  methods: {\n    getV3Tokens() {\n      const v3Tokens = store.get('localTokens');\n      const v5CustomTokens = store.get('customTokens');\n      v3Tokens.forEach(token => {\n        const newObj = {\n          address: token.contractAddress,\n          decimals: token.decimal,\n          email: '',\n          name: token.symbol,\n          symbol: token.symbol,\n          website: '',\n          type: 'custom'\n        };\n        Object.keys(networkTypes).forEach(network => {\n          if (\n            token.network &&\n            (networkTypes[network].name.toLowerCase() ===\n              token.network.toLowerCase() ||\n              networkTypes[network].name_long.toLowerCase() ===\n                token.network.toLowerCase())\n          ) {\n            if (this.tokenError(newObj.address, newObj.symbol, '')) {\n              v5CustomTokens[networkTypes[network].name].push(newObj);\n            }\n          }\n        });\n      });\n      store.set('customTokens', v5CustomTokens);\n      store.remove('localTokens');\n    },\n    getCustomTokens() {\n      if (store.get('localTokens') !== undefined) {\n        this.getV3Tokens();\n      }\n      const storedTokens = store.get('customTokens') || {};\n      this.customTokens = storedTokens.hasOwnProperty(this.network.type.name)\n        ? storedTokens[this.network.type.name]\n        : [];\n      this.localCustomTokens = storedTokens.hasOwnProperty(\n        this.network.type.name\n      )\n        ? storedTokens[this.network.type.name]\n        : [];\n    },\n    async getSpecificTokenBalance(token) {\n      for (let i = 0; i < this.tokens.length; i++) {\n        if (\n          toChecksumAddress(this.tokens[i].address) ===\n          toChecksumAddress(token.address)\n        ) {\n          this.tokens[i].balance = await this.getTokenBalance(token);\n        }\n      }\n      this.tokens.sort(sortByBalance);\n      this.resetTokenSelection();\n    },\n    addTokenModal() {\n      this.$refs.tokenModal.$refs.tokenModal.show();\n    },\n    removeToken(idx) {\n      const storedTokens = store.get('customTokens');\n      this.customTokens.splice(idx, 1);\n      this.localCustomTokens = this.customTokens.splice();\n      storedTokens[this.network.type.name] = this.customTokens;\n      store.set('customTokens', storedTokens);\n      this.fetchTokens();\n    },\n    searchBySymbol(symbol) {\n      const searchNetwork = this.localTokens.find(item => {\n        return item.symbol.toLowerCase() === symbol.toLowerCase();\n      });\n\n      const searchCustom = this.customTokens.find(item => {\n        return item.symbol.toLowerCase() === symbol.toLowerCase();\n      });\n\n      if (searchNetwork !== undefined || searchCustom !== undefined) {\n        return false;\n      }\n      return true;\n    },\n    searchByAddr(addr) {\n      const searchNetwork = this.localTokens.find(item => {\n        return (\n          utils.toChecksumAddress(item.address) ===\n          utils.toChecksumAddress(addr)\n        );\n      });\n\n      const searchCustom = this.customTokens.find(item => {\n        return (\n          utils.toChecksumAddress(item.address) ===\n          utils.toChecksumAddress(addr)\n        );\n      });\n\n      if (searchNetwork !== undefined || searchCustom !== undefined) {\n        return false;\n      }\n      return true;\n    },\n    tokenError(address, symbol, addType) {\n      const findTokenBySymbol = this.searchBySymbol(symbol);\n      const findTokenByAddr = this.searchByAddr(address);\n      if (!findTokenByAddr && addType !== '') {\n        this.$refs.tokenModal.$refs.tokenModal.hide();\n        Toast.responseHandler(\n          'A default or custom token with this contract address already exists!',\n          Toast.ERROR\n        );\n        return false;\n      } else if (!findTokenBySymbol && addType !== '') {\n        this.$refs.tokenModal.$refs.tokenModal.hide();\n        Toast.responseHandler(\n          \"A default or custom token with this symbol already exists! The token in our list may have the same symbol but a different contract address, try adding it again with a '2' after the symbol!\",\n          Toast.ERROR\n        );\n        return false;\n      }\n      return findTokenByAddr || findTokenBySymbol;\n    },\n    async addToken(address, symbol, decimal) {\n      if (this.tokenError(address, symbol, 'manual')) {\n        const token = {\n          address: address,\n          decimals: decimal,\n          email: '',\n          name: symbol,\n          symbol: symbol,\n          website: '',\n          type: 'custom'\n        };\n        const currentCustomToken = store.get('customTokens');\n        this.customTokens =\n          this.customTokens.length > 0 ? this.customTokens : [];\n        this.customTokens.push(token);\n        this.localCustomTokens = this.customTokens.splice();\n        currentCustomToken[this.network.type.name] = this.customTokens;\n        store.set('customTokens', currentCustomToken);\n        this.$refs.tokenModal.$refs.tokenModal.hide();\n        await this.fetchTokens();\n        Toast.responseHandler('Successfully added token!', Toast.SUCCESS);\n      }\n    },\n    tokenListExpend() {\n      this.$refs.tokenTableContainer.classList.toggle('expanded');\n      this.$refs.expendDown.classList.toggle('hidden');\n      this.$refs.expendUp.classList.toggle('hidden');\n    },\n    async assignTokens(arr, query) {\n      const localCustomTok =\n        this.customTokens.length > 0 ? this.customTokens.slice() : [];\n      if (query !== '') {\n        this.customTokens = localCustomTok\n          .filter(token => {\n            if (token.name.toLowerCase().includes(query.toLowerCase())) {\n              return token;\n            }\n          })\n          .sort(sortByBalance);\n        this.localTokens = this.tokens\n          .filter(token => {\n            if (token.name.toLowerCase().includes(query.toLowerCase())) {\n              return token;\n            }\n          })\n          .sort(sortByBalance);\n      } else {\n        this.localTokens = arr;\n        this.customTokens = this.localCustomTokens;\n      }\n    }\n  }\n};\n",{"version":3,"sources":["InterfaceTokens.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"InterfaceTokens.vue","sourceRoot":"src/layouts/InterfaceLayout/components/InterfaceTokens","sourcesContent":["<template>\n  <div class=\"transaction-tokens\">\n    <interface-tokens-modal ref=\"tokenModal\" :add-token=\"addToken\" />\n    <div class=\"wrap\">\n      <div class=\"tokens-container\">\n        <div class=\"token-search\">\n          <div class=\"block-title\">\n            <div class=\"title-container\">\n              <h4>{{ $t('interface.tokens') }}</h4>\n              <img\n                alt\n                src=\"~@/assets/images/icons/change.svg\"\n                @click=\"fetchTokens\"\n              />\n            </div>\n            <p @click=\"addTokenModal\">+ {{ $t('interface.customToken') }}</p>\n          </div>\n          <div class=\"search-block\">\n            <input v-model=\"search\" placeholder=\"Search\" autocomplete=\"off\" />\n            <i class=\"fa fa-search\" aria-hidden=\"true\" />\n          </div>\n        </div>\n        <div v-show=\"!online\" class=\"cant-load\">\n          Can't load balances on offline mode\n        </div>\n        <div ref=\"tokenTableContainer\" class=\"token-table-container\">\n          <table v-show=\"customTokens.length > 0 && receivedTokens\">\n            <tr\n              v-for=\"(token, index) in customTokens\"\n              :key=\"token.name + index\"\n            >\n              <td>{{ token.name }}</td>\n              <td>\n                {{ token.balance }}\n                <i\n                  class=\"fa fa-times-circle clickable\"\n                  @click=\"removeToken(index)\"\n                />\n              </td>\n            </tr>\n          </table>\n\n          <table v-show=\"localTokens.length > 0 && receivedTokens\">\n            <tr v-for=\"(token, index) in localTokens\" :key=\"token.name + index\">\n              <td>{{ token.name }}</td>\n              <td\n                v-if=\"token.balance === 'Load' && online\"\n                class=\"load-token\"\n                @click=\"online ? getSpecificTokenBalance(token) : () => {}\"\n              >\n                {{ token.balance }}\n              </td>\n              <td v-else>{{ token.balance }}</td>\n            </tr>\n          </table>\n\n          <div\n            v-show=\"\n              search === '' && localTokens.length === 0 && !receivedTokens\n            \"\n            class=\"spinner-container\"\n          >\n            <i class=\"fa fa-spinner fa-spin\" />\n          </div>\n          <div\n            v-show=\"\n              search !== '' &&\n                localTokens.length === 0 &&\n                customTokens.length === 0\n            \"\n            class=\"spinner-container\"\n          >\n            No tokens found :(\n          </div>\n        </div>\n        <div\n          v-if=\"customTokens.length + localTokens.length > 15\"\n          class=\"expend-bar\"\n          @click=\"tokenListExpend\"\n        >\n          <p ref=\"expendDown\" class=\"down\">\n            <i class=\"fa fa-angle-double-down\" aria-hidden=\"true\" />\n          </p>\n          <p ref=\"expendUp\" class=\"up hidden\">\n            <i class=\"fa fa-angle-double-up\" aria-hidden=\"true\" />\n          </p>\n        </div>\n      </div>\n      <interface-ads></interface-ads>\n    </div>\n  </div>\n</template>\n\n<script>\nimport store from 'store';\nimport { mapState } from 'vuex';\nimport { Toast } from '@/helpers';\nimport { toChecksumAddress } from '@/helpers/addressUtils';\nimport InterfaceTokensModal from '../InterfaceTokensModal';\nimport InterfaceAds from '../InterfaceAds';\nimport sortByBalance from '@/helpers/sortByBalance.js';\nimport utils from 'web3-utils';\nimport * as networkTypes from '@/networks/types';\n\nexport default {\n  components: {\n    'interface-tokens-modal': InterfaceTokensModal,\n    'interface-ads': InterfaceAds\n  },\n  props: {\n    tokens: {\n      type: Array,\n      default: function() {\n        return [];\n      }\n    },\n    receivedTokens: {\n      type: Boolean,\n      default: false\n    },\n    getTokenBalance: {\n      type: Function,\n      default: function() {}\n    },\n    fetchTokens: {\n      type: Function,\n      default: function() {}\n    },\n    resetTokenSelection: {\n      type: Function,\n      default: function() {}\n    },\n    ads: {\n      type: Boolean,\n      default: true\n    },\n    address: {\n      type: String,\n      default: ''\n    }\n  },\n  data() {\n    return {\n      search: '',\n      localTokens: [],\n      customTokens: [],\n      util: utils,\n      tokenExists: false\n    };\n  },\n  computed: {\n    ...mapState(['network', 'web3', 'online'])\n  },\n  watch: {\n    receivedTokens() {\n      this.getCustomTokens();\n    },\n    tokens(newVal) {\n      this.assignTokens(newVal, this.search);\n      this.getCustomTokens();\n    },\n    search(newVal) {\n      this.assignTokens(this.tokens, newVal);\n    }\n  },\n  methods: {\n    getV3Tokens() {\n      const v3Tokens = store.get('localTokens');\n      const v5CustomTokens = store.get('customTokens');\n      v3Tokens.forEach(token => {\n        const newObj = {\n          address: token.contractAddress,\n          decimals: token.decimal,\n          email: '',\n          name: token.symbol,\n          symbol: token.symbol,\n          website: '',\n          type: 'custom'\n        };\n        Object.keys(networkTypes).forEach(network => {\n          if (\n            token.network &&\n            (networkTypes[network].name.toLowerCase() ===\n              token.network.toLowerCase() ||\n              networkTypes[network].name_long.toLowerCase() ===\n                token.network.toLowerCase())\n          ) {\n            if (this.tokenError(newObj.address, newObj.symbol, '')) {\n              v5CustomTokens[networkTypes[network].name].push(newObj);\n            }\n          }\n        });\n      });\n      store.set('customTokens', v5CustomTokens);\n      store.remove('localTokens');\n    },\n    getCustomTokens() {\n      if (store.get('localTokens') !== undefined) {\n        this.getV3Tokens();\n      }\n      const storedTokens = store.get('customTokens') || {};\n      this.customTokens = storedTokens.hasOwnProperty(this.network.type.name)\n        ? storedTokens[this.network.type.name]\n        : [];\n      this.localCustomTokens = storedTokens.hasOwnProperty(\n        this.network.type.name\n      )\n        ? storedTokens[this.network.type.name]\n        : [];\n    },\n    async getSpecificTokenBalance(token) {\n      for (let i = 0; i < this.tokens.length; i++) {\n        if (\n          toChecksumAddress(this.tokens[i].address) ===\n          toChecksumAddress(token.address)\n        ) {\n          this.tokens[i].balance = await this.getTokenBalance(token);\n        }\n      }\n      this.tokens.sort(sortByBalance);\n      this.resetTokenSelection();\n    },\n    addTokenModal() {\n      this.$refs.tokenModal.$refs.tokenModal.show();\n    },\n    removeToken(idx) {\n      const storedTokens = store.get('customTokens');\n      this.customTokens.splice(idx, 1);\n      this.localCustomTokens = this.customTokens.splice();\n      storedTokens[this.network.type.name] = this.customTokens;\n      store.set('customTokens', storedTokens);\n      this.fetchTokens();\n    },\n    searchBySymbol(symbol) {\n      const searchNetwork = this.localTokens.find(item => {\n        return item.symbol.toLowerCase() === symbol.toLowerCase();\n      });\n\n      const searchCustom = this.customTokens.find(item => {\n        return item.symbol.toLowerCase() === symbol.toLowerCase();\n      });\n\n      if (searchNetwork !== undefined || searchCustom !== undefined) {\n        return false;\n      }\n      return true;\n    },\n    searchByAddr(addr) {\n      const searchNetwork = this.localTokens.find(item => {\n        return (\n          utils.toChecksumAddress(item.address) ===\n          utils.toChecksumAddress(addr)\n        );\n      });\n\n      const searchCustom = this.customTokens.find(item => {\n        return (\n          utils.toChecksumAddress(item.address) ===\n          utils.toChecksumAddress(addr)\n        );\n      });\n\n      if (searchNetwork !== undefined || searchCustom !== undefined) {\n        return false;\n      }\n      return true;\n    },\n    tokenError(address, symbol, addType) {\n      const findTokenBySymbol = this.searchBySymbol(symbol);\n      const findTokenByAddr = this.searchByAddr(address);\n      if (!findTokenByAddr && addType !== '') {\n        this.$refs.tokenModal.$refs.tokenModal.hide();\n        Toast.responseHandler(\n          'A default or custom token with this contract address already exists!',\n          Toast.ERROR\n        );\n        return false;\n      } else if (!findTokenBySymbol && addType !== '') {\n        this.$refs.tokenModal.$refs.tokenModal.hide();\n        Toast.responseHandler(\n          \"A default or custom token with this symbol already exists! The token in our list may have the same symbol but a different contract address, try adding it again with a '2' after the symbol!\",\n          Toast.ERROR\n        );\n        return false;\n      }\n      return findTokenByAddr || findTokenBySymbol;\n    },\n    async addToken(address, symbol, decimal) {\n      if (this.tokenError(address, symbol, 'manual')) {\n        const token = {\n          address: address,\n          decimals: decimal,\n          email: '',\n          name: symbol,\n          symbol: symbol,\n          website: '',\n          type: 'custom'\n        };\n        const currentCustomToken = store.get('customTokens');\n        this.customTokens =\n          this.customTokens.length > 0 ? this.customTokens : [];\n        this.customTokens.push(token);\n        this.localCustomTokens = this.customTokens.splice();\n        currentCustomToken[this.network.type.name] = this.customTokens;\n        store.set('customTokens', currentCustomToken);\n        this.$refs.tokenModal.$refs.tokenModal.hide();\n        await this.fetchTokens();\n        Toast.responseHandler('Successfully added token!', Toast.SUCCESS);\n      }\n    },\n    tokenListExpend() {\n      this.$refs.tokenTableContainer.classList.toggle('expanded');\n      this.$refs.expendDown.classList.toggle('hidden');\n      this.$refs.expendUp.classList.toggle('hidden');\n    },\n    async assignTokens(arr, query) {\n      const localCustomTok =\n        this.customTokens.length > 0 ? this.customTokens.slice() : [];\n      if (query !== '') {\n        this.customTokens = localCustomTok\n          .filter(token => {\n            if (token.name.toLowerCase().includes(query.toLowerCase())) {\n              return token;\n            }\n          })\n          .sort(sortByBalance);\n        this.localTokens = this.tokens\n          .filter(token => {\n            if (token.name.toLowerCase().includes(query.toLowerCase())) {\n              return token;\n            }\n          })\n          .sort(sortByBalance);\n      } else {\n        this.localTokens = arr;\n        this.customTokens = this.localCustomTokens;\n      }\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'InterfaceTokens.scss';\n</style>\n"]}]}