{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/dapps/MakerDai/components/MoveCdpModal/MoveCdp.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/dapps/MakerDai/components/MoveCdpModal/MoveCdp.vue","mtime":1573477611644},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapState } from 'vuex';\nimport StandardButton from '@/components/Buttons/StandardButton';\nimport HelpCenterButton from '@/components/Buttons/HelpCenterButton';\nimport CheckBox from '../CheckBox';\n\nimport BigNumber from 'bignumber.js/bignumber.js';\n\nimport { Misc } from '@/helpers';\nexport default {\n  components: {\n    'check-box': CheckBox,\n    'help-center-button': HelpCenterButton,\n    'standard-button': StandardButton\n  },\n  props: {\n    tokensWithBalance: {\n      type: Array,\n      default: function() {\n        return [];\n      }\n    },\n    action: {\n      type: String,\n      default: ''\n    },\n    values: {\n      type: Object,\n      default: function() {\n        return {\n          maxPethDraw: '',\n          maxEthDraw: '',\n          maxUsdDraw: '',\n          ethCollateral: '',\n          pethCollateral: '',\n          usdCollateral: '',\n          debtValue: '',\n          maxDai: '',\n          collateralRatio: '',\n          cdpId: ''\n        };\n      }\n    },\n    destAddressHasProxy: {\n      type: Boolean,\n      default: false\n    },\n    destAddressProxy: {\n      type: String,\n      default: ''\n    }\n  },\n  data() {\n    return {\n      address: '',\n      amountEth: 0,\n      amountDai: 0,\n      govFee: 0,\n      modalDetailInformation: false,\n      checkBoxChecked: false,\n      textValues: {},\n      mkrToken: {},\n      cancelButton: {\n        title: 'Cancel',\n        buttonStyle: 'green-border',\n        noMinWidth: true\n      },\n      submitButton: {\n        title: 'Submit',\n        buttonStyle: 'green',\n        noMinWidth: true,\n        fullWidth: true\n      }\n    };\n  },\n  computed: {\n    ...mapState(['account', 'gasPrice', 'web3', 'network', 'ens']),\n    btnActive() {\n      return Misc.isValidETHAddress(this.address) && this.checkBoxChecked;\n    }\n  },\n  watch: {\n    address(newVal) {\n      if (Misc.isValidETHAddress(newVal)) {\n        this.$emit('checkForProxy', newVal);\n      }\n    }\n  },\n  mounted() {\n    this.$refs.modal.$on('shown', () => {\n      this.address = '';\n    });\n  },\n  methods: {\n    closeCdp() {\n      this.activeCdp.closeCdp();\n    },\n    checkBoxClicked() {\n      this.checkBoxChecked = !this.checkBoxChecked;\n    },\n    displayPercentValue(raw) {\n      if (!BigNumber.isBigNumber(raw)) raw = new BigNumber(raw);\n      return raw.times(100).toString();\n    },\n    displayFixedValue(raw, decimals = 3) {\n      if (!BigNumber.isBigNumber(raw)) raw = new BigNumber(raw);\n      return raw.toFixed(decimals, BigNumber.ROUND_DOWN).toString();\n    },\n    async moveCdp() {\n      if (Misc.isValidETHAddress(this.address)) {\n        this.$emit('moveCdp', this.address);\n        this.closeModal();\n      }\n    },\n    closeModal() {\n      this.$refs.modal.hide();\n    }\n  }\n};\n",{"version":3,"sources":["MoveCdp.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"MoveCdp.vue","sourceRoot":"src/dapps/MakerDai/components/MoveCdpModal","sourcesContent":["<template>\n  <div class=\"modal-container\">\n    <b-modal\n      ref=\"modal\"\n      :title=\"$t('dappsMaker.moveTitle')\"\n      hide-footer\n      centered\n      class=\"bootstrap-modal nopadding\"\n      static\n      lazy\n    >\n      <div class=\"modal-content\">\n        <p class=\"top-text\">\n          {{ $t('dappsMaker.moveNotice') }}\n        </p>\n        <check-box @changeStatus=\"checkBoxClicked\">\n          <template v-slot:terms\n            ><p class=\"checkbox-label\">\n              {{ $t('dappsMaker.understandAndAgree') }}\n            </p></template\n          >\n        </check-box>\n\n        <div class=\"input-container\">\n          <label>{{ $t('dappsMaker.moveQuestion') }}</label>\n          <div class=\"input-box\">\n            <input v-model=\"address\" />\n          </div>\n        </div>\n        <div>\n          <div v-if=\"destAddressHasProxy\">\n            <p>\n              {{ $t('dappsMaker.proxyAddress', { value: destAddressProxy }) }}\n            </p>\n            {{ $t('dappsMaker.moveWithProxy') }}\n          </div>\n          <div v-if=\"!destAddressHasProxy\">\n            {{ $t('dappsMaker.moveWithoutProxy') }}\n          </div>\n        </div>\n        <div class=\"buttons\">\n          <standard-button :options=\"cancelButton\" @click.native=\"closeModal\" />\n          <standard-button\n            :options=\"submitButton\"\n            :button-disabled=\"btnActive ? false : true\"\n            :click-function=\"moveCdp\"\n          />\n        </div>\n        <help-center-button />\n      </div>\n    </b-modal>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport StandardButton from '@/components/Buttons/StandardButton';\nimport HelpCenterButton from '@/components/Buttons/HelpCenterButton';\nimport CheckBox from '../CheckBox';\n\nimport BigNumber from 'bignumber.js/bignumber.js';\n\nimport { Misc } from '@/helpers';\nexport default {\n  components: {\n    'check-box': CheckBox,\n    'help-center-button': HelpCenterButton,\n    'standard-button': StandardButton\n  },\n  props: {\n    tokensWithBalance: {\n      type: Array,\n      default: function() {\n        return [];\n      }\n    },\n    action: {\n      type: String,\n      default: ''\n    },\n    values: {\n      type: Object,\n      default: function() {\n        return {\n          maxPethDraw: '',\n          maxEthDraw: '',\n          maxUsdDraw: '',\n          ethCollateral: '',\n          pethCollateral: '',\n          usdCollateral: '',\n          debtValue: '',\n          maxDai: '',\n          collateralRatio: '',\n          cdpId: ''\n        };\n      }\n    },\n    destAddressHasProxy: {\n      type: Boolean,\n      default: false\n    },\n    destAddressProxy: {\n      type: String,\n      default: ''\n    }\n  },\n  data() {\n    return {\n      address: '',\n      amountEth: 0,\n      amountDai: 0,\n      govFee: 0,\n      modalDetailInformation: false,\n      checkBoxChecked: false,\n      textValues: {},\n      mkrToken: {},\n      cancelButton: {\n        title: 'Cancel',\n        buttonStyle: 'green-border',\n        noMinWidth: true\n      },\n      submitButton: {\n        title: 'Submit',\n        buttonStyle: 'green',\n        noMinWidth: true,\n        fullWidth: true\n      }\n    };\n  },\n  computed: {\n    ...mapState(['account', 'gasPrice', 'web3', 'network', 'ens']),\n    btnActive() {\n      return Misc.isValidETHAddress(this.address) && this.checkBoxChecked;\n    }\n  },\n  watch: {\n    address(newVal) {\n      if (Misc.isValidETHAddress(newVal)) {\n        this.$emit('checkForProxy', newVal);\n      }\n    }\n  },\n  mounted() {\n    this.$refs.modal.$on('shown', () => {\n      this.address = '';\n    });\n  },\n  methods: {\n    closeCdp() {\n      this.activeCdp.closeCdp();\n    },\n    checkBoxClicked() {\n      this.checkBoxChecked = !this.checkBoxChecked;\n    },\n    displayPercentValue(raw) {\n      if (!BigNumber.isBigNumber(raw)) raw = new BigNumber(raw);\n      return raw.times(100).toString();\n    },\n    displayFixedValue(raw, decimals = 3) {\n      if (!BigNumber.isBigNumber(raw)) raw = new BigNumber(raw);\n      return raw.toFixed(decimals, BigNumber.ROUND_DOWN).toString();\n    },\n    async moveCdp() {\n      if (Misc.isValidETHAddress(this.address)) {\n        this.$emit('moveCdp', this.address);\n        this.closeModal();\n      }\n    },\n    closeModal() {\n      this.$refs.modal.hide();\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'MoveCdp';\n</style>\n"]}]}