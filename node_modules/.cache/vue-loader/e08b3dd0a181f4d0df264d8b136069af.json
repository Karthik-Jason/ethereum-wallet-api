{"remainingRequest":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/layouts/CreateWalletLayout/containers/ByMnemonicContainer/ByMnemonicContainer.vue?vue&type=template&id=0e3fc205&scoped=true&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/layouts/CreateWalletLayout/containers/ByMnemonicContainer/ByMnemonicContainer.vue","mtime":1573477611676},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    { staticClass: \"create-wallet-by-mnemonic\" },\n    [\n      _c(\"finish-modal\", {\n        ref: \"finish\",\n        attrs: { unlock: _vm.unlockWallet }\n      }),\n      _c(\"print-modal\", {\n        ref: \"print\",\n        attrs: {\n          mnemonic: _vm.mnemonicValues,\n          \"is-twenty-four\": _vm.mnemonic24\n        }\n      }),\n      _c(\"verification-modal\", {\n        ref: \"verification\",\n        attrs: { \"mnemonic-values\": _vm.mnemonicValues },\n        on: { verifiedMnemonic: _vm.openFinish }\n      }),\n      _c(\n        \"div\",\n        { staticClass: \"wrap\" },\n        [\n          _c(\"div\", { staticClass: \"contents\" }, [\n            _c(\"div\", { staticClass: \"tools\" }, [\n              _c(\"div\", { staticClass: \"value-switch noselect\" }, [\n                _c(\"div\", { staticClass: \"sliding-switch\" }, [\n                  _c(\"label\", { staticClass: \"switch\" }, [\n                    _c(\"input\", { attrs: { type: \"checkbox\" } }),\n                    _c(\"span\", {\n                      staticClass: \"slider round\",\n                      on: { click: _vm.mnemonicValueBitSizeChange }\n                    })\n                  ]),\n                  _vm._m(0)\n                ]),\n                _c(\"span\", { staticClass: \"text__base link switch-label\" }, [\n                  _vm._v(_vm._s(_vm.$t(\"createWallet.byMnemonicValue\")))\n                ])\n              ]),\n              _c(\n                \"div\",\n                {\n                  staticClass: \"random-button color-green noselect\",\n                  on: { click: _vm.mnemonicValueRefresh }\n                },\n                [\n                  _c(\"i\", {\n                    staticClass: \"fa fa-refresh\",\n                    attrs: { \"aria-hidden\": \"true\" }\n                  }),\n                  _c(\"span\", [\n                    _vm._v(_vm._s(_vm.$t(\"createWallet.byMnemonicRandom\")))\n                  ])\n                ]\n              )\n            ]),\n            _c(\"div\", { staticClass: \"phrases\" }, [\n              _c(\n                \"ul\",\n                _vm._l(_vm.mnemonicValues, function(value, index) {\n                  return _c(\"li\", { key: index }, [\n                    _vm._v(\"\\n            \" + _vm._s(index + 1) + \".\"),\n                    _c(\"span\", [_vm._v(_vm._s(value))])\n                  ])\n                }),\n                0\n              )\n            ])\n          ]),\n          _c(\n            \"div\",\n            { staticClass: \"option-container-block\" },\n            [\n              _c(\n                \"expanding-option\",\n                {\n                  attrs: { title: \"Password\", \"button-text\": \"Optional\" },\n                  on: { expanded: _vm.passwordInputViewChange }\n                },\n                [\n                  _c(\n                    \"div\",\n                    { staticClass: \"option-container\" },\n                    [\n                      _c(\"create-wallet-input\", {\n                        attrs: { \"show-button\": false, \"full-width\": true },\n                        model: {\n                          value: _vm.password,\n                          callback: function($$v) {\n                            _vm.password = $$v\n                          },\n                          expression: \"password\"\n                        }\n                      }),\n                      _c(\"div\", { staticClass: \"password-warning\" }, [\n                        _c(\"p\", [\n                          _vm._v(\n                            \"\\n              \" +\n                              _vm._s(\n                                _vm.$t(\"createWallet.mnemonicPasswordWarning\")\n                              ) +\n                              \"\\n            \"\n                          )\n                        ]),\n                        _c(\"div\", { staticClass: \"read\" }, [\n                          _vm._v(\n                            \"\\n              > \" +\n                              _vm._s(_vm.$t(\"common.read\")) +\n                              \":\\n              \"\n                          ),\n                          _c(\n                            \"a\",\n                            {\n                              attrs: {\n                                href:\n                                  \"https://kb.myetherwallet.com/posts/security-and-privacy/mnemonic-phrase-password/\",\n                                target: \"_blank\"\n                              }\n                            },\n                            [\n                              _vm._v(\n                                \"Mnemonic Phrase: Should I Include a Password?\"\n                              )\n                            ]\n                          )\n                        ])\n                      ])\n                    ],\n                    1\n                  )\n                ]\n              )\n            ],\n            1\n          ),\n          _c(\"div\", { staticClass: \"user-input\" }, [\n            _c(\n              \"div\",\n              {\n                staticClass:\n                  \"next-button large-round-button-green-filled clickable\",\n                on: { click: _vm.mnemonicVerificationModalOpen }\n              },\n              [\n                _vm._v(\n                  \"\\n        \" +\n                    _vm._s(_vm.$t(\"createWallet.byMnemonicAlreadyWritten\")) +\n                    \"\\n      \"\n                )\n              ]\n            ),\n            _c(\"div\", { on: { click: _vm.openPrintModal } }, [\n              _c(\"img\", {\n                staticClass: \"icon\",\n                attrs: {\n                  alt: \"\",\n                  src: require(\"@/assets/images/icons/printer.svg\")\n                }\n              })\n            ])\n          ]),\n          _c(\"input-footer\")\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = [\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"labels\" }, [\n      _c(\"span\", { staticClass: \"label-left white\" }, [_vm._v(\"12\")]),\n      _c(\"span\", { staticClass: \"label-right\" }, [_vm._v(\"24\")])\n    ])\n  }\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}