{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/dapps/ManageENS/containers/ManageENSContainer/ManageENSContainer.vue?vue&type=style&index=0&id=ef81b6e4&lang=scss&scoped=true&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/dapps/ManageENS/containers/ManageENSContainer/ManageENSContainer.vue","mtime":1573477611660},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import 'ManageENSContainer.scss';\n",{"version":3,"sources":["ManageENSContainer.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+YA","file":"ManageENSContainer.vue","sourceRoot":"src/dapps/ManageENS/containers/ManageENSContainer","sourcesContent":["<template>\n  <div class=\"manage-ens-container\">\n    <h3>{{ $t('dapps.manage') }} {{ domainName }}</h3>\n    <b-btn\n      v-b-toggle.multicoinsec\n      v-show=\"resolverMultiCoinSupport\"\n      class=\"collapse-open-button\"\n      variant=\"primary\"\n    >\n      <p>Multi coin</p>\n    </b-btn>\n    <b-collapse\n      id=\"multicoinsec\"\n      :visible=\"resolverMultiCoinSupport\"\n      class=\"collapse-content\"\n      accordion=\"manage-ens-accordion\"\n    >\n      <div class=\"form-container\">\n        <form class=\"manage-multi-coin-form\">\n          <div class=\"title-and-dropdown-container\">\n            <h4>Multi-Coin:</h4>\n            <b-dd :text=\"selectedCurrency\" class=\"dropdown-button-2\">\n              <b-dd-item\n                v-for=\"(item, idx) in Object.keys(supportedCoins)\"\n                :key=\"item + idx\"\n                @click=\"addCurrencyInput(item)\"\n                >{{ item }}</b-dd-item\n              >\n            </b-dd>\n          </div>\n          <div\n            v-for=\"(v, k) in currencyInputs\"\n            :key=\"k.id\"\n            class=\"multi-coin-input-container\"\n          >\n            <label for=\"updateResolver\">{{ k }}:</label>\n            <input\n              v-model=\"v.value\"\n              :placeholder=\"v.name + ' address'\"\n              type=\"text\"\n              name=\"updateResolver\"\n            />\n            <i\n              :class=\"[\n                'validity-indication fa',\n                v.value !== '' && !v.validator.validate(v.value)\n                  ? 'error fa-times-circle-o'\n                  : 'valid fa-check-circle-o'\n              ]\"\n            />\n            <i\n              class=\"fa fa-lg fa-times\"\n              @click=\"\n                () => {\n                  removeCoinInput(k);\n                }\n              \"\n            />\n          </div>\n          <div class=\"multi-coin-submit-container\">\n            <button\n              :class=\"isValidAddresses ? '' : 'disabled'\"\n              @click.prevent=\"checkAndSendCurrency\"\n            >\n              Save\n            </button>\n          </div>\n        </form>\n      </div>\n    </b-collapse>\n    <b-btn\n      v-b-toggle.textrecords\n      v-show=\"resolverTxtSupport\"\n      class=\"collapse-open-button\"\n      variant=\"primary\"\n    >\n      <p>Text Records</p>\n    </b-btn>\n    <b-collapse\n      id=\"textrecords\"\n      :visible=\"!resolverMultiCoinSupport && resolverTxtSupport\"\n      class=\"collapse-content\"\n      accordion=\"manage-ens-accordion\"\n    >\n      <div class=\"form-container\">\n        <form class=\"manage-multi-coin-form\">\n          <div class=\"title-and-dropdown-container\">\n            <h4>Text Records:</h4>\n            <b-dd :text=\"selectedText | capitalize\" class=\"dropdown-button-2\">\n              <b-dd-item\n                v-for=\"(item, idx) in Object.keys(txtRecords)\"\n                :key=\"item + idx\"\n                @click=\"addTxtInput(item)\"\n                >{{ item | capitalize }}</b-dd-item\n              >\n            </b-dd>\n          </div>\n          <div\n            v-for=\"(v, k) in txtRecordInputs\"\n            :key=\"k.id\"\n            class=\"multi-coin-input-container\"\n          >\n            <label for=\"updateResolver\">{{ k | capitalize }}:</label>\n            <input\n              v-validate=\"getValidation(k)\"\n              v-model=\"txtRecordInputs[k]\"\n              :placeholder=\"k | capitalize\"\n              :name=\"k\"\n              type=\"text\"\n            />\n            <i\n              :class=\"[\n                'validity-indication fa',\n                !!txtRecordInputs[k] &&\n                txtRecordInputs[k] !== '' &&\n                !errors.hasOwnProperty(`${k}`)\n                  ? 'valid fa-check-circle-o'\n                  : 'error fa-times-circle-o'\n              ]\"\n            />\n            <i\n              class=\"fa fa-lg fa-times\"\n              @click=\"\n                () => {\n                  removeTxtInput(k);\n                }\n              \"\n            />\n          </div>\n          <div class=\"multi-coin-submit-container\">\n            <button\n              :class=\"validTextRecords ? 'disabled' : ''\"\n              @click.prevent=\"checkAndSendTxtRecs\"\n            >\n              Save\n            </button>\n          </div>\n        </form>\n      </div>\n    </b-collapse>\n    <b-btn\n      v-b-toggle.transferens\n      class=\"collapse-open-button\"\n      variant=\"primary\"\n    >\n      <p>Transfer Domain</p>\n    </b-btn>\n    <b-collapse\n      id=\"transferens\"\n      :visible=\"!resolverMultiCoinSupport && !resolverTxtSupport\"\n      class=\"collapse-content\"\n      accordion=\"manage-ens-accordion\"\n    >\n      <div class=\"form-container\">\n        <form class=\"manage-form\">\n          <div class=\"input-container\">\n            <label for=\"transferEns\">{{ $t('dapps.transferEnsTo') }}:</label>\n            <input\n              v-model=\"transferTo\"\n              type=\"text\"\n              name=\"transferEns\"\n              placeholder=\"0xDECAF9CD2367cdbb726E904cD6397eDFcAe6068D\"\n            />\n          </div>\n          <div class=\"submit-container\">\n            <button\n              :class=\"!isAddress(transferTo) ? 'disabled' : ''\"\n              type=\"submit\"\n              @click.prevent=\"transferDomain(transferTo)\"\n            >\n              Transfer\n            </button>\n          </div>\n        </form>\n      </div>\n    </b-collapse>\n    <interface-bottom-text\n      :link-text=\"$t('interface.helpCenter')\"\n      :question=\"$t('interface.haveIssues')\"\n      link=\"https://kb.myetherwallet.com\"\n    />\n  </div>\n</template>\n<script>\nimport InterfaceBottomText from '@/components/InterfaceBottomText';\nimport { isAddress } from '@/helpers/addressUtils';\nimport { mapState } from 'vuex';\nimport { Toast } from '@/helpers';\nimport utils from 'web3-utils';\nimport supportedTxt from '../../supportedTxt';\nexport default {\n  components: {\n    'interface-bottom-text': InterfaceBottomText\n  },\n  props: {\n    domainName: {\n      type: String,\n      default: ''\n    },\n    setMultiCoin: {\n      type: Function,\n      default: function() {}\n    },\n    setRecord: {\n      type: Function,\n      default: function() {}\n    },\n    transferDomain: {\n      type: Function,\n      default: function() {}\n    },\n    tld: {\n      type: String,\n      default: ''\n    },\n    resolverMultiCoinSupport: {\n      type: Boolean,\n      default: false\n    },\n    resolverTxtSupport: {\n      type: Boolean,\n      default: false\n    },\n    supportedCoins: {\n      type: Object,\n      default: function() {}\n    },\n    txtRecords: {\n      type: Object,\n      default: function() {}\n    }\n  },\n  data() {\n    const newCoinsCopy = this.copySupported();\n    const newtxtRecords = {};\n    for (const key in newCoinsCopy) {\n      if (\n        newCoinsCopy[key].hasOwnProperty('value') &&\n        newCoinsCopy[key].value === ''\n      )\n        delete newCoinsCopy[key];\n    }\n\n    for (const key in this.txtRecords) {\n      if (this.txtRecords[key] !== '') {\n        newtxtRecords[key] = this.txtRecords[key];\n      }\n    }\n\n    return {\n      transferTo: '',\n      multiCoinSupport: false,\n      isAddress: isAddress,\n      currencyInputs: newCoinsCopy,\n      selectedCurrency: 'ETH',\n      selectedText: 'Email',\n      hasError: false,\n      txtRecordInputs: newtxtRecords\n    };\n  },\n  computed: {\n    ...mapState(['web3']),\n    isValidAddresses() {\n      for (const type in this.currencyInputs) {\n        if (\n          this.currencyInputs[type].value !== '' &&\n          !this.currencyInputs[type].validator.validate(\n            this.currencyInputs[type].value\n          )\n        )\n          return false;\n      }\n      return true;\n    },\n    validTextRecords() {\n      for (const type in this.txtRecordInputs) {\n        if (this.txtRecordInputs[type] && this.txtRecordInputs[type] !== '')\n          return false;\n      }\n      return true;\n    }\n  },\n  watch: {\n    currencyInputs: {\n      handler: function(newVal) {\n        this.currencyInputs = newVal;\n      },\n      deep: true\n    },\n    txtRecordInputs: {\n      handler: function(newVal) {\n        this.txtRecordInputs = newVal;\n      },\n      deep: true\n    }\n  },\n  mounted() {\n    if (this.domainName === '.') {\n      this.$router.push('/interface/dapps/manage-ens');\n    }\n  },\n  methods: {\n    getValidation(name) {\n      const foundObj = supportedTxt.find(item => {\n        return item.name.toLowerCase() === name.toLowerCase();\n      });\n\n      switch (foundObj.type) {\n        case 'url':\n          return 'required|url:require_protocol';\n        case 'email':\n          return 'email|required';\n        default:\n          return 'required';\n      }\n    },\n    copySupported() {\n      const newObj = utils._.map(this.supportedCoins, utils._.clone);\n      const copiedObj = {};\n      newObj.forEach(item => {\n        copiedObj[item.symbol] = item;\n      });\n\n      return copiedObj;\n    },\n    addCurrencyInput(item) {\n      this.selectedCurrency = item;\n      const unRefSupportedCoins = this.copySupported();\n      const newObj = Object.assign({}, this.currencyInputs);\n      if (!newObj[item]) {\n        newObj[item] = unRefSupportedCoins[item];\n        this.currencyInputs = newObj;\n      } else {\n        Toast.responseHandler(\n          `Currency ${item} is already added for ${this.domainName}`,\n          Toast.WARN\n        );\n      }\n    },\n    addTxtInput(item) {\n      this.selectedText = item;\n      const newObj = Object.assign({}, this.txtRecordInputs);\n      if (!newObj[item]) {\n        newObj[item] = this.txtRecordInputs[item];\n        this.txtRecordInputs = newObj;\n      } else {\n        Toast.responseHandler(\n          `Text Record ${item} input is already added for ${this.domainName}`,\n          Toast.WARN\n        );\n      }\n    },\n    removeCoinInput(name) {\n      const newObj = Object.assign({}, this.currencyInputs);\n      newObj[name].value = '';\n      this.currencyInputs = newObj;\n    },\n    removeTxtInput(name) {\n      const newObj = Object.assign({}, this.txtRecordInputs);\n      newObj[name] = '';\n      this.txtRecordInputs = newObj;\n    },\n    checkAndSendTxtRecs() {\n      const changed = {};\n\n      const currencyInputsObj = Object.assign({}, this.txtRecordInputs);\n      const currentSupported = Object.assign({}, this.txtRecords);\n      Object.keys(currentSupported).forEach(item => {\n        if (\n          currencyInputsObj[item] &&\n          currentSupported[item] !== currencyInputsObj[item]\n        ) {\n          changed[item] = currencyInputsObj[item];\n        }\n      });\n      if (Object.keys(changed).length > 0) {\n        this.setRecord(changed);\n      }\n    },\n    checkAndSendCurrency() {\n      const changed = [];\n      const currencyInputsObj = Object.assign({}, this.currencyInputs);\n      const currentSupported = Object.assign({}, this.supportedCoins);\n      Object.keys(currentSupported).forEach(item => {\n        if (\n          currencyInputsObj[item] &&\n          currentSupported[item].value !== currencyInputsObj[item].value\n        ) {\n          changed.push(currencyInputsObj[item]);\n        }\n      });\n      if (changed.length > 0) {\n        this.setMultiCoin(changed);\n      }\n    }\n  }\n};\n</script>\n<style lang=\"scss\" scoped>\n@import 'ManageENSContainer.scss';\n</style>\n"]}]}