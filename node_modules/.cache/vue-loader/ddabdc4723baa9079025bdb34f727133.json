{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/layouts/AccessWalletLayout/components/HardwareModal/HardwareModal.vue?vue&type=style&index=0&id=cb13162e&lang=scss&scoped=true&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/layouts/AccessWalletLayout/components/HardwareModal/HardwareModal.vue","mtime":1574664278286},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/css-loader/index.js","mtime":1574664275862},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1574664277774},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/postcss-loader/src/index.js","mtime":1574664277114},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/sass-loader/dist/cjs.js","mtime":1574664277374},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js","mtime":1574664277774}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import 'HardwareModal-desktop.scss';\n@import 'HardwareModal-tablet.scss';\n@import 'HardwareModal-mobile.scss';\n",{"version":3,"sources":["HardwareModal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyRA;AACA;AACA","file":"HardwareModal.vue","sourceRoot":"src/layouts/AccessWalletLayout/components/HardwareModal","sourcesContent":["<template>\n  <b-modal\n    ref=\"hardware\"\n    :title=\"$t('accessWallet.accessByHardware')\"\n    hide-footer\n    class=\"bootstrap-modal modal-hardware nopadding\"\n    centered\n    static\n    lazy\n  >\n    <div class=\"modal-content-container\">\n      <div class=\"d-block text-center\">\n        <b-alert :show=\"mayNotBeAttached\" fade variant=\"warning\">\n          {{ $t('accessWallet.connectDevice') }}\n        </b-alert>\n        <div class=\"button-options hardware-button-options\">\n          <wallet-option\n            v-for=\"(item, idx) in items\"\n            :key=\"item.name + idx\"\n            :selected=\"selected === item.name\"\n            :regular-icon=\"item.imgPath\"\n            :text=\"item.text\"\n            :name=\"item.name\"\n            :disabled=\"item.disabled\"\n            :tooltip-msg=\"item.msg\"\n            :link=\"item.link\"\n            @updateSelected=\"updateSelected\"\n          />\n        </div>\n      </div>\n      <div class=\"button-container\">\n        <div\n          :class=\"[\n            selected !== '' ? 'enabled' : 'disabled',\n            'mid-round-button-green-filled'\n          ]\"\n          @click=\"continueAccess\"\n        >\n          {{ $t('accessWallet.accessDeviceAddresses') }}\n        </div>\n      </div>\n      <customer-support />\n    </div>\n  </b-modal>\n</template>\n\n<script>\nimport CustomerSupport from '@/components/CustomerSupport';\nimport ledger from '@/assets/images/icons/HardwareWallet/ledger.svg';\nimport bitbox from '@/assets/images/icons/HardwareWallet/bitbox.svg';\nimport secalot from '@/assets/images/icons/HardwareWallet/secalot.svg';\nimport trezor from '@/assets/images/icons/HardwareWallet/trezor.svg';\nimport keepkey from '@/assets/images/icons/HardwareWallet/keepkey.svg';\nimport finney from '@/assets/images/icons/button-finney-hover.png';\nimport xwallet from '@/assets/images/icons/HardwareWallet/xwallet.svg';\nimport WalletOption from '../WalletOption';\nimport { Toast } from '@/helpers';\nimport { isSupported } from 'u2f-api';\nimport platform from 'platform';\nimport {\n  KeepkeyWallet,\n  TrezorWallet,\n  BitBoxWallet,\n  SecalotWallet\n} from '@/wallets';\nimport {\n  LEDGER as LEDGER_TYPE,\n  TREZOR as TREZOR_TYPE,\n  BITBOX as BITBOX_TYPE,\n  SECALOT as SECALOT_TYPE,\n  KEEPKEY as KEEPKEY_TYPE,\n  XWALLET as XWALLET_TYPE\n} from '@/wallets/bip44/walletTypes';\nexport default {\n  components: {\n    'customer-support': CustomerSupport,\n    'wallet-option': WalletOption\n  },\n  props: {\n    networkAndAddressOpen: {\n      type: Function,\n      default: function() {}\n    },\n    hardwareWalletOpen: {\n      type: Function,\n      default: function() {}\n    },\n    ledgerAppOpen: {\n      type: Function,\n      default: function() {}\n    },\n    openFinney: {\n      type: Function,\n      default: function() {}\n    },\n    openXwallet: {\n      type: Function,\n      default: function() {}\n    }\n  },\n  data() {\n    return {\n      selected: '',\n      mayNotBeAttached: false,\n      isU2FSupported: false,\n      items: [\n        {\n          name: LEDGER_TYPE,\n          imgPath: ledger,\n          text: 'Ledger',\n          disabled: false,\n          msg: '',\n          link: 'https://www.ledger.com?r=fa4b'\n        },\n        {\n          name: 'finney',\n          imgPath: finney,\n          text: 'FINNEY',\n          disabled: false,\n          msg: '',\n          link:\n            'http://shop.sirinlabs.com?rfsn=2397639.54fdf&utm_source=refersion&utm_medium=affiliate&utm_campaign=2397639.54fdf'\n        },\n        {\n          name: BITBOX_TYPE,\n          imgPath: bitbox,\n          text: 'BitBox',\n          disabled: false,\n          msg: '',\n          link: 'https://shiftcrypto.ch/?ref=mew'\n        },\n        {\n          name: XWALLET_TYPE,\n          imgPath: xwallet,\n          text: 'XWallet',\n          disabled: false,\n          msg: '',\n          link: 'https://xwallet.pundix.com'\n        },\n        {\n          name: TREZOR_TYPE,\n          imgPath: trezor,\n          text: 'Trezor',\n          disabled:\n            platform.name.toLowerCase() !== 'chrome' &&\n            platform.name.toLowerCase() !== 'firefox',\n          msg:\n            platform.name.toLowerCase() !== 'chrome' &&\n            platform.name.toLowerCase() !== 'firefox'\n              ? 'Browser not supported by Trezor'\n              : '',\n          link: 'https://trezor.io/?offer_id=12&aff_id=2029'\n        },\n        {\n          name: SECALOT_TYPE,\n          imgPath: secalot,\n          text: 'Secalot',\n          disabled: false,\n          msg: '',\n          link: 'https://www.secalot.com/'\n        },\n        {\n          name: KEEPKEY_TYPE,\n          imgPath: keepkey,\n          text: 'KeepKey',\n          disabled: false,\n          msg: '',\n          link: 'http://lddy.no/a4im'\n        }\n      ]\n    };\n  },\n  mounted() {\n    isSupported().then(res => {\n      this.items.forEach(item => {\n        const u2fhw = [SECALOT_TYPE, LEDGER_TYPE, BITBOX_TYPE];\n        const inMobile = [SECALOT_TYPE, KEEPKEY_TYPE];\n        const webUsb = [KEEPKEY_TYPE, LEDGER_TYPE];\n\n        if (webUsb.includes(item.name)) {\n          const disable =\n            window.location.protocol !== 'https:' ||\n            !window ||\n            !window.navigator ||\n            !window.navigator.usb;\n          item.disabled = disable;\n          item.msg = disable ? this.$t('errorsGlobal.browserNonWebUsb') : '';\n        }\n        if (u2fhw.includes(item.name)) {\n          item.disabled = !res;\n          item.msg = !res ? this.$t('errorsGlobal.browserNonU2f') : '';\n        }\n        if (this.isMobile()) {\n          const disable = !inMobile.includes(item.name);\n          item.disabled = disable;\n          item.msg = disable ? this.$t('errorsGlobal.noMobileSupport') : '';\n        }\n      });\n    });\n    this.$refs.hardware.$on('hidden', () => {\n      this.selected = '';\n    });\n  },\n  methods: {\n    isMobile() {\n      return (\n        typeof window.orientation !== 'undefined' ||\n        navigator.userAgent.indexOf('IEMobile') !== -1\n      );\n    },\n    continueAccess() {\n      const showPluggedInReminder = setTimeout(() => {\n        this.mayNotBeAttached = true;\n      }, 1000);\n      switch (this.selected) {\n        case LEDGER_TYPE:\n          this.$refs.hardware.hide();\n          this.ledgerAppOpen();\n          break;\n        case TREZOR_TYPE:\n          TrezorWallet()\n            .then(_newWallet => {\n              clearTimeout(showPluggedInReminder);\n              this.$emit('hardwareWalletOpen', _newWallet);\n            })\n            .catch(e => {\n              this.mayNotBeAttached = true;\n              TrezorWallet.errorHandler(e);\n            });\n          break;\n        case BITBOX_TYPE:\n          this.$emit('hardwareRequiresPassword', {\n            walletConstructor: BitBoxWallet,\n            hardwareBrand: 'BitBox'\n          });\n          break;\n        case SECALOT_TYPE:\n          this.$emit('hardwareRequiresPassword', {\n            walletConstructor: SecalotWallet,\n            hardwareBrand: 'Secalot'\n          });\n          break;\n        case KEEPKEY_TYPE:\n          KeepkeyWallet(false, this.$eventHub)\n            .then(_newWallet => {\n              this.$emit('hardwareWalletOpen', _newWallet);\n            })\n            .catch(e => {\n              this.mayNotBeAttached = true;\n              KeepkeyWallet.errorHandler(e);\n            });\n          break;\n        case 'finney':\n          this.openFinney();\n          this.$refs.hardware.hide();\n          break;\n        case XWALLET_TYPE:\n          this.openXwallet();\n          this.$refs.hardware.hide();\n          break;\n        default:\n          Toast.responseHandler(\n            new Error('No switch address for given account.'),\n            Toast.ERROR\n          );\n          break;\n      }\n      this.$refs.hardware.hide();\n    },\n    updateSelected(ref) {\n      if (this.selected !== ref) {\n        this.selected = ref;\n      } else {\n        this.selected = '';\n      }\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'HardwareModal-desktop.scss';\n@import 'HardwareModal-tablet.scss';\n@import 'HardwareModal-mobile.scss';\n</style>\n"]}]}