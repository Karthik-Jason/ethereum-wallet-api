{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/containers/ConfirmationContainer/components/ConfirmCollectionModal/ConfirmCollectionModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/containers/ConfirmationContainer/components/ConfirmCollectionModal/ConfirmCollectionModal.vue","mtime":1574677083790},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/thread-loader/dist/cjs.js","mtime":1574664277654},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js","mtime":1574664275010},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js","mtime":1574664277774}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport AddressBlock from '../AddressBlock';\nimport { mapState } from 'vuex';\n\nexport default {\n  components: {\n    'address-block': AddressBlock\n  },\n  props: {\n    unSignedArray: {\n      type: Array,\n      default: () => []\n    },\n    signedArray: {\n      type: Array,\n      default: () => []\n    },\n    sendBatchTransactions: {\n      type: Function,\n      default: () => {}\n    },\n    sending: {\n      type: Boolean,\n      default: false\n    },\n    isHardwareWallet: {\n      type: Boolean,\n      default: false\n    }\n  },\n  computed: {\n    ...mapState(['web3', 'network', 'account']),\n    buttonText() {\n      if (!this.allSigned && this.isHardwareWallet) {\n        return this.$t('confirmation.approveOnDevice');\n      }\n      return this.$t('common.confirmAndSend');\n    },\n    allSigned() {\n      if (this.signedArray.length === 0) return false;\n      for (let i = 0; i < this.signedArray.length; i++) {\n        if (\n          this.signedArray[i].rawTransaction === '' ||\n          this.signedArray[i].rawTransaction === undefined\n        )\n          return false;\n      }\n      return true;\n    },\n    txTotal() {\n      if (this.unSignedArray.length > 0) {\n        const BN = this.web3.utils.BN;\n        let totalGas = new BN();\n        this.unSignedArray.forEach(item => {\n          totalGas = totalGas.add(\n            new BN(item.gasPrice.replace('0x', ''), 'hex').mul(\n              new BN(item.gas.replace('0x', ''), 'hex')\n            )\n          );\n        });\n        return this.web3.utils.fromWei(totalGas.toString(), 'ether').toString();\n      }\n      return 0;\n    }\n  }\n};\n",{"version":3,"sources":["ConfirmCollectionModal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+JA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ConfirmCollectionModal.vue","sourceRoot":"src/containers/ConfirmationContainer/components/ConfirmCollectionModal","sourcesContent":["<template>\n  <div>\n    <b-modal\n      ref=\"confirmCollection\"\n      :title=\"`Confirmation (Total of ${unSignedArray.length} transactions)`\"\n      hide-footer\n      centered\n      class=\"bootstrap-modal-wide confirmation-modal nopadding\"\n      static\n      lazy\n    >\n      <div class=\"modal-content\">\n        <div class=\"network-info-container\">\n          <p>\n            <span>{{ $t('interface.network') }}</span>\n            {{ network.type.name }} by {{ network.service }}\n          </p>\n          <div>\n            <div class=\"line\" />\n          </div>\n          <p>\n            <span>{{ $t('confirmation.txTotal') }}:</span>\n            {{ txTotal }}\n            {{ network.type.currencyName }}\n          </p>\n        </div>\n        <div class=\"modal-content-body\">\n          <div\n            v-for=\"(item, idx) in unSignedArray\"\n            :key=\"item.to + idx + item.value\"\n            class=\"item\"\n          >\n            <div v-b-toggle.prevent=\"`accordion${idx}`\" class=\"header\">\n              <div class=\"header-item\">\n                <img :src=\"network.type.icon ? network.type.icon : ''\" alt />\n                <div>\n                  <p>\n                    - {{ web3.utils.hexToNumberString(item.value) }}\n                    <span>\n                      {{ network.type.currencyName }}\n                    </span>\n                  </p>\n                  <div>\n                    <span>{{ $t('common.from') }}</span>\n                    {{ account.address | concatAddr }}\n                  </div>\n                </div>\n              </div>\n              <div\n                v-show=\"item.to !== '' && item.to !== undefined\"\n                class=\"direction\"\n              >\n                <img alt src=\"~@/assets/images/icons/right-arrow.svg\" />\n              </div>\n              <div class=\"header-item\">\n                <img :src=\"network.type.icon ? network.type.icon : ''\" alt />\n                <div>\n                  <p>\n                    + {{ web3.utils.hexToNumberString(item.value) }}\n                    <span>\n                      {{ network.type.currencyName }}\n                    </span>\n                  </p>\n                  <div>\n                    <span>{{ $t('common.to') }}</span>\n                    {{ item.to | concatAddr }}\n                  </div>\n                </div>\n              </div>\n              <div class=\"trigger-container\">\n                <i class=\"fa fa-lg fa-angle-up\" />\n                <i class=\"fa fa-lg fa-angle-down\" />\n              </div>\n            </div>\n            <b-collapse :id=\"`accordion${idx}`\" class=\"body\">\n              <div class=\"body-item\">\n                <span class=\"item-title\">{{ $t('common.gasLimit') }}t</span>\n                <span>{{ web3.utils.hexToNumberString(item.gas) }}</span>\n              </div>\n              <div class=\"body-item\">\n                <span class=\"item-title\">{{ $t('common.gasPrice') }}</span>\n                <span>\n                  {{ web3.utils.fromWei(item.gasPrice, 'gwei') }}\n                  Gwei\n                </span>\n              </div>\n              <div class=\"body-item\">\n                <span class=\"item-title\">Nonce</span>\n                <span>{{ web3.utils.hexToNumberString(item.nonce) }}</span>\n              </div>\n              <div class=\"body-item\">\n                <span class=\"item-title\">{{ $t('common.data') }}</span>\n                <span class=\"data-string\">{{ item.input || item.data }}</span>\n              </div>\n            </b-collapse>\n          </div>\n        </div>\n      </div>\n      <div class=\"submit-button-container\">\n        <div class=\"flex-center-align\">\n          <div class=\"button-with-helper\">\n            <div\n              v-show=\"!sending\"\n              ref=\"ConfirmAndSendButton\"\n              :class=\"[\n                allSigned ? '' : 'disabled',\n                'submit-button large-round-button-green-filled clickable'\n              ]\"\n              @click=\"sendBatchTransactions\"\n            >\n              {{ buttonText }}\n            </div>\n            <div\n              v-show=\"sending\"\n              class=\"submit-button large-round-button-green-filled clickable disabled\"\n            >\n              {{ $t('common.waitingForHash') }}\n              <i class=\"fa fa-spinner fa-spin\" />\n            </div>\n            <div class=\"tooltip-box-2\">\n              <b-btn id=\"exPopover9\">\n                <img\n                  alt\n                  class=\"icon\"\n                  src=\"~@/assets/images/icons/qr-code.svg\"\n                />\n              </b-btn>\n              <b-popover\n                target=\"exPopover9\"\n                triggers=\"hover focus\"\n                placement=\"top\"\n              >\n                <div class=\"qrcode-contents\">\n                  <p class=\"qrcode-title\">\n                    {{ $t('confirmation.scanQrCode') }}\n                  </p>\n                  <div class=\"qrcode-block\">\n                    <qrcode :options=\"{ size: 100 }\" value=\"Hello, World!\" />\n                  </div>\n                  <p class=\"qrcode-helper\">What is that?</p>\n                </div>\n              </b-popover>\n            </div>\n          </div>\n        </div>\n        <!-- <p class=\"learn-more\">\n          Have any issues?\n          <a\n            href=\"https:/kb.myetherwallet.com\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            >Learn more</a\n          >\n        </p> -->\n      </div>\n    </b-modal>\n  </div>\n</template>\n<script>\nimport AddressBlock from '../AddressBlock';\nimport { mapState } from 'vuex';\n\nexport default {\n  components: {\n    'address-block': AddressBlock\n  },\n  props: {\n    unSignedArray: {\n      type: Array,\n      default: () => []\n    },\n    signedArray: {\n      type: Array,\n      default: () => []\n    },\n    sendBatchTransactions: {\n      type: Function,\n      default: () => {}\n    },\n    sending: {\n      type: Boolean,\n      default: false\n    },\n    isHardwareWallet: {\n      type: Boolean,\n      default: false\n    }\n  },\n  computed: {\n    ...mapState(['web3', 'network', 'account']),\n    buttonText() {\n      if (!this.allSigned && this.isHardwareWallet) {\n        return this.$t('confirmation.approveOnDevice');\n      }\n      return this.$t('common.confirmAndSend');\n    },\n    allSigned() {\n      if (this.signedArray.length === 0) return false;\n      for (let i = 0; i < this.signedArray.length; i++) {\n        if (\n          this.signedArray[i].rawTransaction === '' ||\n          this.signedArray[i].rawTransaction === undefined\n        )\n          return false;\n      }\n      return true;\n    },\n    txTotal() {\n      if (this.unSignedArray.length > 0) {\n        const BN = this.web3.utils.BN;\n        let totalGas = new BN();\n        this.unSignedArray.forEach(item => {\n          totalGas = totalGas.add(\n            new BN(item.gasPrice.replace('0x', ''), 'hex').mul(\n              new BN(item.gas.replace('0x', ''), 'hex')\n            )\n          );\n        });\n        return this.web3.utils.fromWei(totalGas.toString(), 'ether').toString();\n      }\n      return 0;\n    }\n  }\n};\n</script>\n<style lang=\"scss\" scoped>\n@import 'ConfirmCollectionModal.scss';\n</style>\n"]}]}