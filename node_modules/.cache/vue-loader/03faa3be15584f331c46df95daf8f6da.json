{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/layouts/AccessWalletLayout/components/SoftwareModal/SoftwareModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/layouts/AccessWalletLayout/components/SoftwareModal/SoftwareModal.vue","mtime":1573477611668},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport CustomerSupport from '@/components/CustomerSupport';\nimport WarningMessage from '@/components/WarningMessage';\nimport byJsonImgHov from '@/assets/images/icons/button-json-hover.svg';\nimport byMnemImgHov from '@/assets/images/icons/button-mnemonic-hover.svg';\nimport privKeyImgHov from '@/assets/images/icons/button-key-hover.svg';\nimport WalletOption from '../WalletOption';\nimport StandardButton from '@/components/Buttons/StandardButton';\nimport { Toast } from '@/helpers';\n\nexport default {\n  components: {\n    'customer-support': CustomerSupport,\n    'wallet-option': WalletOption,\n    'warning-message': WarningMessage,\n    'standard-button': StandardButton\n  },\n  props: {\n    value: {\n      type: String,\n      default: ''\n    },\n    openPassword: {\n      type: Function,\n      default: function() {}\n    },\n    openMnemonicPhraseInput: {\n      type: Function,\n      default: function() {}\n    },\n    openPrivateKeyInput: {\n      type: Function,\n      default: function() {}\n    }\n  },\n  data() {\n    return {\n      continueButtonOptions: {\n        title: this.$t('common.continue'),\n        buttonStyle: 'green',\n        noMinWidth: true,\n        fullWidth: true\n      },\n      file: '',\n      selected: '',\n      items: [\n        {\n          name: 'byJson',\n          imgHoverPath: byJsonImgHov,\n          text: this.$t('common.jsonF')\n        },\n        {\n          name: 'byMnem',\n          imgHoverPath: byMnemImgHov,\n          text: this.$t('common.mnemonicP')\n        },\n        {\n          name: 'byPriv',\n          imgHoverPath: privKeyImgHov,\n          text: this.$t('common.privKey')\n        }\n      ]\n    };\n  },\n  methods: {\n    uploadClick() {\n      const jsonInput = this.$refs.jsonInput;\n      jsonInput.value = '';\n      jsonInput.click();\n    },\n    continueAccess() {\n      if (this.selected === 'byJson') {\n        this.uploadClick();\n      } else if (this.selected === 'byPriv') {\n        this.openPrivateKeyInput();\n      } else if (this.selected === 'byMnem') {\n        this.openMnemonicPhraseInput();\n      }\n    },\n    updateSelected(ref) {\n      if (this.selected !== ref) {\n        this.selected = ref;\n      } else {\n        this.selected = '';\n      }\n    },\n    select(ref) {\n      if (this.selected !== ref) {\n        this.selected = ref;\n      } else {\n        this.selected = '';\n      }\n    },\n    uploadFile(e) {\n      const self = this;\n      const reader = new FileReader();\n      reader.onloadend = function(evt) {\n        try {\n          self.$emit('file', JSON.parse(evt.target.result));\n          self.file = JSON.parse(evt.target.result);\n        } catch (e) {\n          Toast.responseHandler(e, Toast.ERROR);\n        }\n      };\n      reader.readAsBinaryString(e.target.files[0]);\n    }\n  }\n};\n",{"version":3,"sources":["SoftwareModal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"SoftwareModal.vue","sourceRoot":"src/layouts/AccessWalletLayout/components/SoftwareModal","sourcesContent":["<template>\n  <b-modal\n    ref=\"software\"\n    :title=\"$t('accessWallet.accessBySoftware')\"\n    hide-footer\n    class=\"bootstrap-modal nopadding modal-software\"\n    centered\n    static\n    lazy\n  >\n    <div class=\"warning\">\n      <warning-message />\n    </div>\n    <div class=\"content-block\">\n      <div class=\"d-block content-container text-center\">\n        <div class=\"button-options\">\n          <wallet-option\n            v-for=\"(item, idx) in items\"\n            :key=\"item.name + idx\"\n            :selected=\"selected === item.name\"\n            :hover-icon=\"item.imgHoverPath\"\n            :text=\"item.text\"\n            :name=\"item.name\"\n            @updateSelected=\"updateSelected\"\n          />\n        </div>\n        <div class=\"hardware-link\">\n          <p>\n            {{ $t('accessWallet.buyHardwareWallet') }}\n          </p>\n          <router-link to=\"/hardware-wallet-affiliates\">{{\n            $t('accessWallet.buyHardwareWalletLink')\n          }}</router-link>\n        </div>\n        <input\n          ref=\"jsonInput\"\n          type=\"file\"\n          name=\"file\"\n          style=\"display: none\"\n          @change=\"uploadFile\"\n        />\n      </div>\n      <div class=\"button-container-block\">\n        <standard-button\n          :button-disabled=\"selected !== '' ? false : true\"\n          :options=\"continueButtonOptions\"\n          @click.native=\"continueAccess\"\n        />\n      </div>\n      <customer-support />\n    </div>\n  </b-modal>\n</template>\n\n<script>\nimport CustomerSupport from '@/components/CustomerSupport';\nimport WarningMessage from '@/components/WarningMessage';\nimport byJsonImgHov from '@/assets/images/icons/button-json-hover.svg';\nimport byMnemImgHov from '@/assets/images/icons/button-mnemonic-hover.svg';\nimport privKeyImgHov from '@/assets/images/icons/button-key-hover.svg';\nimport WalletOption from '../WalletOption';\nimport StandardButton from '@/components/Buttons/StandardButton';\nimport { Toast } from '@/helpers';\n\nexport default {\n  components: {\n    'customer-support': CustomerSupport,\n    'wallet-option': WalletOption,\n    'warning-message': WarningMessage,\n    'standard-button': StandardButton\n  },\n  props: {\n    value: {\n      type: String,\n      default: ''\n    },\n    openPassword: {\n      type: Function,\n      default: function() {}\n    },\n    openMnemonicPhraseInput: {\n      type: Function,\n      default: function() {}\n    },\n    openPrivateKeyInput: {\n      type: Function,\n      default: function() {}\n    }\n  },\n  data() {\n    return {\n      continueButtonOptions: {\n        title: this.$t('common.continue'),\n        buttonStyle: 'green',\n        noMinWidth: true,\n        fullWidth: true\n      },\n      file: '',\n      selected: '',\n      items: [\n        {\n          name: 'byJson',\n          imgHoverPath: byJsonImgHov,\n          text: this.$t('common.jsonF')\n        },\n        {\n          name: 'byMnem',\n          imgHoverPath: byMnemImgHov,\n          text: this.$t('common.mnemonicP')\n        },\n        {\n          name: 'byPriv',\n          imgHoverPath: privKeyImgHov,\n          text: this.$t('common.privKey')\n        }\n      ]\n    };\n  },\n  methods: {\n    uploadClick() {\n      const jsonInput = this.$refs.jsonInput;\n      jsonInput.value = '';\n      jsonInput.click();\n    },\n    continueAccess() {\n      if (this.selected === 'byJson') {\n        this.uploadClick();\n      } else if (this.selected === 'byPriv') {\n        this.openPrivateKeyInput();\n      } else if (this.selected === 'byMnem') {\n        this.openMnemonicPhraseInput();\n      }\n    },\n    updateSelected(ref) {\n      if (this.selected !== ref) {\n        this.selected = ref;\n      } else {\n        this.selected = '';\n      }\n    },\n    select(ref) {\n      if (this.selected !== ref) {\n        this.selected = ref;\n      } else {\n        this.selected = '';\n      }\n    },\n    uploadFile(e) {\n      const self = this;\n      const reader = new FileReader();\n      reader.onloadend = function(evt) {\n        try {\n          self.$emit('file', JSON.parse(evt.target.result));\n          self.file = JSON.parse(evt.target.result);\n        } catch (e) {\n          Toast.responseHandler(e, Toast.ERROR);\n        }\n      };\n      reader.readAsBinaryString(e.target.files[0]);\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'SoftwareModal-desktop.scss';\n@import 'SoftwareModal-tablet.scss';\n@import 'SoftwareModal-mobile.scss';\n</style>\n"]}]}