{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/layouts/InterfaceLayout/InterfaceLayout.vue?vue&type=template&id=fa149530&scoped=true&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/layouts/InterfaceLayout/InterfaceLayout.vue","mtime":1573477611928},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    { staticClass: \"interface-layout\" },\n    [\n      _c(\"wallet-password-modal\"),\n      _c(\"enter-pin-number-modal\"),\n      _c(\"ledger-app-modal\", {\n        ref: \"ledgerAppModal\",\n        attrs: { networks: _vm.Networks },\n        on: { hardwareWalletOpen: _vm.toggleNetworkAddrModal }\n      }),\n      _c(\"mnemonic-modal\", {\n        ref: \"mnemonicPhraseModal\",\n        attrs: { \"hardware-wallet-open\": _vm.toggleNetworkAddrModal }\n      }),\n      _c(\"mnemonic-password-modal\", {\n        ref: \"mnemonicPhrasePassword\",\n        attrs: {\n          \"hardware-wallet-open\": _vm.toggleNetworkAddrModal,\n          phrase: _vm.phrase\n        }\n      }),\n      _c(\"network-and-address-modal\", {\n        ref: \"networkAddress\",\n        attrs: { \"hardware-wallet\": _vm.hwInstance }\n      }),\n      _c(\"hardware-password-modal\", {\n        ref: \"hardwareModal\",\n        attrs: {\n          \"wallet-constructor\": _vm.walletConstructor,\n          \"hardware-brand\": _vm.hardwareBrand\n        },\n        on: { hardwareWalletOpen: _vm.toggleNetworkAddrModal }\n      }),\n      _c(\"print-modal\", {\n        ref: \"printModal\",\n        attrs: { \"priv-key\": !_vm.wallet, address: _vm.account.address }\n      }),\n      _c(\"address-qrcode-modal\", {\n        ref: \"addressQrcodeModal\",\n        attrs: { address: _vm.account.address }\n      }),\n      _c(\n        \"div\",\n        { staticClass: \"mobile-interface-address-block\" },\n        [\n          _c(\"mobile-interface-address\", {\n            attrs: {\n              address: _vm.address,\n              print: _vm.print,\n              \"switch-addr\": _vm.switchAddress\n            }\n          })\n        ],\n        1\n      ),\n      _c(\"div\", { staticClass: \"wrap\" }, [\n        _c(\"div\", { staticClass: \"sidemenu\" }, [\n          _c(\"div\", {\n            staticClass: \"side-nav-background\",\n            class: _vm.isSidemenuOpen && \"side-nav-open\",\n            on: {\n              click: function($event) {\n                _vm.toggleSideMenu\n              }\n            }\n          }),\n          _c(\n            \"div\",\n            {\n              staticClass: \"side-nav\",\n              class: _vm.isSidemenuOpen && \"side-nav-open\"\n            },\n            [_c(\"interface-side-menu\")],\n            1\n          )\n        ]),\n        _c(\"div\", { staticClass: \"contents\" }, [\n          _c(\n            \"div\",\n            { staticClass: \"tx-contents\" },\n            [\n              _c(\n                \"div\",\n                { staticClass: \"content-container mobile-hide\" },\n                [\n                  Object.keys(_vm.wallet).length > 1\n                    ? _c(\"interface-address\", {\n                        attrs: {\n                          address: _vm.address,\n                          print: _vm.print,\n                          \"switch-addr\": _vm.switchAddress,\n                          \"display-addr\": _vm.wallet.displayAddress,\n                          qrcode: _vm.openAddressQrcode\n                        }\n                      })\n                    : _vm._e()\n                ],\n                1\n              ),\n              _c(\n                \"div\",\n                { staticClass: \"content-container mobile-hide\" },\n                [\n                  _c(\"interface-balance\", {\n                    attrs: {\n                      balance: _vm.balance,\n                      \"get-balance\": _vm.getBalance\n                    }\n                  })\n                ],\n                1\n              ),\n              _c(\n                \"div\",\n                { staticClass: \"content-container mobile-hide\" },\n                [\n                  _c(\"interface-network\", {\n                    attrs: { \"block-number\": _vm.blockNumber }\n                  })\n                ],\n                1\n              ),\n              _c(\"router-view\", {\n                attrs: {\n                  \"tokens-with-balance\": _vm.tokensWithBalance,\n                  \"get-balance\": _vm.getBalance,\n                  tokens: _vm.tokens,\n                  \"highest-gas\": _vm.highestGas,\n                  nonce: _vm.nonce,\n                  value: _vm.value,\n                  data: _vm.data,\n                  to: _vm.to,\n                  gaslimit: _vm.gaslimit,\n                  gas: _vm.gas,\n                  tokensymbol: _vm.tokensymbol,\n                  \"is-prefilled\": _vm.prefilled,\n                  \"clear-prefilled\": _vm.clearPrefilled,\n                  \"check-prefilled\": _vm.checkPrefilled\n                }\n              }),\n              _c(\n                \"div\",\n                { staticClass: \"tokens\" },\n                [\n                  _c(\"interface-tokens\", {\n                    attrs: {\n                      \"fetch-tokens\": _vm.setTokens,\n                      \"get-token-balance\": _vm.getTokenBalance,\n                      tokens: _vm.tokens,\n                      \"received-tokens\": _vm.receivedTokens,\n                      \"reset-token-selection\": _vm.setTokensWithBalance\n                    }\n                  })\n                ],\n                1\n              )\n            ],\n            1\n          )\n        ])\n      ])\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}