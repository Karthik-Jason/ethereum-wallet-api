{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/containers/NotificationsContainer/components/NotificationTypes/SwapDetails/SwapDetails.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/containers/NotificationsContainer/components/NotificationTypes/SwapDetails/SwapDetails.vue","mtime":1574664278274},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/thread-loader/dist/cjs.js","mtime":1574664277654},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js","mtime":1574664275010},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js","mtime":1574664277774}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapState } from 'vuex';\n\nimport '@/assets/images/currency/coins/asFont/cryptocoins.css';\nimport '@/assets/images/currency/coins/asFont/cryptocoins-colors.css';\nimport Arrow from '@/assets/images/etc/single-arrow.svg';\n\nimport { providerMap, providerNames, fiat, EthereumTokens } from '@/partners';\n\nimport {\n  swapOnlyStatuses,\n  notificationStatuses,\n  type as notificationType\n} from '@/helpers/notificationFormatters';\n\nexport default {\n  filters: {\n    concatAddress(value) {\n      if (!value) return '';\n      return `${value.substr(0, 7)}...${value.substr(value.length - 7)}`;\n    }\n  },\n  props: {\n    shown: {\n      type: Boolean,\n      default: false\n    },\n    notice: {\n      type: Object,\n      default: function() {\n        return {};\n      }\n    },\n    convertToGwei: {\n      type: Function,\n      default: function() {}\n    },\n    convertToEth: {\n      type: Function,\n      default: function() {}\n    },\n    getFiatValue: {\n      type: Function,\n      default: function() {}\n    },\n    dateString: {\n      type: Function,\n      default: function() {}\n    },\n    timeString: {\n      type: Function,\n      default: function() {}\n    },\n    errorMessageString: {\n      type: Function,\n      default: function() {}\n    },\n    hashLink: {\n      type: Function,\n      default: function() {}\n    },\n    addressLink: {\n      type: Function,\n      default: function() {}\n    },\n    processStatus: {\n      type: Function,\n      default: function() {}\n    },\n    childUpdateNotification: {\n      type: Function,\n      default: function() {}\n    }\n  },\n  data() {\n    return {\n      providerNames: providerNames,\n      timerInterval: null,\n      statusInterval: null,\n      arrowImage: Arrow,\n      timeRemaining: 0,\n      unreadCount: 0,\n      fiatCurrencies: fiat.map(entry => entry.symbol),\n      notificationType: notificationType\n    };\n  },\n  computed: {\n    ...mapState(['web3', 'network', 'notifications', 'wallet', 'gasPrice']),\n    errorMessage() {\n      return this.errorMessageString(this.notice);\n    },\n    isError() {\n      return this.notice.body.error;\n    },\n    details() {\n      return this.notice.body;\n    },\n    txStatus() {\n      return this.processStatus(this.notice.swapStatus);\n    },\n    parseTimeRemaining() {\n      const seconds = Math.floor(this.timeRemaining % 60);\n      const minutes = Math.floor((this.timeRemaining / 60) % 60);\n      return seconds >= 10 ? `${minutes}:${seconds}` : `${minutes}:0${seconds}`;\n    },\n    isEthereum() {\n      return EthereumTokens[this.notice.body.fromCurrency] !== undefined;\n    },\n    isToOtherChain() {\n      return EthereumTokens[this.notice.body.toCurrency] === undefined;\n    },\n    isFromOtherChain() {\n      return EthereumTokens[this.notice.body.fromCurrency] === undefined;\n    },\n    isFromFiat() {\n      return this.fiatCurrencies.includes(this.notice.body.fromCurrency);\n    },\n    showId() {\n      return (\n        this.notice.body.provider === providerNames.bity ||\n        this.notice.body.provider === providerNames.changelly\n      );\n    }\n  },\n  beforeDestroy() {\n    if (this.timerInterval !== null) {\n      clearInterval(this.timerInterval);\n    }\n\n    if (this.statusInterval !== null) {\n      clearInterval(this.statusInterval);\n    }\n  },\n  mounted() {\n    this.timeRemaining = this.notice.body.timeRemaining;\n    this.provider = providerMap.get(this.notice.body.provider);\n    this.currentStatus = this.notice.swapStatus;\n    this.timeUpdater();\n    this.statusUpdater();\n  },\n  methods: {\n    emitShowDetails() {\n      this.$emit('showDetails', ['swap', this.notice]);\n    },\n    shouldCheckStatus() {\n      return [\n        swapOnlyStatuses.NEW,\n        swapOnlyStatuses.SENT,\n        notificationStatuses.PENDING\n      ].includes(this.notice.swapStatus);\n    },\n    statusUpdater() {\n      let updating = false;\n      const getStatus = async () => {\n        if (!updating) {\n          updating = true;\n          const newStatus = await this.provider.getOrderStatus(\n            this.notice.body,\n            this.network.type.name\n          );\n          if (typeof newStatus === 'undefined') return;\n          if (this.currentStatus !== newStatus) {\n            this.currentStatus = newStatus;\n            if (swapOnlyStatuses[newStatus]) {\n              this.notice.swapStatus = newStatus;\n            } else {\n              this.notice.swapStatus = newStatus;\n              this.notice.status = newStatus;\n            }\n            this.childUpdateNotification(this.notice);\n          }\n\n          if (!this.shouldCheckStatus()) {\n            clearInterval(this.statusInterval);\n          }\n          updating = false;\n        }\n      };\n\n      if (this.shouldCheckStatus()) {\n        getStatus();\n        this.statusInterval = setInterval(() => {\n          getStatus();\n          if (!this.shouldCheckStatus()) {\n            clearInterval(this.statusInterval);\n          }\n        }, 10000);\n      }\n    },\n    timeUpdater() {\n      const updateTime = () => {\n        this.timeRemaining =\n          this.notice.body.validFor -\n          parseInt(\n            (new Date().getTime() -\n              new Date(this.notice.body.createdAt).getTime()) /\n              1000\n          );\n        if (\n          (this.notice.swapStatus === swapOnlyStatuses.NEW ||\n            this.currentStatus === swapOnlyStatuses.NEW) &&\n          this.timeRemaining <= 0\n        ) {\n          this.notice.swapStatus = swapOnlyStatuses.CANCELLED;\n          this.notice.status = notificationStatuses.FAILED;\n          this.notice.body.errorMessage =\n            'Swap window timeout. Swap Cancelled.';\n          this.timeRemaining = -1;\n        }\n        this.notice.body.timeRemaining = +this.timeRemaining;\n        this.childUpdateNotification(this.notice);\n        if (+this.timeRemaining <= 0) {\n          clearInterval(this.timerInterval);\n        }\n      };\n\n      if (this.shouldCheckStatus() && this.notice.body.timeRemaining > 0) {\n        if (this.timeRemaining > 0) {\n          updateTime();\n          this.timerInterval = setInterval(() => {\n            updateTime();\n            if (this.timeRemaining <= 0) {\n              clearInterval(this.timerInterval);\n            }\n          }, 1000);\n        }\n      }\n    }\n  }\n};\n",{"version":3,"sources":["SwapDetails.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgfile":"SwapDetails.vue","sourceRoot":"src/containers/NotificationsContainer/components/NotificationTypes/SwapDetails","sourcesContent":["<template lang=\"html\">\n  <div>\n    <div class=\"notification-header\">{{ $t('header.swapDetail') }}</div>\n    <div class=\"notification-content\">\n      <ul>\n        <li>\n          <!-- Change to use provider logo-->\n          <p>{{ $t('header.provider') }}:</p>\n          <div class=\"detail-data\">\n            <p>\n              {{ details.provider }}\n            </p>\n          </div>\n        </li>\n        <li>\n          <ul>\n            <li>\n              <p class=\"icon from-swap-icon\">\n                <i :class=\"['cc', details.fromCurrency, 'cc-icon']\"></i>\n              </p>\n            </li>\n            <li>\n              <p class=\"from-swap-text\">\n                {{ details.fromValue }} {{ details.fromCurrency }}\n              </p>\n              <p v-if=\"!isFromOtherChain\" class=\"address\">\n                {{ details.from | concatAddress }}\n              </p>\n            </li>\n            <li>\n              <p class=\"swap-right-arrow\"><img :src=\"arrowImage\" alt /></p>\n            </li>\n            <li>\n              <p class=\"icon to-swap-icon\">\n                <i :class=\"['cc', details.toCurrency, 'cc-icon']\"></i>\n              </p>\n            </li>\n            <li>\n              <p class=\"to-swap-text\">\n                {{ details.toValue }} {{ details.toCurrency }}\n              </p>\n              <p class=\"address\">{{ details.to | concatAddress }}</p>\n            </li>\n          </ul>\n        </li>\n        <li>\n          <p>{{ $t('header.time') }}:</p>\n          <div class=\"time-date\">\n            <p>{{ timeString(notice) }}</p>\n            <p>{{ dateString(notice) }}</p>\n          </div>\n        </li>\n        <li\n          v-if=\"\n            notice.type === notificationType.SWAP_ORDER && timeRemaining > 0\n          \"\n        >\n          <p>{{ $t('header.timeRemaining') }}:</p>\n          <div class=\"detail-data\">\n            <p>{{ parseTimeRemaining }}</p>\n          </div>\n        </li>\n        <li class=\"notification-type-status\">\n          <p>{{ $t('header.status') }}:</p>\n          <div class=\"detail-data\">\n            <p :class=\"['status', txStatus.class]\">({{ txStatus.text }})</p>\n          </div>\n        </li>\n        <li v-if=\"isEthereum\">\n          <p>{{ $t('common.toAddress') }}:</p>\n          <div class=\"detail-data\">\n            <p>\n              <a\n                :href=\"addressLink(details.to, details.toCurrency)\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                {{ details.to }}\n              </a>\n            </p>\n          </div>\n        </li>\n        <li v-if=\"isFromOtherChain\">\n          <p>\n            {{\n              $t('header.providerDepositAddress', {\n                provider: notice.body.provider\n              })\n            }}:\n          </p>\n          <div class=\"detail-data\">\n            <p>\n              <a\n                :href=\"\n                  addressLink(details.providerAddress, details.fromCurrency)\n                \"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                {{ details.providerAddress }}\n              </a>\n            </p>\n          </div>\n        </li>\n        <li v-if=\"showId && details.orderId\">\n          <p>\n            {{\n              $t('header.orderID', {\n                provider: notice.body.provider\n              })\n            }}:\n          </p>\n          <div class=\"detail-data\">\n            <p>\n              {{ details.orderId }}\n            </p>\n          </div>\n        </li>\n        <li v-if=\"notice.body.gasUsed && isEthereum\">\n          <p>{{ $t('common.txFee') }}:</p>\n          <div class=\"detail-data\">\n            <p>\n              {{ convertToEth(details.gasPrice * details.gasUsed) }} ETH (${{\n                getFiatValue(details.gasPrice * details.gasUsed)\n              }})\n            </p>\n          </div>\n        </li>\n        <li v-if=\"isEthereum\">\n          <p>{{ $t('header.maxTxFee') }}:</p>\n          <div class=\"detail-data\">\n            <p>\n              {{ convertToEth(details.gasPrice * details.gasLimit) }} ETH (${{\n                getFiatValue(details.gasPrice * details.gasLimit)\n              }})\n            </p>\n          </div>\n        </li>\n        <li v-if=\"isEthereum\">\n          <p>{{ $t('common.gasPrice') }}:</p>\n          <div class=\"detail-data\">\n            <p>{{ convertToGwei(details.gasPrice) }} Gwei</p>\n          </div>\n        </li>\n        <li v-if=\"isEthereum\">\n          <p>{{ $t('common.gasLimit') }}:</p>\n          <div class=\"detail-data\">\n            <p>{{ details.gasLimit }}</p>\n          </div>\n        </li>\n        <li v-if=\"notice.hash\">\n          <p>{{ $t('header.transactionHash') }}:</p>\n          <div class=\"detail-data\">\n            <p>\n              <a\n                :href=\"hashLink(notice.hash)\"\n                rel=\"noopener noreferrer\"\n                target=\"_blank\"\n              >\n                {{ notice.hash }}\n              </a>\n            </p>\n          </div>\n        </li>\n        <li v-if=\"isError\">\n          <p>{{ $t('header.errorMessage') }}:</p>\n          <div class=\"detail-data\">\n            <p>{{ errorMessage }}</p>\n          </div>\n        </li>\n      </ul>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\n\nimport '@/assets/images/currency/coins/asFont/cryptocoins.css';\nimport '@/assets/images/currency/coins/asFont/cryptocoins-colors.css';\nimport Arrow from '@/assets/images/etc/single-arrow.svg';\n\nimport { providerMap, providerNames, fiat, EthereumTokens } from '@/partners';\n\nimport {\n  swapOnlyStatuses,\n  notificationStatuses,\n  type as notificationType\n} from '@/helpers/notificationFormatters';\n\nexport default {\n  filters: {\n    concatAddress(value) {\n      if (!value) return '';\n      return `${value.substr(0, 7)}...${value.substr(value.length - 7)}`;\n    }\n  },\n  props: {\n    shown: {\n      type: Boolean,\n      default: false\n    },\n    notice: {\n      type: Object,\n      default: function() {\n        return {};\n      }\n    },\n    convertToGwei: {\n      type: Function,\n      default: function() {}\n    },\n    convertToEth: {\n      type: Function,\n      default: function() {}\n    },\n    getFiatValue: {\n      type: Function,\n      default: function() {}\n    },\n    dateString: {\n      type: Function,\n      default: function() {}\n    },\n    timeString: {\n      type: Function,\n      default: function() {}\n    },\n    errorMessageString: {\n      type: Function,\n      default: function() {}\n    },\n    hashLink: {\n      type: Function,\n      default: function() {}\n    },\n    addressLink: {\n      type: Function,\n      default: function() {}\n    },\n    processStatus: {\n      type: Function,\n      default: function() {}\n    },\n    childUpdateNotification: {\n      type: Function,\n      default: function() {}\n    }\n  },\n  data() {\n    return {\n      providerNames: providerNames,\n      timerInterval: null,\n      statusInterval: null,\n      arrowImage: Arrow,\n      timeRemaining: 0,\n      unreadCount: 0,\n      fiatCurrencies: fiat.map(entry => entry.symbol),\n      notificationType: notificationType\n    };\n  },\n  computed: {\n    ...mapState(['web3', 'network', 'notifications', 'wallet', 'gasPrice']),\n    errorMessage() {\n      return this.errorMessageString(this.notice);\n    },\n    isError() {\n      return this.notice.body.error;\n    },\n    details() {\n      return this.notice.body;\n    },\n    txStatus() {\n      return this.processStatus(this.notice.swapStatus);\n    },\n    parseTimeRemaining() {\n      const seconds = Math.floor(this.timeRemaining % 60);\n      const minutes = Math.floor((this.timeRemaining / 60) % 60);\n      return seconds >= 10 ? `${minutes}:${seconds}` : `${minutes}:0${seconds}`;\n    },\n    isEthereum() {\n      return EthereumTokens[this.notice.body.fromCurrency] !== undefined;\n    },\n    isToOtherChain() {\n      return EthereumTokens[this.notice.body.toCurrency] === undefined;\n    },\n    isFromOtherChain() {\n      return EthereumTokens[this.notice.body.fromCurrency] === undefined;\n    },\n    isFromFiat() {\n      return this.fiatCurrencies.includes(this.notice.body.fromCurrency);\n    },\n    showId() {\n      return (\n        this.notice.body.provider === providerNames.bity ||\n        this.notice.body.provider === providerNames.changelly\n      );\n    }\n  },\n  beforeDestroy() {\n    if (this.timerInterval !== null) {\n      clearInterval(this.timerInterval);\n    }\n\n    if (this.statusInterval !== null) {\n      clearInterval(this.statusInterval);\n    }\n  },\n  mounted() {\n    this.timeRemaining = this.notice.body.timeRemaining;\n    this.provider = providerMap.get(this.notice.body.provider);\n    this.currentStatus = this.notice.swapStatus;\n    this.timeUpdater();\n    this.statusUpdater();\n  },\n  methods: {\n    emitShowDetails() {\n      this.$emit('showDetails', ['swap', this.notice]);\n    },\n    shouldCheckStatus() {\n      return [\n        swapOnlyStatuses.NEW,\n        swapOnlyStatuses.SENT,\n        notificationStatuses.PENDING\n      ].includes(this.notice.swapStatus);\n    },\n    statusUpdater() {\n      let updating = false;\n      const getStatus = async () => {\n        if (!updating) {\n          updating = true;\n          const newStatus = await this.provider.getOrderStatus(\n            this.notice.body,\n            this.network.type.name\n          );\n          if (typeof newStatus === 'undefined') return;\n          if (this.currentStatus !== newStatus) {\n            this.currentStatus = newStatus;\n            if (swapOnlyStatuses[newStatus]) {\n              this.notice.swapStatus = newStatus;\n            } else {\n              this.notice.swapStatus = newStatus;\n              this.notice.status = newStatus;\n            }\n            this.childUpdateNotification(this.notice);\n          }\n\n          if (!this.shouldCheckStatus()) {\n            clearInterval(this.statusInterval);\n          }\n          updating = false;\n        }\n      };\n\n      if (this.shouldCheckStatus()) {\n        getStatus();\n        this.statusInterval = setInterval(() => {\n          getStatus();\n          if (!this.shouldCheckStatus()) {\n            clearInterval(this.statusInterval);\n          }\n        }, 10000);\n      }\n    },\n    timeUpdater() {\n      const updateTime = () => {\n        this.timeRemaining =\n          this.notice.body.validFor -\n          parseInt(\n            (new Date().getTime() -\n              new Date(this.notice.body.createdAt).getTime()) /\n              1000\n          );\n        if (\n          (this.notice.swapStatus === swapOnlyStatuses.NEW ||\n            this.currentStatus === swapOnlyStatuses.NEW) &&\n          this.timeRemaining <= 0\n        ) {\n          this.notice.swapStatus = swapOnlyStatuses.CANCELLED;\n          this.notice.status = notificationStatuses.FAILED;\n          this.notice.body.errorMessage =\n            'Swap window timeout. Swap Cancelled.';\n          this.timeRemaining = -1;\n        }\n        this.notice.body.timeRemaining = +this.timeRemaining;\n        this.childUpdateNotification(this.notice);\n        if (+this.timeRemaining <= 0) {\n          clearInterval(this.timerInterval);\n        }\n      };\n\n      if (this.shouldCheckStatus() && this.notice.body.timeRemaining > 0) {\n        if (this.timeRemaining > 0) {\n          updateTime();\n          this.timerInterval = setInterval(() => {\n            updateTime();\n            if (this.timeRemaining <= 0) {\n              clearInterval(this.timerInterval);\n            }\n          }, 1000);\n        }\n      }\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'SwapDetails';\n</style>\n"]}]}