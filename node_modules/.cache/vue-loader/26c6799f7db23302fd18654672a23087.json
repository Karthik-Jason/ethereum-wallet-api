{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/layouts/InterfaceLayout/components/InterfaceBalanceModal/InterfaceBalanceModal.vue?vue&type=style&index=0&id=d3e4fbc6&lang=scss&scoped=true&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/layouts/InterfaceLayout/components/InterfaceBalanceModal/InterfaceBalanceModal.vue","mtime":1573477611964},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import 'InterfaceBalanceModal.scss';\n",{"version":3,"sources":["InterfaceBalanceModal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8HA","file":"InterfaceBalanceModal.vue","sourceRoot":"src/layouts/InterfaceLayout/components/InterfaceBalanceModal","sourcesContent":["<template>\n  <div class=\"modal-container\">\n    <b-modal\n      ref=\"balance\"\n      :title=\"$t('interface.balance')\"\n      hide-footer\n      centered\n      class=\"bootstrap-modal balance nopadding\"\n      static\n      lazy\n    >\n      <div class=\"content-block total-balance\">\n        <div class=\"flex-container\">\n          <h4 class=\"modal-title\">{{ $t('common.totalBalance') }}</h4>\n          <div class=\"margin-left-auto total-balance-amount\">\n            <span>{{ balance }}</span>\n            {{ network.type.currencyName }}\n          </div>\n        </div>\n      </div>\n\n      <div class=\"content-block\">\n        <h4 class=\"equivalent-values-title\">\n          {{ $t('interface.equivalentValues') }}\n        </h4>\n        <ul class=\"equivalent-values\">\n          <li v-for=\"ev in equivalentValues\" :key=\"ev.key\">\n            <img\n              :src=\"\n                require(`@/assets/images/currency/${ev.name.toLowerCase()}.svg`)\n              \"\n              alt\n            />\n            <p class=\"ev-name\">{{ ev.name }}</p>\n            <p class=\"ev-value\">{{ ev.value }}</p>\n          </li>\n        </ul>\n      </div>\n    </b-modal>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport BigNumber from 'bignumber.js';\nexport default {\n  props: {\n    balance: {\n      type: String,\n      default: '0'\n    }\n  },\n  data() {\n    return {\n      equivalentValues: [\n        {\n          name: 'BTC',\n          value: ''\n        },\n        {\n          name: 'REP',\n          value: ''\n        },\n        {\n          name: 'CHF',\n          value: ''\n        },\n        {\n          name: 'USD',\n          value: ''\n        },\n        {\n          name: 'EUR',\n          value: ''\n        },\n        {\n          name: 'GBP',\n          value: ''\n        }\n      ]\n    };\n  },\n  computed: {\n    ...mapState(['network', 'online'])\n  },\n  watch: {\n    balance() {\n      this.fetchBalanceData();\n    }\n  },\n  mounted() {\n    this.fetchBalanceData();\n  },\n\n  methods: {\n    async fetchBalanceData() {\n      if (this.online) {\n        const newArr = [];\n        const url = 'https://cryptorates.mewapi.io/convert/ETH';\n        const fetchValues = await fetch(url);\n        const values = await fetchValues.json();\n        delete values['lastCalled'];\n        Object.keys(values).forEach(item => {\n          if (\n            this.equivalentValues.find(curr => {\n              return curr.name === item;\n            })\n          ) {\n            const objectRes = {\n              name: item,\n              value: new BigNumber(this.balance)\n                .multipliedBy(new BigNumber(values[item]))\n                .decimalPlaces(18)\n                .toFixed()\n            };\n            newArr.push(objectRes);\n          }\n        });\n        this.equivalentValues = newArr;\n      }\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'InterfaceBalanceModal.scss';\n</style>\n"]}]}