{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/layouts/InterfaceLayout/containers/DeployContractContainer/DeployContractContainer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/layouts/InterfaceLayout/containers/DeployContractContainer/DeployContractContainer.vue","mtime":1573477612008},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport InterfaceBottomText from '@/components/InterfaceBottomText';\nimport InterfaceContainerTitle from '../../components/InterfaceContainerTitle';\nimport { Misc, Toast } from '@/helpers';\nimport ethUnit from 'ethjs-unit';\nimport { Transaction } from 'ethereumjs-tx';\nimport BigNumber from 'bignumber.js';\nimport store from 'store';\nimport { generateAddress, bufferToHex } from 'ethereumjs-util';\nimport { mapState } from 'vuex';\n\nexport default {\n  name: 'DeployContract',\n  components: {\n    'interface-bottom-text': InterfaceBottomText,\n    'interface-container-title': InterfaceContainerTitle\n  },\n  data() {\n    return {\n      bytecode: '',\n      abi: '',\n      inputs: {},\n      contractName: '',\n      gasLimit: 21000,\n      data: '',\n      value: 0\n    };\n  },\n  computed: {\n    ...mapState(['gasPrice', 'web3', 'network']),\n    isValidAbi() {\n      return Misc.isJson(this.abi) && Array.isArray(JSON.parse(this.abi));\n    },\n    txValue() {\n      return Misc.sanitizeHex(ethUnit.toWei(this.value, 'ether').toString(16));\n    },\n    abiConstructor() {\n      let _constructor = null;\n      if (this.isValidAbi) {\n        JSON.parse(this.abi).forEach(item => {\n          if (item.type === 'constructor') {\n            _constructor = item;\n          }\n        });\n      }\n\n      // Sets radio buttons to false due to vue reactivity\n      if (_constructor && _constructor.hasOwnProperty('inputs')) {\n        _constructor.inputs.forEach(item => {\n          if (item.type === 'bool') {\n            // eslint-disable-next-line\n            this.inputs[item.name] = false;\n          }\n        });\n      }\n      return _constructor;\n    },\n    rawByteCode() {\n      try {\n        const remixBytecode = JSON.parse(this.bytecode);\n        if (\n          remixBytecode.object &&\n          Misc.validateHexString(remixBytecode.object)\n        )\n          return '0x' + remixBytecode.object;\n      } catch (err) {\n        return this.bytecode;\n      }\n    },\n    isValidByte() {\n      return (\n        this.rawByteCode &&\n        this.rawByteCode.substr(0, 2) === '0x' &&\n        Misc.validateHexString(this.rawByteCode)\n      );\n    },\n    txByteCode() {\n      return Misc.sanitizeHex(this.rawByteCode);\n    },\n    deployArgs() {\n      const _deployArgs = [];\n      if (this.abiConstructor) {\n        this.abiConstructor.inputs.forEach(item => {\n          if (item.type.includes('[') && item.type.includes(']')) {\n            const inputs = this.inputs.hasOwnProperty(item.name)\n              ? this.inputs[item.name].replace(/\\s/g, '')\n              : '';\n            const arr = inputs.split(',');\n            _deployArgs.push(arr);\n          } else {\n            _deployArgs.push(this.inputs[item.name]);\n          }\n        });\n      }\n      return _deployArgs;\n    },\n    txData() {\n      return this.abi !== ''\n        ? new this.web3.eth.Contract(JSON.parse(this.abi))\n            .deploy({ data: this.txByteCode, arguments: this.deployArgs })\n            .encodeABI()\n        : '0x';\n    },\n    allValid() {\n      let _allvalid = true;\n      if (this.abiConstructor) {\n        this.abiConstructor.inputs.forEach((item, idx) => {\n          if (\n            !this.isValidInput(\n              this.deployArgs[idx],\n              this.getType(item.type).solidityType\n            )\n          )\n            _allvalid = false;\n        });\n      }\n      return _allvalid && this.isValidAbi && this.isValidByte;\n    }\n  },\n  methods: {\n    isValidInput: Misc.isContractArgValid,\n    getType: Misc.solidityType,\n    async sendTransaction() {\n      try {\n        await this.estimateGas();\n        const web3 = this.web3;\n        const coinbase = await web3.eth.getCoinbase();\n        const nonce = await web3.eth.getTransactionCount(coinbase);\n        const _tx = new Transaction({\n          nonce: nonce,\n          value: this.txValue,\n          gasPrice: Misc.sanitizeHex(\n            ethUnit.toWei(this.gasPrice, 'gwei').toString(16)\n          ),\n          gasLimit: Misc.sanitizeHex(new BigNumber(this.gasLimit).toString(16)),\n          data: this.txData\n        });\n        const json = _tx.toJSON(true);\n        delete json.to;\n        json.from = coinbase;\n        this.web3.eth.sendTransaction(json).catch(err => {\n          Toast.responseHandler(err, Toast.WARN);\n        });\n        const contractAddr = bufferToHex(generateAddress(coinbase, nonce));\n        this.pushContractToStore(contractAddr);\n      } catch (e) {\n        Toast.responseHandler(e, false);\n      }\n    },\n    pushContractToStore(addr) {\n      const localStoredContract = store.get('customContracts') || [];\n      const itemIndex = localStoredContract.findIndex(item => {\n        return item.name.toLowerCase() === this.contractName.toLowerCase();\n      });\n      if (itemIndex === -1) {\n        const storableObj = {\n          abi: JSON.parse(this.abi),\n          address: addr,\n          comment: '',\n          name: this.contractName\n        };\n        localStoredContract.push(storableObj);\n      } else {\n        localStoredContract[itemIndex] = {\n          abi: JSON.parse(this.abi),\n          address: addr,\n          comment: '',\n          name: this.contractName\n        };\n      }\n      store.set('customContracts', localStoredContract);\n    },\n    confirmationModalOpen() {\n      this.sendTransaction();\n      window.scrollTo(0, 0);\n    },\n    async estimateGas() {\n      const coinbase = await this.web3.eth.getCoinbase();\n      const params = {\n        from: coinbase,\n        data: this.txData,\n        value: this.txValue\n      };\n      this.gasLimit = await this.web3.eth.estimateGas(params).catch(err => {\n        Toast.responseHandler(err, Toast.WARN);\n      });\n    },\n    copyToClipboard(ref) {\n      this.$refs[ref].select();\n      document.execCommand('copy');\n    },\n    deleteInput(ref) {\n      this[ref] = '';\n    }\n  }\n};\n",{"version":3,"sources":["DeployContractContainer.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAofile":"DeployContractContainer.vue","sourceRoot":"src/layouts/InterfaceLayout/containers/DeployContractContainer","sourcesContent":["<template>\n  <div class=\"deploy-contract-container\">\n    <interface-container-title :title=\"$t('common.depContract')\" />\n    <div class=\"content-container\">\n      <div class=\"send-form\">\n        <div class=\"title-container\">\n          <div class=\"title\">\n            <h4>{{ $t('interface.byteCode') }}</h4>\n            <div class=\"copy-buttons\">\n              <button class=\"title-button\" @click=\"deleteInput('bytecode')\">\n                {{ $t('common.clear') }}\n              </button>\n              <button class=\"title-button\" @click=\"copyToClipboard('bytecode')\">\n                {{ $t('common.copy') }}\n              </button>\n            </div>\n          </div>\n        </div>\n        <div class=\"the-form byte-code\">\n          <textarea\n            ref=\"bytecode\"\n            v-model=\"bytecode\"\n            class=\"custom-textarea-1\"\n          />\n          <i\n            :class=\"[\n              isValidByte ? '' : 'not-good',\n              'fa fa-check-circle good-button'\n            ]\"\n            aria-hidden=\"true\"\n          />\n        </div>\n      </div>\n\n      <div class=\"send-form\">\n        <div class=\"title-container\">\n          <div class=\"title\">\n            <h4>{{ $t('interface.abiJsonInt') }}</h4>\n            <div class=\"copy-buttons\">\n              <button class=\"title-button\" @click=\"deleteInput('abi')\">\n                {{ $t('common.clear') }}\n              </button>\n              <button class=\"title-button\" @click=\"copyToClipboard('abi')\">\n                {{ $t('common.copy') }}\n              </button>\n            </div>\n          </div>\n        </div>\n        <div class=\"the-form\">\n          <textarea ref=\"abi\" v-model=\"abi\" class=\"custom-textarea-1\" />\n          <i\n            :class=\"[\n              isValidAbi && abi !== '' ? '' : 'not-good',\n              'fa fa-check-circle good-button'\n            ]\"\n            aria-hidden=\"true\"\n          />\n        </div>\n      </div>\n\n      <div v-if=\"abiConstructor\" class=\"send-form\">\n        <div class=\"title-container\">\n          <div class=\"title\">\n            <h4>\n              {{ $t('interface.constructor') }}\n              {{ abiConstructor ? 'Inputs' : 'Input' }}:\n            </h4>\n          </div>\n        </div>\n        <div\n          v-for=\"(input, idx) in abiConstructor.inputs\"\n          :key=\"input.name + idx\"\n        >\n          <div class=\"title-container\">\n            <div class=\"title\">\n              <h5>{{ input.name | capitalize }} ({{ input.type }}):</h5>\n            </div>\n          </div>\n          <div class=\"the-form contract-name\">\n            <input\n              v-if=\"getType(input.type).type !== 'radio'\"\n              :type=\"getType(input.type).type\"\n              v-model=\"inputs[input.name]\"\n            />\n            <div\n              v-if=\"getType(input.type).type === 'radio'\"\n              class=\"bool-input-container\"\n            >\n              <div>\n                <input\n                  v-model=\"inputs[input.name]\"\n                  :value=\"true\"\n                  :name=\"input.name\"\n                  type=\"radio\"\n                />\n                <label :for=\"input.name\">True</label>\n              </div>\n              <div>\n                <input\n                  v-model=\"inputs[input.name]\"\n                  :value=\"false\"\n                  :name=\"input.name\"\n                  type=\"radio\"\n                  checked\n                />\n                <label :for=\"input.name\">False</label>\n              </div>\n            </div>\n            <i\n              :class=\"[\n                isValidInput(\n                  inputs[input.name],\n                  getType(input.type).solidityType\n                )\n                  ? ''\n                  : 'not-good',\n                'fa fa-check-circle good-button'\n              ]\"\n              aria-hidden=\"true\"\n            />\n          </div>\n        </div>\n      </div>\n\n      <div\n        v-if=\"abiConstructor !== null && abiConstructor.payable\"\n        class=\"send-form\"\n      >\n        <div class=\"title-container\">\n          <div class=\"title\">\n            <h4>Value in ETH:</h4>\n          </div>\n        </div>\n        <div class=\"the-form contract-name\">\n          <input\n            ref=\"value\"\n            v-model=\"value\"\n            step=\"any\"\n            placeholder=\"Value in ETH\"\n          />\n        </div>\n      </div>\n      <div class=\"send-form\">\n        <div class=\"title-container\">\n          <div class=\"title\">\n            <h4>{{ $t('interface.contractName') }}</h4>\n          </div>\n        </div>\n        <div class=\"the-form contract-name\">\n          <input\n            ref=\"contractName\"\n            v-model=\"contractName\"\n            placeholder=\"Name for the contract\"\n          />\n        </div>\n      </div>\n\n      <div class=\"submit-button-container\">\n        <div class=\"buttons\">\n          <div\n            :class=\"[\n              allValid ? '' : 'disabled',\n              'submit-button large-round-button-green-filled clickable'\n            ]\"\n            @click=\"confirmationModalOpen\"\n          >\n            {{ $t('common.signTx') }}\n          </div>\n        </div>\n        <interface-bottom-text\n          :link-text=\"$t('interface.helpCenter')\"\n          :question=\"$t('interface.haveIssues')\"\n          link=\"https://kb.myetherwallet.com\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport InterfaceBottomText from '@/components/InterfaceBottomText';\nimport InterfaceContainerTitle from '../../components/InterfaceContainerTitle';\nimport { Misc, Toast } from '@/helpers';\nimport ethUnit from 'ethjs-unit';\nimport { Transaction } from 'ethereumjs-tx';\nimport BigNumber from 'bignumber.js';\nimport store from 'store';\nimport { generateAddress, bufferToHex } from 'ethereumjs-util';\nimport { mapState } from 'vuex';\n\nexport default {\n  name: 'DeployContract',\n  components: {\n    'interface-bottom-text': InterfaceBottomText,\n    'interface-container-title': InterfaceContainerTitle\n  },\n  data() {\n    return {\n      bytecode: '',\n      abi: '',\n      inputs: {},\n      contractName: '',\n      gasLimit: 21000,\n      data: '',\n      value: 0\n    };\n  },\n  computed: {\n    ...mapState(['gasPrice', 'web3', 'network']),\n    isValidAbi() {\n      return Misc.isJson(this.abi) && Array.isArray(JSON.parse(this.abi));\n    },\n    txValue() {\n      return Misc.sanitizeHex(ethUnit.toWei(this.value, 'ether').toString(16));\n    },\n    abiConstructor() {\n      let _constructor = null;\n      if (this.isValidAbi) {\n        JSON.parse(this.abi).forEach(item => {\n          if (item.type === 'constructor') {\n            _constructor = item;\n          }\n        });\n      }\n\n      // Sets radio buttons to false due to vue reactivity\n      if (_constructor && _constructor.hasOwnProperty('inputs')) {\n        _constructor.inputs.forEach(item => {\n          if (item.type === 'bool') {\n            // eslint-disable-next-line\n            this.inputs[item.name] = false;\n          }\n        });\n      }\n      return _constructor;\n    },\n    rawByteCode() {\n      try {\n        const remixBytecode = JSON.parse(this.bytecode);\n        if (\n          remixBytecode.object &&\n          Misc.validateHexString(remixBytecode.object)\n        )\n          return '0x' + remixBytecode.object;\n      } catch (err) {\n        return this.bytecode;\n      }\n    },\n    isValidByte() {\n      return (\n        this.rawByteCode &&\n        this.rawByteCode.substr(0, 2) === '0x' &&\n        Misc.validateHexString(this.rawByteCode)\n      );\n    },\n    txByteCode() {\n      return Misc.sanitizeHex(this.rawByteCode);\n    },\n    deployArgs() {\n      const _deployArgs = [];\n      if (this.abiConstructor) {\n        this.abiConstructor.inputs.forEach(item => {\n          if (item.type.includes('[') && item.type.includes(']')) {\n            const inputs = this.inputs.hasOwnProperty(item.name)\n              ? this.inputs[item.name].replace(/\\s/g, '')\n              : '';\n            const arr = inputs.split(',');\n            _deployArgs.push(arr);\n          } else {\n            _deployArgs.push(this.inputs[item.name]);\n          }\n        });\n      }\n      return _deployArgs;\n    },\n    txData() {\n      return this.abi !== ''\n        ? new this.web3.eth.Contract(JSON.parse(this.abi))\n            .deploy({ data: this.txByteCode, arguments: this.deployArgs })\n            .encodeABI()\n        : '0x';\n    },\n    allValid() {\n      let _allvalid = true;\n      if (this.abiConstructor) {\n        this.abiConstructor.inputs.forEach((item, idx) => {\n          if (\n            !this.isValidInput(\n              this.deployArgs[idx],\n              this.getType(item.type).solidityType\n            )\n          )\n            _allvalid = false;\n        });\n      }\n      return _allvalid && this.isValidAbi && this.isValidByte;\n    }\n  },\n  methods: {\n    isValidInput: Misc.isContractArgValid,\n    getType: Misc.solidityType,\n    async sendTransaction() {\n      try {\n        await this.estimateGas();\n        const web3 = this.web3;\n        const coinbase = await web3.eth.getCoinbase();\n        const nonce = await web3.eth.getTransactionCount(coinbase);\n        const _tx = new Transaction({\n          nonce: nonce,\n          value: this.txValue,\n          gasPrice: Misc.sanitizeHex(\n            ethUnit.toWei(this.gasPrice, 'gwei').toString(16)\n          ),\n          gasLimit: Misc.sanitizeHex(new BigNumber(this.gasLimit).toString(16)),\n          data: this.txData\n        });\n        const json = _tx.toJSON(true);\n        delete json.to;\n        json.from = coinbase;\n        this.web3.eth.sendTransaction(json).catch(err => {\n          Toast.responseHandler(err, Toast.WARN);\n        });\n        const contractAddr = bufferToHex(generateAddress(coinbase, nonce));\n        this.pushContractToStore(contractAddr);\n      } catch (e) {\n        Toast.responseHandler(e, false);\n      }\n    },\n    pushContractToStore(addr) {\n      const localStoredContract = store.get('customContracts') || [];\n      const itemIndex = localStoredContract.findIndex(item => {\n        return item.name.toLowerCase() === this.contractName.toLowerCase();\n      });\n      if (itemIndex === -1) {\n        const storableObj = {\n          abi: JSON.parse(this.abi),\n          address: addr,\n          comment: '',\n          name: this.contractName\n        };\n        localStoredContract.push(storableObj);\n      } else {\n        localStoredContract[itemIndex] = {\n          abi: JSON.parse(this.abi),\n          address: addr,\n          comment: '',\n          name: this.contractName\n        };\n      }\n      store.set('customContracts', localStoredContract);\n    },\n    confirmationModalOpen() {\n      this.sendTransaction();\n      window.scrollTo(0, 0);\n    },\n    async estimateGas() {\n      const coinbase = await this.web3.eth.getCoinbase();\n      const params = {\n        from: coinbase,\n        data: this.txData,\n        value: this.txValue\n      };\n      this.gasLimit = await this.web3.eth.estimateGas(params).catch(err => {\n        Toast.responseHandler(err, Toast.WARN);\n      });\n    },\n    copyToClipboard(ref) {\n      this.$refs[ref].select();\n      document.execCommand('copy');\n    },\n    deleteInput(ref) {\n      this[ref] = '';\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'DeployContractContainer.scss';\n</style>\n"]}]}