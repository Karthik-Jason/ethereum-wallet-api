{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/dapps/Ambrpay/Ambrpay.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/dapps/Ambrpay/Ambrpay.vue","mtime":1574664278274},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js","mtime":1574664275010},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js","mtime":1574664277774}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport SubscriptionForm from './containers/SubscriptionForm';\nimport ManageFundsModal from './components/ManageFundsModal';\nimport ManageSubscriptionsModal from './components/ManageSubscriptionsModal';\nimport Ambrpay from './AmbrpayModified';\nimport BackButton from '@/layouts/InterfaceLayout/components/BackButton';\nimport { mapState } from 'vuex';\nimport BigNumber from 'bignumber.js';\nimport { Toast } from '@/helpers';\n\nexport default {\n  components: {\n    'subscription-form': SubscriptionForm,\n    'back-button': BackButton,\n    'manage-funds-modal': ManageFundsModal,\n    'manage-subscriptions-modal': ManageSubscriptionsModal\n  },\n  data() {\n    return {\n      availableBalanceEth: '',\n      availableBalanceUSD: '',\n      manageFundsText: '',\n      ethPrice: 0,\n      loadingBalance: true,\n      ambrpay: '',\n      subscriptions: []\n    };\n  },\n  computed: {\n    ...mapState(['web3', 'account', 'network', 'online'])\n  },\n  mounted() {\n    this.init();\n    this.getSubscriptions();\n    this.$refs.manageSubs.$refs.manageSubscriptionsModal.$on('show', () => {\n      this.getSubscriptions();\n    });\n    if (this.online) this.getEthPrice();\n  },\n  methods: {\n    init() {\n      const account = {\n        publicApiKey: 'api_public_DXfGdjBB4eIVgbURCCCAIQ2S',\n        address: this.account.address,\n        netId: this.network.type.chainID.toString()\n      };\n      this.ambrpay = new Ambrpay(account, this.web3);\n      this.getSubscriptionFunds();\n    },\n    getSubscriptionFunds() {\n      this.ambrpay\n        .getSubscriptionFunds()\n        .then(res => {\n          this.availableBalanceEth = new BigNumber(\n            this.web3.utils.fromWei(res, 'ether')\n          ).toFixed();\n          this.convertToUSD();\n          this.loadingBalance = false;\n        })\n        .catch(err => {\n          this.loadingBalance = false;\n          Toast.responseHandler(err, Toast.ERROR);\n        });\n    },\n    convertToUSD() {\n      this.availableBalanceUSD = '--';\n\n      if (this.availableBalanceEth) {\n        this.availableBalanceUSD = new BigNumber(\n          new BigNumber(this.availableBalanceEth).times(\n            new BigNumber(this.ethPrice)\n          )\n        ).toFixed(2);\n      }\n    },\n    openManageFundsModal(str) {\n      this.manageFundsText = str;\n      this.$refs.manageFunds.$refs.manageFundsModal.show();\n    },\n    openManageSubModal() {\n      this.$refs.manageSubs.$refs.manageSubscriptionsModal.show();\n    },\n    async getEthPrice() {\n      const price = await fetch(\n        'https://cryptorates.mewapi.io/ticker?filter=ETH'\n      )\n        .then(res => {\n          return res.json();\n        })\n        .catch(e => {\n          Toast.responseHandler(e, Toast.ERROR);\n        });\n      this.ethPrice =\n        typeof price === 'object' ? price.data.ETH.quotes.USD.price : 0;\n    },\n    startSubscription(params) {\n      this.ambrpay\n        .subscribe(params)\n        .then(this.getSubscriptions)\n        .catch(err => {\n          Toast.responseHandler(err, Toast.ERROR);\n        });\n    },\n    addFunds(amt) {\n      this.ambrpay\n        .addFunds(amt)\n        .then(this.getSubscriptionFunds)\n        .catch(err => {\n          Toast.responseHandler(err, Toast.ERROR);\n        });\n    },\n    withdrawFunds(amt) {\n      this.ambrpay\n        .withdrawFunds(amt)\n        .then(this.getSubscriptionFunds)\n        .catch(err => {\n          Toast.responseHandler(err, Toast.ERROR);\n        });\n    },\n    unsubscribeSub(data) {\n      this.ambrpay\n        .unsubscribe(data.pos, data.addr)\n        .then(this.getSubscriptions)\n        .catch(err => {\n          Toast.responseHandler(err, Toast.ERROR);\n        });\n    },\n    getSubscriptions() {\n      this.ambrpay\n        .getSubscriptions()\n        .then(res => {\n          this.subscriptions = res;\n        })\n        .catch(err => {\n          Toast.responseHandler(err, Toast.ERROR);\n        });\n    }\n  }\n};\n",{"version":3,"sources":["Ambrpay.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkfile":"Ambrpay.vue","sourceRoot":"src/dapps/Ambrpay","sourcesContent":["<template>\n  <div class=\"ambrpay-container\">\n    <back-button :title=\"$t('dappsAmbrpay.exit-dapp')\" />\n    <b-container class=\"pl-5 pr-5\">\n      <div class=\"ambrpay-header mt-5\">\n        <div class=\"title-container\">\n          <h3 class=\"page-title\">{{ $t('dappsAmbrpay.title') }}</h3>\n          <popover\n            :popcontent=\"$t('dappsAmbrpay.ambrpay-popover')\"\n            class=\"dapp-popover\"\n          ></popover>\n        </div>\n        <div class=\"btns-container\">\n          <b-button\n            class=\"withdraw-btn\"\n            @click=\"openManageFundsModal('Withdraw')\"\n            >{{ $t('dappsAmbrpay.withdraw-funds') }}</b-button\n          >\n          <b-button class=\"add-btn\" @click=\"openManageFundsModal('Add')\">{{\n            $t('dappsAmbrpay.add-funds')\n          }}</b-button>\n        </div>\n      </div>\n      <div class=\"funds-container\">\n        <span class=\"fund-text\">{{ $t('dappsAmbrpay.balance') }}</span>\n        <div class=\"balance-container\">\n          <i v-show=\"loadingBalance\" class=\"fa fa-spinner fa-spin\" />\n          <span v-show=\"!loadingBalance\" class=\"fund-text\"\n            >{{ availableBalanceEth }} {{ $t('dappsAmbrpay.eth') }}\n          </span>\n          <span v-show=\"!loadingBalance\" class=\"usd-text\"\n            >{{ availableBalanceUSD }} {{ $t('dappsAmbrpay.usd') }}</span\n          >\n        </div>\n      </div>\n      <subscription-form\n        @startSubscription=\"startSubscription\"\n      ></subscription-form>\n      <div class=\"mb-4\">\n        <b-button\n          class=\"mx-auto active-sub-btn my-subscriptions-container\"\n          @click=\"openManageSubModal()\"\n          >{{ $t('dappsAmbrpay.my-subscriptions') }}\n          <span v-if=\"subscriptions.length > 0\" class=\"subscriptions-number\">{{\n            subscriptions.length\n          }}</span>\n        </b-button>\n      </div>\n    </b-container>\n    <manage-funds-modal\n      ref=\"manageFunds\"\n      :manage-funds-text=\"manageFundsText\"\n      :available-balance-eth=\"availableBalanceEth\"\n      :available-balance-usd=\"availableBalanceUSD\"\n      @addFunds=\"addFunds\"\n      @withdrawFunds=\"withdrawFunds\"\n    />\n    <manage-subscriptions-modal\n      ref=\"manageSubs\"\n      :subscriptions=\"subscriptions\"\n      @unsubscribeSub=\"unsubscribeSub\"\n    />\n  </div>\n</template>\n\n<script>\nimport SubscriptionForm from './containers/SubscriptionForm';\nimport ManageFundsModal from './components/ManageFundsModal';\nimport ManageSubscriptionsModal from './components/ManageSubscriptionsModal';\nimport Ambrpay from './AmbrpayModified';\nimport BackButton from '@/layouts/InterfaceLayout/components/BackButton';\nimport { mapState } from 'vuex';\nimport BigNumber from 'bignumber.js';\nimport { Toast } from '@/helpers';\n\nexport default {\n  components: {\n    'subscription-form': SubscriptionForm,\n    'back-button': BackButton,\n    'manage-funds-modal': ManageFundsModal,\n    'manage-subscriptions-modal': ManageSubscriptionsModal\n  },\n  data() {\n    return {\n      availableBalanceEth: '',\n      availableBalanceUSD: '',\n      manageFundsText: '',\n      ethPrice: 0,\n      loadingBalance: true,\n      ambrpay: '',\n      subscriptions: []\n    };\n  },\n  computed: {\n    ...mapState(['web3', 'account', 'network', 'online'])\n  },\n  mounted() {\n    this.init();\n    this.getSubscriptions();\n    this.$refs.manageSubs.$refs.manageSubscriptionsModal.$on('show', () => {\n      this.getSubscriptions();\n    });\n    if (this.online) this.getEthPrice();\n  },\n  methods: {\n    init() {\n      const account = {\n        publicApiKey: 'api_public_DXfGdjBB4eIVgbURCCCAIQ2S',\n        address: this.account.address,\n        netId: this.network.type.chainID.toString()\n      };\n      this.ambrpay = new Ambrpay(account, this.web3);\n      this.getSubscriptionFunds();\n    },\n    getSubscriptionFunds() {\n      this.ambrpay\n        .getSubscriptionFunds()\n        .then(res => {\n          this.availableBalanceEth = new BigNumber(\n            this.web3.utils.fromWei(res, 'ether')\n          ).toFixed();\n          this.convertToUSD();\n          this.loadingBalance = false;\n        })\n        .catch(err => {\n          this.loadingBalance = false;\n          Toast.responseHandler(err, Toast.ERROR);\n        });\n    },\n    convertToUSD() {\n      this.availableBalanceUSD = '--';\n\n      if (this.availableBalanceEth) {\n        this.availableBalanceUSD = new BigNumber(\n          new BigNumber(this.availableBalanceEth).times(\n            new BigNumber(this.ethPrice)\n          )\n        ).toFixed(2);\n      }\n    },\n    openManageFundsModal(str) {\n      this.manageFundsText = str;\n      this.$refs.manageFunds.$refs.manageFundsModal.show();\n    },\n    openManageSubModal() {\n      this.$refs.manageSubs.$refs.manageSubscriptionsModal.show();\n    },\n    async getEthPrice() {\n      const price = await fetch(\n        'https://cryptorates.mewapi.io/ticker?filter=ETH'\n      )\n        .then(res => {\n          return res.json();\n        })\n        .catch(e => {\n          Toast.responseHandler(e, Toast.ERROR);\n        });\n      this.ethPrice =\n        typeof price === 'object' ? price.data.ETH.quotes.USD.price : 0;\n    },\n    startSubscription(params) {\n      this.ambrpay\n        .subscribe(params)\n        .then(this.getSubscriptions)\n        .catch(err => {\n          Toast.responseHandler(err, Toast.ERROR);\n        });\n    },\n    addFunds(amt) {\n      this.ambrpay\n        .addFunds(amt)\n        .then(this.getSubscriptionFunds)\n        .catch(err => {\n          Toast.responseHandler(err, Toast.ERROR);\n        });\n    },\n    withdrawFunds(amt) {\n      this.ambrpay\n        .withdrawFunds(amt)\n        .then(this.getSubscriptionFunds)\n        .catch(err => {\n          Toast.responseHandler(err, Toast.ERROR);\n        });\n    },\n    unsubscribeSub(data) {\n      this.ambrpay\n        .unsubscribe(data.pos, data.addr)\n        .then(this.getSubscriptions)\n        .catch(err => {\n          Toast.responseHandler(err, Toast.ERROR);\n        });\n    },\n    getSubscriptions() {\n      this.ambrpay\n        .getSubscriptions()\n        .then(res => {\n          this.subscriptions = res;\n        })\n        .catch(err => {\n          Toast.responseHandler(err, Toast.ERROR);\n        });\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'Ambrpay.scss';\n</style>\n"]}]}