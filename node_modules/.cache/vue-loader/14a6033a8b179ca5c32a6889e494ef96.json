{"remainingRequest":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/layouts/AccessWalletLayout/components/MnemonicModal/MnemonicModal.vue?vue&type=style&index=0&id=fe2f9a20&lang=scss&scoped=true&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/layouts/AccessWalletLayout/components/MnemonicModal/MnemonicModal.vue","mtime":1573477611668},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import 'MnemonicModal-desktop.scss';\n@import 'MnemonicModal-tablet.scss';\n@import 'MnemonicModal-mobile.scss';\n",{"version":3,"sources":["MnemonicModal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgLA;AACA;AACA","file":"MnemonicModal.vue","sourceRoot":"src/layouts/AccessWalletLayout/components/MnemonicModal","sourcesContent":["<template>\n  <b-modal\n    ref=\"mnemonicPhrase\"\n    :title=\"$t('accessWallet.accessByMnemonicPhrase')\"\n    hide-footer\n    class=\"bootstrap-modal modal-metamask nopadding\"\n    centered\n    static\n    lazy\n    @shown=\"focusInput\"\n    @hide=\"clearInputs\"\n  >\n    <div class=\"warning\">\n      <warning-message />\n    </div>\n    <div class=\"contents\">\n      <p class=\"instruction\">\n        {{ $t('accessWallet.pleaseTypeInMnemonicPhrase') }}\n      </p>\n      <div class=\"tools\">\n        <div class=\"value-switch noselect\">\n          <div class=\"sliding-switch\">\n            <label class=\"switch\">\n              <input type=\"checkbox\" />\n              <span class=\"slider round\" @click=\"mnemonicValueBitSizeChange\" />\n            </label>\n            <div class=\"labels\">\n              <span :class=\"[!mnemonic24 ? 'white' : '', 'label-left']\"\n                >12</span\n              >\n              <span :class=\"[mnemonic24 ? 'white' : '', 'label-right']\"\n                >24</span\n              >\n            </div>\n          </div>\n          <span class=\"text__base link switch-label\">{{\n            $t('createWallet.byMnemonicValue')\n          }}</span>\n        </div>\n      </div>\n      <form>\n        <div class=\"phrases\">\n          <ul>\n            <li v-for=\"index in mnemonicSize\" :key=\"index\">\n              <span>{{ index }}.</span>\n              <input\n                v-model=\"mnemonicPhrase[index - 1]\"\n                :ref=\"`mnemonicInput${index - 1}`\"\n                type=\"text\"\n                name=\"\"\n              />\n            </li>\n          </ul>\n        </div>\n        <div class=\"option-container-block\">\n          <expanding-option\n            title=\"Password\"\n            button-text=\"Optional\"\n            @expanded=\"passwordInputViewChange\"\n          >\n            <div class=\"option-container\">\n              <create-wallet-input\n                v-model=\"password\"\n                :show-button=\"false\"\n                :full-width=\"true\"\n              />\n            </div>\n          </expanding-option>\n        </div>\n        <p v-show=\"error !== ''\" class=\"error\">{{ error }}</p>\n        <div class=\"button-container-block\">\n          <standard-button\n            :options=\"continueButtonOptions\"\n            :spinner=\"spinner\"\n            @click.native=\"unlockWallet\"\n          />\n        </div>\n      </form>\n      <customer-support />\n    </div>\n  </b-modal>\n</template>\n\n<script>\nimport CustomerSupport from '@/components/CustomerSupport';\nimport WarningMessage from '@/components/WarningMessage';\nimport StandardButton from '@/components/Buttons/StandardButton';\nimport CreateWalletInput from './components/CreateWalletInput';\nimport ExpandingOption from '@/components/ExpandingOption';\nimport { MnemonicWallet } from '@/wallets';\nimport { Toast } from '@/helpers';\n\nexport default {\n  components: {\n    'customer-support': CustomerSupport,\n    'warning-message': WarningMessage,\n    'standard-button': StandardButton,\n    'create-wallet-input': CreateWalletInput,\n    'expanding-option': ExpandingOption\n  },\n  props: {\n    hardwareWalletOpen: {\n      type: Function,\n      default: function() {}\n    }\n  },\n  data() {\n    return {\n      spinner: false,\n      error: '',\n      continueButtonOptions: {\n        title: this.$t('common.continue'),\n        buttonStyle: 'green',\n        noMinWidth: true,\n        fullWidth: true\n      },\n      mnemonicPhrase: new Array(this.mnemonicSize).fill(''),\n      mnemonic24: false,\n      mnemonicSize: 12,\n      password: ''\n    };\n  },\n  watch: {\n    mnemonicPhrase(newVal) {\n      if (newVal[0] !== ' ' && newVal[0].indexOf(' ') >= 0) {\n        if (\n          newVal[0].split(' ').length === 12 ||\n          newVal[0].split(' ').length === 24\n        ) {\n          this.mnemonic24 = newVal[0].split(' ').length === 24;\n          this.mnemonicSize = newVal[0].split(' ').length;\n          this.mnemonicPhrase = newVal[0].split(' ');\n        }\n      }\n    }\n  },\n  methods: {\n    passwordInputViewChange() {\n      this.password = '';\n    },\n    unlockWallet(e) {\n      e.preventDefault();\n      e.stopPropagation();\n      this.spinner = true;\n      MnemonicWallet(this.mnemonicPhrase.join(' '), this.password)\n        .then(wallet => {\n          this.password = '';\n          this.spinner = false;\n          this.$refs.mnemonicPhrase.hide();\n          this.hardwareWalletOpen(wallet);\n        })\n        .catch(e => {\n          this.password = '';\n          this.spinner = false;\n          this.error = e;\n          Toast.responseHandler(e, Toast.ERROR);\n        });\n    },\n    clearInputs() {\n      this.mnemonicPhrase = new Array(this.mnemonicSize).fill('');\n    },\n    mnemonicValueBitSizeChange() {\n      this.mnemonic24 = !this.mnemonic24;\n      this.mnemonic24 ? (this.mnemonicSize = 24) : (this.mnemonicSize = 12);\n      this.mnemonicPhrase = new Array(this.mnemonicSize).fill('');\n    },\n    openPasswordModal() {\n      this.mnemonicPhrasePasswordModalOpen(this.mnemonicPhrase.join(' '));\n    },\n    focusInput() {\n      this.$refs.mnemonicInput0[0].focus();\n    }\n  }\n};\n</script>\n<style lang=\"scss\" scoped>\n@import 'MnemonicModal-desktop.scss';\n@import 'MnemonicModal-tablet.scss';\n@import 'MnemonicModal-mobile.scss';\n</style>\n"]}]}