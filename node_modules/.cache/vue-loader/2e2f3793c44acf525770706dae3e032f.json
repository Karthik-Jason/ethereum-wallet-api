{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/dapps/ManageENS/containers/PermanentRegistrationContainer/PermanentRegistrationContainer.vue?vue&type=style&index=0&id=cc05e52e&lang=scss&scoped=true&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/dapps/ManageENS/containers/PermanentRegistrationContainer/PermanentRegistrationContainer.vue","mtime":1574677225012},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/css-loader/index.js","mtime":1574664275862},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1574664277774},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/postcss-loader/src/index.js","mtime":1574664277114},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/sass-loader/dist/cjs.js","mtime":1574664277374},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js","mtime":1574664277774}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import 'PermanentRegistrationContainer.scss';\n",{"version":3,"sources":["PermanentRegistrationContainer.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmIA","file":"PermanentRegistrationContainer.vue","sourceRoot":"src/dapps/ManageENS/containers/PermanentRegistrationContainer","sourcesContent":["<template lang=\"html\">\n  <div class=\"permanent-registration-container\">\n    <div class=\"permanent-registration-content\">\n      <div id=\"wait-container\" class=\"commitment-wait\">\n        <div class=\"circles-container\">\n          <div class=\"circle\" />\n          <div class=\"circle\" />\n          <div class=\"circle\" />\n        </div>\n        <h3>\n          Hang on tight! <br />\n          We are finalizing the registration for <br />\n          <span class=\"domain-name\"> {{ fullDomainName }}. </span>\n        </h3>\n      </div>\n      <div v-show=\"commitmentCreated\" class=\"permanent-registration-button\">\n        <button\n          :class=\"[\n            'large-round-button-green-filled',\n            !canRegister ? 'disabled' : ''\n          ]\"\n          @click=\"registerWithDuration\"\n        >\n          <span>\n            {{ canRegister ? 'Register' : ticker }}\n          </span>\n        </button>\n      </div>\n    </div>\n    <!-- <interface-bottom-text\n      :link-text=\"$t('interface.helpCenter')\"\n      :question=\"$t('interface.haveIssues')\"\n      link=\"https://kb.myetherwallet.com\"\n    /> -->\n  </div>\n</template>\n\n<script>\nimport InterfaceBottomText from '@/components/InterfaceBottomText';\n\nexport default {\n  components: {\n    'interface-bottom-text': InterfaceBottomText\n  },\n  props: {\n    hostName: {\n      type: String,\n      default: ''\n    },\n    registerWithDuration: {\n      type: Function,\n      default: function() {}\n    },\n    tld: {\n      type: String,\n      default: ''\n    },\n    loading: {\n      type: Boolean,\n      default: false\n    },\n    minimumAge: {\n      type: String,\n      default: '0'\n    },\n    commitmentCreated: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      ticker: `0${this.minimumAge / 60 < 10 ? this.minimumAge / 60 : '00'}:00`,\n      timer: () => {},\n      canRegister: false\n    };\n  },\n  computed: {\n    fullDomainName() {\n      return `${this.hostName}.${this.tld}`;\n    }\n  },\n  watch: {\n    commitmentCreated(newVal) {\n      if (newVal) {\n        clearInterval(this.timer);\n        const _self = this;\n        _self.canRegister = false;\n        if (_self.hostName === '') {\n          _self.$router.push('/interface/dapps/manage-ens');\n        }\n\n        const startTime = new Date().getTime();\n        const endTime = startTime + _self.minimumAge * 1000;\n        if (_self.minimumAge > 0) {\n          _self.timer = setInterval(() => {\n            const internalStart = new Date().getTime();\n            const difference = endTime - internalStart;\n            const minutes = Math.floor(\n              (difference % (1000 * 60 * 60)) / (1000 * 60)\n            );\n            const seconds = Math.floor((difference % (1000 * 60)) / 1000);\n            _self.ticker = `${\n              minutes >= 10 ? minutes : minutes < 0 ? '00' : '0' + minutes\n            }:${seconds >= 10 ? seconds : seconds < 0 ? '00' : '0' + seconds}`;\n            if (seconds < 0) {\n              _self.canRegister = true;\n              this.$root.$emit(\n                'bv::toggle::collapse',\n                'commitment-inputs-container'\n              );\n              this.$root.$emit('bv::toggle::collapse', 'wait-container');\n              clearInterval(_self.timer);\n            }\n          }, 1000);\n        }\n      } else {\n        clearInterval(this.timer);\n      }\n    }\n  },\n  mounted() {\n    if (this.hostName === '') this.$router.push('/interface/dapps/manage-ens');\n  },\n  destroyed() {\n    clearInterval(this.timer);\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'PermanentRegistrationContainer.scss';\n</style>\n"]}]}