{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/layouts/ViewWalletInfoLayout/ViewWalletInfoLayout.vue?vue&type=style&index=0&id=619c47c3&lang=scss&scoped=true&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/layouts/ViewWalletInfoLayout/ViewWalletInfoLayout.vue","mtime":1573477612088},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import 'ViewWalletInfoLayout.scss';\n",{"version":3,"sources":["ViewWalletInfoLayout.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgWA","file":"ViewWalletInfoLayout.vue","sourceRoot":"src/layouts/ViewWalletInfoLayout","sourcesContent":["<template>\n  <div class=\"view-wallet-info-layout\">\n    <interface-balance-modal ref=\"balance\" :balance=\"balance\" />\n    <view-private-key-modal ref=\"viewPriv\" />\n    <print-modal ref=\"printModal\" :address=\"account.address\" />\n    <div class=\"title\">\n      <h2>View Wallet Info</h2>\n      <p>\n        Check your transaction history, download a new keystore file, print a\n        paper wallet, and more!\n      </p>\n    </div>\n    <div class=\"wallet-info-container\">\n      <div class=\"wallet-info\">\n        <div class=\"wallet-info-header\">\n          <h3>Wallet Information</h3>\n          <router-link to=\"/interface\">Access Wallet</router-link>\n        </div>\n        <div class=\"balance-container\">\n          <div class=\"balance-main-container\">\n            <h4>Balance</h4>\n            <div class=\"balance-and-buttons\">\n              <p>\n                <b v-show=\"!fetchingBalance\">{{ balance }}</b>\n                <i\n                  v-show=\"fetchingBalance\"\n                  class=\"fa fa-spinner fa-lg fa-spin\"\n                />\n                ETH\n              </p>\n              <div class=\"balance-button-container\">\n                <i class=\"fa fa-refresh fa-lg\" @click=\"fetchBalance\" />\n                <img\n                  src=\"~@/assets/images/icons/more-black.svg\"\n                  @click=\"openBalance\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"account-details\">\n          <div class=\"blockie-container\">\n            <blockie :address=\"account.address\" width=\"80px\" height=\"80px\" />\n            <h3 v-show=\"hasNickname\">{{ account.nickname }}'s wallet</h3>\n            <div class=\"address-copy-container\">\n              <input ref=\"copyAddress\" :value=\"account.address\" />\n              <p>{{ account.address | concatAddr }}</p>\n              <img src=\"@/assets/images/icons/copy-colored.svg\" @click=\"copy\" />\n            </div>\n          </div>\n          <div class=\"other-options\">\n            <div\n              v-for=\"option in otherOptions\"\n              :key=\"option.key\"\n              :class=\"[\n                disableItem(option.key) ? 'item-disabled' : '',\n                'option-item'\n              ]\"\n              @click=\"option.func\"\n            >\n              <img\n                :src=\"\n                  disableItem(option.key) ? option.iconDisabled : option.icon\n                \"\n              />\n              <p>{{ option.name }}</p>\n            </div>\n            <a\n              ref=\"downloadFile\"\n              :href=\"walletJson\"\n              :download=\"filename\"\n              target=\"_blank\"\n            />\n          </div>\n        </div>\n      </div>\n      <div class=\"wallet-tokens\">\n        <interface-tokens\n          :tokens=\"tokens\"\n          :get-token-balance=\"getTokenBalance\"\n          :received-tokens=\"!loading\"\n          :reset-token-selection=\"setTokensWithBalance\"\n          :fetch-tokens=\"fetchTokens\"\n          :ads=\"false\"\n          :address=\"account.address\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport { Toast, Misc } from '@/helpers';\nimport store from 'store';\nimport TokenBalance from '@myetherwallet/eth-token-balance';\nimport PrintModal from '@/layouts/InterfaceLayout/components/PrintModal';\nimport InterfaceBalanceModal from '@/layouts/InterfaceLayout/components/InterfaceBalanceModal';\nimport InterfaceTokens from '@/layouts/InterfaceLayout/components/InterfaceTokens';\nimport ViewPrivateKey from './components/ViewPrivateKey';\nimport { BigNumber } from 'bignumber.js';\nimport sortByBalance from '@/helpers/sortByBalance.js';\nimport Blockie from '@/components/Blockie';\nimport printer from '@/assets/images/icons/printer.svg';\nimport txnHistory from '@/assets/images/icons/tx-history-spinner.svg';\nimport privateKeyGrey from '@/assets/images/icons/private-key-grey.svg';\nimport privateKey from '@/assets/images/icons/private-key.svg';\nimport keystore from '@/assets/images/icons/download-keystore.svg';\nimport keystoreGrey from '@/assets/images/icons/download-keystore-grey.svg';\nimport createBlob from '@/helpers/createBlob.js';\nimport utils from 'web3-utils';\n\nexport default {\n  components: {\n    'interface-tokens': InterfaceTokens,\n    blockie: Blockie,\n    'print-modal': PrintModal,\n    'view-private-key-modal': ViewPrivateKey,\n    'interface-balance-modal': InterfaceBalanceModal\n  },\n  data() {\n    return {\n      tokens: [],\n      loading: false,\n      fetchingBalance: false,\n      balance: '0',\n      otherOptions: [\n        {\n          name: 'Private Key',\n          key: 'privKey',\n          icon: privateKey,\n          iconDisabled: privateKeyGrey,\n          func: () => {\n            this.openViewPriv();\n          }\n        },\n        {\n          name: 'Txn History',\n          key: 'txnHis',\n          icon: txnHistory,\n          iconDisabled: txnHistory,\n          func: () => {\n            this.openTxHistory();\n          }\n        },\n        {\n          name: 'Keystore File',\n          key: 'keyStor',\n          icon: keystore,\n          iconDisabled: keystoreGrey,\n          func: () => {\n            this.downloadKeystore();\n          }\n        },\n        {\n          name: 'Print Wallet',\n          key: 'printWal',\n          icon: printer,\n          iconDisabled: printer,\n          func: () => {\n            this.printWallet();\n          }\n        }\n      ],\n      walletJson: '',\n      filename: '',\n      build: BUILD_TYPE\n    };\n  },\n  computed: {\n    ...mapState(['account', 'network', 'web3']),\n    hasNickname() {\n      return this.account.nickname !== '';\n    }\n  },\n  mounted() {\n    this.fetchTokens();\n    this.fetchBalance();\n    if (\n      !this.account.isHardware &&\n      typeof this.account.keystore !== 'undefined'\n    ) {\n      this.walletJson = createBlob(\n        JSON.parse(this.account.keystore).file,\n        'mime'\n      );\n      this.filename = JSON.parse(this.account.keystore).name;\n    }\n  },\n  destroyed() {\n    this.tokens = [];\n    this.loading = false;\n    this.balance = '0';\n    this.walletJson = '';\n    this.filename = '';\n    this.build = BUILD_TYPE;\n  },\n  methods: {\n    disableItem(itemKey) {\n      if (itemKey === 'privKey') {\n        return !!this.account.isHardware;\n      } else if (itemKey === 'keyStor') {\n        if (Misc.isMewCx()) {\n          return false;\n        }\n        return true;\n      }\n      return false;\n    },\n    printWallet() {\n      this.$refs.printModal.$refs.print.show();\n    },\n    openBalance() {\n      this.$refs.balance.$refs.balance.show();\n    },\n    downloadKeystore() {\n      if (Misc.isMewCx()) {\n        window.chrome.downloads.download({\n          filename: this.filename,\n          url: this.walletJson\n        });\n      } else {\n        this.$refs.downloadFile.click();\n      }\n    },\n    openViewPriv() {\n      this.$refs.viewPriv.$refs.viewPriv.show();\n    },\n    openTxHistory() {\n      // eslint-disable-next-line\n      window.open(\n        `${this.network.type.blockExplorerAddr.replace('[[address]]', '') +\n          this.account.address}`,\n        '_blank'\n      );\n    },\n    async fetchBalance() {\n      this.fetchingBalance = true;\n      const balance = await this.web3.eth.getBalance(this.account.address);\n      this.balance = utils.fromWei(balance, 'ether');\n      this.fetchingBalance = false;\n    },\n    copy() {\n      this.$refs.copyAddress.select();\n      document.execCommand('copy');\n      Toast.responseHandler('Copied!', Toast.INFO);\n    },\n    async getTokenBalance(token) {\n      try {\n        const contractAbi = [\n          {\n            name: 'balanceOf',\n            type: 'function',\n            constant: true,\n            inputs: [{ name: 'address', type: 'address' }],\n            outputs: [{ name: 'out', type: 'uint256' }]\n          }\n        ];\n\n        const contract = new this.web3.eth.Contract(contractAbi);\n        const data = contract.methods\n          .balanceOf(this.account.address)\n          .encodeABI();\n        const balance = await this.web3.eth\n          .call({\n            to: token.address,\n            data: data\n          })\n          .then(res => {\n            let tokenBalance;\n            if (Number(res) === 0 || res === '0x') {\n              tokenBalance = 0;\n            } else {\n              const denominator = new BigNumber(10).pow(token.decimals);\n              tokenBalance = new BigNumber(res).div(denominator).toString();\n            }\n            return tokenBalance;\n          })\n          .catch(e => {\n            Toast.responseHandler(e, false);\n          });\n        return balance;\n      } catch (e) {\n        Toast.responseHandler(e, Toast.ERROR);\n      }\n    },\n    async fetchTokens() {\n      this.loading = true;\n      const tb = new TokenBalance(this.web3.currentProvider);\n      try {\n        this.tokens = await tb.getBalance(this.account.address);\n        this.tokens = this.tokens.map(token => {\n          const denominator = new BigNumber(10).pow(token.decimals);\n          const balance = new BigNumber(token.balance)\n            .div(denominator)\n            .toString();\n          token.address = token.addr;\n          token.balance = balance;\n          delete token.addr;\n          return token;\n        });\n        this.tokens = this.tokens.sort(sortByBalance);\n        this.loading = false;\n      } catch (e) {\n        this.tokens = this.network.type.tokens.map(token => {\n          token.balance = 'Load';\n          return token;\n        });\n        this.tokens = this.tokens.sort(sortByBalance);\n        this.loading = false;\n      }\n    },\n    setTokensWithBalance() {\n      const customStore = store.get('customTokens');\n      if (\n        customStore !== undefined &&\n        customStore[this.network.type.name] !== undefined &&\n        customStore[this.network.type.name].length > 0\n      ) {\n        new Promise(resolve => {\n          const newArr = customStore[this.network.type.name].map(\n            async token => {\n              token.balance = await this.getTokenBalance(token);\n              return token;\n            }\n          );\n          Promise.all(newArr).then(res => {\n            customStore[this.network.type.name] = res;\n            store.set('customTokens', customStore);\n            resolve(res);\n          });\n        })\n          .then(res => {\n            const allTokens = this.tokens\n              .filter(token => token.balance > 0)\n              .concat(res.filter(token => token.balance > 0));\n            this.tokensWithBalance = allTokens;\n            this.loading = true;\n          })\n          .catch(e => {\n            Toast.responseHandler(e, Toast.ERROR);\n          });\n      } else {\n        this.loading = true;\n        this.tokensWithBalance = this.tokens.filter(token => token.balance > 0);\n      }\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'ViewWalletInfoLayout.scss';\n</style>\n"]}]}