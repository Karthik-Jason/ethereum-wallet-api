{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/layouts/AccessWalletLayout/components/PasswordModal/PasswordModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/layouts/AccessWalletLayout/components/PasswordModal/PasswordModal.vue","mtime":1574664278286},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js","mtime":1574664275010},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js","mtime":1574664277774}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { WalletInterface } from '@/wallets';\nimport { KEYSTORE as keyStoreType } from '@/wallets/bip44/walletTypes';\nimport walletWorker from 'worker-loader!@/workers/wallet.worker.js';\nimport { mapState } from 'vuex';\nimport { Toast, Wallet } from '@/helpers';\nimport WarningMessage from '@/components/WarningMessage';\n\nexport default {\n  components: {\n    'warning-message': WarningMessage\n  },\n  props: {\n    file: {\n      type: Object,\n      default: function() {\n        return {};\n      }\n    }\n  },\n  data() {\n    return {\n      show: false,\n      password: '',\n      spinner: false\n    };\n  },\n  computed: {\n    ...mapState(['path', 'online']),\n    inputValid() {\n      return (\n        this.walletRequirePass(this.file) &&\n        (this.password === '' || this.password.length === 0)\n      );\n    }\n  },\n  watch: {\n    password() {\n      this.error = '';\n    }\n  },\n  methods: {\n    walletRequirePass(ethjson) {\n      if (ethjson.encseed != null) return true;\n      else if (ethjson.Crypto != null || ethjson.crypto != null) return true;\n      else if (ethjson.hash != null && ethjson.locked) return true;\n      else if (ethjson.hash != null && !ethjson.locked) return false;\n      else if (ethjson.publisher == 'MyEtherWallet' && !ethjson.encrypted)\n        return false;\n      return true;\n    },\n    unlockWallet() {\n      this.spinner = true;\n\n      if (this.online && window.Worker && window.origin !== 'null') {\n        const worker = new walletWorker();\n        const self = this;\n        worker.postMessage({\n          type: 'unlockWallet',\n          data: [this.file, this.password]\n        });\n        worker.onmessage = function(e) {\n          const obj = {\n            file: this.file,\n            name: e.data.filename\n          };\n          self.setUnlockedWallet(\n            new WalletInterface(\n              Buffer.from(e.data._privKey),\n              false,\n              keyStoreType,\n              '',\n              JSON.stringify(obj)\n            )\n          );\n        };\n        worker.onerror = function(e) {\n          e.preventDefault();\n          self.spinner = false;\n          Toast.responseHandler(e, Toast.ERROR);\n        };\n      } else {\n        const newFile = {};\n        Object.keys(this.file).forEach(key => {\n          newFile[key.toLowerCase()] = this.file[key];\n        });\n        const _wallet = Wallet.fromV3(newFile, this.password, true);\n        this.setUnlockedWallet(\n          new WalletInterface(\n            Buffer.from(_wallet._privKey),\n            false,\n            keyStoreType\n          )\n        );\n      }\n    },\n    setUnlockedWallet(wallet) {\n      this.$store.dispatch('decryptWallet', [wallet]).then(() => {\n        this.spinner = false;\n        this.password = '';\n        this.$router.push({\n          path: 'interface'\n        });\n      });\n    },\n    switchViewPassword() {\n      this.show = !this.show;\n    },\n    focusInput() {\n      this.password = '';\n      this.$refs.passwordInput.focus();\n    }\n  }\n};\n",{"version":3,"sources":["PasswordModal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqfile":"PasswordModal.vue","sourceRoot":"src/layouts/AccessWalletLayout/components/PasswordModal","sourcesContent":["<template>\n  <b-modal\n    ref=\"password\"\n    :title=\"$t('accessWallet.password')\"\n    hide-footer\n    class=\"bootstrap-modal modal-software nopadding\"\n    centered\n    static\n    lazy\n    @shown=\"focusInput\"\n  >\n    <div>\n      <div class=\"warning\">\n        <warning-message />\n      </div>\n      <form class=\"password-form\">\n        <div class=\"input-container\">\n          <input\n            ref=\"passwordInput\"\n            :type=\"show ? 'text' : 'password'\"\n            v-model=\"password\"\n            name=\"Password\"\n            autocomplete=\"off\"\n            placeholder=\"Enter password\"\n          />\n          <img\n            v-if=\"show\"\n            alt\n            src=\"@/assets/images/icons/show-password.svg\"\n            @click.prevent=\"switchViewPassword\"\n          />\n          <img\n            v-if=\"!show\"\n            alt\n            src=\"@/assets/images/icons/hide-password.svg\"\n            @click.prevent=\"switchViewPassword\"\n          />\n        </div>\n        <button\n          :disabled=\"inputValid\"\n          class=\"submit-button large-round-button-green-filled\"\n          type=\"submit\"\n          @click.prevent=\"unlockWallet\"\n        >\n          <span v-show=\"!spinner\">{{ $t('common.accessWallet') }}</span>\n          <i v-show=\"spinner\" class=\"fa fa-spin fa-spinner fa-lg\" />\n        </button>\n      </form>\n    </div>\n  </b-modal>\n</template>\n\n<script>\nimport { WalletInterface } from '@/wallets';\nimport { KEYSTORE as keyStoreType } from '@/wallets/bip44/walletTypes';\nimport walletWorker from 'worker-loader!@/workers/wallet.worker.js';\nimport { mapState } from 'vuex';\nimport { Toast, Wallet } from '@/helpers';\nimport WarningMessage from '@/components/WarningMessage';\n\nexport default {\n  components: {\n    'warning-message': WarningMessage\n  },\n  props: {\n    file: {\n      type: Object,\n      default: function() {\n        return {};\n      }\n    }\n  },\n  data() {\n    return {\n      show: false,\n      password: '',\n      spinner: false\n    };\n  },\n  computed: {\n    ...mapState(['path', 'online']),\n    inputValid() {\n      return (\n        this.walletRequirePass(this.file) &&\n        (this.password === '' || this.password.length === 0)\n      );\n    }\n  },\n  watch: {\n    password() {\n      this.error = '';\n    }\n  },\n  methods: {\n    walletRequirePass(ethjson) {\n      if (ethjson.encseed != null) return true;\n      else if (ethjson.Crypto != null || ethjson.crypto != null) return true;\n      else if (ethjson.hash != null && ethjson.locked) return true;\n      else if (ethjson.hash != null && !ethjson.locked) return false;\n      else if (ethjson.publisher == 'MyEtherWallet' && !ethjson.encrypted)\n        return false;\n      return true;\n    },\n    unlockWallet() {\n      this.spinner = true;\n\n      if (this.online && window.Worker && window.origin !== 'null') {\n        const worker = new walletWorker();\n        const self = this;\n        worker.postMessage({\n          type: 'unlockWallet',\n          data: [this.file, this.password]\n        });\n        worker.onmessage = function(e) {\n          const obj = {\n            file: this.file,\n            name: e.data.filename\n          };\n          self.setUnlockedWallet(\n            new WalletInterface(\n              Buffer.from(e.data._privKey),\n              false,\n              keyStoreType,\n              '',\n              JSON.stringify(obj)\n            )\n          );\n        };\n        worker.onerror = function(e) {\n          e.preventDefault();\n          self.spinner = false;\n          Toast.responseHandler(e, Toast.ERROR);\n        };\n      } else {\n        const newFile = {};\n        Object.keys(this.file).forEach(key => {\n          newFile[key.toLowerCase()] = this.file[key];\n        });\n        const _wallet = Wallet.fromV3(newFile, this.password, true);\n        this.setUnlockedWallet(\n          new WalletInterface(\n            Buffer.from(_wallet._privKey),\n            false,\n            keyStoreType\n          )\n        );\n      }\n    },\n    setUnlockedWallet(wallet) {\n      this.$store.dispatch('decryptWallet', [wallet]).then(() => {\n        this.spinner = false;\n        this.password = '';\n        this.$router.push({\n          path: 'interface'\n        });\n      });\n    },\n    switchViewPassword() {\n      this.show = !this.show;\n    },\n    focusInput() {\n      this.password = '';\n      this.$refs.passwordInput.focus();\n    }\n  }\n};\n</script>\n<style lang=\"scss\" scoped>\n@import 'PasswordModal.scss';\n</style>\n"]}]}