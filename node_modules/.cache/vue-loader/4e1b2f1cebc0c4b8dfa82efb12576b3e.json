{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/containers/NotificationsContainer/components/NotificationHeader/TransactionHeader.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/containers/NotificationsContainer/components/NotificationHeader/TransactionHeader.vue","mtime":1574664278274},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/thread-loader/dist/cjs.js","mtime":1574664277654},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js","mtime":1574664275010},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js","mtime":1574664277774}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapState } from 'vuex';\nimport { notificationHeaderLabels, noticeStatusFields } from '../config';\n\nexport default {\n  props: {\n    expand: {\n      type: Function,\n      default: function() {}\n    },\n    notice: {\n      type: Object,\n      default: function() {\n        return {};\n      }\n    },\n    processStatus: {\n      type: Function,\n      default: function() {}\n    },\n    dateString: {\n      type: Function,\n      default: function() {}\n    },\n    timeString: {\n      type: Function,\n      default: function() {}\n    }\n  },\n  data() {\n    return {\n      unreadCount: 0\n    };\n  },\n  computed: {\n    ...mapState(['web3', 'network', 'notifications', 'wallet']),\n    typeString() {\n      if (notificationHeaderLabels[this.notice.type]) {\n        return this.$t(notificationHeaderLabels[this.notice.type]);\n      }\n      return this.$t(notificationHeaderLabels['transaction']);\n    },\n    details() {\n      return this.notice.body;\n    },\n    txStatus() {\n      return this.processStatus(\n        this.notice[noticeStatusFields[this.notice.type]]\n      );\n    }\n  },\n  methods: {\n    emitShowDetails() {\n      this.$emit('showDetails', ['transaction', this.notice]);\n    }\n  }\n};\n",{"version":3,"sources":["TransactionHeader.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAkBA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TransactionHeader.vue","sourceRoot":"src/layouts/ExtensionBrowserAction/containers/ExtensionNotification/components/NotificationHeader","sourcesContent":["<template lang=\"html\">\n  <div class=\"notification-header\" @click=\"expand()\">\n    <div class=\"notification-type-status\">\n      <p :class=\"['type', notice.read ? 'read' : 'un-read']\">\n        {{ typeString }}\n      </p>\n      <p :class=\"['status', notice.read ? 'read' : 'un-read', txStatus.class]\">\n        ({{ txStatus.text }})\n      </p>\n    </div>\n    <div class=\"time-date\">\n      <p>{{ timeString(notice) }}</p>\n      <p>{{ dateString(notice) }}</p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport { notificationHeaderLabels, noticeStatusFields } from '../config';\n\nexport default {\n  props: {\n    expand: {\n      type: Function,\n      default: function() {}\n    },\n    notice: {\n      type: Object,\n      default: function() {\n        return {};\n      }\n    },\n    processStatus: {\n      type: Function,\n      default: function() {}\n    },\n    dateString: {\n      type: Function,\n      default: function() {}\n    },\n    timeString: {\n      type: Function,\n      default: function() {}\n    }\n  },\n  data() {\n    return {\n      unreadCount: 0\n    };\n  },\n  computed: {\n    ...mapState(['web3', 'network', 'notifications', 'wallet']),\n    typeString() {\n      if (notificationHeaderLabels[this.notice.type]) {\n        return this.$t(notificationHeaderLabels[this.notice.type]);\n      }\n      return this.$t(notificationHeaderLabels['transaction']);\n    },\n    details() {\n      return this.notice.body;\n    },\n    txStatus() {\n      return this.processStatus(\n        this.notice[noticeStatusFields[this.notice.type]]\n      );\n    }\n  },\n  methods: {\n    emitShowDetails() {\n      this.$emit('showDetails', ['transaction', this.notice]);\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import './TransactionHeader.scss';\n</style>\n"]}]}