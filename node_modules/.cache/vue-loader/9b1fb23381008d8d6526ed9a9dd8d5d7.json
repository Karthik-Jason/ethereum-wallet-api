{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/containers/NotificationsContainer/components/NotificationTypes/TransactionNotification/TransactionNotification.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/containers/NotificationsContainer/components/NotificationTypes/TransactionNotification/TransactionNotification.vue","mtime":1574664278274},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js","mtime":1574664275010},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js","mtime":1574664277774}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapState } from 'vuex';\nimport NotificationHeader from '../../NotificationHeader';\n\nexport default {\n  components: {\n    'notification-header': NotificationHeader\n  },\n  props: {\n    expand: {\n      type: Function,\n      default: function() {}\n    },\n    notice: {\n      type: Object,\n      default: function() {\n        return {};\n      }\n    },\n    convertToGwei: {\n      type: Function,\n      default: function() {}\n    },\n    convertToEth: {\n      type: Function,\n      default: function() {}\n    },\n    getFiatValue: {\n      type: Function,\n      default: function() {}\n    },\n    dateString: {\n      type: Function,\n      default: function() {}\n    },\n    timeString: {\n      type: Function,\n      default: function() {}\n    },\n    errorMessageString: {\n      type: Function,\n      default: function() {}\n    },\n    processStatus: {\n      type: Function,\n      default: function() {}\n    },\n    hashLink: {\n      type: Function,\n      default: function() {}\n    },\n    addressLink: {\n      type: Function,\n      default: function() {}\n    }\n  },\n  data() {\n    return {\n      unreadCount: 0\n    };\n  },\n  computed: {\n    ...mapState(['web3', 'network', 'notifications', 'wallet']),\n    errorMessage() {\n      return this.errorMessageString(this.notice);\n    },\n    isError() {\n      return this.notice.body.error;\n    },\n    isContractCreation() {\n      return (\n        this.notice.body.contractAddress !== undefined &&\n        this.notice.body.contractAddress !== null\n      );\n    },\n    isTokenTransfer() {\n      return this.notice.body.tokenTransferTo !== '';\n    },\n    details() {\n      return this.notice.body;\n    },\n    txStatus() {\n      return this.processStatus(this.notice.status);\n    }\n  },\n  methods: {\n    emitShowDetails() {\n      this.$emit('showDetails', ['transaction', this.notice]);\n    }\n  }\n};\n",{"version":3,"sources":["TransactionNotification.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0GA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TransactionNotification.vue","sourceRoot":"src/layouts/ExtensionBrowserAction/containers/ExtensionNotification/components/NotificationTypes/TransactionNotification","sourcesContent":["<template lang=\"html\">\n  <div>\n    <notification-header\n      :expand=\"expand\"\n      :notice=\"notice\"\n      :process-status=\"processStatus\"\n      :time-string=\"timeString\"\n      :date-string=\"dateString\"\n    >\n    </notification-header>\n    <div\n      :class=\"[\n        notice.expanded ? '' : 'unexpanded',\n        'notification-body',\n        'notification-content'\n      ]\"\n    >\n      <ul>\n        <li v-if=\"isTokenTransfer\">\n          <p>{{ $t('header.amount') }}:</p>\n          <p>{{ details.tokenTransferVal }} {{ details.tokenSymbol }}</p>\n        </li>\n        <li v-if=\"!isTokenTransfer\">\n          <p>{{ $t('header.amount') }}:</p>\n          <p>{{ convertToEth(details.amount) }} {{ network.type.name }}</p>\n        </li>\n        <li>\n          <p>{{ $t('common.toAddress') }}:</p>\n          <p>\n            <a\n              :href=\"addressLink(details.tokenTransferTo || details.to)\"\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              {{ details.tokenTransferTo || details.to }}\n            </a>\n          </p>\n        </li>\n        <li v-if=\"isTokenTransfer\">\n          <p>Via contract:</p>\n          <p>\n            <a\n              :href=\"addressLink(details.to)\"\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              {{ details.to }}\n            </a>\n          </p>\n        </li>\n        <li v-if=\"isContractCreation\">\n          <p>{{ $t('common.createdContract') }}:</p>\n          <p>\n            <a\n              :href=\"addressLink(details.contractAddress)\"\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              {{ details.contractAddress }}\n            </a>\n          </p>\n        </li>\n        <li v-if=\"notice.body.gasUsed\">\n          <p>{{ $t('common.txFee') }}:</p>\n          <p>\n            {{ convertToEth(details.gasPrice * details.gasUsed) }}\n            {{ network.type.name }}\n            <span>\n              (${{ getFiatValue(details.gasPrice * details.gasUsed) }})\n            </span>\n          </p>\n        </li>\n        <li>\n          <p>{{ $t('header.maxTxFee') }}:</p>\n          <p>\n            {{ convertToEth(details.gasPrice * details.gasLimit) }}\n            {{ network.type.name }} (${{\n              getFiatValue(details.gasPrice * details.gasLimit)\n            }})\n          </p>\n        </li>\n        <li v-if=\"notice.hash\">\n          <p>{{ $t('header.transactionHash') }}:</p>\n        </li>\n        <li v-if=\"notice.hash\">\n          <a\n            :href=\"hashLink(notice.hash)\"\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            {{ notice.hash }}\n          </a>\n        </li>\n        <li v-if=\"isError\">\n          <p>{{ $t('header.errorMessage') }}:</p>\n          <p>{{ errorMessage }}</p>\n        </li>\n        <li class=\"show-pointer\" @click=\"emitShowDetails\">\n          {{ $t('header.more') }}\n        </li>\n      </ul>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport NotificationHeader from '../../NotificationHeader';\n\nexport default {\n  components: {\n    'notification-header': NotificationHeader\n  },\n  props: {\n    expand: {\n      type: Function,\n      default: function() {}\n    },\n    notice: {\n      type: Object,\n      default: function() {\n        return {};\n      }\n    },\n    convertToGwei: {\n      type: Function,\n      default: function() {}\n    },\n    convertToEth: {\n      type: Function,\n      default: function() {}\n    },\n    getFiatValue: {\n      type: Function,\n      default: function() {}\n    },\n    dateString: {\n      type: Function,\n      default: function() {}\n    },\n    timeString: {\n      type: Function,\n      default: function() {}\n    },\n    errorMessageString: {\n      type: Function,\n      default: function() {}\n    },\n    processStatus: {\n      type: Function,\n      default: function() {}\n    },\n    hashLink: {\n      type: Function,\n      default: function() {}\n    },\n    addressLink: {\n      type: Function,\n      default: function() {}\n    }\n  },\n  data() {\n    return {\n      unreadCount: 0\n    };\n  },\n  computed: {\n    ...mapState(['web3', 'network', 'notifications', 'wallet']),\n    errorMessage() {\n      return this.errorMessageString(this.notice);\n    },\n    isError() {\n      return this.notice.body.error;\n    },\n    isContractCreation() {\n      return (\n        this.notice.body.contractAddress !== undefined &&\n        this.notice.body.contractAddress !== null\n      );\n    },\n    isTokenTransfer() {\n      return this.notice.body.tokenTransferTo !== '';\n    },\n    details() {\n      return this.notice.body;\n    },\n    txStatus() {\n      return this.processStatus(this.notice.status);\n    }\n  },\n  methods: {\n    emitShowDetails() {\n      this.$emit('showDetails', ['transaction', this.notice]);\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'TransactionNotification';\n</style>\n"]}]}