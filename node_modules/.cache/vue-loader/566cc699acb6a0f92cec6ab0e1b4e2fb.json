{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/layouts/CreateWalletLayout/containers/ByMnemonicContainer/components/VerificationModal/VerificationModal.vue?vue&type=style&index=0&id=7f0bad1d&lang=scss&scoped=true&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/layouts/CreateWalletLayout/containers/ByMnemonicContainer/components/VerificationModal/VerificationModal.vue","mtime":1573477611676},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import 'VerificationModal.scss';\n",{"version":3,"sources":["VerificationModal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+IA","file":"VerificationModal.vue","sourceRoot":"src/layouts/CreateWalletLayout/containers/ByMnemonicContainer/components/VerificationModal","sourcesContent":["<template>\n  <b-modal\n    ref=\"verification\"\n    hide-footer\n    centered\n    class=\"bootstrap-modal-wide verification nopadding\"\n    title=\"Verification\"\n    static\n    lazy\n  >\n    <div class=\"content-block\">\n      <p class=\"block-title\">\n        Please enter and fill out the empty boxes below to verify your mnemonic\n        phrase key.\n      </p>\n      <div class=\"phrases\">\n        <ul>\n          <li\n            v-for=\"(value, index) in mnemonicValues\"\n            :key=\"index\"\n            :data-index=\"index\"\n            class=\"word\"\n          >\n            {{ index + 1 }}.<span>{{ value }}</span>\n            <input\n              v-model=\"inputs[index]\"\n              class=\"hidden\"\n              type=\"text\"\n              name=\"\"\n              autocomplete=\"off\"\n            />\n          </li>\n        </ul>\n      </div>\n      <div v-show=\"errorMsg.length > 0\" class=\"error-msg-container\">\n        {{ errorMsg }}\n      </div>\n      <div class=\"button-container\">\n        <div\n          :class=\"[\n            loading ? 'disabled' : '',\n            'verify-button large-round-button-green-filled'\n          ]\"\n          @click=\"verifyMnemonic\"\n        >\n          <span v-show=\"!loading\"> Verify </span>\n          <i v-show=\"loading\" class=\"fa fa-lg fa-spin fa-spinner\" />\n        </div>\n      </div>\n    </div>\n  </b-modal>\n</template>\n\n<script>\nexport default {\n  props: {\n    mnemonicValues: {\n      type: Array,\n      default: function() {\n        return [];\n      }\n    }\n  },\n  data() {\n    return {\n      inputs: {},\n      loading: false,\n      errorMsg: ''\n    };\n  },\n  mounted() {\n    this.$refs.verification.$on('shown', () => {\n      // Generate random numbers to choose which blocks to hide\n      const newArr = [...this.mnemonicValues.keys()];\n      const ranNums = this.shuffle(newArr);\n\n      document.querySelectorAll('.phrases .word').forEach(function(el) {\n        el.classList.remove('verification');\n        el.querySelector('span').classList.remove('hidden');\n        el.querySelector('input').classList.add('hidden');\n      });\n\n      // Hide 5 random mnemonic blocks\n      for (let c = 0; c < 5; c++) {\n        this.inputs[ranNums[c]] = '';\n        document\n          .querySelector('.phrases .word[data-index=\"' + ranNums[c] + '\"]')\n          .classList.add('verification');\n        document\n          .querySelector('.phrases .word[data-index=\"' + ranNums[c] + '\"]')\n          .querySelector('span')\n          .classList.add('hidden');\n        document\n          .querySelector('.phrases .word[data-index=\"' + ranNums[c] + '\"]')\n          .querySelector('input')\n          .classList.remove('hidden');\n      }\n    });\n    this.$refs.verification.$on('hidden', () => {\n      this.inputs = {};\n      this.loading = false;\n      this.errorMsg = '';\n    });\n  },\n  methods: {\n    hasEmpty() {\n      let emptyInputs = 0;\n      const inputs = Object.keys(this.inputs);\n      inputs.forEach(input => {\n        if (this.inputs[input] === '') {\n          emptyInputs++;\n        }\n      });\n      return emptyInputs === 0;\n    },\n    shuffle(arr) {\n      for (let i = arr.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [arr[i], arr[j]] = [arr[j], arr[i]];\n      }\n      return arr;\n    },\n    verifyMnemonic() {\n      this.loading = true;\n      this.errorMsg = '';\n      const updatedArray = [...this.mnemonicValues];\n      Object.keys(this.inputs).forEach(item => {\n        updatedArray.splice(item, 1, this.inputs[item]);\n      });\n      if (!this.hasEmpty()) {\n        this.errorMsg = `Some fields are still missing!`;\n      } else if (updatedArray.join() === this.mnemonicValues.join()) {\n        this.$emit('verifiedMnemonic');\n      } else {\n        this.errorMsg = `Mnemonic doesn't match! Please write it down correctly!`;\n      }\n      this.loading = false;\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'VerificationModal.scss';\n</style>\n"]}]}