{"remainingRequest":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/layouts/DappSubmissionLayout/containers/AboutYourTeamContainer/AboutYourTeamContainer.vue?vue&type=template&id=aa0520c2&scoped=true&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/layouts/DappSubmissionLayout/containers/AboutYourTeamContainer/AboutYourTeamContainer.vue","mtime":1573477611680},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    { staticClass: \"about-your-dapp mb-5 mt-5\" },\n    [\n      _c(\"social-acct-modal\", {\n        ref: \"socialacct\",\n        on: { addSocialAccount: _vm.addSocialAccount }\n      }),\n      _c(\n        \"b-form\",\n        { attrs: { onsubmit: \"return false;\" } },\n        [\n          _c(\"b-form-group\", [\n            _c(\n              \"label\",\n              { staticClass: \"dapp-label\" },\n              [\n                _vm._v(\"Authors\\n        \"),\n                _c(\"popover\", {\n                  staticClass: \"dapp-popover\",\n                  attrs: { popcontent: _vm.$t(\"dappsSubmission.authors\") }\n                })\n              ],\n              1\n            ),\n            _c(\n              \"div\",\n              { staticClass: \"dapp-input\" },\n              [\n                _c(\"b-form-input\", {\n                  directives: [\n                    {\n                      name: \"validate\",\n                      rawName: \"v-validate\",\n                      value: \"required\",\n                      expression: \"'required'\"\n                    }\n                  ],\n                  attrs: {\n                    id: \"authors\",\n                    name: \"authors\",\n                    placeholder: \"e.g. James Lee; Emilie Roy; Edward McCormick\",\n                    type: \"text\"\n                  },\n                  on: { update: _vm.updateAuthors },\n                  model: {\n                    value: _vm.form.authors,\n                    callback: function($$v) {\n                      _vm.$set(_vm.form, \"authors\", $$v)\n                    },\n                    expression: \"form.authors\"\n                  }\n                }),\n                _c(\"span\", [_vm._v(\"*\")])\n              ],\n              1\n            ),\n            _vm.errors.has(\"authors\")\n              ? _c(\"p\", { staticClass: \"error\" }, [\n                  _vm._v(\n                    \"\\n        \" +\n                      _vm._s(_vm.errors.first(\"authors\")) +\n                      \"\\n      \"\n                  )\n                ])\n              : _vm._e()\n          ]),\n          _c(\"b-form-group\", [\n            _c(\"label\", { staticClass: \"dapp-label\" }, [\n              _vm._v(\"My full name \")\n            ]),\n            _c(\n              \"div\",\n              { staticClass: \"dapp-input\" },\n              [\n                _c(\"b-form-input\", {\n                  directives: [\n                    {\n                      name: \"validate\",\n                      rawName: \"v-validate\",\n                      value: \"required\",\n                      expression: \"'required'\"\n                    }\n                  ],\n                  attrs: { id: \"fullName\", name: \"name\", type: \"text\" },\n                  on: { update: _vm.updateFullName },\n                  model: {\n                    value: _vm.form.fullName,\n                    callback: function($$v) {\n                      _vm.$set(_vm.form, \"fullName\", $$v)\n                    },\n                    expression: \"form.fullName\"\n                  }\n                }),\n                _c(\"span\", [_vm._v(\"*\")])\n              ],\n              1\n            ),\n            _vm.errors.has(\"name\")\n              ? _c(\"p\", { staticClass: \"error\" }, [\n                  _vm._v(\n                    \"\\n        \" + _vm._s(_vm.errors.first(\"name\")) + \"\\n      \"\n                  )\n                ])\n              : _vm._e()\n          ]),\n          _c(\"b-form-group\", [\n            _c(\"label\", { staticClass: \"dapp-label\" }, [_vm._v(\"My email \")]),\n            _c(\n              \"div\",\n              { staticClass: \"dapp-input\" },\n              [\n                _c(\"b-form-input\", {\n                  directives: [\n                    {\n                      name: \"validate\",\n                      rawName: \"v-validate\",\n                      value: \"email|required\",\n                      expression: \"'email|required'\"\n                    }\n                  ],\n                  attrs: { id: \"emailAddress\", name: \"email\", type: \"text\" },\n                  on: {\n                    update: _vm.updateEmail,\n                    change: function($event) {\n                      return _vm.updateDisableBtn(_vm.errors)\n                    }\n                  },\n                  model: {\n                    value: _vm.form.email,\n                    callback: function($$v) {\n                      _vm.$set(_vm.form, \"email\", $$v)\n                    },\n                    expression: \"form.email\"\n                  }\n                }),\n                _c(\"span\", [_vm._v(\"*\")])\n              ],\n              1\n            ),\n            _vm.errors.has(\"email\")\n              ? _c(\"p\", { staticClass: \"error\" }, [\n                  _vm._v(\n                    \"\\n        \" +\n                      _vm._s(_vm.errors.first(\"email\")) +\n                      \"\\n      \"\n                  )\n                ])\n              : _vm._e()\n          ]),\n          _c(\"b-form-group\", [\n            _c(\"div\", { staticClass: \"social-links-container\" }, [\n              _c(\"div\", { staticClass: \"social-links-header-wrapper\" }, [\n                _c(\"div\", { staticClass: \"social-links-header\" }, [\n                  _c(\"label\", { staticClass: \"dapp-social-label\" }, [\n                    _vm._v(\" Company social links\")\n                  ]),\n                  _c(\n                    \"button\",\n                    {\n                      staticClass: \"add-btn pull-right\",\n                      on: { click: _vm.openSocialAcctModal }\n                    },\n                    [_vm._v(\"\\n              Add +\\n            \")]\n                  )\n                ]),\n                _c(\"span\", { staticClass: \"required-icon\" }, [_vm._v(\"*\")])\n              ]),\n              _vm.socialAccts.length > 0\n                ? _c(\n                    \"div\",\n                    { staticClass: \"social-links-content\" },\n                    _vm._l(_vm.socialAccts, function(acct, idx) {\n                      return _c(\n                        \"div\",\n                        {\n                          key: acct + idx,\n                          staticClass: \"social-account\",\n                          attrs: { idx: idx }\n                        },\n                        [\n                          _c(\"div\", { staticClass: \"fake-input mt-2\" }, [\n                            _c(\"img\", {\n                              staticClass: \"social-img\",\n                              attrs: { src: acct.src }\n                            }),\n                            _c(\"span\", { staticClass: \"social-url ml-1\" }, [\n                              _vm._v(_vm._s(acct.url))\n                            ])\n                          ]),\n                          _c(\"img\", {\n                            staticClass: \"social-remove\",\n                            attrs: {\n                              src: require(\"@/assets/images/icons/remove.png\")\n                            },\n                            on: {\n                              click: function($event) {\n                                return _vm.removeSocialLink(idx)\n                              }\n                            }\n                          })\n                        ]\n                      )\n                    }),\n                    0\n                  )\n                : _vm._e()\n            ]),\n            _vm.socialLinksError\n              ? _c(\"p\", { staticClass: \"error\" }, [\n                  _vm._v(\n                    \"\\n        The company social links field is required\\n      \"\n                  )\n                ])\n              : _vm._e()\n          ]),\n          _c(\"b-form-group\", [\n            _c(\"label\", { staticClass: \"dapp-label\" }, [\n              _vm._v(\"Company website \")\n            ]),\n            _c(\n              \"div\",\n              { staticClass: \"dapp-input\" },\n              [\n                _c(\"b-form-input\", {\n                  directives: [\n                    {\n                      name: \"validate\",\n                      rawName: \"v-validate\",\n                      value: \"url:require_protocol\",\n                      expression: \"'url:require_protocol'\"\n                    }\n                  ],\n                  attrs: {\n                    id: \"companyWebsite\",\n                    type: \"text\",\n                    name: \"website\",\n                    placeholder: \"URL link\"\n                  },\n                  on: {\n                    change: function($event) {\n                      return _vm.updateDisableBtn(_vm.errors)\n                    }\n                  },\n                  model: {\n                    value: _vm.form.companyWebsite,\n                    callback: function($$v) {\n                      _vm.$set(_vm.form, \"companyWebsite\", $$v)\n                    },\n                    expression: \"form.companyWebsite\"\n                  }\n                })\n              ],\n              1\n            ),\n            _vm.errors.has(\"website\")\n              ? _c(\"p\", { staticClass: \"error\" }, [\n                  _vm._v(\n                    \"\\n        \" +\n                      _vm._s(_vm.errors.first(\"website\")) +\n                      \"\\n      \"\n                  )\n                ])\n              : _vm._e()\n          ]),\n          _c(\"b-form-group\", [\n            _c(\n              \"label\",\n              { staticClass: \"dapp-label\" },\n              [\n                _vm._v(\"Software license\\n        \"),\n                _c(\"popover\", {\n                  staticClass: \"dapp-popover\",\n                  attrs: {\n                    popcontent: _vm.$t(\"dappsSubmission.softwareLicense\")\n                  }\n                })\n              ],\n              1\n            ),\n            _c(\n              \"div\",\n              { staticClass: \"dapp-input\" },\n              [\n                _c(\"b-form-input\", {\n                  attrs: {\n                    id: \"softwareLicense\",\n                    type: \"text\",\n                    placeholder: \"(e.g. MIT, GPL, Proprietary)\"\n                  },\n                  model: {\n                    value: _vm.form.license,\n                    callback: function($$v) {\n                      _vm.$set(_vm.form, \"license\", $$v)\n                    },\n                    expression: \"form.license\"\n                  }\n                })\n              ],\n              1\n            )\n          ]),\n          _c(\"b-form-group\", [\n            _c(\"label\", { staticClass: \"dapp-label\" }, [\n              _vm._v(\"Additional notes\")\n            ]),\n            _c(\n              \"div\",\n              { staticClass: \"dapp-input\" },\n              [\n                _c(\"b-form-textarea\", {\n                  directives: [\n                    {\n                      name: \"validate\",\n                      rawName: \"v-validate\",\n                      value: \"max:300\",\n                      expression: \"'max:300'\"\n                    }\n                  ],\n                  attrs: {\n                    size: \"lg\",\n                    rows: \"5\",\n                    name: \"notes\",\n                    placeholder: \"300 characters\"\n                  },\n                  on: {\n                    change: function($event) {\n                      return _vm.updateDisableBtn(_vm.errors)\n                    }\n                  },\n                  model: {\n                    value: _vm.form.additionalNotes,\n                    callback: function($$v) {\n                      _vm.$set(_vm.form, \"additionalNotes\", $$v)\n                    },\n                    expression: \"form.additionalNotes\"\n                  }\n                })\n              ],\n              1\n            ),\n            _vm.errors.has(\"notes\")\n              ? _c(\"p\", { staticClass: \"error\" }, [\n                  _vm._v(\n                    \"\\n        \" +\n                      _vm._s(_vm.errors.first(\"notes\")) +\n                      \"\\n      \"\n                  )\n                ])\n              : _vm._e()\n          ])\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}