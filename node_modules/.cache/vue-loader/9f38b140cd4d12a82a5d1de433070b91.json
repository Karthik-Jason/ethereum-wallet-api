{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/components/StandardInput/StandardInput.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/components/StandardInput/StandardInput.vue","mtime":1574664278266},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js","mtime":1574664275010},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js","mtime":1574664277774}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  props: {\n    options: {\n      type: Object,\n      default: function() {\n        return {};\n      }\n    },\n    inputvalue: {\n      type: String,\n      default: ''\n    }\n  },\n  data() {\n    return {\n      inputValue: this.options.value\n    };\n  },\n  computed: {\n    borderClass() {\n      switch (this.options.passwordStrength) {\n        case '1':\n          return 'border-red';\n        case '2':\n          return 'border-blue';\n        case '3':\n          return 'border-green';\n        default:\n      }\n    }\n  },\n  methods: {\n    copyToClipboard() {\n      if (this.options.isTextarea) {\n        this.$refs['textareadata'].select();\n      } else {\n        this.$refs['inputdata'].select();\n      }\n      document.execCommand('copy');\n    },\n    emitValue(evt) {\n      this.$emit('changedValue', evt.srcElement.value);\n    }\n  }\n};\n",{"version":3,"sources":["StandardInput.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"StandardInput.vue","sourceRoot":"src/components/StandardInput","sourcesContent":["<template>\n  <div class=\"standard-input\">\n    <div v-if=\"options.title\" class=\"input-title-container\">\n      <div class=\"input-title-and-helper\">\n        <div class=\"title-and-subtitle\">\n          <p class=\"input-title\">{{ options.title }}</p>\n          <p v-if=\"options.titleText\" class=\"input-title-text\">\n            {{ options.titleText }}\n          </p>\n        </div>\n        <popover v-if=\"options.popover\" :popcontent=\"options.popover\" />\n      </div>\n\n      <div class=\"the-button-container\">\n        <div v-if=\"options.buttonRandom == true\" class=\"the-button random\">\n          <i class=\"fa fa-refresh\" aria-hidden=\"true\" />Random\n        </div>\n\n        <div v-if=\"options.buttonClear == true\" class=\"the-button clean\">\n          Clear\n        </div>\n\n        <div\n          v-if=\"options.buttonCopy == true\"\n          class=\"the-button copy\"\n          @click=\"copyToClipboard\"\n        >\n          Copy\n        </div>\n\n        <div v-if=\"options.buttonCustom\" class=\"the-button clean\">\n          {{ options.buttonCustom }}\n        </div>\n\n        <div v-if=\"options.topTextInfo\" class=\"the-text info\">\n          {{ options.topTextInfo }}\n        </div>\n      </div>\n    </div>\n\n    <div\n      :class=\"[borderClass, options.borderGrey ? 'border-grey' : '']\"\n      class=\"input-container\"\n    >\n      <input\n        v-if=\"!options.isTextarea\"\n        ref=\"inputdata\"\n        :readonly=\"options.readOnly\"\n        :value=\"options.value\"\n        :class=\"[\n          options.rightInputText ? 'right-padding' : '',\n          options.inputDisabled ? 'disabled' : ''\n        ]\"\n        :placeholder=\"options.placeHolder\"\n        :type=\"options.type\"\n        :disabled=\"options.inputDisabled\"\n        v-model=\"inputValue\"\n        name=\"\"\n        @blur=\"emitValue\"\n      />\n\n      <textarea\n        v-if=\"options.isTextarea\"\n        ref=\"textareadata\"\n        :readonly=\"options.readOnly\"\n        v-model=\"inputValue\"\n        :placeholder=\"options.placeHolder\"\n        :disabled=\"options.inputDisabled\"\n        @blur=\"emitValue\"\n      />\n\n      <p v-if=\"options.rightInputText\" class=\"right-input-text\">\n        {{ options.rightInputText }}\n      </p>\n    </div>\n\n    <div class=\"password-strength-indicator\">\n      <div v-if=\"options.passwordStrength === '1'\">\n        <p class=\"strength weak\">Weak strength password</p>\n        <p class=\"note\">\n          Your password needs to be minimum 10 charactors long.\n        </p>\n      </div>\n      <div v-if=\"options.passwordStrength === '2'\">\n        <p class=\"strength medium\">Medium strength password</p>\n        <p class=\"note\">Add numbers to make your password stronger.</p>\n      </div>\n      <div v-if=\"options.passwordStrength === '3'\">\n        <p class=\"strength strong\">Strong strength password</p>\n        <p class=\"note\">Good! Your password is very strong.</p>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    options: {\n      type: Object,\n      default: function() {\n        return {};\n      }\n    },\n    inputvalue: {\n      type: String,\n      default: ''\n    }\n  },\n  data() {\n    return {\n      inputValue: this.options.value\n    };\n  },\n  computed: {\n    borderClass() {\n      switch (this.options.passwordStrength) {\n        case '1':\n          return 'border-red';\n        case '2':\n          return 'border-blue';\n        case '3':\n          return 'border-green';\n        default:\n      }\n    }\n  },\n  methods: {\n    copyToClipboard() {\n      if (this.options.isTextarea) {\n        this.$refs['textareadata'].select();\n      } else {\n        this.$refs['inputdata'].select();\n      }\n      document.execCommand('copy');\n    },\n    emitValue(evt) {\n      this.$emit('changedValue', evt.srcElement.value);\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'StandardInput.scss';\n</style>\n"]}]}