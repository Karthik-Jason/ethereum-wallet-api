{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/layouts/ExtensionBrowserAction/containers/ExtensionNotification/ExtensionNotification.vue?vue&type=style&index=0&id=2072c31f&lang=scss&scoped=true&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/layouts/ExtensionBrowserAction/containers/ExtensionNotification/ExtensionNotification.vue","mtime":1573477611684},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import './ExtensionNotification.scss';\n",{"version":3,"sources":["ExtensionNotification.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwdA","file":"ExtensionNotification.vue","sourceRoot":"src/layouts/ExtensionBrowserAction/containers/ExtensionNotification","sourcesContent":["<template lang=\"html\">\n  <div class=\"notification-container\">\n    <div class=\"notification-logo\" @click=\"showNotifications\">\n      <img class=\"logo-large\" src=\"~@/assets/images/icons/notification.svg\" />\n      <div v-show=\"unreadCount > 0\" class=\"notification-dot\">\n        <div class=\"parent\">\n          <div class=\"heart\"></div>\n        </div>\n      </div>\n    </div>\n    <b-modal\n      ref=\"notification\"\n      hide-footer\n      centered\n      no-padding\n      class=\"bootstrap-modal-wide nopadding\"\n      static\n      lazy\n      @show=\"countUnread\"\n      @hide=\"hiddenModal\"\n    >\n      <template slot=\"modal-title\">\n        <div>\n          <div v-if=\"!detailsShown\" class=\"modal-title\">\n            {{ unreadCount > 1 ? 'Notifications' : 'Notification' }}\n            <div v-show=\"unreadCount >= 0\" class=\"notification-count\">\n              <span>{{ unreadCount }}</span>\n            </div>\n          </div>\n          <div v-else class=\"modal-title show-pointer\" @click=\"hideDetails\">\n            <i class=\"fa fa-long-arrow-left\" aria-hidden=\"true\" />\n            {{ $t('common.back') }}\n          </div>\n        </div>\n      </template>\n      <div v-if=\"!detailsShown\" class=\"notification-item-container\">\n        <ul\n          v-if=\"\n            sortedNotifications !== undefined &&\n              Object.keys(sortedNotifications).length > 0\n          \"\n        >\n          <li\n            v-for=\"(notification, address) in sortedNotifications\"\n            :key=\"address\"\n          >\n            <div class=\"address-header\">\n              {{ address }}\n              <div>\n                <i\n                  :class=\"['fa fa-2x', 'fa-angle-down']\"\n                  aria-hidden=\"true\"\n                  @click=\"expandAll(address)\"\n                />\n                <i\n                  :class=\"['fa fa-2x', 'fa-angle-up']\"\n                  aria-hidden=\"true\"\n                  @click=\"collapseAll(address)\"\n                />\n              </div>\n            </div>\n            <ul v-if=\"notification.length > 0\">\n              <li\n                v-for=\"(noti, idx) in notification\"\n                :key=\"noti.id + idx\"\n                class=\"notification-item\"\n              >\n                <keep-alive\n                  :max=\"10\"\n                  :exclude=\"['transaction-notification', 'transaction-error']\"\n                >\n                  <component\n                    :is=\"useComponent(noti.type)\"\n                    :expand=\"expand(idx, noti, address)\"\n                    :shown=\"shown\"\n                    :notice=\"noti\"\n                    :convert-to-gwei=\"convertToGwei\"\n                    :convert-to-eth=\"convertToEth\"\n                    :get-fiat-value=\"getFiatValue\"\n                    :date-string=\"dateString\"\n                    :time-string=\"timeString\"\n                    :hash-link=\"hashLink\"\n                    :address-link=\"addressLink\"\n                    :process-status=\"processStatus\"\n                    :error-message-string=\"errorMessageString\"\n                    :index=\"idx\"\n                    :child-update-notification=\"childUpdateNotification(idx)\"\n                    @showDetails=\"showDetails\"\n                  >\n                  </component>\n                </keep-alive>\n              </li>\n            </ul>\n            <div v-else class=\"notification-no-item\">\n              No notifications found :(\n            </div>\n          </li>\n        </ul>\n        <div v-else class=\"notification-no-item\">No notifications found :(</div>\n      </div>\n      <div v-if=\"detailsShown\" class=\"notification-item-container\">\n        <component\n          :is=\"useDetailComponent(detailType)\"\n          :shown=\"shown\"\n          :notice=\"notificationDetails\"\n          :convert-to-gwei=\"convertToGwei\"\n          :convert-to-eth=\"convertToEth\"\n          :get-fiat-value=\"getFiatValue\"\n          :date-string=\"dateString\"\n          :time-string=\"timeString\"\n          :hash-link=\"hashLink\"\n          :address-link=\"addressLink\"\n          :process-status=\"processStatus\"\n          :error-message-string=\"errorMessageString\"\n          :child-update-notification=\"\n            childUpdateNotification(notificationDetails.index)\n          \"\n        >\n        </component>\n      </div>\n    </b-modal>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport unit from 'ethjs-unit';\nimport BigNumber from 'bignumber.js';\nimport { isAddress } from '@/helpers/addressUtils';\nimport { ExtensionHelpers } from '@/helpers';\n\nimport SwapNotification from './components/NotificationTypes/SwapNotification/SwapNotification';\nimport TransactionNotification from './components/NotificationTypes/TransactionNotification/TransactionNotification';\nimport TransactionDetails from './components/NotificationTypes/NotificationDetails';\nimport SwapDetails from './components/NotificationTypes/SwapDetails';\nimport store from 'store';\nimport {\n  statusTypes,\n  listComponentMapping,\n  detailComponentMapping\n} from './components/config';\n\nimport {\n  INVESTIGATE_FAILURE_KEY,\n  notificationStatuses,\n  notificationType\n} from '@/helpers/notificationFormatters';\n\nimport { SwapProviders } from '@/partners';\n\nexport default {\n  components: {\n    'swap-notification': SwapNotification,\n    'transaction-notification': TransactionNotification,\n    'transaction-details': TransactionDetails,\n    'swap-details': SwapDetails\n  },\n  data() {\n    return {\n      cancelHide: false,\n      shown: false,\n      unreadCount: 0,\n      ethPrice: new BigNumber(0),\n      detailsShown: false,\n      detailType: '',\n      notificationDetails: {},\n      checkLoop: () => {}\n    };\n  },\n  computed: {\n    ...mapState(['web3', 'network', 'notifications']),\n    sortedNotifications() {\n      const notificationCopy = {};\n\n      Object.keys(this.notifications).forEach(addr => {\n        if (!this.notifications[addr]) {\n          notificationCopy[addr] = [];\n        } else {\n          const newArr = [];\n          notificationCopy[addr] = this.notifications[addr];\n          notificationCopy[addr].sort((a, b) => {\n            a = a.timestamp;\n            b = b.timestamp;\n            return a > b ? -1 : a < b ? 1 : 0;\n          });\n          notificationCopy[addr].forEach(entry => {\n            if (entry.network === this.network.type.name) {\n              newArr.push(entry);\n            }\n          });\n          notificationCopy[addr] = newArr;\n        }\n      });\n\n      return notificationCopy;\n    }\n  },\n  watch: {\n    notifications() {\n      this.countUnread();\n    }\n  },\n  created() {\n    window.chrome.storage.onChanged.addListener(this.notificationsSetup);\n  },\n  mounted() {\n    this.notificationsSetup();\n  },\n  destroyed() {\n    clearInterval(this.checkLoop);\n    window.chrome.storage.onChanged.removeListener(this.notificationsSetup);\n  },\n  methods: {\n    notificationsSetup() {\n      ExtensionHelpers.getAccounts(items => {\n        Object.keys(items).forEach(item => {\n          if (isAddress(item)) {\n            if (this.notifications[item] === undefined) {\n              this.notifications[item] = [];\n              store.set('notifications', this.notifications);\n            }\n          }\n        });\n      });\n\n      this.countUnread();\n      this.fetchBalanceData();\n      this.checkForUnResolvedTxNotifications();\n      this.checkLoop = setInterval(\n        this.checkForUnResolvedTxNotifications,\n        14000\n      );\n    },\n    hiddenModal() {\n      this.shown = false;\n      this.hideDetails();\n    },\n    checkForUnResolvedTxNotifications() {\n      ExtensionHelpers.getAccounts(accs => {\n        Object.keys(accs).forEach(item => {\n          if (isAddress(item)) {\n            if (!this.notifications[item]) return [];\n            const check = this.notifications[item]\n              .filter(entry => entry.network === this.network.type.name)\n              .filter(entry => {\n                const isUnResolved =\n                  entry.status === notificationStatuses.PENDING;\n                const notExternalSwap =\n                  entry.type === notificationType.TRANSACTION ||\n                  (entry.type === notificationType.SWAP &&\n                    entry.body.hasOwnProperty('isDex') &&\n                    entry.body.isDex === true);\n                const hasHash = entry.hash !== '' && entry.hash !== undefined;\n                return isUnResolved && hasHash && notExternalSwap;\n              });\n            check.forEach(entry => {\n              this.web3.eth.getTransactionReceipt(entry.hash).then(result => {\n                if (result === null) return;\n                const noticeIdx = this.notifications[item].findIndex(\n                  noticeEntry => entry.id === noticeEntry.id\n                );\n                if (noticeIdx >= 0) {\n                  entry.status = result.status\n                    ? notificationStatuses.COMPLETE\n                    : notificationStatuses.FAILED;\n                  entry.body.error = !result.status;\n                  entry.body.errorMessage = result.status\n                    ? ''\n                    : INVESTIGATE_FAILURE_KEY;\n                  entry.body.gasUsed = new BigNumber(result.gasUsed).toString();\n                  entry.body.blockNumber = new BigNumber(\n                    result.blockNumber\n                  ).toString();\n                  if (entry.body.isDex) {\n                    entry.swapStatus = result.status\n                      ? notificationStatuses.COMPLETE\n                      : notificationStatuses.FAILED;\n                    entry.body.timeRemaining = -1;\n                  }\n                  this.$store.dispatch('updateNotification', [\n                    item,\n                    noticeIdx,\n                    entry\n                  ]);\n                }\n              });\n            });\n          }\n        });\n      });\n    },\n    showNotifications() {\n      this.shown = true;\n      this.$refs.notification.show();\n    },\n    showDetails(details) {\n      this.cancelHide = true;\n      this.detailsShown = true;\n      this.detailType = details[0];\n      this.notificationDetails = details[1];\n      if (details.length === 3) {\n        this.notificationDetails.index = details[2];\n      }\n    },\n    hideDetails() {\n      this.detailsShown = false;\n      this.notificationDetails = {};\n      this.detailType = '';\n    },\n    useComponent(type) {\n      if (listComponentMapping[type]) {\n        return listComponentMapping[type];\n      }\n      return 'transaction-notification';\n    },\n    useDetailComponent(type) {\n      if (detailComponentMapping[type]) {\n        return detailComponentMapping[type];\n      }\n      return 'transaction-details';\n    },\n    countUnread() {\n      this.unreadCount = 0;\n      const notifications = Object.keys(this.sortedNotifications);\n      if (notifications.length) {\n        notifications.forEach(item => {\n          if (this.sortedNotifications[item].length > 0) {\n            this.sortedNotifications[item].forEach(notif => {\n              if (notif.read === false) this.unreadCount++;\n            });\n          }\n        });\n      }\n    },\n    expand(idx, notif, address) {\n      return () => {\n        const updatedNotif = notif;\n        if (notif.expanded !== true) {\n          updatedNotif.read = true;\n          updatedNotif.expanded = true;\n        } else {\n          updatedNotif.expanded = false;\n        }\n\n        this.$store.dispatch('updateNotification', [\n          address,\n          idx,\n          updatedNotif\n        ]);\n      };\n    },\n    hasExpanded(address) {\n      const hasExpanded = this.notifications[address].find(notice => {\n        return notice.expanded === true;\n      });\n\n      // eslint-disable-next-line\n      return !!hasExpanded;\n    },\n    expandAll(address) {\n      this.notifications[address].forEach((notice, idx) => {\n        const updatedNotif = notice;\n        if (notice.expanded !== true) {\n          updatedNotif.read = true;\n          updatedNotif.expanded = true;\n        }\n        this.$store.dispatch('updateNotification', [\n          address,\n          idx,\n          updatedNotif\n        ]);\n      });\n    },\n    collapseAll(address) {\n      this.notifications[address].forEach((notice, idx) => {\n        const updatedNotif = notice;\n        updatedNotif.expanded = false;\n        this.$store.dispatch('updateNotification', [\n          address,\n          idx,\n          updatedNotif\n        ]);\n      });\n    },\n    childUpdateNotification(idx) {\n      if (typeof idx === 'undefined') return () => {};\n      return updatedNotif => {\n        this.$store.dispatch('updateNotification', [\n          this.account.address,\n          idx,\n          updatedNotif\n        ]);\n      };\n    },\n    processStatus(rawStatus) {\n      if (statusTypes[rawStatus]) {\n        return statusTypes[rawStatus];\n      }\n      return statusTypes.statusError;\n    },\n    errorMessageString(notice) {\n      if (notice.body.errorMessage === INVESTIGATE_FAILURE_KEY) {\n        return this.$t('header.investigate');\n      }\n      return notice.body.errorMessage;\n    },\n    hashLink(hash, currency) {\n      if (currency && SwapProviders.isNotToken(currency)) {\n        return SwapProviders.getBlockChainExplorerUrl(currency, hash);\n      }\n      if (this.network.type.blockExplorerTX) {\n        return this.network.type.blockExplorerTX.replace('[[txHash]]', hash);\n      }\n    },\n    addressLink(addr, currency) {\n      if (currency && SwapProviders.isNotToken(currency)) {\n        return SwapProviders.getAddressLookupUrl(currency, addr);\n      }\n      if (this.network.type.blockExplorerAddr) {\n        return this.network.type.blockExplorerAddr.replace('[[address]]', addr);\n      }\n    },\n    dateString(notice) {\n      if (notice !== {}) {\n        return new Date(notice.timestamp).toLocaleDateString(\n          this._i18n.locale.replace('_', '-')\n        );\n      }\n      return '';\n    },\n    timeString(notice) {\n      if (notice !== {}) {\n        return new Date(notice.timestamp).toLocaleTimeString(\n          this._i18n.locale.replace('_', '-')\n        );\n      }\n      return '';\n    },\n    async fetchBalanceData() {\n      const url = 'https://cryptorates.mewapi.io/ticker';\n      const fetchValues = await fetch(url);\n      const values = await fetchValues.json();\n      if (!values) return 0;\n      if (!values && !values.data && !values.data['ETH']) return 0;\n      this.ethPrice = new BigNumber(values.data['ETH'].quotes.USD.price);\n    },\n    convertToGwei(value) {\n      if (this.notValidNumber(value)) return '';\n      return unit.fromWei(new BigNumber(value).toFixed(), 'Gwei');\n    },\n    convertToEth(value) {\n      if (this.notValidNumber(value)) return '';\n      return unit.fromWei(new BigNumber(value).toFixed(), 'ether');\n    },\n    getFiatValue(value) {\n      if (this.notValidNumber(value)) return '';\n      if (this.ethPrice === 0) return '';\n      return new BigNumber(this.convertToEth(value))\n        .multipliedBy(new BigNumber(this.ethPrice))\n        .decimalPlaces(2)\n        .toFixed();\n    },\n    notValidNumber(value) {\n      return (\n        typeof value === 'undefined' || Number.isNaN(value) || value === 'NaN'\n      );\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import './ExtensionNotification.scss';\n</style>\n"]}]}