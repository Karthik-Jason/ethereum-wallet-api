{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/layouts/InterfaceLayout/containers/SwapContainer/components/SwapCurrencyPicker/SwapCurrencyPicker.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/layouts/InterfaceLayout/containers/SwapContainer/components/SwapCurrencyPicker/SwapCurrencyPicker.vue","mtime":1574664278306},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js","mtime":1574664275010},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js","mtime":1574664277774}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport '@/assets/images/currency/coins/asFont/cryptocoins.css';\nimport '@/assets/images/currency/coins/asFont/cryptocoins-colors.css';\nimport { hasIcon } from '@/partners';\nexport default {\n  props: {\n    currencies: {\n      type: Array,\n      default: function() {\n        return [];\n      }\n    },\n    page: {\n      type: String,\n      default: ''\n    },\n    token: {\n      type: Boolean,\n      default: true\n    },\n    fromSource: {\n      type: Boolean,\n      default: false\n    },\n    selectable: {\n      type: Boolean,\n      default: true\n    },\n    defaultValue: {\n      type: Object,\n      default: function() {\n        return {};\n      }\n    },\n    overrideCurrency: {\n      type: Object,\n      default: function() {\n        return {};\n      }\n    }\n  },\n  data() {\n    return {\n      icon: '',\n      localCurrencies: [],\n      selectedCurrency: { name: 'Select an item', abi: '', address: '' },\n      open: false,\n      search: '',\n      abi: '',\n      address: ''\n    };\n  },\n  watch: {\n    overrideCurrency(newVal) {\n      this.selectedCurrency = newVal;\n    },\n    selectedCurrency(newVal) {\n      this.$emit('selectedCurrency', newVal, this.fromSource ? 'to' : 'from');\n    },\n    currencies(newVal) {\n      this.localCurrencies = [];\n      newVal.forEach(curr => this.localCurrencies.push(curr));\n    },\n    search(newVal) {\n      if (newVal !== '') {\n        this.localCurrencies = this.currencies.filter(curr => {\n          if (curr.name && curr.symbol) {\n            if (\n              curr.name.toLowerCase().includes(newVal.toLowerCase()) ||\n              curr.symbol.toLowerCase().includes(newVal.toLowerCase())\n            ) {\n              return curr;\n            }\n          }\n        });\n      } else {\n        this.localCurrencies = [];\n        this.currencies.forEach(curr => this.localCurrencies.push(curr));\n      }\n    }\n  },\n  mounted() {\n    if (this.currencies) {\n      this.currencies.forEach(curr => this.localCurrencies.push(curr));\n    }\n    if (this.defaultValue.symbol && this.defaultValue.name) {\n      this.selectedCurrency = this.defaultValue;\n    } else if (typeof this.fromSource === 'boolean') {\n      if (this.fromSource) {\n        this.selectedCurrency = { name: 'Ether', symbol: 'ETH' };\n      } else {\n        this.selectedCurrency = { name: 'Bitcoin', symbol: 'BTC' };\n      }\n    }\n  },\n  methods: {\n    iconFetcher(currency) {\n      let icon;\n      try {\n        // eslint-disable-next-line\n        icon = require(`@/assets/images/currency/coins/AllImages/${currency}.svg`);\n      } catch (e) {\n        // eslint-disable-next-line\n        return require(`@/assets/images/icons/web-solution.svg`);\n      }\n      return icon;\n    },\n    getIcon(currency) {\n      return hasIcon(currency);\n    },\n    openDropdown() {\n      if (this.selectable) {\n        this.open = !this.open;\n      }\n    },\n    selectCurrency(currency) {\n      this.openDropdown();\n      this.selectedCurrency = currency;\n    }\n  }\n};\n",{"version":3,"sources":["SwapCurrencyPicker.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqfile":"SwapCurrencyPicker.vue","sourceRoot":"src/layouts/InterfaceLayout/containers/SwapContainer/components/SwapCurrencyPicker","sourcesContent":["<template lang=\"html\">\n  <div v-click-outside=\"openDropdown\" class=\"currency-picker-container\">\n    <div>\n      <div\n        :class=\"[\n          open ? 'open' : '',\n          'dropdown-container',\n          token ? 'dropdown-text-container' : 'dropdown-text-container-white'\n        ]\"\n        @click=\"openDropdown\"\n      >\n        <p>\n          <span\n            v-if=\"getIcon(selectedCurrency.symbol) !== ''\"\n            :class=\"['cc', getIcon(selectedCurrency.symbol), 'cc-icon']\"\n            class=\"currency-symbol\"\n          />\n          <span\n            v-if=\"getIcon(selectedCurrency.symbol) === ''\"\n            class=\"currency-symbol\"\n          >\n            <img\n              :src=\"iconFetcher(selectedCurrency.symbol)\"\n              class=\"icon-image\"\n              alt\n            />\n          </span>\n\n          {{ selectedCurrency.symbol }}\n          <span class=\"subname\">- {{ selectedCurrency.name }}</span>\n        </p>\n        <p v-show=\"!token\">{{ selectedCurrency.name }}</p>\n        <i\n          v-if=\"selectable\"\n          :class=\"['fa', open ? 'fa-angle-up' : 'fa-angle-down']\"\n        />\n      </div>\n      <div\n        v-if=\"selectable\"\n        :class=\"[open ? 'open' : 'hide', 'dropdown-item-container']\"\n      >\n        <div class=\"dropdown-search-container\">\n          <input v-model=\"search\" :placeholder=\"$t('interface.search')\" />\n          <i class=\"fa fa-search\" />\n        </div>\n        <div class=\"item-container\">\n          <div\n            v-for=\"(curr, idx) in localCurrencies\"\n            :class=\"[\n              token\n                ? selectedCurrency.symbol === curr.symbol\n                  ? 'selected'\n                  : ''\n                : selectedCurrency.name === curr.name\n                ? 'selected'\n                : '',\n              'item'\n            ]\"\n            :key=\"\n              token ? curr.name + curr.symbol + page : curr.name + page + idx\n            \"\n            @click=\"selectCurrency(curr)\"\n          >\n            <p>\n              <span\n                v-if=\"getIcon(curr.symbol) !== ''\"\n                :class=\"['cc', getIcon(curr.symbol), 'cc-icon']\"\n                class=\"currency-symbol\"\n              />\n              <span v-if=\"getIcon(curr.symbol) === ''\" class=\"currency-symbol\">\n                <img :src=\"iconFetcher(curr.symbol)\" class=\"icon-image\" alt />\n              </span>\n              {{ curr.symbol }}\n              <span class=\"subname\">- {{ curr.name }}</span>\n            </p>\n            <p />\n            <p v-show=\"!token\">{{ curr.name }}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport '@/assets/images/currency/coins/asFont/cryptocoins.css';\nimport '@/assets/images/currency/coins/asFont/cryptocoins-colors.css';\nimport { hasIcon } from '@/partners';\nexport default {\n  props: {\n    currencies: {\n      type: Array,\n      default: function() {\n        return [];\n      }\n    },\n    page: {\n      type: String,\n      default: ''\n    },\n    token: {\n      type: Boolean,\n      default: true\n    },\n    fromSource: {\n      type: Boolean,\n      default: false\n    },\n    selectable: {\n      type: Boolean,\n      default: true\n    },\n    defaultValue: {\n      type: Object,\n      default: function() {\n        return {};\n      }\n    },\n    overrideCurrency: {\n      type: Object,\n      default: function() {\n        return {};\n      }\n    }\n  },\n  data() {\n    return {\n      icon: '',\n      localCurrencies: [],\n      selectedCurrency: { name: 'Select an item', abi: '', address: '' },\n      open: false,\n      search: '',\n      abi: '',\n      address: ''\n    };\n  },\n  watch: {\n    overrideCurrency(newVal) {\n      this.selectedCurrency = newVal;\n    },\n    selectedCurrency(newVal) {\n      this.$emit('selectedCurrency', newVal, this.fromSource ? 'to' : 'from');\n    },\n    currencies(newVal) {\n      this.localCurrencies = [];\n      newVal.forEach(curr => this.localCurrencies.push(curr));\n    },\n    search(newVal) {\n      if (newVal !== '') {\n        this.localCurrencies = this.currencies.filter(curr => {\n          if (curr.name && curr.symbol) {\n            if (\n              curr.name.toLowerCase().includes(newVal.toLowerCase()) ||\n              curr.symbol.toLowerCase().includes(newVal.toLowerCase())\n            ) {\n              return curr;\n            }\n          }\n        });\n      } else {\n        this.localCurrencies = [];\n        this.currencies.forEach(curr => this.localCurrencies.push(curr));\n      }\n    }\n  },\n  mounted() {\n    if (this.currencies) {\n      this.currencies.forEach(curr => this.localCurrencies.push(curr));\n    }\n    if (this.defaultValue.symbol && this.defaultValue.name) {\n      this.selectedCurrency = this.defaultValue;\n    } else if (typeof this.fromSource === 'boolean') {\n      if (this.fromSource) {\n        this.selectedCurrency = { name: 'Ether', symbol: 'ETH' };\n      } else {\n        this.selectedCurrency = { name: 'Bitcoin', symbol: 'BTC' };\n      }\n    }\n  },\n  methods: {\n    iconFetcher(currency) {\n      let icon;\n      try {\n        // eslint-disable-next-line\n        icon = require(`@/assets/images/currency/coins/AllImages/${currency}.svg`);\n      } catch (e) {\n        // eslint-disable-next-line\n        return require(`@/assets/images/icons/web-solution.svg`);\n      }\n      return icon;\n    },\n    getIcon(currency) {\n      return hasIcon(currency);\n    },\n    openDropdown() {\n      if (this.selectable) {\n        this.open = !this.open;\n      }\n    },\n    selectCurrency(currency) {\n      this.openDropdown();\n      this.selectedCurrency = currency;\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'SwapCurrencyPicker.scss';\n</style>\n"]}]}