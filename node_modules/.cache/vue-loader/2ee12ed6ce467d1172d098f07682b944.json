{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/layouts/InterfaceLayout/components/MobileInterfaceAddress/MobileInterfaceAddress.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/layouts/InterfaceLayout/components/MobileInterfaceAddress/MobileInterfaceAddress.vue","mtime":1574664278302},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/thread-loader/dist/cjs.js","mtime":1574664277654},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js","mtime":1574664275010},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js","mtime":1574664277774}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport AddressQrcodeModal from '@/components/AddressQrcodeModal';\nimport Blockie from '@/components/Blockie';\nimport { mapState } from 'vuex';\nimport { Toast } from '@/helpers';\nimport {\n  KEYSTORE,\n  PRIV_KEY,\n  MEW_CONNECT,\n  WEB3_WALLET\n} from '@/wallets/bip44/walletTypes';\n\nexport default {\n  components: {\n    blockie: Blockie,\n    'address-qrcode-modal': AddressQrcodeModal\n  },\n  props: {\n    address: {\n      type: String,\n      default: ''\n    },\n    print: {\n      type: Function,\n      default: function() {}\n    },\n    switchAddr: {\n      type: Function,\n      default: function() {}\n    }\n  },\n  data() {\n    return {\n      hasMultipleAddr: false\n    };\n  },\n  computed: {\n    ...mapState(['account'])\n  },\n  mounted() {\n    if (this.account.address !== null) {\n      if (\n        this.account.identifier !== KEYSTORE &&\n        this.account.identifier !== PRIV_KEY &&\n        this.account.identifier !== MEW_CONNECT &&\n        this.account.identifier !== WEB3_WALLET\n      ) {\n        this.hasMultipleAddr = true;\n      } else {\n        this.hasMultipleAddr = false;\n      }\n    }\n  },\n  methods: {\n    copy() {\n      this.$refs.copyAddress.select();\n      document.execCommand('copy');\n      Toast.responseHandler('Copied!', Toast.INFO);\n    },\n    openQrcode() {\n      this.$refs.qrcode.$refs.addressQrcode.show();\n    }\n  }\n};\n",{"version":3,"sources":["MobileInterfaceAddress.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"MobileInterfaceAddress.vue","sourceRoot":"src/layouts/InterfaceLayout/components/MobileInterfaceAddress","sourcesContent":["<template>\n  <div class=\"mobile-interface-address\">\n    <address-qrcode-modal ref=\"qrcode\" :address=\"account.address\" />\n    <div class=\"wrap\">\n      <div class=\"top-block\">\n        <div class=\"blockie-container\">\n          <blockie\n            :address=\"address\"\n            :size=\"8\"\n            :scale=\"16\"\n            class=\"blockie-image\"\n          />\n        </div>\n        <div class=\"address\">{{ address }}</div>\n        <input\n          ref=\"copyAddress\"\n          :value=\"address\"\n          class=\"hidden-input\"\n          autocomplete=\"off\"\n        />\n        <div class=\"address-end\">\n          {{ address.substring(address.length - 4, address.length) }}\n        </div>\n        <div class=\"buttons-container\">\n          <button @click=\"openQrcode\">\n            <img alt src=\"~@/assets/images/icons/qr-code-white.svg\" />\n            <div class=\"floating-barcode\">\n              <div class=\"barcode-image\"></div>\n            </div>\n          </button>\n          <button @click=\"print\">\n            <img alt src=\"~@/assets/images/icons/printer-white.svg\" />\n          </button>\n          <button @click=\"copy\">\n            <img alt src=\"~@/assets/images/icons/copy.svg\" />\n          </button>\n        </div>\n      </div>\n      <div v-if=\"hasMultipleAddr\" class=\"bottom-block\">\n        <button @click=\"switchAddr\">{{ $t('common.changeAddress') }}</button>\n      </div>\n    </div>\n    <!-- .wrap -->\n  </div>\n</template>\n\n<script>\nimport AddressQrcodeModal from '@/components/AddressQrcodeModal';\nimport Blockie from '@/components/Blockie';\nimport { mapState } from 'vuex';\nimport { Toast } from '@/helpers';\nimport {\n  KEYSTORE,\n  PRIV_KEY,\n  MEW_CONNECT,\n  WEB3_WALLET\n} from '@/wallets/bip44/walletTypes';\n\nexport default {\n  components: {\n    blockie: Blockie,\n    'address-qrcode-modal': AddressQrcodeModal\n  },\n  props: {\n    address: {\n      type: String,\n      default: ''\n    },\n    print: {\n      type: Function,\n      default: function() {}\n    },\n    switchAddr: {\n      type: Function,\n      default: function() {}\n    }\n  },\n  data() {\n    return {\n      hasMultipleAddr: false\n    };\n  },\n  computed: {\n    ...mapState(['account'])\n  },\n  mounted() {\n    if (this.account.address !== null) {\n      if (\n        this.account.identifier !== KEYSTORE &&\n        this.account.identifier !== PRIV_KEY &&\n        this.account.identifier !== MEW_CONNECT &&\n        this.account.identifier !== WEB3_WALLET\n      ) {\n        this.hasMultipleAddr = true;\n      } else {\n        this.hasMultipleAddr = false;\n      }\n    }\n  },\n  methods: {\n    copy() {\n      this.$refs.copyAddress.select();\n      document.execCommand('copy');\n      Toast.responseHandler('Copied!', Toast.INFO);\n    },\n    openQrcode() {\n      this.$refs.qrcode.$refs.addressQrcode.show();\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'MobileInterfaceAddress.scss';\n</style>\n"]}]}