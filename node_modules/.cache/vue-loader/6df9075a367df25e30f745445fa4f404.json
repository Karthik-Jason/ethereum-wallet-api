{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/layouts/InterfaceLayout/containers/NFTManagerContainer/components/NftDetails/NftDetails.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/layouts/InterfaceLayout/containers/NFTManagerContainer/components/NftDetails/NftDetails.vue","mtime":1573477612032},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapState } from 'vuex';\nimport { Misc, Toast } from '@/helpers';\nimport InterfaceContainerTitle from '@/layouts/InterfaceLayout/components/InterfaceContainerTitle';\nimport SmallBackButton from '@/layouts/InterfaceLayout/components/SmallBackButton';\nimport DropDownAddressSelector from '@/components/DropDownAddressSelector';\nimport StandardButton from '@/components/Buttons/StandardButton';\nimport placeholderImage from '@/assets/images/icons/defaultToken.png';\n\nexport default {\n  components: {\n    'interface-container-title': InterfaceContainerTitle,\n    'back-button': SmallBackButton,\n    'address-selector': DropDownAddressSelector,\n    'standard-button': StandardButton\n  },\n  props: {\n    selectedTitle: {\n      type: String,\n      default: 'Error'\n    },\n    nft: {\n      type: Object,\n      default: function() {\n        return {};\n      }\n    },\n    selectedContract: {\n      type: String,\n      default: 'Error'\n    },\n    nftConfig: {\n      type: Object,\n      default: function() {\n        return {};\n      }\n    }\n  },\n  data() {\n    return {\n      toAddress: '',\n      tokenContract: {},\n      ERC721tokenContract: {},\n      cryptoKittiesContract: {},\n      cryptoKittiesConfig: '0x06012c8cf97bead5deae237070f9587f8e7a266d',\n      sendButton: {\n        title: this.$t('interface.send'),\n        buttonStyle: 'green',\n        helpCenter: true,\n        noMinWidth: true,\n        fullWidth: true\n      }\n    };\n  },\n\n  computed: {\n    ...mapState(['account', 'web3']),\n    isValidAddress() {\n      if (this.toAddress !== '') {\n        return Misc.isValidENSorEtherAddress(this.toAddress);\n      }\n      return false;\n    }\n  },\n  watch: {},\n  mounted() {\n    this.ERC721tokenContract = new this.web3.eth.Contract([\n      {\n        constant: false,\n        inputs: [\n          { name: '_from', type: 'address' },\n          { name: '_to', type: 'address' },\n          {\n            name: '_tokenId',\n            type: 'uint256'\n          }\n        ],\n        name: 'transferFrom',\n        outputs: [],\n        payable: false,\n        stateMutability: 'nonpayable',\n        type: 'function'\n      }\n    ]);\n  },\n  methods: {\n    getImage(nft) {\n      if (nft.customNft) {\n        return placeholderImage;\n      }\n      return nft.image;\n    },\n    prepareTransfer(toAddress) {\n      this.toAddress = toAddress;\n      this.ERC721tokenContract.options.address = this.nft.contract;\n    },\n    buildData() {\n      if (\n        this.nft.contract.toLowerCase() ===\n        this.cryptoKittiesConfig.toLowerCase()\n      ) {\n        this.cryptoKittiesContract = new this.web3.eth.Contract([\n          {\n            constant: false,\n            inputs: [\n              { name: '_to', type: 'address' },\n              { name: '_tokenId', type: 'uint256' }\n            ],\n            name: 'transfer',\n            outputs: [],\n            payable: false,\n            stateMutability: 'nonpayable',\n            type: 'function'\n          }\n        ]);\n\n        return this.cryptoKittiesContract.methods\n          .transfer(this.toAddress, this.nft.token)\n          .encodeABI();\n      }\n      return this.ERC721tokenContract.methods\n        .transferFrom(this.account.address, this.toAddress, this.nft.token)\n        .encodeABI();\n    },\n    transfer() {\n      if (this.isValidAddress) {\n        const txData = this.buildData();\n        const raw = {\n          from: this.account.address,\n          to: this.nft.contract,\n          data: txData\n        };\n        this.web3.eth\n          .sendTransaction(raw)\n          .on('transactionHash', () => {\n            this.$emit('nftTransferred', this.nft);\n            this.toAddress = '';\n          })\n          .catch(err => {\n            this.$emit('resetNFT', this.nft);\n            Toast.responseHandler(err, Toast.ERROR);\n          });\n      }\n    },\n    goBack() {\n      this.$emit('back');\n    }\n  }\n};\n",{"version":3,"sources":["NftDetails.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"NftDetails.vue","sourceRoot":"src/layouts/InterfaceLayout/containers/NFTManagerContainer/components/NftDetails","sourcesContent":["<template>\n  <div class=\"crypto-kitties-details\">\n    <div class=\"crypto-kitties-details-content-container\">\n      <back-button @click.native=\"goBack\" />\n      <div class=\"grid-container\">\n        <div class=\"kitty-image\">\n          <img :src=\"getImage(nft)\" alt />\n        </div>\n        <div class=\"kitty-text\">\n          <h3>{{ $t('dapps.sendMy', { value: selectedTitle }) }}</h3>\n          <p>#{{ nft.token }}</p>\n          <div class=\"address-input-container\">\n            <address-selector\n              :title=\"$t('interface.sendTxToAddr')\"\n              @toAddress=\"prepareTransfer\"\n            />\n            <div class=\"send-button-container\">\n              <standard-button\n                :button-disabled=\"!isValidAddress\"\n                :options=\"sendButton\"\n                @click.native=\"transfer\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport { Misc, Toast } from '@/helpers';\nimport InterfaceContainerTitle from '@/layouts/InterfaceLayout/components/InterfaceContainerTitle';\nimport SmallBackButton from '@/layouts/InterfaceLayout/components/SmallBackButton';\nimport DropDownAddressSelector from '@/components/DropDownAddressSelector';\nimport StandardButton from '@/components/Buttons/StandardButton';\nimport placeholderImage from '@/assets/images/icons/defaultToken.png';\n\nexport default {\n  components: {\n    'interface-container-title': InterfaceContainerTitle,\n    'back-button': SmallBackButton,\n    'address-selector': DropDownAddressSelector,\n    'standard-button': StandardButton\n  },\n  props: {\n    selectedTitle: {\n      type: String,\n      default: 'Error'\n    },\n    nft: {\n      type: Object,\n      default: function() {\n        return {};\n      }\n    },\n    selectedContract: {\n      type: String,\n      default: 'Error'\n    },\n    nftConfig: {\n      type: Object,\n      default: function() {\n        return {};\n      }\n    }\n  },\n  data() {\n    return {\n      toAddress: '',\n      tokenContract: {},\n      ERC721tokenContract: {},\n      cryptoKittiesContract: {},\n      cryptoKittiesConfig: '0x06012c8cf97bead5deae237070f9587f8e7a266d',\n      sendButton: {\n        title: this.$t('interface.send'),\n        buttonStyle: 'green',\n        helpCenter: true,\n        noMinWidth: true,\n        fullWidth: true\n      }\n    };\n  },\n\n  computed: {\n    ...mapState(['account', 'web3']),\n    isValidAddress() {\n      if (this.toAddress !== '') {\n        return Misc.isValidENSorEtherAddress(this.toAddress);\n      }\n      return false;\n    }\n  },\n  watch: {},\n  mounted() {\n    this.ERC721tokenContract = new this.web3.eth.Contract([\n      {\n        constant: false,\n        inputs: [\n          { name: '_from', type: 'address' },\n          { name: '_to', type: 'address' },\n          {\n            name: '_tokenId',\n            type: 'uint256'\n          }\n        ],\n        name: 'transferFrom',\n        outputs: [],\n        payable: false,\n        stateMutability: 'nonpayable',\n        type: 'function'\n      }\n    ]);\n  },\n  methods: {\n    getImage(nft) {\n      if (nft.customNft) {\n        return placeholderImage;\n      }\n      return nft.image;\n    },\n    prepareTransfer(toAddress) {\n      this.toAddress = toAddress;\n      this.ERC721tokenContract.options.address = this.nft.contract;\n    },\n    buildData() {\n      if (\n        this.nft.contract.toLowerCase() ===\n        this.cryptoKittiesConfig.toLowerCase()\n      ) {\n        this.cryptoKittiesContract = new this.web3.eth.Contract([\n          {\n            constant: false,\n            inputs: [\n              { name: '_to', type: 'address' },\n              { name: '_tokenId', type: 'uint256' }\n            ],\n            name: 'transfer',\n            outputs: [],\n            payable: false,\n            stateMutability: 'nonpayable',\n            type: 'function'\n          }\n        ]);\n\n        return this.cryptoKittiesContract.methods\n          .transfer(this.toAddress, this.nft.token)\n          .encodeABI();\n      }\n      return this.ERC721tokenContract.methods\n        .transferFrom(this.account.address, this.toAddress, this.nft.token)\n        .encodeABI();\n    },\n    transfer() {\n      if (this.isValidAddress) {\n        const txData = this.buildData();\n        const raw = {\n          from: this.account.address,\n          to: this.nft.contract,\n          data: txData\n        };\n        this.web3.eth\n          .sendTransaction(raw)\n          .on('transactionHash', () => {\n            this.$emit('nftTransferred', this.nft);\n            this.toAddress = '';\n          })\n          .catch(err => {\n            this.$emit('resetNFT', this.nft);\n            Toast.responseHandler(err, Toast.ERROR);\n          });\n      }\n    },\n    goBack() {\n      this.$emit('back');\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'NftDetails';\n</style>\n"]}]}