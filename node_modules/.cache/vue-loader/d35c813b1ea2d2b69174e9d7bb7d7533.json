{"remainingRequest":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/dapps/MakerDai/components/SelectCdpEntry/SelectCdpEntry.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/dapps/MakerDai/components/SelectCdpEntry/SelectCdpEntry.vue","mtime":1573477611656},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapState } from 'vuex';\nimport InterfaceContainerTitle from '@/layouts/InterfaceLayout/components/InterfaceContainerTitle';\nimport InterfaceBottomText from '@/components/InterfaceBottomText';\nimport Blockie from '@/components/Blockie';\nimport BigNumber from 'bignumber.js/bignumber.js';\n\nconst toBigNumber = num => {\n  return new BigNumber(num);\n};\n\nexport default {\n  components: {\n    'interface-container-title': InterfaceContainerTitle,\n    'interface-bottom-text': InterfaceBottomText,\n    blockie: Blockie\n  },\n  props: {\n    cdpId: {\n      type: String,\n      default: '0'\n    },\n    aCdp: {\n      type: Object,\n      default: function() {\n        return {};\n      }\n    }\n  },\n  data() {\n    return {};\n  },\n  computed: {\n    ...mapState(['account', 'gasPrice', 'web3', 'network', 'ens']),\n    hasProxy() {\n      if (this.aCdp) {\n        return !this.aCdp.noProxy;\n      }\n      return true;\n    }\n  },\n  async mounted() {},\n  methods: {\n    openManage() {\n      if (this.$route.path.includes('maker-dai')) {\n        this.$router.push({\n          name: 'manage',\n          params: {\n            cdpId: this.cdpId\n          }\n        });\n      }\n    },\n    openMigrate() {\n      if (this.$route.path.includes('maker-dai')) {\n        this.$router.push({\n          name: 'migrate',\n          params: {\n            cdpId: this.cdpId\n          }\n        });\n      }\n    },\n    displayPercentValue(raw) {\n      if (!BigNumber.isBigNumber(raw)) raw = new BigNumber(raw);\n      return raw.times(100).toString();\n    },\n    displayFixedValue(raw, decimals = 3) {\n      if (!BigNumber.isBigNumber(raw)) raw = new BigNumber(raw);\n      if (raw.isFinite()) {\n        return raw.toFixed(decimals).toString();\n      }\n      return '--';\n    },\n    safeRank(val) {\n      if (toBigNumber(val).gte(2)) {\n        return 'green';\n      }\n      if (toBigNumber(val).lt(1.6)) {\n        return 'red';\n      }\n      return 'orange';\n    }\n  }\n};\n",{"version":3,"sources":["SelectCdpEntry.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6FA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"SelectCdpEntry.vue","sourceRoot":"src/dapps/MakerDai/components/SelectCdpEntry","sourcesContent":["<template>\n  <div>\n    <div class=\"container-maker\">\n      <div class=\"manage-container\">\n        <div class=\"manage-container-blocks\">\n          <div class=\"information-single-block\">\n            <div class=\"block-item\">\n              <div class=\"block-title\">\n                <div class=\"select-label\">\n                  <p>{{ $t('dappsMaker.positionLabel', { value: cdpId }) }}</p>\n\n                  <p>\n                    <span class=\"standard-button__green-border\">\n                      <button\n                        v-if=\"hasProxy\"\n                        class=\"the-button-box\"\n                        @click=\"openManage(cdpId)\"\n                      >\n                        {{ $t('dappsMaker.manage') }}\n                      </button>\n                      <button\n                        v-if=\"!hasProxy\"\n                        class=\"the-button-box\"\n                        @click=\"openMigrate(cdpId)\"\n                      >\n                        {{ $t('dappsMaker.view') }}\n                      </button>\n                    </span>\n                  </p>\n                </div>\n              </div>\n\n              <div class=\"block-content-container\">\n                <div class=\"block-content\">\n                  <div class=\"item\">\n                    <div>\n                      <p>{{ $t('dappsMaker.deposited') }}</p>\n                    </div>\n                    <div>\n                      {{ displayFixedValue(aCdp.ethCollateral, 5, false) }}\n                      <span>ETH</span>\n                    </div>\n                    <div>\n                      {{ displayFixedValue(aCdp.pethCollateral, 5, true) }}\n                      <span>PETH</span> /\n                      {{ displayFixedValue(aCdp.usdCollateral, 2) }}\n                      <span>USD</span>\n                    </div>\n                    <div>\n                      <br />\n                      <div>{{ $t('dappsMaker.liquidPrice') }} (ETH/USD)</div>\n                      <span :class=\"safeRank(aCdp.collatRatio)\">{{\n                        aCdp ? displayFixedValue(aCdp.liquidationPrice, 2) : 0\n                      }}</span>\n                      <span class=\"liq-usd\"> USD</span>\n                    </div>\n                  </div>\n                </div>\n                <div class=\"block-content\">\n                  <div class=\"item\">\n                    <div>\n                      <p>{{ $t('dappsMaker.generated') }}</p>\n                    </div>\n                    <div>{{ aCdp.debtValue }} <span>DAI</span></div>\n                    <div>\n                      {{ displayFixedValue(aCdp.debtValue, 2) }}\n                      <span>USD</span>\n                    </div>\n                    <div>\n                      <br />\n                      <div>{{ $t('dappsMaker.collateralRatio') }}</div>\n                      <span :class=\"safeRank(aCdp.collatRatio)\">\n                        {{\n                          aCdp\n                            ? displayFixedValue(\n                                displayPercentValue(aCdp.collatRatio)\n                              )\n                            : 0\n                        }}%\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport InterfaceContainerTitle from '@/layouts/InterfaceLayout/components/InterfaceContainerTitle';\nimport InterfaceBottomText from '@/components/InterfaceBottomText';\nimport Blockie from '@/components/Blockie';\nimport BigNumber from 'bignumber.js/bignumber.js';\n\nconst toBigNumber = num => {\n  return new BigNumber(num);\n};\n\nexport default {\n  components: {\n    'interface-container-title': InterfaceContainerTitle,\n    'interface-bottom-text': InterfaceBottomText,\n    blockie: Blockie\n  },\n  props: {\n    cdpId: {\n      type: String,\n      default: '0'\n    },\n    aCdp: {\n      type: Object,\n      default: function() {\n        return {};\n      }\n    }\n  },\n  data() {\n    return {};\n  },\n  computed: {\n    ...mapState(['account', 'gasPrice', 'web3', 'network', 'ens']),\n    hasProxy() {\n      if (this.aCdp) {\n        return !this.aCdp.noProxy;\n      }\n      return true;\n    }\n  },\n  async mounted() {},\n  methods: {\n    openManage() {\n      if (this.$route.path.includes('maker-dai')) {\n        this.$router.push({\n          name: 'manage',\n          params: {\n            cdpId: this.cdpId\n          }\n        });\n      }\n    },\n    openMigrate() {\n      if (this.$route.path.includes('maker-dai')) {\n        this.$router.push({\n          name: 'migrate',\n          params: {\n            cdpId: this.cdpId\n          }\n        });\n      }\n    },\n    displayPercentValue(raw) {\n      if (!BigNumber.isBigNumber(raw)) raw = new BigNumber(raw);\n      return raw.times(100).toString();\n    },\n    displayFixedValue(raw, decimals = 3) {\n      if (!BigNumber.isBigNumber(raw)) raw = new BigNumber(raw);\n      if (raw.isFinite()) {\n        return raw.toFixed(decimals).toString();\n      }\n      return '--';\n    },\n    safeRank(val) {\n      if (toBigNumber(val).gte(2)) {\n        return 'green';\n      }\n      if (toBigNumber(val).lt(1.6)) {\n        return 'red';\n      }\n      return 'orange';\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'SelectCdpEntry';\n</style>\n"]}]}