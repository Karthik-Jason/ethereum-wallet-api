{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/layouts/InterfaceLayout/containers/InteractWithContractContainer/InteractWithContractContainer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/layouts/InterfaceLayout/containers/InteractWithContractContainer/InteractWithContractContainer.vue","mtime":1573477612012},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapState } from 'vuex';\nimport CurrencyPicker from '../../components/CurrencyPicker';\nimport InterfaceContainerTitle from '../../components/InterfaceContainerTitle';\nimport InterfaceBottomText from '@/components/InterfaceBottomText';\nimport { Misc, Toast } from '@/helpers';\nimport { isAddress } from '@/helpers/addressUtils';\nimport * as unit from 'ethjs-unit';\nimport store from 'store';\n\nexport default {\n  components: {\n    'interface-container-title': InterfaceContainerTitle,\n    'interface-bottom-text': InterfaceBottomText,\n    'currency-picker': CurrencyPicker\n  },\n  data() {\n    return {\n      abi: '',\n      address: '',\n      interact: false,\n      contractMethods: [],\n      selectedMethod: {},\n      result: '',\n      loading: false,\n      value: 0,\n      inputs: {}\n    };\n  },\n  computed: {\n    ...mapState(['network', 'gasPrice', 'account', 'web3']),\n    mergedContracts() {\n      const customContracts = store.get('customContracts') || [];\n      const concatContracts = this.network.type.contracts.concat(\n        customContracts\n      );\n      return concatContracts;\n    },\n    isValidAbi() {\n      return Misc.isJson(this.abi);\n    },\n    isValidAddress() {\n      return isAddress(this.address);\n    },\n    noInput() {\n      return (\n        this.selectedMethod.constant && this.selectedMethod.inputs.length === 0\n      );\n    },\n    resType() {\n      return typeof this.result;\n    },\n    allValid() {\n      let _allvalid = true;\n      if (this.selectedMethod.inputs) {\n        this.selectedMethod.inputs.forEach(item => {\n          if (\n            !this.isValidInput(\n              this.inputs[item.name],\n              this.getType(item.type).solidityType\n            )\n          )\n            _allvalid = false;\n        });\n      }\n      return _allvalid && this.isValidAbi && this.isValidAddress;\n    },\n    contractArgs() {\n      const _contractArgs = [];\n      if (this.selectedMethod) {\n        this.selectedMethod.inputs.forEach(item => {\n          if (item.type === 'bytes32[]') {\n            const parsedItem = this.formatInput(this.inputs[item.name]);\n            _contractArgs.push(parsedItem);\n          } else if (item.type === 'address') {\n            _contractArgs.push(this.inputs[item.name].toLowerCase().trim());\n          } else {\n            _contractArgs.push(this.inputs[item.name]);\n          }\n        });\n      }\n      return _contractArgs;\n    },\n    txValue() {\n      return Misc.sanitizeHex(unit.toWei(this.value, 'ether').toString(16));\n    }\n  },\n  watch: {\n    network() {\n      this.abi = '';\n      this.address = '';\n      this.interact = false;\n      this.contractMethods = [];\n      this.selectedMethod = {};\n      this.result = '';\n    }\n  },\n  methods: {\n    resetDefaults() {\n      this.abi = '';\n      this.address = '';\n      this.interact = false;\n      this.contractMethods = [];\n      this.selectedMethod = {};\n      this.result = '';\n      this.loading = false;\n      this.value = 0;\n      this.inputs = {};\n    },\n    isValidInput: Misc.isContractArgValid,\n    getType: Misc.solidityType,\n    selectedContract(selected) {\n      if (selected.abi === '') {\n        this.abi = '';\n      } else {\n        this.abi = JSON.stringify(selected.abi);\n      }\n      this.address = selected.address;\n    },\n    selectedFunction(method) {\n      if (!method.hasOwnProperty('constant')) return;\n      const contract = new this.web3.eth.Contract(\n        [method],\n        this.address.toLowerCase()\n      );\n      if (method.constant === true && method.inputs.length === 0) {\n        contract.methods[method.name]()\n          .call({ from: this.account.address.toLowerCase() })\n          .then(res => {\n            this.result = res;\n          })\n          .catch(e => {\n            this.loading = false;\n            Toast.responseHandler(e, Toast.WARN);\n          });\n      } else {\n        this.result = '';\n      }\n      this.loading = false;\n      this.selectedMethod = method;\n      this.selectedMethod.inputs.forEach(input => {\n        if (input.type === 'bool') {\n          this.inputs[input.name] = false;\n        }\n      });\n    },\n    formatInput(str) {\n      if (str[0] === '[') {\n        return str;\n      }\n      const newArr = str.split(',');\n      return newArr.map(function(item) {\n        return item.replace(' ', '');\n      });\n    },\n    copyToClipboard(ref) {\n      this.$refs[ref].select();\n      document.execCommand('copy');\n    },\n    deleteInput(ref) {\n      this.$refs[ref].value = '';\n    },\n    switchView(direction) {\n      switch (direction) {\n        case 'forward':\n          if (this.abi !== '') {\n            JSON.parse(this.abi).forEach(item => {\n              if (item.type !== 'constructor' && item.constant !== undefined) {\n                this.contractMethods.push(item);\n              }\n            });\n          }\n          this.interact = true;\n          this.loading = false;\n          break;\n        default:\n          this.resetDefaults();\n      }\n    },\n    async write() {\n      const web3 = this.web3;\n      const contract = new web3.eth.Contract(\n        [this.selectedMethod],\n        this.address.toLowerCase()\n      );\n      this.loading = true;\n      if (this.selectedMethod.constant === true) {\n        contract.methods[this.selectedMethod.name](...this.contractArgs)\n          .call({ from: this.account.address.toLowerCase() })\n          .then(res => {\n            this.result = res;\n            this.loading = false;\n          })\n          .catch(e => {\n            this.loading = false;\n            Toast.responseHandler(e, false);\n          });\n      } else {\n        const nonce = await web3.eth.getTransactionCount(\n          this.account.address.toLowerCase()\n        );\n        let errored = false;\n        const gasLimit = await contract.methods[this.selectedMethod.name](\n          ...this.contractArgs\n        )\n          .estimateGas({\n            from: this.account.address.toLowerCase(),\n            value: this.txValue\n          })\n          .then(res => {\n            return res;\n          })\n          .catch(e => {\n            this.loading = false;\n            Toast.responseHandler(e, Toast.ERROR);\n            errored = true;\n          });\n        if (!errored) {\n          const data = contract.methods[this.selectedMethod.name](\n            ...this.contractArgs\n          ).encodeABI();\n\n          const raw = {\n            from: this.account.address.toLowerCase(),\n            gas: gasLimit,\n            nonce: nonce,\n            gasPrice: Number(unit.toWei(this.gasPrice, 'gwei')),\n            value: this.txValue,\n            to: this.address.toLowerCase(),\n            data: data\n          };\n          this.loading = false;\n          web3.eth.sendTransaction(raw).catch(err => {\n            Toast.responseHandler(err, Toast.ERROR);\n          });\n        }\n      }\n    }\n  }\n};\n",{"version":3,"sources":["InteractWithContractContainer.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+QA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"InteractWithContractContainer.vue","sourceRoot":"src/layouts/InterfaceLayout/containers/InteractWithContractContainer","sourcesContent":["<template>\n  <div class=\"interact-with-contract-container\">\n    <interface-container-title :title=\"$t('common.interactWcontract')\" />\n    <div v-if=\"!interact\" class=\"interact-div\">\n      <div class=\"send-form contract-address-container\">\n        <div class=\"title-container\">\n          <div class=\"title\">\n            <h4 class=\"contract-address-title\">\n              {{ $t('interface.contractAddr') }}\n            </h4>\n            <div class=\"select-contract no-border\">\n              <currency-picker\n                :currency=\"mergedContracts\"\n                :token=\"false\"\n                page=\"interactWContract\"\n                @selectedCurrency=\"selectedContract\"\n              />\n            </div>\n          </div>\n        </div>\n        <div class=\"the-form domain-name\">\n          <input\n            v-validate=\"'required'\"\n            v-model=\"address\"\n            type=\"text\"\n            name=\"nameAddr\"\n            placeholder=\"Enter Contract Address\"\n          />\n\n          <i\n            :class=\"[\n              isValidAddress && address !== '' ? '' : 'not-good',\n              'fa fa-check-circle good-button'\n            ]\"\n            aria-hidden=\"true\"\n            class=\"address-validation-check\"\n          />\n        </div>\n      </div>\n\n      <div class=\"send-form\">\n        <div class=\"title-container\">\n          <div class=\"title\">\n            <h4>{{ $t('interface.abiJsonInt') }}</h4>\n            <div class=\"copy-buttons\">\n              <span @click=\"deleteInput('abi')\">{{ $t('common.clear') }}</span>\n              <span @click=\"copyToClipboard('abi')\">\n                {{ $t('common.copy') }}\n              </span>\n            </div>\n          </div>\n        </div>\n        <div class=\"the-form domain-name\">\n          <textarea\n            v-validate=\"'required'\"\n            ref=\"abi\"\n            v-model=\"abi\"\n            class=\"custom-textarea-1\"\n            name=\"abiField\"\n          />\n          <i\n            :class=\"[\n              isValidAbi && abi !== '' ? '' : 'not-good',\n              'fa fa-check-circle good-button'\n            ]\"\n            aria-hidden=\"true\"\n          />\n        </div>\n      </div>\n      <div class=\"submit-button-container\">\n        <div\n          :class=\"[\n            isValidAbi &&\n            isValidAddress &&\n            (!errors.has('nameAddr') && !errors.has('abiField'))\n              ? ''\n              : 'disabled',\n            'submit-button large-round-button-green-filled clickable'\n          ]\"\n          @click=\"switchView('forward')\"\n        >\n          {{ $t('common.continue') }}\n          <img src=\"~@/assets/images/icons/right-arrow.png\" alt />\n        </div>\n        <interface-bottom-text\n          :link-text=\"$t('interface.helpCenter')\"\n          :question=\"$t('interface.haveIssues')\"\n          link=\"https://kb.myetherwallet.com\"\n        />\n      </div>\n    </div>\n    <div v-else class=\"contract-methods-container\">\n      <h4>Read/Write Contract</h4>\n      <div class=\"contract-addr-container\">\n        <div class=\"contract-addr\">\n          <p>Contract Address: {{ address }}</p>\n        </div>\n        <div class=\"picker-container\">\n          <currency-picker\n            :currency=\"contractMethods\"\n            :token=\"false\"\n            page=\"interactWContract\"\n            @selectedCurrency=\"selectedFunction\"\n          />\n        </div>\n      </div>\n      <div\n        v-if=\"selectedMethod.name !== undefined\"\n        class=\"method-arguments-container\"\n      >\n        <h4>{{ selectedMethod.name | capitalize }}</h4>\n        <div\n          v-for=\"(input, idx) in selectedMethod.inputs\"\n          :key=\"input.name + idx\"\n          class=\"input-item-container\"\n        >\n          <div class=\"title-container\">\n            <div class=\"title\">\n              <h5>{{ input.name | capitalize }} ({{ input.type }}):</h5>\n            </div>\n          </div>\n          <div class=\"input-container\">\n            <input\n              v-if=\"getType(input.type).type !== 'radio'\"\n              :disabled=\"noInput\"\n              :type=\"getType(input.type).type\"\n              v-model=\"inputs[input.name]\"\n              class=\"non-bool-input\"\n            />\n            <div\n              v-if=\"getType(input.type).type === 'radio'\"\n              class=\"bool-input-container\"\n            >\n              <div class=\"bool-items\">\n                <input\n                  v-model=\"inputs[input.name]\"\n                  :value=\"true\"\n                  :name=\"input.name\"\n                  type=\"radio\"\n                />\n                <label :for=\"input.name\">True</label>\n              </div>\n              <div class=\"bool-items\">\n                <input\n                  v-model=\"inputs[input.name]\"\n                  :value=\"false\"\n                  :name=\"input.name\"\n                  type=\"radio\"\n                  checked\n                />\n                <label :for=\"input.name\">False</label>\n              </div>\n            </div>\n            <i\n              v-if=\"!noInput\"\n              :class=\"[\n                getType(input.type).type !== 'radio' ? 'non-bool-i' : '',\n                isValidInput(\n                  inputs[input.name],\n                  getType(input.type).solidityType\n                )\n                  ? ''\n                  : 'not-good',\n                'fa fa-check-circle good-button'\n              ]\"\n              aria-hidden=\"true\"\n            />\n          </div>\n        </div>\n        <div>\n          <div class=\"title-container\">\n            <div class=\"title\">\n              <h4>{{ $t('common.value') }} in ETH:</h4>\n            </div>\n          </div>\n          <input\n            v-model=\"value\"\n            step=\"any\"\n            type=\"text\"\n            name\n            placeholder=\"ETH\"\n            class=\"non-bool-input\"\n          />\n        </div>\n        <div v-if=\"selectedMethod.constant\">\n          <div class=\"title-container\">\n            <div class=\"title\">\n              <h4>Result:</h4>\n            </div>\n          </div>\n          <div class=\"result-inputs\">\n            <input\n              v-if=\"\n                resType === 'string' ||\n                  resType === 'boolean' ||\n                  resType === 'number'\n              \"\n              v-model=\"result\"\n              type=\"text\"\n              name\n              placeholder=\"0x00000000000000\"\n              disabled\n              class=\"non-bool-input\"\n            />\n            <div v-if=\"resType === 'object'\">\n              <!--\n                Have to separate them since v-for still loops when v-if is in the same line getting max stack\n              -->\n              <div\n                v-for=\"(item, idx) in selectedMethod.outputs\"\n                :key=\"item.name + idx\"\n                class=\"result-container\"\n              >\n                <label :for=\"item.name !== '' ? item.name : item.type + idx\">\n                  {{ item.name !== '' ? item.name : item.type | capitalize }}\n                </label>\n                <input\n                  :name=\"item.name !== '' ? item.name : item.type + idx\"\n                  :value=\"result[idx]\"\n                  type=\"text\"\n                  placeholder=\"0x00000000000000\"\n                  disabled\n                  class=\"result-input\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"submit-button-container\">\n        <div class=\"interact-buttons\">\n          <div\n            class=\"submit-button large-round-button-green-border clickable\"\n            @click=\"switchView('backwards')\"\n          >\n            {{ $t('common.back') }}\n          </div>\n          <div\n            v-if=\"\n              selectedMethod.hasOwnProperty('inputs') &&\n                ((selectedMethod.constant &&\n                  selectedMethod.inputs.length > 0) ||\n                  !selectedMethod.constant)\n            \"\n            :class=\"[\n              allValid ? '' : 'disabled',\n              loading ? 'disabled' : '',\n              'submit-button large-round-button-green-filled clickable'\n            ]\"\n            @click=\"write\"\n          >\n            <span v-show=\"!loading && !selectedMethod.constant\">{{\n              $t('interface.write')\n            }}</span>\n            <span v-show=\"!loading && selectedMethod.constant\">\n              {{ $t('interface.read') }}\n            </span>\n            <i v-show=\"loading\" class=\"fa fa-spinner fa-spin fa-lg\" />\n          </div>\n        </div>\n        <interface-bottom-text\n          :link-text=\"$t('interface.helpCenter')\"\n          :question=\"$t('interface.haveIssues')\"\n          link=\"https://kb.myetherwallet.com\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport CurrencyPicker from '../../components/CurrencyPicker';\nimport InterfaceContainerTitle from '../../components/InterfaceContainerTitle';\nimport InterfaceBottomText from '@/components/InterfaceBottomText';\nimport { Misc, Toast } from '@/helpers';\nimport { isAddress } from '@/helpers/addressUtils';\nimport * as unit from 'ethjs-unit';\nimport store from 'store';\n\nexport default {\n  components: {\n    'interface-container-title': InterfaceContainerTitle,\n    'interface-bottom-text': InterfaceBottomText,\n    'currency-picker': CurrencyPicker\n  },\n  data() {\n    return {\n      abi: '',\n      address: '',\n      interact: false,\n      contractMethods: [],\n      selectedMethod: {},\n      result: '',\n      loading: false,\n      value: 0,\n      inputs: {}\n    };\n  },\n  computed: {\n    ...mapState(['network', 'gasPrice', 'account', 'web3']),\n    mergedContracts() {\n      const customContracts = store.get('customContracts') || [];\n      const concatContracts = this.network.type.contracts.concat(\n        customContracts\n      );\n      return concatContracts;\n    },\n    isValidAbi() {\n      return Misc.isJson(this.abi);\n    },\n    isValidAddress() {\n      return isAddress(this.address);\n    },\n    noInput() {\n      return (\n        this.selectedMethod.constant && this.selectedMethod.inputs.length === 0\n      );\n    },\n    resType() {\n      return typeof this.result;\n    },\n    allValid() {\n      let _allvalid = true;\n      if (this.selectedMethod.inputs) {\n        this.selectedMethod.inputs.forEach(item => {\n          if (\n            !this.isValidInput(\n              this.inputs[item.name],\n              this.getType(item.type).solidityType\n            )\n          )\n            _allvalid = false;\n        });\n      }\n      return _allvalid && this.isValidAbi && this.isValidAddress;\n    },\n    contractArgs() {\n      const _contractArgs = [];\n      if (this.selectedMethod) {\n        this.selectedMethod.inputs.forEach(item => {\n          if (item.type === 'bytes32[]') {\n            const parsedItem = this.formatInput(this.inputs[item.name]);\n            _contractArgs.push(parsedItem);\n          } else if (item.type === 'address') {\n            _contractArgs.push(this.inputs[item.name].toLowerCase().trim());\n          } else {\n            _contractArgs.push(this.inputs[item.name]);\n          }\n        });\n      }\n      return _contractArgs;\n    },\n    txValue() {\n      return Misc.sanitizeHex(unit.toWei(this.value, 'ether').toString(16));\n    }\n  },\n  watch: {\n    network() {\n      this.abi = '';\n      this.address = '';\n      this.interact = false;\n      this.contractMethods = [];\n      this.selectedMethod = {};\n      this.result = '';\n    }\n  },\n  methods: {\n    resetDefaults() {\n      this.abi = '';\n      this.address = '';\n      this.interact = false;\n      this.contractMethods = [];\n      this.selectedMethod = {};\n      this.result = '';\n      this.loading = false;\n      this.value = 0;\n      this.inputs = {};\n    },\n    isValidInput: Misc.isContractArgValid,\n    getType: Misc.solidityType,\n    selectedContract(selected) {\n      if (selected.abi === '') {\n        this.abi = '';\n      } else {\n        this.abi = JSON.stringify(selected.abi);\n      }\n      this.address = selected.address;\n    },\n    selectedFunction(method) {\n      if (!method.hasOwnProperty('constant')) return;\n      const contract = new this.web3.eth.Contract(\n        [method],\n        this.address.toLowerCase()\n      );\n      if (method.constant === true && method.inputs.length === 0) {\n        contract.methods[method.name]()\n          .call({ from: this.account.address.toLowerCase() })\n          .then(res => {\n            this.result = res;\n          })\n          .catch(e => {\n            this.loading = false;\n            Toast.responseHandler(e, Toast.WARN);\n          });\n      } else {\n        this.result = '';\n      }\n      this.loading = false;\n      this.selectedMethod = method;\n      this.selectedMethod.inputs.forEach(input => {\n        if (input.type === 'bool') {\n          this.inputs[input.name] = false;\n        }\n      });\n    },\n    formatInput(str) {\n      if (str[0] === '[') {\n        return str;\n      }\n      const newArr = str.split(',');\n      return newArr.map(function(item) {\n        return item.replace(' ', '');\n      });\n    },\n    copyToClipboard(ref) {\n      this.$refs[ref].select();\n      document.execCommand('copy');\n    },\n    deleteInput(ref) {\n      this.$refs[ref].value = '';\n    },\n    switchView(direction) {\n      switch (direction) {\n        case 'forward':\n          if (this.abi !== '') {\n            JSON.parse(this.abi).forEach(item => {\n              if (item.type !== 'constructor' && item.constant !== undefined) {\n                this.contractMethods.push(item);\n              }\n            });\n          }\n          this.interact = true;\n          this.loading = false;\n          break;\n        default:\n          this.resetDefaults();\n      }\n    },\n    async write() {\n      const web3 = this.web3;\n      const contract = new web3.eth.Contract(\n        [this.selectedMethod],\n        this.address.toLowerCase()\n      );\n      this.loading = true;\n      if (this.selectedMethod.constant === true) {\n        contract.methods[this.selectedMethod.name](...this.contractArgs)\n          .call({ from: this.account.address.toLowerCase() })\n          .then(res => {\n            this.result = res;\n            this.loading = false;\n          })\n          .catch(e => {\n            this.loading = false;\n            Toast.responseHandler(e, false);\n          });\n      } else {\n        const nonce = await web3.eth.getTransactionCount(\n          this.account.address.toLowerCase()\n        );\n        let errored = false;\n        const gasLimit = await contract.methods[this.selectedMethod.name](\n          ...this.contractArgs\n        )\n          .estimateGas({\n            from: this.account.address.toLowerCase(),\n            value: this.txValue\n          })\n          .then(res => {\n            return res;\n          })\n          .catch(e => {\n            this.loading = false;\n            Toast.responseHandler(e, Toast.ERROR);\n            errored = true;\n          });\n        if (!errored) {\n          const data = contract.methods[this.selectedMethod.name](\n            ...this.contractArgs\n          ).encodeABI();\n\n          const raw = {\n            from: this.account.address.toLowerCase(),\n            gas: gasLimit,\n            nonce: nonce,\n            gasPrice: Number(unit.toWei(this.gasPrice, 'gwei')),\n            value: this.txValue,\n            to: this.address.toLowerCase(),\n            data: data\n          };\n          this.loading = false;\n          web3.eth.sendTransaction(raw).catch(err => {\n            Toast.responseHandler(err, Toast.ERROR);\n          });\n        }\n      }\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'InteractWithContractContainer.scss';\n</style>\n"]}]}