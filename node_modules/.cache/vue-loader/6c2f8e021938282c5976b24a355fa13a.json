{"remainingRequest":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/containers/ConfirmationContainer/ConfirmationContainer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/containers/ConfirmationContainer/ConfirmationContainer.vue","mtime":1573477611636},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport * as unit from 'ethjs-unit';\nimport BigNumber from 'bignumber.js';\nimport { Transaction } from 'ethereumjs-tx';\nimport ConfirmModal from './components/ConfirmModal';\nimport ConfirmCollectionModal from './components/ConfirmCollectionModal';\nimport SuccessModal from './components/SuccessModal';\nimport ErrorModal from './components/ErrorModal';\nimport ConfirmSignModal from './components/ConfirmSignModal';\nimport { mapState } from 'vuex';\nimport { type as noticeTypes } from '@/helpers/notificationFormatters';\nimport { WEB3_WALLET, KEEPKEY } from '@/wallets/bip44/walletTypes';\nimport { Toast, Misc } from '@/helpers';\nimport locStore from 'store';\nimport parseTokensData from '@/helpers/parseTokensData.js';\nimport SwapWidget from '@/layouts/InterfaceLayout/containers/SwapContainer/components/SwapWidget';\n\nconst events = {\n  showSuccessModal: 'showSuccessModal',\n  showErrorModal: 'showErrorModal',\n  showTxConfirmModal: 'showTxConfirmModal',\n  showSendSignedTx: 'showSendSignedTx',\n  showWeb3Wallet: 'showWeb3Wallet',\n  showTxCollectionConfirmModal: 'showTxCollectionConfirmModal',\n  showMessageConfirmModal: 'showMessageConfirmModal'\n};\n\nexport default {\n  components: {\n    'confirm-modal': ConfirmModal,\n    'confirm-collection-modal': ConfirmCollectionModal,\n    'success-modal': SuccessModal,\n    'error-modal': ErrorModal,\n    'confirm-sign-modal': ConfirmSignModal,\n    'swap-widget': SwapWidget\n  },\n  props: {\n    active: {\n      type: Boolean,\n      default: false\n    },\n    rawTx: {\n      type: Object,\n      default: function() {\n        return {};\n      }\n    }\n  },\n  data() {\n    return {\n      isHardwareWallet: false,\n      responseFunction: null,\n      advancedExpand: false,\n      addressValid: true,\n      amount: '',\n      amountValid: true,\n      nonce: '',\n      gasLimit: '21000',\n      data: '0x',\n      gasPrice: 0,\n      parsedBalance: 0,\n      toAddress: '',\n      transactionFee: '',\n      raw: {},\n      lastRaw: {},\n      ens: {},\n      signer: {},\n      signedTxObject: {},\n      signedTx: '',\n      messageToSign: '',\n      signedMessage: '',\n      successMessage: 'Success',\n      linkMessage: 'OK',\n      linkTo: '/',\n      etherscanLink: null,\n      dismissed: true,\n      signedArray: [],\n      txBatch: null,\n      sending: false,\n      unSignedArray: [],\n      signCallback: {},\n      swapWigetData: {\n        destAddress: '',\n        fromCurrency: {\n          symbol: 'ETH',\n          name: ''\n        },\n        toCurrency: {\n          symbol: 'ETH',\n          name: ''\n        },\n        fromValue: undefined,\n        toValue: undefined\n      }\n    };\n  },\n  computed: {\n    ...mapState(['wallet', 'web3', 'account', 'network']),\n    fromAddress() {\n      if (this.account) {\n        return this.account.address;\n      }\n    }\n  },\n  watch: {\n    wallet(newVal) {\n      if (newVal !== null) {\n        this.$refs.confirmModal.$refs.confirmation.$on('hidden', () => {\n          if (this.dismissed) {\n            this.reset();\n          }\n        });\n\n        this.$refs.signConfirmModal.$refs.signConfirmation.$on('hidden', () => {\n          this.signedMessage = '';\n        });\n      }\n    }\n  },\n  beforeDestroy() {\n    Object.values(events).forEach(evt => {\n      this.$eventHub.$off(evt);\n    });\n  },\n  created() {\n    this.$eventHub.$on(\n      'showSuccessModal',\n      (message, linkMessage, etherscanLink) => {\n        if (!message) message = null;\n        this.showSuccessModal(message, linkMessage, etherscanLink);\n      }\n    );\n\n    this.$eventHub.$on('showErrorModal', (message, linkMessage) => {\n      if (!message) message = null;\n      this.showErrorModal(message, linkMessage);\n    });\n\n    this.$eventHub.$on('showTxConfirmModal', (tx, resolve) => {\n      this.parseRawTx(tx);\n      if (tx.hasOwnProperty('ensObj')) {\n        delete tx['ensObj'];\n      }\n      this.isHardwareWallet = this.account.isHardware;\n      this.responseFunction = resolve;\n      this.successMessage = 'Sending Transaction';\n\n      const signPromise = this.wallet.signTransaction(tx);\n\n      signPromise\n        .then(_response => {\n          this.signedTxObject = _response;\n          this.signedTx = this.signedTxObject.rawTransaction;\n        })\n        .catch(this.wallet.errorHandler);\n      if (this.account.identifier === KEEPKEY) {\n        signPromise.then(() => {\n          this.confirmationModalOpen();\n        });\n      } else {\n        this.confirmationModalOpen();\n      }\n    });\n\n    this.$eventHub.$on('showSendSignedTx', (tx, resolve) => {\n      const newTx = new Transaction(tx);\n      this.isHardwareWallet = this.account.isHardware;\n      this.responseFunction = resolve;\n      this.successMessage = 'Sending Transaction';\n      this.signedTxObject = {\n        rawTransaction: tx,\n        tx: {\n          to: `0x${newTx.to.toString('hex')}`,\n          from: `0x${newTx.from.toString('hex')}`,\n          value: `0x${newTx.value.toString('hex')}`,\n          gas: `0x${newTx.gasPrice.toString('hex')}`,\n          gasLimit: `0x${newTx.gasLimit.toString('hex')}`,\n          data: `0x${newTx.data.toString('hex')}`,\n          nonce: `0x${newTx.nonce.toString('hex')}`,\n          v: `0x${newTx.v.toString('hex')}`,\n          r: `0x${newTx.r.toString('hex')}`,\n          s: `0x${newTx.s.toString('hex')}`\n        }\n      };\n      this.parseRawTx(this.signedTxObject.tx);\n      this.signedTx = this.signedTxObject.rawTransaction;\n      this.confirmationModalOpen();\n    });\n\n    this.$eventHub.$on('showWeb3Wallet', (tx, resolve) => {\n      this.parseRawTx(tx);\n      this.successMessage = 'Sending Transaction';\n      const promiObject = this.wallet.signTransaction(tx);\n      resolve(promiObject);\n      this.showSuccessModal(\n        'Continue transaction with Web3 Wallet Provider.',\n        'Close'\n      );\n    });\n\n    this.$eventHub.$on(\n      'showTxCollectionConfirmModal',\n      async (tx, signCallback, isHardware) => {\n        this.isHardwareWallet = isHardware;\n        this.unSignedArray = [];\n        this.unSignedArray = tx;\n        const signed = [];\n        if (!signCallback) signCallback = () => {};\n        this.signCallback = signCallback;\n\n        this.confirmationCollectionModalOpen();\n        if (this.account.identifier !== WEB3_WALLET) {\n          for (let i = 0; i < tx.length; i++) {\n            const _signedTx = await this.wallet.signTransaction(tx[i]);\n            signed.push(_signedTx);\n          }\n          this.signedArray = signed;\n        } else {\n          this.signedArray = this.unSignedArray.map(_tx => {\n            return { tx: _tx, rawTransaction: _tx };\n          });\n        }\n      }\n    );\n\n    this.$eventHub.$on('showMessageConfirmModal', (data, resolve) => {\n      this.responseFunction = resolve;\n      this.messageToSign = data;\n      const signPromise = this.wallet.signMessage(data).then(_response => {\n        this.signedMessage = '0x' + _response.toString('hex');\n      });\n      if (this.account.identifier === KEEPKEY) {\n        signPromise.then(() => {\n          this.signConfirmationModalOpen();\n        });\n      } else {\n        this.signConfirmationModalOpen();\n      }\n    });\n\n    this.$eventHub.$on(\n      'showSwapWidget',\n      (destAddress, toCurrency, fromCurrency, fromValue) => {\n        this.swapWidgetModalOpen(\n          destAddress,\n          toCurrency,\n          fromCurrency,\n          fromValue\n        );\n      }\n    );\n\n    this.$eventHub.$on(\n      'showSwapWidgetTo',\n      (destAddress, toCurrency, fromCurrency, toValue) => {\n        this.swapWidgetModalOpen(\n          destAddress,\n          toCurrency,\n          fromCurrency,\n          undefined,\n          toValue\n        );\n      }\n    );\n  },\n  mounted() {\n    this.$refs.successModal.$refs.success.$on('hide', () => {\n      this.successMessage = '';\n      this.linkMessage = 'OK';\n    });\n  },\n  methods: {\n    swapWidgetModalOpen(\n      destAddress,\n      fromCurrency,\n      toCurrency,\n      fromValue,\n      toValue\n    ) {\n      if (typeof toCurrency === 'string') {\n        this.$set(this.swapWigetData.toCurrency, 'symbol', toCurrency);\n      } else if (typeof toCurrency === 'object') {\n        this.$set(this.swapWigetData, 'toCurrency', toCurrency);\n      } else {\n        throw Error(\n          'swap widget requires requires toCurrency to be a string or object'\n        );\n      }\n\n      if (typeof fromCurrency === 'string') {\n        this.$set(this.swapWigetData.fromCurrency, 'symbol', fromCurrency);\n      } else if (typeof toCurrency === 'object') {\n        this.$set(this.swapWigetData, 'fromCurrency', fromCurrency);\n      } else {\n        throw Error(\n          'swap widget requires requires fromCurrency to be a string or object'\n        );\n      }\n\n      this.swapWigetData = {\n        destAddress: destAddress,\n        fromCurrency: this.swapWigetData.fromCurrency,\n        toCurrency: this.swapWigetData.toCurrency,\n        fromValue: fromValue,\n        toValue: toValue\n      };\n\n      this.$nextTick(() => {\n        if (this.$refs.swapWidget) {\n          this.$refs.swapWidget.$refs.modal.show();\n          this.$refs.swapWidget.$refs.modal.$on('hidden', () => {\n            this.swapWigetData = {\n              destAddress: '',\n              fromCurrency: {\n                symbol: 'ETH',\n                name: ''\n              },\n              toCurrency: {\n                symbol: 'ETH',\n                name: ''\n              },\n              fromValue: 0\n            };\n          });\n        }\n      });\n    },\n    confirmationModalOpen() {\n      window.scrollTo(0, 0);\n      this.$refs.confirmModal.$refs.confirmation.show();\n    },\n    confirmationCollectionModalOpen() {\n      window.scrollTo(0, 0);\n      this.$refs.confirmCollectionModal.$refs.confirmCollection.show();\n    },\n    confirmationOfflineGenerateModalOpen() {\n      window.scrollTo(0, 0);\n      this.$refs.offlineGenerateConfirmModal.$refs.confirmation.show();\n    },\n    signConfirmationModalOpen() {\n      window.scrollTo(0, 0);\n      this.$refs.signConfirmModal.$refs.signConfirmation.show();\n    },\n    showSuccessModal(message, linkMessage, etherscanLink) {\n      this.reset();\n      if (message !== null) this.successMessage = message;\n      if (linkMessage !== null) this.linkMessage = linkMessage;\n      if (etherscanLink !== null) this.etherscanLink = etherscanLink;\n      this.$refs.successModal.$refs.success.show();\n    },\n    showErrorModal(message, linkMessage) {\n      this.reset();\n      if (message !== null) this.successMessage = message;\n      if (linkMessage !== null) this.linkMessage = linkMessage;\n      this.$refs.errorModal.$refs.errorModal.show();\n    },\n    parseRawTx(tx) {\n      let tokenData = '';\n      if (tx.to && tx.data) {\n        tokenData = parseTokensData(\n          tx.data,\n          tx.to,\n          this.web3,\n          this.network.type.tokens,\n          this.network.type.name\n        );\n        tx.tokenTransferTo = tokenData.tokenTransferTo;\n        tx.tokenTransferVal = tokenData.tokenTransferVal;\n        tx.tokenSymbol = tokenData.tokenSymbol;\n      }\n\n      this.raw = tx;\n      this.nonce = tx.nonce === '0x' ? 0 : new BigNumber(tx.nonce).toFixed();\n      this.data = tx.data;\n      this.gasLimit = new BigNumber(tx.gas).toFixed();\n      this.gasPrice = parseInt(\n        unit.fromWei(new BigNumber(tx.gasPrice).toFixed(), 'gwei')\n      );\n      this.toAddress = tx.to;\n      this.amount = tx.value === '0x' ? '0' : new BigNumber(tx.value).toFixed();\n      this.transactionFee = unit\n        .fromWei(new BigNumber(tx.gas).times(tx.gasPrice).toFixed(), 'ether')\n        .toString();\n      this.ens = {};\n      if (tx.hasOwnProperty('ensObj')) {\n        this.ens = Object.assign({}, tx.ensObj);\n      }\n      this.lastRaw = tx;\n    },\n    messageReturn() {\n      this.dismissed = false;\n      this.responseFunction(this.signedMessage);\n      this.$refs.signConfirmModal.$refs.signConfirmation.hide();\n    },\n    generateTx() {\n      this.dismissed = false;\n      this.responseFunction(this.signedTxObject);\n      this.$refs.confirmModal.$refs.confirmation.hide();\n    },\n    async doBatchTransactions() {\n      const web3 = this.web3;\n      const _method =\n        this.account.identifier === WEB3_WALLET\n          ? 'sendTransaction'\n          : 'sendSignedTransaction';\n      const _arr =\n        this.account.identifier === WEB3_WALLET\n          ? this.signedArray.reverse()\n          : this.signedArray;\n      const promises = _arr.map(tx => {\n        const _tx = tx.tx;\n        _tx.from = this.account.address;\n        const _rawTx = tx.rawTransaction;\n        const onError = err => {\n          this.$store.dispatch('addNotification', [\n            noticeTypes.TRANSACTION_ERROR,\n            _tx.from,\n            this.unSignedArray.find(entry =>\n              new BigNumber(_tx.nonce).eq(entry.nonce)\n            ) || _tx,\n            err\n          ]);\n          Toast.responseHandler(err, Toast.ERROR);\n        };\n        const promiEvent = web3.eth[_method](_rawTx);\n        promiEvent.catch(onError);\n        promiEvent.on('error', onError);\n        promiEvent.once('transactionHash', hash => {\n          this.showSuccessModal(\n            'Transaction sent!',\n            'Okay',\n            this.network.type.blockExplorerTX.replace('[[txHash]]', hash)\n          );\n          this.$store.dispatch('addNotification', [\n            noticeTypes.TRANSACTION_HASH,\n            _tx.from,\n            this.unSignedArray.find(entry =>\n              new BigNumber(_tx.nonce).eq(entry.nonce)\n            ),\n            hash\n          ]);\n          const localStoredObj = locStore.get(\n            web3.utils.sha3(this.account.address)\n          );\n          locStore.set(web3.utils.sha3(this.account.address), {\n            nonce: Misc.sanitizeHex(\n              new BigNumber(localStoredObj.nonce).plus(1).toString(16)\n            ),\n            timestamp: localStoredObj.timestamp\n          });\n        });\n        promiEvent.then(receipt => {\n          this.$store.dispatch('addNotification', [\n            noticeTypes.TRANSACTION_RECEIPT,\n            _tx.from,\n            this.unSignedArray.find(entry =>\n              new BigNumber(_tx.nonce).eq(entry.nonce)\n            ),\n            receipt\n          ]);\n        });\n        return promiEvent;\n      });\n      this.signCallback(promises);\n      this.sending = true;\n    },\n    sendBatchTransactions() {\n      this.$refs.confirmCollectionModal.$refs.confirmCollection.hide();\n      this.doBatchTransactions();\n    },\n    sendTx() {\n      this.dismissed = false;\n      this.responseFunction(this.signedTxObject);\n      this.$refs.confirmModal.$refs.confirmation.hide();\n\n      if (this.raw.generateOnly) return;\n      this.showSuccessModal(\n        'Transaction sent!',\n        'Okay',\n        this.network.type.blockExplorerTX.replace(\n          '[[txHash]]',\n          this.signedTxObject.tx.hash\n        )\n      );\n    },\n    reset() {\n      this.responseFunction = null;\n      this.advancedExpand = false;\n      this.addressValid = true;\n      this.amount = '';\n      this.amountValid = true;\n      this.nonce = '';\n      this.gasLimit = '21000';\n      this.data = '0x';\n      this.gasPrice = 0;\n      this.parsedBalance = 0;\n      this.toAddress = '';\n      this.transactionFee = '';\n      this.raw = {};\n      this.signedTx = '';\n      this.messageToSign = '';\n      this.signedMessage = '';\n      this.messageToSign = '';\n      this.signedArray = [];\n      this.txBatch = null;\n      this.sending = false;\n      this.signCallback = {};\n      this.swapWigetData = {\n        destAddress: '',\n        fromCurrency: {\n          symbol: 'ETH',\n          name: ''\n        },\n        toCurrency: {\n          symbol: 'ETH',\n          name: ''\n        },\n        fromValue: 0\n      };\n    }\n  }\n};\n",{"version":3,"sources":["ConfirmationContainer.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ConfirmationContainer.vue","sourceRoot":"src/containers/ConfirmationContainer","sourcesContent":["<template>\n  <div>\n    <confirm-modal\n      v-if=\"wallet !== null\"\n      ref=\"confirmModal\"\n      :confirm-send-tx=\"sendTx\"\n      :signed-tx=\"signedTx\"\n      :fee=\"transactionFee\"\n      :is-hardware-wallet=\"isHardwareWallet\"\n      :gas-price=\"gasPrice\"\n      :from=\"fromAddress\"\n      :to=\"toAddress\"\n      :value=\"amount\"\n      :gas=\"gasLimit\"\n      :data=\"data\"\n      :nonce=\"nonce\"\n    />\n    <confirm-collection-modal\n      v-if=\"wallet !== null\"\n      ref=\"confirmCollectionModal\"\n      :send-batch-transactions=\"sendBatchTransactions\"\n      :is-hardware-wallet=\"isHardwareWallet\"\n      :signed-array=\"signedArray\"\n      :un-signed-array=\"unSignedArray\"\n      :sending=\"sending\"\n    />\n    <confirm-modal\n      v-if=\"wallet !== null\"\n      ref=\"offlineGenerateConfirmModal\"\n      :confirm-send-tx=\"generateTx\"\n      :signed-tx=\"signedTx\"\n      :fee=\"transactionFee\"\n      :is-hardware-wallet=\"isHardwareWallet\"\n      :gas-price=\"gasPrice\"\n      :from=\"fromAddress\"\n      :to=\"toAddress\"\n      :value=\"amount\"\n      :gas=\"gasLimit\"\n      :data=\"data\"\n      :nonce=\"nonce\"\n    />\n    <confirm-sign-modal\n      v-if=\"wallet !== null\"\n      ref=\"signConfirmModal\"\n      :confirm-sign-message=\"messageReturn\"\n      :show-success=\"showSuccessModal\"\n      :message-to-sign=\"messageToSign\"\n      :signed-message=\"signedMessage\"\n      :is-hardware-wallet=\"isHardwareWallet\"\n      :from=\"fromAddress\"\n    />\n    <success-modal\n      ref=\"successModal\"\n      :message=\"successMessage\"\n      :link-message=\"linkMessage\"\n      :link-to=\"linkTo\"\n      :etherscan-link=\"etherscanLink\"\n    />\n    <error-modal\n      ref=\"errorModal\"\n      :message=\"successMessage\"\n      :link-message=\"linkMessage\"\n    />\n    <swap-widget\n      v-if=\"wallet !== null\"\n      ref=\"swapWidget\"\n      :supplied-from=\"swapWigetData['fromCurrency']\"\n      :supplied-to=\"swapWigetData['toCurrency']\"\n      :supplied-from-amount=\"swapWigetData['fromValue']\"\n      :supplied-to-amount=\"swapWigetData['toValue']\"\n      :dest-address=\"swapWigetData['destAddress']\"\n    />\n  </div>\n</template>\n\n<script>\nimport * as unit from 'ethjs-unit';\nimport BigNumber from 'bignumber.js';\nimport { Transaction } from 'ethereumjs-tx';\nimport ConfirmModal from './components/ConfirmModal';\nimport ConfirmCollectionModal from './components/ConfirmCollectionModal';\nimport SuccessModal from './components/SuccessModal';\nimport ErrorModal from './components/ErrorModal';\nimport ConfirmSignModal from './components/ConfirmSignModal';\nimport { mapState } from 'vuex';\nimport { type as noticeTypes } from '@/helpers/notificationFormatters';\nimport { WEB3_WALLET, KEEPKEY } from '@/wallets/bip44/walletTypes';\nimport { Toast, Misc } from '@/helpers';\nimport locStore from 'store';\nimport parseTokensData from '@/helpers/parseTokensData.js';\nimport SwapWidget from '@/layouts/InterfaceLayout/containers/SwapContainer/components/SwapWidget';\n\nconst events = {\n  showSuccessModal: 'showSuccessModal',\n  showErrorModal: 'showErrorModal',\n  showTxConfirmModal: 'showTxConfirmModal',\n  showSendSignedTx: 'showSendSignedTx',\n  showWeb3Wallet: 'showWeb3Wallet',\n  showTxCollectionConfirmModal: 'showTxCollectionConfirmModal',\n  showMessageConfirmModal: 'showMessageConfirmModal'\n};\n\nexport default {\n  components: {\n    'confirm-modal': ConfirmModal,\n    'confirm-collection-modal': ConfirmCollectionModal,\n    'success-modal': SuccessModal,\n    'error-modal': ErrorModal,\n    'confirm-sign-modal': ConfirmSignModal,\n    'swap-widget': SwapWidget\n  },\n  props: {\n    active: {\n      type: Boolean,\n      default: false\n    },\n    rawTx: {\n      type: Object,\n      default: function() {\n        return {};\n      }\n    }\n  },\n  data() {\n    return {\n      isHardwareWallet: false,\n      responseFunction: null,\n      advancedExpand: false,\n      addressValid: true,\n      amount: '',\n      amountValid: true,\n      nonce: '',\n      gasLimit: '21000',\n      data: '0x',\n      gasPrice: 0,\n      parsedBalance: 0,\n      toAddress: '',\n      transactionFee: '',\n      raw: {},\n      lastRaw: {},\n      ens: {},\n      signer: {},\n      signedTxObject: {},\n      signedTx: '',\n      messageToSign: '',\n      signedMessage: '',\n      successMessage: 'Success',\n      linkMessage: 'OK',\n      linkTo: '/',\n      etherscanLink: null,\n      dismissed: true,\n      signedArray: [],\n      txBatch: null,\n      sending: false,\n      unSignedArray: [],\n      signCallback: {},\n      swapWigetData: {\n        destAddress: '',\n        fromCurrency: {\n          symbol: 'ETH',\n          name: ''\n        },\n        toCurrency: {\n          symbol: 'ETH',\n          name: ''\n        },\n        fromValue: undefined,\n        toValue: undefined\n      }\n    };\n  },\n  computed: {\n    ...mapState(['wallet', 'web3', 'account', 'network']),\n    fromAddress() {\n      if (this.account) {\n        return this.account.address;\n      }\n    }\n  },\n  watch: {\n    wallet(newVal) {\n      if (newVal !== null) {\n        this.$refs.confirmModal.$refs.confirmation.$on('hidden', () => {\n          if (this.dismissed) {\n            this.reset();\n          }\n        });\n\n        this.$refs.signConfirmModal.$refs.signConfirmation.$on('hidden', () => {\n          this.signedMessage = '';\n        });\n      }\n    }\n  },\n  beforeDestroy() {\n    Object.values(events).forEach(evt => {\n      this.$eventHub.$off(evt);\n    });\n  },\n  created() {\n    this.$eventHub.$on(\n      'showSuccessModal',\n      (message, linkMessage, etherscanLink) => {\n        if (!message) message = null;\n        this.showSuccessModal(message, linkMessage, etherscanLink);\n      }\n    );\n\n    this.$eventHub.$on('showErrorModal', (message, linkMessage) => {\n      if (!message) message = null;\n      this.showErrorModal(message, linkMessage);\n    });\n\n    this.$eventHub.$on('showTxConfirmModal', (tx, resolve) => {\n      this.parseRawTx(tx);\n      if (tx.hasOwnProperty('ensObj')) {\n        delete tx['ensObj'];\n      }\n      this.isHardwareWallet = this.account.isHardware;\n      this.responseFunction = resolve;\n      this.successMessage = 'Sending Transaction';\n\n      const signPromise = this.wallet.signTransaction(tx);\n\n      signPromise\n        .then(_response => {\n          this.signedTxObject = _response;\n          this.signedTx = this.signedTxObject.rawTransaction;\n        })\n        .catch(this.wallet.errorHandler);\n      if (this.account.identifier === KEEPKEY) {\n        signPromise.then(() => {\n          this.confirmationModalOpen();\n        });\n      } else {\n        this.confirmationModalOpen();\n      }\n    });\n\n    this.$eventHub.$on('showSendSignedTx', (tx, resolve) => {\n      const newTx = new Transaction(tx);\n      this.isHardwareWallet = this.account.isHardware;\n      this.responseFunction = resolve;\n      this.successMessage = 'Sending Transaction';\n      this.signedTxObject = {\n        rawTransaction: tx,\n        tx: {\n          to: `0x${newTx.to.toString('hex')}`,\n          from: `0x${newTx.from.toString('hex')}`,\n          value: `0x${newTx.value.toString('hex')}`,\n          gas: `0x${newTx.gasPrice.toString('hex')}`,\n          gasLimit: `0x${newTx.gasLimit.toString('hex')}`,\n          data: `0x${newTx.data.toString('hex')}`,\n          nonce: `0x${newTx.nonce.toString('hex')}`,\n          v: `0x${newTx.v.toString('hex')}`,\n          r: `0x${newTx.r.toString('hex')}`,\n          s: `0x${newTx.s.toString('hex')}`\n        }\n      };\n      this.parseRawTx(this.signedTxObject.tx);\n      this.signedTx = this.signedTxObject.rawTransaction;\n      this.confirmationModalOpen();\n    });\n\n    this.$eventHub.$on('showWeb3Wallet', (tx, resolve) => {\n      this.parseRawTx(tx);\n      this.successMessage = 'Sending Transaction';\n      const promiObject = this.wallet.signTransaction(tx);\n      resolve(promiObject);\n      this.showSuccessModal(\n        'Continue transaction with Web3 Wallet Provider.',\n        'Close'\n      );\n    });\n\n    this.$eventHub.$on(\n      'showTxCollectionConfirmModal',\n      async (tx, signCallback, isHardware) => {\n        this.isHardwareWallet = isHardware;\n        this.unSignedArray = [];\n        this.unSignedArray = tx;\n        const signed = [];\n        if (!signCallback) signCallback = () => {};\n        this.signCallback = signCallback;\n\n        this.confirmationCollectionModalOpen();\n        if (this.account.identifier !== WEB3_WALLET) {\n          for (let i = 0; i < tx.length; i++) {\n            const _signedTx = await this.wallet.signTransaction(tx[i]);\n            signed.push(_signedTx);\n          }\n          this.signedArray = signed;\n        } else {\n          this.signedArray = this.unSignedArray.map(_tx => {\n            return { tx: _tx, rawTransaction: _tx };\n          });\n        }\n      }\n    );\n\n    this.$eventHub.$on('showMessageConfirmModal', (data, resolve) => {\n      this.responseFunction = resolve;\n      this.messageToSign = data;\n      const signPromise = this.wallet.signMessage(data).then(_response => {\n        this.signedMessage = '0x' + _response.toString('hex');\n      });\n      if (this.account.identifier === KEEPKEY) {\n        signPromise.then(() => {\n          this.signConfirmationModalOpen();\n        });\n      } else {\n        this.signConfirmationModalOpen();\n      }\n    });\n\n    this.$eventHub.$on(\n      'showSwapWidget',\n      (destAddress, toCurrency, fromCurrency, fromValue) => {\n        this.swapWidgetModalOpen(\n          destAddress,\n          toCurrency,\n          fromCurrency,\n          fromValue\n        );\n      }\n    );\n\n    this.$eventHub.$on(\n      'showSwapWidgetTo',\n      (destAddress, toCurrency, fromCurrency, toValue) => {\n        this.swapWidgetModalOpen(\n          destAddress,\n          toCurrency,\n          fromCurrency,\n          undefined,\n          toValue\n        );\n      }\n    );\n  },\n  mounted() {\n    this.$refs.successModal.$refs.success.$on('hide', () => {\n      this.successMessage = '';\n      this.linkMessage = 'OK';\n    });\n  },\n  methods: {\n    swapWidgetModalOpen(\n      destAddress,\n      fromCurrency,\n      toCurrency,\n      fromValue,\n      toValue\n    ) {\n      if (typeof toCurrency === 'string') {\n        this.$set(this.swapWigetData.toCurrency, 'symbol', toCurrency);\n      } else if (typeof toCurrency === 'object') {\n        this.$set(this.swapWigetData, 'toCurrency', toCurrency);\n      } else {\n        throw Error(\n          'swap widget requires requires toCurrency to be a string or object'\n        );\n      }\n\n      if (typeof fromCurrency === 'string') {\n        this.$set(this.swapWigetData.fromCurrency, 'symbol', fromCurrency);\n      } else if (typeof toCurrency === 'object') {\n        this.$set(this.swapWigetData, 'fromCurrency', fromCurrency);\n      } else {\n        throw Error(\n          'swap widget requires requires fromCurrency to be a string or object'\n        );\n      }\n\n      this.swapWigetData = {\n        destAddress: destAddress,\n        fromCurrency: this.swapWigetData.fromCurrency,\n        toCurrency: this.swapWigetData.toCurrency,\n        fromValue: fromValue,\n        toValue: toValue\n      };\n\n      this.$nextTick(() => {\n        if (this.$refs.swapWidget) {\n          this.$refs.swapWidget.$refs.modal.show();\n          this.$refs.swapWidget.$refs.modal.$on('hidden', () => {\n            this.swapWigetData = {\n              destAddress: '',\n              fromCurrency: {\n                symbol: 'ETH',\n                name: ''\n              },\n              toCurrency: {\n                symbol: 'ETH',\n                name: ''\n              },\n              fromValue: 0\n            };\n          });\n        }\n      });\n    },\n    confirmationModalOpen() {\n      window.scrollTo(0, 0);\n      this.$refs.confirmModal.$refs.confirmation.show();\n    },\n    confirmationCollectionModalOpen() {\n      window.scrollTo(0, 0);\n      this.$refs.confirmCollectionModal.$refs.confirmCollection.show();\n    },\n    confirmationOfflineGenerateModalOpen() {\n      window.scrollTo(0, 0);\n      this.$refs.offlineGenerateConfirmModal.$refs.confirmation.show();\n    },\n    signConfirmationModalOpen() {\n      window.scrollTo(0, 0);\n      this.$refs.signConfirmModal.$refs.signConfirmation.show();\n    },\n    showSuccessModal(message, linkMessage, etherscanLink) {\n      this.reset();\n      if (message !== null) this.successMessage = message;\n      if (linkMessage !== null) this.linkMessage = linkMessage;\n      if (etherscanLink !== null) this.etherscanLink = etherscanLink;\n      this.$refs.successModal.$refs.success.show();\n    },\n    showErrorModal(message, linkMessage) {\n      this.reset();\n      if (message !== null) this.successMessage = message;\n      if (linkMessage !== null) this.linkMessage = linkMessage;\n      this.$refs.errorModal.$refs.errorModal.show();\n    },\n    parseRawTx(tx) {\n      let tokenData = '';\n      if (tx.to && tx.data) {\n        tokenData = parseTokensData(\n          tx.data,\n          tx.to,\n          this.web3,\n          this.network.type.tokens,\n          this.network.type.name\n        );\n        tx.tokenTransferTo = tokenData.tokenTransferTo;\n        tx.tokenTransferVal = tokenData.tokenTransferVal;\n        tx.tokenSymbol = tokenData.tokenSymbol;\n      }\n\n      this.raw = tx;\n      this.nonce = tx.nonce === '0x' ? 0 : new BigNumber(tx.nonce).toFixed();\n      this.data = tx.data;\n      this.gasLimit = new BigNumber(tx.gas).toFixed();\n      this.gasPrice = parseInt(\n        unit.fromWei(new BigNumber(tx.gasPrice).toFixed(), 'gwei')\n      );\n      this.toAddress = tx.to;\n      this.amount = tx.value === '0x' ? '0' : new BigNumber(tx.value).toFixed();\n      this.transactionFee = unit\n        .fromWei(new BigNumber(tx.gas).times(tx.gasPrice).toFixed(), 'ether')\n        .toString();\n      this.ens = {};\n      if (tx.hasOwnProperty('ensObj')) {\n        this.ens = Object.assign({}, tx.ensObj);\n      }\n      this.lastRaw = tx;\n    },\n    messageReturn() {\n      this.dismissed = false;\n      this.responseFunction(this.signedMessage);\n      this.$refs.signConfirmModal.$refs.signConfirmation.hide();\n    },\n    generateTx() {\n      this.dismissed = false;\n      this.responseFunction(this.signedTxObject);\n      this.$refs.confirmModal.$refs.confirmation.hide();\n    },\n    async doBatchTransactions() {\n      const web3 = this.web3;\n      const _method =\n        this.account.identifier === WEB3_WALLET\n          ? 'sendTransaction'\n          : 'sendSignedTransaction';\n      const _arr =\n        this.account.identifier === WEB3_WALLET\n          ? this.signedArray.reverse()\n          : this.signedArray;\n      const promises = _arr.map(tx => {\n        const _tx = tx.tx;\n        _tx.from = this.account.address;\n        const _rawTx = tx.rawTransaction;\n        const onError = err => {\n          this.$store.dispatch('addNotification', [\n            noticeTypes.TRANSACTION_ERROR,\n            _tx.from,\n            this.unSignedArray.find(entry =>\n              new BigNumber(_tx.nonce).eq(entry.nonce)\n            ) || _tx,\n            err\n          ]);\n          Toast.responseHandler(err, Toast.ERROR);\n        };\n        const promiEvent = web3.eth[_method](_rawTx);\n        promiEvent.catch(onError);\n        promiEvent.on('error', onError);\n        promiEvent.once('transactionHash', hash => {\n          this.showSuccessModal(\n            'Transaction sent!',\n            'Okay',\n            this.network.type.blockExplorerTX.replace('[[txHash]]', hash)\n          );\n          this.$store.dispatch('addNotification', [\n            noticeTypes.TRANSACTION_HASH,\n            _tx.from,\n            this.unSignedArray.find(entry =>\n              new BigNumber(_tx.nonce).eq(entry.nonce)\n            ),\n            hash\n          ]);\n          const localStoredObj = locStore.get(\n            web3.utils.sha3(this.account.address)\n          );\n          locStore.set(web3.utils.sha3(this.account.address), {\n            nonce: Misc.sanitizeHex(\n              new BigNumber(localStoredObj.nonce).plus(1).toString(16)\n            ),\n            timestamp: localStoredObj.timestamp\n          });\n        });\n        promiEvent.then(receipt => {\n          this.$store.dispatch('addNotification', [\n            noticeTypes.TRANSACTION_RECEIPT,\n            _tx.from,\n            this.unSignedArray.find(entry =>\n              new BigNumber(_tx.nonce).eq(entry.nonce)\n            ),\n            receipt\n          ]);\n        });\n        return promiEvent;\n      });\n      this.signCallback(promises);\n      this.sending = true;\n    },\n    sendBatchTransactions() {\n      this.$refs.confirmCollectionModal.$refs.confirmCollection.hide();\n      this.doBatchTransactions();\n    },\n    sendTx() {\n      this.dismissed = false;\n      this.responseFunction(this.signedTxObject);\n      this.$refs.confirmModal.$refs.confirmation.hide();\n\n      if (this.raw.generateOnly) return;\n      this.showSuccessModal(\n        'Transaction sent!',\n        'Okay',\n        this.network.type.blockExplorerTX.replace(\n          '[[txHash]]',\n          this.signedTxObject.tx.hash\n        )\n      );\n    },\n    reset() {\n      this.responseFunction = null;\n      this.advancedExpand = false;\n      this.addressValid = true;\n      this.amount = '';\n      this.amountValid = true;\n      this.nonce = '';\n      this.gasLimit = '21000';\n      this.data = '0x';\n      this.gasPrice = 0;\n      this.parsedBalance = 0;\n      this.toAddress = '';\n      this.transactionFee = '';\n      this.raw = {};\n      this.signedTx = '';\n      this.messageToSign = '';\n      this.signedMessage = '';\n      this.messageToSign = '';\n      this.signedArray = [];\n      this.txBatch = null;\n      this.sending = false;\n      this.signCallback = {};\n      this.swapWigetData = {\n        destAddress: '',\n        fromCurrency: {\n          symbol: 'ETH',\n          name: ''\n        },\n        toCurrency: {\n          symbol: 'ETH',\n          name: ''\n        },\n        fromValue: 0\n      };\n    }\n  }\n};\n</script>\n"]}]}