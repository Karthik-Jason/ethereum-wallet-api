{"remainingRequest":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/layouts/AccessWalletLayout/components/NetworkAndAddressModal/NetworkAndAddressModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/layouts/AccessWalletLayout/components/NetworkAndAddressModal/NetworkAndAddressModal.vue","mtime":1573477611668},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport CustomerSupport from '@/components/CustomerSupport';\nimport { mapState } from 'vuex';\nimport { Misc, Toast, pathHelpers } from '@/helpers';\nimport web3utils from 'web3-utils';\nimport BigNumber from 'bignumber.js';\nimport Blockie from '@/components/Blockie';\nimport { LEDGER as LEDGER_TYPE } from '@/wallets/bip44/walletTypes';\n\nconst MAX_ADDRESSES = 5;\nexport default {\n  components: {\n    'customer-support': CustomerSupport,\n    blockie: Blockie\n  },\n  props: {\n    hardwareWallet: {\n      type: Object,\n      default: function() {\n        return {};\n      }\n    }\n  },\n  data() {\n    return {\n      selectedId: '',\n      currentIndex: 0,\n      HDAccounts: [],\n      availablePaths: {},\n      selectedPath: '',\n      invalidPath: '',\n      customPathInput: false,\n      currentWallet: null,\n      customPath: { label: '', dpath: '' },\n      showCollapse: false,\n      ledgerType: LEDGER_TYPE,\n      acceptTerms: false\n    };\n  },\n  computed: {\n    ...mapState([\n      'network',\n      'Networks',\n      'customPaths',\n      'path',\n      'web3',\n      'wallet'\n    ]),\n    selectedNetwork() {\n      return this.network;\n    },\n    reorderNetworkList() {\n      return Misc.reorderNetworks();\n    },\n    isDisabled() {\n      return this.selectedId !== '' && this.acceptTerms;\n    }\n  },\n  watch: {\n    hardwareWallet() {\n      this.getPaths();\n      this.setHDAccounts();\n    }\n  },\n  mounted() {\n    // reset component values when modal becomes hidden\n    this.$refs.networkAndAddress.$on('hidden', () => {\n      this.availablePaths = {};\n      this.selectedPath = '';\n      this.invalidPath = '';\n      this.customPathInput = false;\n      this.currentWallet = null;\n      this.customPath = { label: '', path: '' };\n      this.resetPaginationValues();\n    });\n  },\n  methods: {\n    switchNetwork(network) {\n      this.$store.dispatch('switchNetwork', network).then(() => {\n        this.$store.dispatch('setWeb3Instance');\n        this.currentIndex = 0;\n        this.setHDAccounts();\n      });\n    },\n    unselectAllAddresses: function(selected) {\n      document\n        .querySelectorAll('.user-input-checkbox input')\n        .forEach(function(el) {\n          el.checked = el.id === selected;\n        });\n    },\n    setAccount(account) {\n      this.selectedId = 'address' + account.index;\n      this.unselectAllAddresses('address' + account.index);\n      this.currentWallet = account.account;\n    },\n    resetPaginationValues() {\n      this.currentIndex = 0;\n    },\n    showCustomPathInput() {\n      this.customPath = { label: '', path: '' };\n      this.customPathInput = !this.customPathInput;\n    },\n    convertBalance(bal) {\n      if (bal === 'loading') return bal;\n      return new BigNumber(web3utils.fromWei(bal, 'ether')).toFixed(3);\n    },\n    removeCustomPath(path) {\n      this.$store.dispatch('removeCustomPath', path).then(() => {\n        this.getPaths();\n      });\n    },\n    addCustomPath() {\n      const customPath = pathHelpers.checkCustomPath(this.customPath.path);\n      if (customPath) {\n        this.customPath.path = customPath;\n        this.$store\n          .dispatch('addCustomPath', {\n            label: this.customPath.label,\n            path: customPath\n          })\n          .then(() => {\n            this.getPaths();\n          });\n        this.showCustomPathInput(); // reset the path input\n      } else {\n        this.invalidPath = this.customPath;\n      }\n    },\n    changePath(key) {\n      this.resetPaginationValues();\n      let selectedPath;\n      if (this.availablePaths[key]) {\n        selectedPath = this.availablePaths[key].path;\n      } else if (this.customPaths[key]) {\n        selectedPath = this.customPaths[key].path;\n      } else {\n        selectedPath = this.selectedPath;\n      }\n\n      this.hardwareWallet\n        .init(selectedPath)\n        .then(() => {\n          this.getPaths();\n          this.currentIndex = 0;\n          this.setHDAccounts();\n          this.$refs.networkAndAddress.show();\n        })\n        .catch(error => {\n          // if HD path is not supported by the hardware\n          this.HDAccounts = [];\n          Toast.responseHandler(error, Toast.ERROR);\n        });\n      this.selectedPath = this.hardwareWallet.getCurrentPath();\n    },\n    setBalances: web3utils._.debounce(function() {\n      this.HDAccounts.forEach(account => {\n        if (account.account) {\n          this.web3.eth\n            .getBalance(account.account.getAddressString())\n            .then(balance => {\n              account.balance = balance;\n            })\n            .catch(e => {\n              Toast.responseHandler(e, Toast.ERROR);\n            });\n        } else {\n          account.balance = 0;\n        }\n      });\n    }, 1000),\n    unlockWallet() {\n      this.$store\n        .dispatch('decryptWallet', [this.currentWallet])\n        .then(() => {\n          if (this.wallet !== null) {\n            if (!this.$route.path.split('/').includes('interface')) {\n              this.$router.push({\n                path: 'interface'\n              });\n            }\n          }\n\n          this.$refs.networkAndAddress.hide();\n        })\n        .catch(error => {\n          // the wallet param (param[0]) is undefined or null\n          Toast.responseHandler(error, Toast.ERROR);\n        });\n    },\n    async setHDAccounts() {\n      if (!this.web3.eth) this.$store.dispatch('setWeb3Instance');\n      this.HDAccounts = [];\n      for (\n        let i = this.currentIndex;\n        i < this.currentIndex + MAX_ADDRESSES;\n        i++\n      ) {\n        const account = await this.hardwareWallet.getAccount(i);\n        this.HDAccounts.push({\n          index: i,\n          account: account,\n          balance: 'loading'\n        });\n        this.setBalances();\n      }\n      this.currentIndex += MAX_ADDRESSES;\n    },\n    nextAddressSet() {\n      this.setHDAccounts();\n    },\n    previousAddressSet() {\n      this.currentIndex =\n        this.currentIndex - 2 * MAX_ADDRESSES < 0\n          ? 0\n          : this.currentIndex - 2 * MAX_ADDRESSES;\n      this.setHDAccounts();\n    },\n    getPathLabel(path) {\n      for (const _p in this.customPaths) {\n        if (this.customPaths[_p].path === path) {\n          return this.customPaths[_p].label;\n        }\n      }\n\n      for (const _p in this.availablePaths) {\n        if (this.availablePaths[_p].path === path) {\n          return this.availablePaths[_p].label;\n        }\n      }\n\n      return 'Unknown';\n    },\n    getPaths() {\n      this.selectedPath = this.hardwareWallet.getCurrentPath();\n      this.availablePaths = this.hardwareWallet.getSupportedPaths();\n    }\n  }\n};\n",{"version":3,"sources":["NetworkAndAddressModal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyfile":"NetworkAndAddressModal.vue","sourceRoot":"src/layouts/AccessWalletLayout/components/NetworkAndAddressModal","sourcesContent":["<template>\n  <b-modal\n    ref=\"networkAndAddress\"\n    :title=\"$t('accessWallet.networkAndAddress')\"\n    hide-footer\n    class=\"bootstrap-modal nopadding modal-network-and-address\"\n    centered\n    static\n    lazy\n  >\n    <div class=\"modal-content-container\">\n      <div class=\"collapse-container\">\n        <b-btn\n          v-b-toggle.collapse1\n          class=\"collapse-open-button\"\n          variant=\"primary\"\n        >\n          <p class=\"button-number\">1</p>\n          <div class=\"network\">\n            <p>{{ $t('common.network') }}</p>\n            <p class=\"network-name monospace\">\n              ({{ selectedNetwork.type.name }} - {{ selectedNetwork.service }})\n            </p>\n          </div>\n          <p v-if=\"false\" class=\"right-button\">{{ $t('common.cancel') }}</p>\n        </b-btn>\n        <b-collapse\n          id=\"collapse1\"\n          class=\"collapse-content\"\n          accordion=\"networkaddraccordion\"\n        >\n          <ul class=\"networks\">\n            <li\n              v-for=\"(key, index) in Object.keys(reorderNetworkList)\"\n              :key=\"$router.path + key + index\"\n            >\n              <div class=\"network-title\">\n                <div class=\"network-icon-container\">\n                  <img\n                    v-if=\"Networks[key][0].type.icon\"\n                    :src=\"Networks[key][0].type.icon\"\n                    alt\n                  />\n                  <div v-else class=\"no-icon\">\n                    <p>No</p>\n                    <p>Icon</p>\n                  </div>\n                </div>\n                <p>{{ key }}</p>\n              </div>\n              <div class=\"network-content\">\n                <p\n                  v-for=\"net in Networks[key]\"\n                  :key=\"net.service\"\n                  :class=\"\n                    net.service === selectedNetwork.service &&\n                    net.type &&\n                    net.type.name === selectedNetwork.type.name\n                      ? 'current-network'\n                      : ''\n                  \"\n                  @click=\"switchNetwork(net)\"\n                >\n                  {{ net.service }}\n                </p>\n              </div>\n            </li>\n          </ul>\n        </b-collapse>\n      </div>\n      <div class=\"collapse-container\">\n        <b-btn\n          v-b-toggle.collapse2\n          class=\"collapse-open-button\"\n          variant=\"primary\"\n        >\n          <p class=\"button-number\">2</p>\n          <p>{{ $t('common.address') }}</p>\n        </b-btn>\n        <b-collapse\n          id=\"collapse2\"\n          accordion=\"networkaddraccordion\"\n          visible\n          class=\"collapse-content\"\n        >\n          <!-- Derivation Path Drop down -->\n          <div\n            v-show=\"hardwareWallet.identifier !== ledgerType\"\n            class=\"content-container-1\"\n          >\n            <div class=\"hd-derivation\">\n              <h4>{{ $t('accessWallet.hdDerivationPath') }}</h4>\n              <div class=\"dropdown-button-container\">\n                <b-dropdown\n                  id=\"hd-derivation-path\"\n                  :text=\"getPathLabel(selectedPath)\"\n                  right\n                  class=\"dropdown-button-2\"\n                >\n                  <b-dropdown-item\n                    v-for=\"(val, key) in availablePaths\"\n                    :class=\"selectedPath === val.path ? 'active' : ''\"\n                    :key=\"'base' + key\"\n                    @click=\"changePath(key)\"\n                    >{{ val.label }}</b-dropdown-item\n                  >\n                  <b-dropdown-divider />\n                  <b-dropdown-item>\n                    {{ $t('accessWallet.customPaths') }}\n                  </b-dropdown-item>\n                  <b-dropdown-item\n                    v-for=\"(val, key) in customPaths\"\n                    :class=\"selectedPath === val.path ? 'active' : ''\"\n                    :key=\"key\"\n                  >\n                    <div class=\"custom-networks\">\n                      <div @click=\"changePath(key)\">{{ val.label }}</div>\n                      <span>\n                        <i\n                          class=\"fa fa-times-circle\"\n                          @click.prevent=\"removeCustomPath(val)\"\n                        />\n                      </span>\n                    </div>\n                  </b-dropdown-item>\n                  <b-dropdown-item @click=\"showCustomPathInput\">\n                    {{ $t('accessWallet.addCustomPath') }}\n                  </b-dropdown-item>\n                </b-dropdown>\n              </div>\n            </div>\n            <p\n              v-show=\"invalidPath !== '' && customPathInput\"\n              class=\"error-message-container\"\n            >\n              {{\n                $t('accessWallet.invalidPathDesc', { path: invalidPath.path })\n              }}\n            </p>\n            <p v-show=\"!customPathInput\" class=\"derivation-brands monospace\">\n              {{ getPathLabel(selectedPath) }} ({{ selectedPath }})\n            </p>\n            <div v-show=\"customPathInput\" class=\"custom-path-container\">\n              <label for=\"customPathLabel\">{{ $t('common.alias') }}</label>\n              <input\n                id=\"customPathLabel\"\n                v-model=\"customPath.label\"\n                placeholder=\"my custom path\"\n              />\n              <label for=\"customPathInput\">{{ $t('common.path') }}</label>\n              <input\n                id=\"customPathInput\"\n                v-model=\"customPath.path\"\n                placeholder=\"m/44'/1'/0'/0\"\n              />\n              <button class=\"submit-button cancel\" @click=\"showCustomPathInput\">\n                {{ $t('common.cancel') }}\n              </button>\n              <button class=\"submit-button submit\" @click=\"addCustomPath\">\n                {{ $t('accessWallet.addCustomPath') }}\n              </button>\n            </div>\n          </div>\n          <!-- Address List -->\n          <div class=\"content-container-2\">\n            <div class=\"address-block-container\">\n              <div class=\"block-title\">\n                <h4>{{ $t('accessWallet.interactAddr') }}</h4>\n              </div>\n\n              <ul class=\"address-block table-header fours\">\n                <li>{{ $t('accessWallet.id') }}</li>\n                <li>{{ $t('common.address') }}</li>\n                <li>{{ $t('common.balance') }}</li>\n              </ul>\n\n              <ul\n                v-for=\"account in HDAccounts\"\n                :data-address=\"'address' + account.index\"\n                :key=\"account.index\"\n                :class=\"[\n                  selectedId === 'address' + account.index ? 'selected' : '',\n                  'address-block address-data fours'\n                ]\"\n                @click=\"setAccount(account)\"\n              >\n                <li>\n                  <blockie\n                    :address=\"account.account.getChecksumAddressString()\"\n                    :size=\"8\"\n                    :scale=\"16\"\n                    width=\"30px\"\n                    height=\"30px\"\n                  />\n                </li>\n                <li class=\"monospace\">\n                  {{ account.account.getChecksumAddressString() | concatAddr }}\n                </li>\n                <li class=\"monospace\">{{ convertBalance(account.balance) }}</li>\n                <li class=\"user-input-checkbox\">\n                  <label class=\"checkbox-container checkbox-container-small\">\n                    <input\n                      :id=\"'address' + account.index\"\n                      type=\"checkbox\"\n                      @click=\"unselectAllAddresses\"\n                    />\n                    <span class=\"checkmark checkmark-small\" />\n                  </label>\n                </li>\n              </ul>\n            </div>\n            <!-- .address-block-container -->\n            <div class=\"address-nav\">\n              <span @click=\"previousAddressSet()\"\n                >&lt; {{ $t('common.previous') }}</span\n              >\n              <span @click=\"nextAddressSet()\"\n                >{{ $t('common.next') }} &gt;</span\n              >\n            </div>\n          </div>\n          <!-- .content-container-2 -->\n        </b-collapse>\n        <div class=\"accept-terms\">\n          <label class=\"checkbox-container\">\n            {{ $t('accessWallet.acceptTerms') }}\n            <router-link to=\"/terms-and-conditions\"\n              >{{ $t('common.terms') }}.</router-link\n            >\n            <input v-model=\"acceptTerms\" type=\"checkbox\" />\n            <span class=\"checkmark\" />\n          </label>\n        </div>\n        <div class=\"button-container\">\n          <b-btn\n            :disabled=\"!isDisabled\"\n            class=\"mid-round-button-green-filled close-button\"\n            @click.prevent=\"unlockWallet\"\n            >{{ $t('common.accessMyWallet') }}</b-btn\n          >\n        </div>\n        <customer-support />\n      </div>\n    </div>\n    <!-- .modal-content-container -->\n  </b-modal>\n</template>\n\n<script>\nimport CustomerSupport from '@/components/CustomerSupport';\nimport { mapState } from 'vuex';\nimport { Misc, Toast, pathHelpers } from '@/helpers';\nimport web3utils from 'web3-utils';\nimport BigNumber from 'bignumber.js';\nimport Blockie from '@/components/Blockie';\nimport { LEDGER as LEDGER_TYPE } from '@/wallets/bip44/walletTypes';\n\nconst MAX_ADDRESSES = 5;\nexport default {\n  components: {\n    'customer-support': CustomerSupport,\n    blockie: Blockie\n  },\n  props: {\n    hardwareWallet: {\n      type: Object,\n      default: function() {\n        return {};\n      }\n    }\n  },\n  data() {\n    return {\n      selectedId: '',\n      currentIndex: 0,\n      HDAccounts: [],\n      availablePaths: {},\n      selectedPath: '',\n      invalidPath: '',\n      customPathInput: false,\n      currentWallet: null,\n      customPath: { label: '', dpath: '' },\n      showCollapse: false,\n      ledgerType: LEDGER_TYPE,\n      acceptTerms: false\n    };\n  },\n  computed: {\n    ...mapState([\n      'network',\n      'Networks',\n      'customPaths',\n      'path',\n      'web3',\n      'wallet'\n    ]),\n    selectedNetwork() {\n      return this.network;\n    },\n    reorderNetworkList() {\n      return Misc.reorderNetworks();\n    },\n    isDisabled() {\n      return this.selectedId !== '' && this.acceptTerms;\n    }\n  },\n  watch: {\n    hardwareWallet() {\n      this.getPaths();\n      this.setHDAccounts();\n    }\n  },\n  mounted() {\n    // reset component values when modal becomes hidden\n    this.$refs.networkAndAddress.$on('hidden', () => {\n      this.availablePaths = {};\n      this.selectedPath = '';\n      this.invalidPath = '';\n      this.customPathInput = false;\n      this.currentWallet = null;\n      this.customPath = { label: '', path: '' };\n      this.resetPaginationValues();\n    });\n  },\n  methods: {\n    switchNetwork(network) {\n      this.$store.dispatch('switchNetwork', network).then(() => {\n        this.$store.dispatch('setWeb3Instance');\n        this.currentIndex = 0;\n        this.setHDAccounts();\n      });\n    },\n    unselectAllAddresses: function(selected) {\n      document\n        .querySelectorAll('.user-input-checkbox input')\n        .forEach(function(el) {\n          el.checked = el.id === selected;\n        });\n    },\n    setAccount(account) {\n      this.selectedId = 'address' + account.index;\n      this.unselectAllAddresses('address' + account.index);\n      this.currentWallet = account.account;\n    },\n    resetPaginationValues() {\n      this.currentIndex = 0;\n    },\n    showCustomPathInput() {\n      this.customPath = { label: '', path: '' };\n      this.customPathInput = !this.customPathInput;\n    },\n    convertBalance(bal) {\n      if (bal === 'loading') return bal;\n      return new BigNumber(web3utils.fromWei(bal, 'ether')).toFixed(3);\n    },\n    removeCustomPath(path) {\n      this.$store.dispatch('removeCustomPath', path).then(() => {\n        this.getPaths();\n      });\n    },\n    addCustomPath() {\n      const customPath = pathHelpers.checkCustomPath(this.customPath.path);\n      if (customPath) {\n        this.customPath.path = customPath;\n        this.$store\n          .dispatch('addCustomPath', {\n            label: this.customPath.label,\n            path: customPath\n          })\n          .then(() => {\n            this.getPaths();\n          });\n        this.showCustomPathInput(); // reset the path input\n      } else {\n        this.invalidPath = this.customPath;\n      }\n    },\n    changePath(key) {\n      this.resetPaginationValues();\n      let selectedPath;\n      if (this.availablePaths[key]) {\n        selectedPath = this.availablePaths[key].path;\n      } else if (this.customPaths[key]) {\n        selectedPath = this.customPaths[key].path;\n      } else {\n        selectedPath = this.selectedPath;\n      }\n\n      this.hardwareWallet\n        .init(selectedPath)\n        .then(() => {\n          this.getPaths();\n          this.currentIndex = 0;\n          this.setHDAccounts();\n          this.$refs.networkAndAddress.show();\n        })\n        .catch(error => {\n          // if HD path is not supported by the hardware\n          this.HDAccounts = [];\n          Toast.responseHandler(error, Toast.ERROR);\n        });\n      this.selectedPath = this.hardwareWallet.getCurrentPath();\n    },\n    setBalances: web3utils._.debounce(function() {\n      this.HDAccounts.forEach(account => {\n        if (account.account) {\n          this.web3.eth\n            .getBalance(account.account.getAddressString())\n            .then(balance => {\n              account.balance = balance;\n            })\n            .catch(e => {\n              Toast.responseHandler(e, Toast.ERROR);\n            });\n        } else {\n          account.balance = 0;\n        }\n      });\n    }, 1000),\n    unlockWallet() {\n      this.$store\n        .dispatch('decryptWallet', [this.currentWallet])\n        .then(() => {\n          if (this.wallet !== null) {\n            if (!this.$route.path.split('/').includes('interface')) {\n              this.$router.push({\n                path: 'interface'\n              });\n            }\n          }\n\n          this.$refs.networkAndAddress.hide();\n        })\n        .catch(error => {\n          // the wallet param (param[0]) is undefined or null\n          Toast.responseHandler(error, Toast.ERROR);\n        });\n    },\n    async setHDAccounts() {\n      if (!this.web3.eth) this.$store.dispatch('setWeb3Instance');\n      this.HDAccounts = [];\n      for (\n        let i = this.currentIndex;\n        i < this.currentIndex + MAX_ADDRESSES;\n        i++\n      ) {\n        const account = await this.hardwareWallet.getAccount(i);\n        this.HDAccounts.push({\n          index: i,\n          account: account,\n          balance: 'loading'\n        });\n        this.setBalances();\n      }\n      this.currentIndex += MAX_ADDRESSES;\n    },\n    nextAddressSet() {\n      this.setHDAccounts();\n    },\n    previousAddressSet() {\n      this.currentIndex =\n        this.currentIndex - 2 * MAX_ADDRESSES < 0\n          ? 0\n          : this.currentIndex - 2 * MAX_ADDRESSES;\n      this.setHDAccounts();\n    },\n    getPathLabel(path) {\n      for (const _p in this.customPaths) {\n        if (this.customPaths[_p].path === path) {\n          return this.customPaths[_p].label;\n        }\n      }\n\n      for (const _p in this.availablePaths) {\n        if (this.availablePaths[_p].path === path) {\n          return this.availablePaths[_p].label;\n        }\n      }\n\n      return 'Unknown';\n    },\n    getPaths() {\n      this.selectedPath = this.hardwareWallet.getCurrentPath();\n      this.availablePaths = this.hardwareWallet.getSupportedPaths();\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'NetworkAndAddressModal-desktop.scss';\n@import 'NetworkAndAddressModal-tablet.scss';\n@import 'NetworkAndAddressModal-mobile.scss';\n\n.activeConn {\n  color: gray;\n}\n</style>\n"]}]}