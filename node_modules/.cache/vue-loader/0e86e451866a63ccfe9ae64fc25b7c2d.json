{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/dapps/MakerDai/components/WithdrawModal/WithdrawModal.vue?vue&type=style&index=0&id=2373e108&lang=scss&scoped=true&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/dapps/MakerDai/components/WithdrawModal/WithdrawModal.vue","mtime":1574664278278},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/css-loader/index.js","mtime":1574664275862},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1574664277774},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/postcss-loader/src/index.js","mtime":1574664277114},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/sass-loader/dist/cjs.js","mtime":1574664277374},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js","mtime":1574664277774}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import 'WithdrawModal';\n",{"version":3,"sources":["WithdrawModal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6VA","file":"WithdrawModal.vue","sourceRoot":"src/dapps/MakerDai/components/WithdrawModal","sourcesContent":["<template>\n  <div class=\"modal-container\">\n    <b-modal\n      ref=\"modal\"\n      :title=\"$t('dappsMaker.withdrawTitle')\"\n      centered\n      class=\"bootstrap-modal nopadding\"\n      hide-footer\n      static\n      lazy\n    >\n      <div class=\"modal-content-container\">\n        <div class=\"inputs-container\">\n          <div class=\"input-container\">\n            <p class=\"message\">\n              {{ $t('dappsMaker.withdrawNotice') }}\n            </p>\n            <label> {{ $t('dappsMaker.withdrawQuestion') }}</label>\n            <div class=\"top-buttons\">\n              <p class=\"max-withdraw\" @click=\"maxWithdraw\">\n                {{ $t('dappsMaker.maxWithdraw') }}\n              </p>\n            </div>\n            <div :class=\"['input-box', newCollateralRatioSafe ? '' : 'danger']\">\n              <input v-model=\"amount\" />\n              <span class=\"input-unit\">{{ digitalCurrency }}</span>\n            </div>\n            <div class=\"sub-text\">\n              <p v-if=\"canWithdrawEthNotice\" class=\"above-max\">\n                {{ $t('dappsMaker.overMaxWithdraw') }}\n              </p>\n              <div class=\"peth\">\n                <p class=\"peth-value\">\n                  {{\n                    values.toPeth\n                      ? displayFixedValue(values.toPeth(amount), 5, false)\n                      : 0\n                  }}\n                  PETH\n                </p>\n                <popover :popcontent=\"$t('dappsMaker.pethPopover')\" />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <expanding-option title=\"Detail Information\">\n          <div class=\"padding-container\">\n            <div class=\"grid-block\">\n              <p>{{ $t('dappsMaker.maxWithdrawAvailable') }}</p>\n              <p>\n                <b>{{\n                  values.maxDai ? displayFixedValue(values.maxEthDraw, 5) : 0\n                }}</b>\n                {{ digitalCurrency }}\n              </p>\n            </div>\n\n            <div class=\"grid-block\">\n              <p>{{ $t('dappsMaker.projectedLiquidation') }}</p>\n              <p>\n                <b>{{ displayFixedValue(newLiquidationPrice, 2) }}</b>\n                {{ fiatCurrency }}\n              </p>\n            </div>\n            <div class=\"grid-block\">\n              <p>{{ $t('dappsMaker.projectedCollatRatio') }}</p>\n              <p>\n                <b\n                  >{{\n                    displayFixedValue(\n                      displayPercentValue(newCollateralRatio),\n                      3\n                    )\n                  }}%</b\n                >\n              </p>\n            </div>\n          </div>\n        </expanding-option>\n\n        <div\n          v-if=\"!newCollateralRatioSafe && notZero(amount)\"\n          class=\"warning-confirmation\"\n        >\n          <div class=\"grid-block\">\n            <div class=\"sign\">⚠️</div>\n            <div class=\"text-content\">\n              <p class=\"title\">{{ $t('dappsMaker.caution') }}</p>\n              <p class=\"warning-details\">\n                {{\n                  $t('dappsMaker.liquidationRisk', {\n                    value: displayFixedValue(\n                      displayPercentValue(newCollateralRatio)\n                    )\n                  })\n                }}\n              </p>\n              <check-box @changeStatus=\"checkBoxClicked\">\n                <template v-slot:terms>\n                  <p class=\"checkbox-label\">\n                    {{ $t('dappsMaker.understandAndAgree') }}\n                  </p>\n                </template>\n              </check-box>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"buttons\">\n          <standard-button\n            :options=\"cancelButton\"\n            :click-function=\"closeModal\"\n          />\n          <standard-button\n            :options=\"submitButton\"\n            :button-disabled=\"canProceed ? false : true\"\n            :click-function=\"submitBtn\"\n          />\n        </div>\n\n        <help-center-button />\n      </div>\n    </b-modal>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport ExpandingOption from '@/components/ExpandingOption';\nimport StandardButton from '@/components/Buttons/StandardButton';\nimport HelpCenterButton from '@/components/Buttons/HelpCenterButton';\nimport CheckBox from '../CheckBox';\nimport BigNumber from 'bignumber.js/bignumber.js';\nimport { displayFixedValue, displayPercentValue } from '../../helpers';\n\nconst toBigNumber = num => {\n  return new BigNumber(num);\n};\n\nexport default {\n  components: {\n    'help-center-button': HelpCenterButton,\n    'check-box': CheckBox,\n    'expanding-option': ExpandingOption,\n    'standard-button': StandardButton\n  },\n  props: {\n    tokensWithBalance: {\n      type: Array,\n      default: function() {\n        return [];\n      }\n    },\n    action: {\n      type: String,\n      default: ''\n    },\n    values: {\n      type: Object,\n      default: function() {\n        return {\n          maxPethDraw: '',\n          maxEthDraw: '',\n          maxUsdDraw: '',\n          ethCollateral: '',\n          pethCollateral: '',\n          usdCollateral: '',\n          debtValue: '',\n          maxDai: '',\n          collateralRatio: '',\n          cdpId: ''\n        };\n      }\n    },\n    calcCollatRatioEthChg: {\n      type: Function,\n      default: function() {}\n    },\n    calcLiquidationPriceEthChg: {\n      type: Function,\n      default: function() {}\n    },\n    calcCollatRatioDaiChg: {\n      type: Function,\n      default: function() {}\n    },\n    calcLiquidationPriceDaiChg: {\n      type: Function,\n      default: function() {}\n    }\n  },\n  data() {\n    return {\n      amount: 0,\n      amountEth: 0,\n      amountDai: 0,\n      riskyBypass: false,\n      modalDetailInformation: false,\n      textValues: {},\n      fiatCurrency: 'USD',\n      digitalCurrency: 'ETH',\n      cancelButton: {\n        title: 'Cancel',\n        buttonStyle: 'green-border',\n        noMinWidth: true\n      },\n      submitButton: {\n        title: 'Submit',\n        buttonStyle: 'green',\n        noMinWidth: true\n      }\n    };\n  },\n  computed: {\n    ...mapState(['account', 'gasPrice', 'web3', 'network', 'ens']),\n    amountPresent() {\n      return (\n        (this.amount || this.amount !== '') && !toBigNumber(this.amount).lte(0)\n      );\n    },\n    canCompute() {\n      return this.values && this.amountPresent;\n    },\n    canWithdrawEthNotice() {\n      if (this.amountPresent) {\n        return !toBigNumber(this.amount).lte(\n          toBigNumber(this.values.maxEthDraw)\n        );\n      }\n      return false;\n    },\n    canWithdrawEthAmount() {\n      if (this.amountPresent) {\n        return toBigNumber(this.amount).lte(\n          toBigNumber(this.values.ethCollateral)\n        );\n      }\n      return false;\n    },\n    canProceed() {\n      if (this.amountPresent) {\n        if (toBigNumber(this.amount).lte(0)) return false;\n        return (\n          (this.newCollateralRatioSafe && this.canWithdrawEthAmount) ||\n          (!this.newCollateralRatioInvalid &&\n            this.canWithdrawEthAmount &&\n            this.riskyBypass)\n        );\n      }\n      return false;\n    },\n    calcCollateralRatio() {\n      if (this.canCompute) {\n        return this.calcCollatRatioDaiChg(\n          toBigNumber(this.values.debtValue).plus(this.amount)\n        );\n      }\n      if (this.values) {\n        return this.values.collateralRatio;\n      }\n    },\n    newCollateralRatio() {\n      if (this.canCompute) {\n        return this.calcCollatRatioEthChg(\n          toBigNumber(this.values.ethCollateral).minus(this.amount)\n        );\n      } else if (this.values) {\n        return this.values.collatRatio;\n      }\n      return '--';\n    },\n    newCollateralRatioSafe() {\n      if (this.canCompute) {\n        if (this.values.zeroDebt) return true;\n        return this.newCollateralRatio.gte(2);\n      }\n      return true;\n    },\n    newCollateralRatioInvalid() {\n      if (this.canCompute) {\n        if (this.values.zeroDebt) return false;\n        return this.newCollateralRatio.lte(1.5);\n      }\n      return true;\n    },\n    newLiquidationPrice() {\n      if (this.canCompute) {\n        return this.calcLiquidationPriceEthChg(\n          toBigNumber(this.values.ethCollateral).minus(this.amount)\n        );\n      } else if (this.values) {\n        return this.values.liquidationPrice;\n      }\n      return 0;\n    }\n  },\n  watch: {},\n  mounted() {\n    this.$refs.modal.$on('shown', () => {\n      this.amount = 0;\n    });\n    this.$refs.modal.$on('hidden', () => {\n      this.amount = 0;\n    });\n  },\n  methods: {\n    submitBtn() {\n      if (!this.canProceed) return;\n      this.freeEth();\n    },\n    checkBoxClicked(checked) {\n      this.riskyBypass = checked;\n    },\n    displayPercentValue,\n    displayFixedValue,\n    notZero(val) {\n      return toBigNumber(val).gt(0);\n    },\n    maxWithdraw() {\n      this.amount = this.values.maxEthDraw;\n      this.$forceUpdate();\n    },\n    currentDai() {\n      this.amount = this.values.debtValue;\n    },\n    async freeEth() {\n      if (toBigNumber(this.amount).gte(0)) {\n        this.delayCloseModal();\n        if (this.newCollateralRatioSafe) {\n          this.$emit('freeEth', [this.amount, null]);\n        } else {\n          this.$emit('freeEth', [this.amount, this.riskyBypass]);\n        }\n      }\n    },\n    closeModal() {\n      this.$refs.modal.hide();\n    },\n    delayCloseModal() {\n      setTimeout(() => {\n        this.closeModal();\n      }, 200);\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'WithdrawModal';\n</style>\n"]}]}