{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/layouts/InterfaceLayout/containers/DashboardContainer/DashboardContainer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/layouts/InterfaceLayout/containers/DashboardContainer/DashboardContainer.vue","mtime":1573477612008},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapState } from 'vuex';\nimport InterfaceContainerTitle from '../../components/InterfaceContainerTitle';\nimport CurrencyPicker from '../../components/CurrencyPicker';\nimport InterfaceBottomText from '@/components/InterfaceBottomText';\nimport Blockie from '@/components/Blockie';\nimport tabsConfig from '../../components/InterfaceSideMenu/InterfaceSideMenu.config';\nimport DappButtons from '../../components/DappButtons';\nimport dapps from '@/dapps';\nimport SwapWidget from '@/components/SwapWidget';\nimport ButtonNftManager from './components/ButtonNftManager';\nimport ButtonSendTx from './components/ButtonSendTx';\n\nimport { SwapProviders, providers } from '@/partners';\nimport BigNumber from 'bignumber.js';\n\nconst toBigNumber = num => {\n  return new BigNumber(num);\n};\n\nexport default {\n  components: {\n    'interface-container-title': InterfaceContainerTitle,\n    'interface-bottom-text': InterfaceBottomText,\n    blockie: Blockie,\n    'currency-picker': CurrencyPicker,\n    'dapp-buttons': DappButtons,\n    'swap-widget': SwapWidget,\n    'button-nft-manager': ButtonNftManager,\n    'button-send-tx': ButtonSendTx\n  },\n  props: {\n    tokensWithBalance: {\n      type: Array,\n      default: function() {\n        return [];\n      }\n    },\n    getBalance: {\n      type: Function,\n      default: function() {}\n    },\n    highestGas: {\n      type: String,\n      default: '0'\n    }\n  },\n  data() {\n    return {\n      showSwapValues: true,\n      dappsToShow: ['maker', 'manageEns', 'scheduleTransaction'],\n      tabData: tabsConfig.tabs,\n      advancedExpand: false,\n      isValidAddress: false,\n      hexAddress: '',\n      address: '',\n      value: '0',\n      gasLimit: '21000',\n      data: '',\n      selectedCurrency: '',\n      ethPrice: 0,\n      swapPairs: [\n        { from: 'ETH', to: 'BTC', amt: 1, rate: 0 },\n        { from: 'ETH', to: 'EUR', amt: 1, rate: 0 },\n        { from: 'ETH', to: 'KNC', amt: 1, rate: 0 },\n        { from: 'BAT', to: 'ETH', amt: 1, rate: 0 },\n        { from: 'ETH', to: 'DAI', amt: 1, rate: 0 }\n      ],\n      swap: new SwapProviders(\n        providers,\n        {\n          network: this.$store.state.network.type.name,\n          web3: this.$store.state.web3,\n          getRateForUnit: false\n        },\n        {\n          tokensWithBalance: this.tokensWithBalance,\n          online: this.$store.state.online\n        }\n      ),\n      updatingRates: false,\n      suppliedFrom: {\n        symbol: 'ETH',\n        name: 'Ethereum'\n      },\n      suppliedTo: {\n        symbol: 'BTC',\n        name: 'Bitcoin'\n      },\n      suppliedFromAmount: 0\n    };\n  },\n\n  computed: {\n    ...mapState(['account', 'web3', 'network', 'online']),\n    sortedObject() {\n      const arrayedDapp = [];\n      Object.keys(dapps).forEach(dapp => {\n        if (this.dappsToShow.includes(dapp)) {\n          arrayedDapp.push(dapps[dapp]);\n        }\n      });\n\n      return arrayedDapp.sort((a, b) => {\n        if (\n          a.supportedNetworks.includes(this.network.type.name) ||\n          b.supportedNetworks.includes(this.network.type.name)\n        )\n          return 1;\n        return 0;\n      });\n    },\n    isOnlineAndEth() {\n      return this.online && this.network.type.name === 'ETH';\n    }\n  },\n  watch: {\n    ['swap.haveProviderRates']() {\n      if (this.isOnlineAndEth) {\n        this.haveProviderRates = this.swap.haveProviderRates;\n        this.setupSwap();\n      }\n    },\n    network() {\n      setTimeout(() => {\n        this.swap = new SwapProviders(\n          providers,\n          {\n            network: this.network.type.name,\n            web3: this.web3,\n            getRateForUnit: false\n          },\n          {\n            tokensWithBalance: this.tokensWithBalance,\n            online: this.$store.state.online\n          }\n        );\n      }, 500);\n    }\n  },\n  mounted() {\n    if (this.online && this.network.type.name === 'ETH') {\n      this.showSwapValues = true;\n    } else {\n      this.showSwapValues = false;\n    }\n  },\n  methods: {\n    goTo(page, disabled) {\n      if (disabled) return;\n      let childIndex = -1;\n      const pageInfo = this.tabData.find(entry => {\n        if (entry.name === page) {\n          return true;\n        } else if (entry.children.length > 0) {\n          const found = entry.children.findIndex(child => child.name === page);\n          if (found >= 0) {\n            childIndex = found;\n            return true;\n          }\n        }\n        return false;\n      });\n      if (childIndex >= 0) {\n        if (this.online || !pageInfo.children[childIndex].onlineOnly) {\n          this.$router.push({ path: pageInfo.children[childIndex].routes[0] });\n        }\n      } else {\n        if (this.online || !pageInfo.onlineOnly) {\n          this.$router.push({ path: pageInfo.routes[0] });\n        }\n      }\n    },\n    async setupSwap() {\n      if (this.isOnlineAndEth) {\n        for (let i = 0; i < this.swapPairs.length; i++) {\n          const swappers = await this.swap.standAloneRateEstimate(\n            this.swapPairs[i].from,\n            this.swapPairs[i].to,\n            this.swapPairs[i].amt\n          );\n          if (this.isOnlineAndEth) {\n            if (swappers) {\n              this.$set(\n                this.swapPairs[i],\n                'rate',\n                toBigNumber(swappers[0].rate).toFixed(4)\n              );\n            }\n          }\n        }\n      }\n    },\n    showSwapWidget(vals) {\n      if (this.isOnlineAndEth) {\n        this.$eventHub.$emit(\n          'showSwapWidget',\n          this.account.address,\n          vals.from,\n          vals.to,\n          vals.amt\n        );\n      }\n    }\n  }\n};\n",{"version":3,"sources":["DashboardContainer.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqfile":"DashboardContainer.vue","sourceRoot":"src/layouts/InterfaceLayout/containers/DashboardContainer","sourcesContent":["<template>\n  <div class=\"dashboard-container\">\n    <div class=\"container--flex container--top\">\n      <div class=\"container--card block--actions\">\n        <div class=\"title\">\n          <h4>{{ $t('common.actions') }}</h4>\n        </div>\n        <div class=\"buttons\">\n          <button-send-tx :go-to=\"goTo\" class=\"clickable\" />\n          <button-nft-manager\n            :disabled=\"!isOnlineAndEth\"\n            :go-to=\"goTo\"\n            class=\"clickable\"\n          />\n        </div>\n      </div>\n\n      <div class=\"container--card block--swap\">\n        <div class=\"flex--row--align-center title\">\n          <h4>{{ $t('common.swap') }}</h4>\n          <button\n            class=\"title-button prevent-user-select\"\n            @click=\"goTo('swap')\"\n          >\n            {{ $t('common.more') }}\n          </button>\n        </div>\n        <p class=\"section-description\">\n          {{ $t('interface.dashboardSwap') }}\n        </p>\n        <div class=\"swap-info\">\n          <div v-for=\"pair in swapPairs\" :key=\"pair.from + pair.to\">\n            <div\n              :class=\"isOnlineAndEth ? 'swap-enabled' : 'swap-disabled'\"\n              class=\"swap-to clickable\"\n              @click.prevent=\"showSwapWidget(pair)\"\n            >\n              <p class=\"monospace\">\n                {{ pair.amt }} {{ pair.from }} / {{ pair.rate }} {{ pair.to }}\n              </p>\n              <div class=\"margin--left--auto flex--row--align-center\">\n                <span\n                  :class=\"['currency-symbol', 'cc', pair.from, 'cc-icon']\"\n                ></span>\n                <img src=\"@/assets/images/icons/swap-widget.svg\" alt />\n                <span\n                  :class=\"['currency-symbol', 'cc', pair.to, 'cc-icon']\"\n                ></span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"container--card bottom--buttons\">\n      <div class=\"block--dapps\">\n        <div class=\"flex--row--align-center title\">\n          <h4>{{ $t('common.dapps') }}</h4>\n          <button\n            class=\"title-button prevent-user-select\"\n            @click=\"goTo('dapps')\"\n          >\n            {{ $t('common.viewAll') }}\n          </button>\n        </div>\n        <div class=\"block--container\">\n          <dapp-buttons\n            v-for=\"dapp in sortedObject\"\n            :key=\"dapp.title\"\n            :title=\"$t(dapp.title)\"\n            :icon=\"dapp.icon\"\n            :icon-disabled=\"dapp.iconDisabled\"\n            :desc=\"$t(dapp.desc)\"\n            :param=\"dapp.route\"\n            :supported-networks=\"dapp.supportedNetworks\"\n            class=\"dapp\"\n          />\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport InterfaceContainerTitle from '../../components/InterfaceContainerTitle';\nimport CurrencyPicker from '../../components/CurrencyPicker';\nimport InterfaceBottomText from '@/components/InterfaceBottomText';\nimport Blockie from '@/components/Blockie';\nimport tabsConfig from '../../components/InterfaceSideMenu/InterfaceSideMenu.config';\nimport DappButtons from '../../components/DappButtons';\nimport dapps from '@/dapps';\nimport SwapWidget from '@/components/SwapWidget';\nimport ButtonNftManager from './components/ButtonNftManager';\nimport ButtonSendTx from './components/ButtonSendTx';\n\nimport { SwapProviders, providers } from '@/partners';\nimport BigNumber from 'bignumber.js';\n\nconst toBigNumber = num => {\n  return new BigNumber(num);\n};\n\nexport default {\n  components: {\n    'interface-container-title': InterfaceContainerTitle,\n    'interface-bottom-text': InterfaceBottomText,\n    blockie: Blockie,\n    'currency-picker': CurrencyPicker,\n    'dapp-buttons': DappButtons,\n    'swap-widget': SwapWidget,\n    'button-nft-manager': ButtonNftManager,\n    'button-send-tx': ButtonSendTx\n  },\n  props: {\n    tokensWithBalance: {\n      type: Array,\n      default: function() {\n        return [];\n      }\n    },\n    getBalance: {\n      type: Function,\n      default: function() {}\n    },\n    highestGas: {\n      type: String,\n      default: '0'\n    }\n  },\n  data() {\n    return {\n      showSwapValues: true,\n      dappsToShow: ['maker', 'manageEns', 'scheduleTransaction'],\n      tabData: tabsConfig.tabs,\n      advancedExpand: false,\n      isValidAddress: false,\n      hexAddress: '',\n      address: '',\n      value: '0',\n      gasLimit: '21000',\n      data: '',\n      selectedCurrency: '',\n      ethPrice: 0,\n      swapPairs: [\n        { from: 'ETH', to: 'BTC', amt: 1, rate: 0 },\n        { from: 'ETH', to: 'EUR', amt: 1, rate: 0 },\n        { from: 'ETH', to: 'KNC', amt: 1, rate: 0 },\n        { from: 'BAT', to: 'ETH', amt: 1, rate: 0 },\n        { from: 'ETH', to: 'DAI', amt: 1, rate: 0 }\n      ],\n      swap: new SwapProviders(\n        providers,\n        {\n          network: this.$store.state.network.type.name,\n          web3: this.$store.state.web3,\n          getRateForUnit: false\n        },\n        {\n          tokensWithBalance: this.tokensWithBalance,\n          online: this.$store.state.online\n        }\n      ),\n      updatingRates: false,\n      suppliedFrom: {\n        symbol: 'ETH',\n        name: 'Ethereum'\n      },\n      suppliedTo: {\n        symbol: 'BTC',\n        name: 'Bitcoin'\n      },\n      suppliedFromAmount: 0\n    };\n  },\n\n  computed: {\n    ...mapState(['account', 'web3', 'network', 'online']),\n    sortedObject() {\n      const arrayedDapp = [];\n      Object.keys(dapps).forEach(dapp => {\n        if (this.dappsToShow.includes(dapp)) {\n          arrayedDapp.push(dapps[dapp]);\n        }\n      });\n\n      return arrayedDapp.sort((a, b) => {\n        if (\n          a.supportedNetworks.includes(this.network.type.name) ||\n          b.supportedNetworks.includes(this.network.type.name)\n        )\n          return 1;\n        return 0;\n      });\n    },\n    isOnlineAndEth() {\n      return this.online && this.network.type.name === 'ETH';\n    }\n  },\n  watch: {\n    ['swap.haveProviderRates']() {\n      if (this.isOnlineAndEth) {\n        this.haveProviderRates = this.swap.haveProviderRates;\n        this.setupSwap();\n      }\n    },\n    network() {\n      setTimeout(() => {\n        this.swap = new SwapProviders(\n          providers,\n          {\n            network: this.network.type.name,\n            web3: this.web3,\n            getRateForUnit: false\n          },\n          {\n            tokensWithBalance: this.tokensWithBalance,\n            online: this.$store.state.online\n          }\n        );\n      }, 500);\n    }\n  },\n  mounted() {\n    if (this.online && this.network.type.name === 'ETH') {\n      this.showSwapValues = true;\n    } else {\n      this.showSwapValues = false;\n    }\n  },\n  methods: {\n    goTo(page, disabled) {\n      if (disabled) return;\n      let childIndex = -1;\n      const pageInfo = this.tabData.find(entry => {\n        if (entry.name === page) {\n          return true;\n        } else if (entry.children.length > 0) {\n          const found = entry.children.findIndex(child => child.name === page);\n          if (found >= 0) {\n            childIndex = found;\n            return true;\n          }\n        }\n        return false;\n      });\n      if (childIndex >= 0) {\n        if (this.online || !pageInfo.children[childIndex].onlineOnly) {\n          this.$router.push({ path: pageInfo.children[childIndex].routes[0] });\n        }\n      } else {\n        if (this.online || !pageInfo.onlineOnly) {\n          this.$router.push({ path: pageInfo.routes[0] });\n        }\n      }\n    },\n    async setupSwap() {\n      if (this.isOnlineAndEth) {\n        for (let i = 0; i < this.swapPairs.length; i++) {\n          const swappers = await this.swap.standAloneRateEstimate(\n            this.swapPairs[i].from,\n            this.swapPairs[i].to,\n            this.swapPairs[i].amt\n          );\n          if (this.isOnlineAndEth) {\n            if (swappers) {\n              this.$set(\n                this.swapPairs[i],\n                'rate',\n                toBigNumber(swappers[0].rate).toFixed(4)\n              );\n            }\n          }\n        }\n      }\n    },\n    showSwapWidget(vals) {\n      if (this.isOnlineAndEth) {\n        this.$eventHub.$emit(\n          'showSwapWidget',\n          this.account.address,\n          vals.from,\n          vals.to,\n          vals.amt\n        );\n      }\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'DashboardContainer.scss';\n</style>\n"]}]}