{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/containers/ConfirmationContainer/components/ConfirmCollectionModal/ConfirmCollectionModal.vue?vue&type=template&id=61eecaed&scoped=true&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/containers/ConfirmationContainer/components/ConfirmCollectionModal/ConfirmCollectionModal.vue","mtime":1574664278270},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1574664277774},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js","mtime":1574664277774}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    [\n      _c(\n        \"b-modal\",\n        {\n          ref: \"confirmCollection\",\n          staticClass: \"bootstrap-modal-wide confirmation-modal nopadding\",\n          attrs: {\n            title:\n              \"Confirmation (Total of \" +\n              _vm.unSignedArray.length +\n              \" transactions)\",\n            \"hide-footer\": \"\",\n            centered: \"\",\n            static: \"\",\n            lazy: \"\"\n          }\n        },\n        [\n          _c(\"div\", { staticClass: \"modal-content\" }, [\n            _c(\"div\", { staticClass: \"network-info-container\" }, [\n              _c(\"p\", [\n                _c(\"span\", [_vm._v(_vm._s(_vm.$t(\"interface.network\")))]),\n                _vm._v(\n                  \"\\n          \" +\n                    _vm._s(_vm.network.type.name) +\n                    \" by \" +\n                    _vm._s(_vm.network.service) +\n                    \"\\n        \"\n                )\n              ]),\n              _c(\"div\", [_c(\"div\", { staticClass: \"line\" })]),\n              _c(\"p\", [\n                _c(\"span\", [\n                  _vm._v(_vm._s(_vm.$t(\"confirmation.txTotal\")) + \":\")\n                ]),\n                _vm._v(\n                  \"\\n          \" +\n                    _vm._s(_vm.txTotal) +\n                    \"\\n          \" +\n                    _vm._s(_vm.network.type.currencyName) +\n                    \"\\n        \"\n                )\n              ])\n            ]),\n            _c(\n              \"div\",\n              { staticClass: \"modal-content-body\" },\n              _vm._l(_vm.unSignedArray, function(item, idx) {\n                return _c(\n                  \"div\",\n                  { key: item.to + idx + item.value, staticClass: \"item\" },\n                  [\n                    _c(\n                      \"div\",\n                      {\n                        directives: [\n                          {\n                            name: \"b-toggle\",\n                            rawName: \"v-b-toggle.prevent\",\n                            value: \"accordion\" + idx,\n                            expression: \"`accordion${idx}`\",\n                            modifiers: { prevent: true }\n                          }\n                        ],\n                        staticClass: \"header\"\n                      },\n                      [\n                        _c(\"div\", { staticClass: \"header-item\" }, [\n                          _c(\"img\", {\n                            attrs: {\n                              src: _vm.network.type.icon\n                                ? _vm.network.type.icon\n                                : \"\",\n                              alt: \"\"\n                            }\n                          }),\n                          _c(\"div\", [\n                            _c(\"p\", [\n                              _vm._v(\n                                \"\\n                  - \" +\n                                  _vm._s(\n                                    _vm.web3.utils.hexToNumberString(item.value)\n                                  ) +\n                                  \"\\n                  \"\n                              ),\n                              _c(\"span\", [\n                                _vm._v(\n                                  \"\\n                    \" +\n                                    _vm._s(_vm.network.type.currencyName) +\n                                    \"\\n                  \"\n                                )\n                              ])\n                            ]),\n                            _c(\"div\", [\n                              _c(\"span\", [\n                                _vm._v(_vm._s(_vm.$t(\"common.from\")))\n                              ]),\n                              _vm._v(\n                                \"\\n                  \" +\n                                  _vm._s(\n                                    _vm._f(\"concatAddr\")(_vm.account.address)\n                                  ) +\n                                  \"\\n                \"\n                              )\n                            ])\n                          ])\n                        ]),\n                        _c(\n                          \"div\",\n                          {\n                            directives: [\n                              {\n                                name: \"show\",\n                                rawName: \"v-show\",\n                                value: item.to !== \"\" && item.to !== undefined,\n                                expression:\n                                  \"item.to !== '' && item.to !== undefined\"\n                              }\n                            ],\n                            staticClass: \"direction\"\n                          },\n                          [\n                            _c(\"img\", {\n                              attrs: {\n                                alt: \"\",\n                                src: require(\"@/assets/images/icons/right-arrow.svg\")\n                              }\n                            })\n                          ]\n                        ),\n                        _c(\"div\", { staticClass: \"header-item\" }, [\n                          _c(\"img\", {\n                            attrs: {\n                              src: _vm.network.type.icon\n                                ? _vm.network.type.icon\n                                : \"\",\n                              alt: \"\"\n                            }\n                          }),\n                          _c(\"div\", [\n                            _c(\"p\", [\n                              _vm._v(\n                                \"\\n                  + \" +\n                                  _vm._s(\n                                    _vm.web3.utils.hexToNumberString(item.value)\n                                  ) +\n                                  \"\\n                  \"\n                              ),\n                              _c(\"span\", [\n                                _vm._v(\n                                  \"\\n                    \" +\n                                    _vm._s(_vm.network.type.currencyName) +\n                                    \"\\n                  \"\n                                )\n                              ])\n                            ]),\n                            _c(\"div\", [\n                              _c(\"span\", [_vm._v(_vm._s(_vm.$t(\"common.to\")))]),\n                              _vm._v(\n                                \"\\n                  \" +\n                                  _vm._s(_vm._f(\"concatAddr\")(item.to)) +\n                                  \"\\n                \"\n                              )\n                            ])\n                          ])\n                        ]),\n                        _c(\"div\", { staticClass: \"trigger-container\" }, [\n                          _c(\"i\", { staticClass: \"fa fa-lg fa-angle-up\" }),\n                          _c(\"i\", { staticClass: \"fa fa-lg fa-angle-down\" })\n                        ])\n                      ]\n                    ),\n                    _c(\n                      \"b-collapse\",\n                      { staticClass: \"body\", attrs: { id: \"accordion\" + idx } },\n                      [\n                        _c(\"div\", { staticClass: \"body-item\" }, [\n                          _c(\"span\", { staticClass: \"item-title\" }, [\n                            _vm._v(_vm._s(_vm.$t(\"common.gasLimit\")) + \"t\")\n                          ]),\n                          _c(\"span\", [\n                            _vm._v(\n                              _vm._s(_vm.web3.utils.hexToNumberString(item.gas))\n                            )\n                          ])\n                        ]),\n                        _c(\"div\", { staticClass: \"body-item\" }, [\n                          _c(\"span\", { staticClass: \"item-title\" }, [\n                            _vm._v(_vm._s(_vm.$t(\"common.gasPrice\")))\n                          ]),\n                          _c(\"span\", [\n                            _vm._v(\n                              \"\\n                \" +\n                                _vm._s(\n                                  _vm.web3.utils.fromWei(item.gasPrice, \"gwei\")\n                                ) +\n                                \"\\n                Gwei\\n              \"\n                            )\n                          ])\n                        ]),\n                        _c(\"div\", { staticClass: \"body-item\" }, [\n                          _c(\"span\", { staticClass: \"item-title\" }, [\n                            _vm._v(\"Nonce\")\n                          ]),\n                          _c(\"span\", [\n                            _vm._v(\n                              _vm._s(\n                                _vm.web3.utils.hexToNumberString(item.nonce)\n                              )\n                            )\n                          ])\n                        ]),\n                        _c(\"div\", { staticClass: \"body-item\" }, [\n                          _c(\"span\", { staticClass: \"item-title\" }, [\n                            _vm._v(_vm._s(_vm.$t(\"common.data\")))\n                          ]),\n                          _c(\"span\", { staticClass: \"data-string\" }, [\n                            _vm._v(_vm._s(item.input || item.data))\n                          ])\n                        ])\n                      ]\n                    )\n                  ],\n                  1\n                )\n              }),\n              0\n            )\n          ]),\n          _c(\"div\", { staticClass: \"submit-button-container\" }, [\n            _c(\"div\", { staticClass: \"flex-center-align\" }, [\n              _c(\"div\", { staticClass: \"button-with-helper\" }, [\n                _c(\n                  \"div\",\n                  {\n                    directives: [\n                      {\n                        name: \"show\",\n                        rawName: \"v-show\",\n                        value: !_vm.sending,\n                        expression: \"!sending\"\n                      }\n                    ],\n                    ref: \"ConfirmAndSendButton\",\n                    class: [\n                      _vm.allSigned ? \"\" : \"disabled\",\n                      \"submit-button large-round-button-green-filled clickable\"\n                    ],\n                    on: { click: _vm.sendBatchTransactions }\n                  },\n                  [\n                    _vm._v(\n                      \"\\n            \" + _vm._s(_vm.buttonText) + \"\\n          \"\n                    )\n                  ]\n                ),\n                _c(\n                  \"div\",\n                  {\n                    directives: [\n                      {\n                        name: \"show\",\n                        rawName: \"v-show\",\n                        value: _vm.sending,\n                        expression: \"sending\"\n                      }\n                    ],\n                    staticClass:\n                      \"submit-button large-round-button-green-filled clickable disabled\"\n                  },\n                  [\n                    _vm._v(\n                      \"\\n            \" +\n                        _vm._s(_vm.$t(\"common.waitingForHash\")) +\n                        \"\\n            \"\n                    ),\n                    _c(\"i\", { staticClass: \"fa fa-spinner fa-spin\" })\n                  ]\n                ),\n                _c(\n                  \"div\",\n                  { staticClass: \"tooltip-box-2\" },\n                  [\n                    _c(\"b-btn\", { attrs: { id: \"exPopover9\" } }, [\n                      _c(\"img\", {\n                        staticClass: \"icon\",\n                        attrs: {\n                          alt: \"\",\n                          src: require(\"@/assets/images/icons/qr-code.svg\")\n                        }\n                      })\n                    ]),\n                    _c(\n                      \"b-popover\",\n                      {\n                        attrs: {\n                          target: \"exPopover9\",\n                          triggers: \"hover focus\",\n                          placement: \"top\"\n                        }\n                      },\n                      [\n                        _c(\"div\", { staticClass: \"qrcode-contents\" }, [\n                          _c(\"p\", { staticClass: \"qrcode-title\" }, [\n                            _vm._v(\n                              \"\\n                  \" +\n                                _vm._s(_vm.$t(\"confirmation.scanQrCode\")) +\n                                \"\\n                \"\n                            )\n                          ]),\n                          _c(\n                            \"div\",\n                            { staticClass: \"qrcode-block\" },\n                            [\n                              _c(\"qrcode\", {\n                                attrs: {\n                                  options: { size: 100 },\n                                  value: \"Hello, World!\"\n                                }\n                              })\n                            ],\n                            1\n                          ),\n                          _c(\"p\", { staticClass: \"qrcode-helper\" }, [\n                            _vm._v(\"What is that?\")\n                          ])\n                        ])\n                      ]\n                    )\n                  ],\n                  1\n                )\n              ])\n            ]),\n            _c(\"p\", { staticClass: \"learn-more\" }, [\n              _vm._v(\"\\n        Have any issues?\\n        \"),\n              _c(\n                \"a\",\n                {\n                  attrs: {\n                    href: \"https:/kb.myetherwallet.com\",\n                    target: \"_blank\",\n                    rel: \"noopener noreferrer\"\n                  }\n                },\n                [_vm._v(\"Learn more\")]\n              )\n            ])\n          ])\n        ]\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}