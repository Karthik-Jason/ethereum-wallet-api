{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/layouts/CreateWalletLayout/containers/ByMnemonicContainer/components/VerificationModal/VerificationModal.vue?vue&type=template&id=4921e162&scoped=true&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/layouts/CreateWalletLayout/containers/ByMnemonicContainer/components/VerificationModal/VerificationModal.vue","mtime":1574664278290},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1574664277774},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js","mtime":1574664277774}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"b-modal\",\n    {\n      ref: \"verification\",\n      staticClass: \"bootstrap-modal-wide verification nopadding\",\n      attrs: {\n        \"hide-footer\": \"\",\n        centered: \"\",\n        title: \"Verification\",\n        static: \"\",\n        lazy: \"\"\n      }\n    },\n    [\n      _c(\"div\", { staticClass: \"content-block\" }, [\n        _c(\"p\", { staticClass: \"block-title\" }, [\n          _vm._v(\n            \"\\n      Please enter and fill out the empty boxes below to verify your mnemonic\\n      phrase key.\\n    \"\n          )\n        ]),\n        _c(\"div\", { staticClass: \"phrases\" }, [\n          _c(\n            \"ul\",\n            _vm._l(_vm.mnemonicValues, function(value, index) {\n              return _c(\n                \"li\",\n                {\n                  key: index,\n                  staticClass: \"word\",\n                  attrs: { \"data-index\": index }\n                },\n                [\n                  _vm._v(\"\\n          \" + _vm._s(index + 1) + \".\"),\n                  _c(\"span\", [_vm._v(_vm._s(value))]),\n                  _c(\"input\", {\n                    directives: [\n                      {\n                        name: \"model\",\n                        rawName: \"v-model\",\n                        value: _vm.inputs[index],\n                        expression: \"inputs[index]\"\n                      }\n                    ],\n                    staticClass: \"hidden\",\n                    attrs: { type: \"text\", name: \"\", autocomplete: \"off\" },\n                    domProps: { value: _vm.inputs[index] },\n                    on: {\n                      input: function($event) {\n                        if ($event.target.composing) {\n                          return\n                        }\n                        _vm.$set(_vm.inputs, index, $event.target.value)\n                      }\n                    }\n                  })\n                ]\n              )\n            }),\n            0\n          )\n        ]),\n        _c(\n          \"div\",\n          {\n            directives: [\n              {\n                name: \"show\",\n                rawName: \"v-show\",\n                value: _vm.errorMsg.length > 0,\n                expression: \"errorMsg.length > 0\"\n              }\n            ],\n            staticClass: \"error-msg-container\"\n          },\n          [_vm._v(\"\\n      \" + _vm._s(_vm.errorMsg) + \"\\n    \")]\n        ),\n        _c(\"div\", { staticClass: \"button-container\" }, [\n          _c(\n            \"div\",\n            {\n              class: [\n                _vm.loading ? \"disabled\" : \"\",\n                \"verify-button large-round-button-green-filled\"\n              ],\n              on: { click: _vm.verifyMnemonic }\n            },\n            [\n              _c(\n                \"span\",\n                {\n                  directives: [\n                    {\n                      name: \"show\",\n                      rawName: \"v-show\",\n                      value: !_vm.loading,\n                      expression: \"!loading\"\n                    }\n                  ]\n                },\n                [_vm._v(\" Verify \")]\n              ),\n              _c(\"i\", {\n                directives: [\n                  {\n                    name: \"show\",\n                    rawName: \"v-show\",\n                    value: _vm.loading,\n                    expression: \"loading\"\n                  }\n                ],\n                staticClass: \"fa fa-lg fa-spin fa-spinner\"\n              })\n            ]\n          )\n        ])\n      ])\n    ]\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}