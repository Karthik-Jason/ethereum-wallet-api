{"remainingRequest":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/layouts/InterfaceLayout/containers/SwapContainer/components/SwapAddressSelector/SwapAddressSelector.vue?vue&type=style&index=0&id=5c1b3fbb&lang=scss&scoped=true&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/layouts/InterfaceLayout/containers/SwapContainer/components/SwapAddressSelector/SwapAddressSelector.vue","mtime":1573477612064},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import 'SwapAddressSelector';\n",{"version":3,"sources":["SwapAddressSelector.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiTA","file":"SwapAddressSelector.vue","sourceRoot":"src/layouts/InterfaceLayout/containers/SwapContainer/components/SwapAddressSelector","sourcesContent":["<template>\n  <div class=\"drop-down-address-selector\">\n    <div class=\"dropdown--title\">\n      <h4>{{ title }}</h4>\n      <button\n        class=\"title-button prevent-user-select\"\n        @click=\"copyToClipboard($refs.addressInput)\"\n      >\n        {{ $t('common.copy') }}\n      </button>\n    </div>\n    <div class=\"dropdown--content\">\n      <div\n        :class=\"dropdownOpen ? 'dropdown-open' : ''\"\n        class=\"dropdown-input-box\"\n      >\n        <input\n          ref=\"addressInput\"\n          v-model=\"selectedAddress\"\n          type=\"text\"\n          placeholder=\"Please enter the address\"\n          @focus=\"dropdownOpen = false\"\n        />\n        <div v-if=\"!validAddress\" class=\"blockie-place-holder-image\" />\n        <div v-if=\"validAddress\" class=\"selected-address-blockie\">\n          <blockie :address=\"selectedAddress\" width=\"30px\" height=\"30px\" />\n          <div v-if=\"isToken(currency)\">\n            <img\n              class=\"currency-icon\"\n              src=\"@/assets/images/currency/eth.svg\"\n              alt\n            />\n          </div>\n          <div v-else>\n            <i\n              :class=\"[\n                'currency-icon',\n                'as-font',\n                'cc',\n                getIcon(currency),\n                'cc-icon'\n              ]\"\n            />\n          </div>\n        </div>\n        <div class=\"dropdown-open-button\" @click=\"dropdownOpen = !dropdownOpen\">\n          <i\n            v-if=\"!dropdownOpen\"\n            class=\"fa fa-chevron-down\"\n            aria-hidden=\"true\"\n          />\n          <i v-if=\"dropdownOpen\" class=\"fa fa-chevron-up\" aria-hidden=\"true\" />\n        </div>\n      </div>\n      <div v-if=\"dropdownOpen\" class=\"dropdown-list-box\">\n        <ul>\n          <li\n            v-for=\"addr in addresses\"\n            :key=\"addr.key\"\n            @click=\"listedAddressClick(addr.address)\"\n          >\n            <div class=\"list-blockie\">\n              <blockie :address=\"addr.address\" width=\"30px\" height=\"30px\" />\n              <img\n                class=\"currency-icon\"\n                src=\"@/assets/images/currency/eth.svg\"\n                alt\n              />\n            </div>\n            <div class=\"address-block\">\n              <p class=\"listed-address\">\n                {{ addr.address }}\n              </p>\n            </div>\n            <p v-if=\"addr.address === currentAddress\" class=\"address-note\">\n              {{ $t('interface.myAddr') }}\n            </p>\n            <i\n              v-if=\"toAddressCheckMark\"\n              aria-hidden=\"true\"\n              class=\"fa fa-check-circle good-button\"\n            />\n          </li>\n        </ul>\n      </div>\n    </div>\n    <!-- .dropdown--content -->\n    <div v-show=\"validityState === 2\" class=\"error-message-container\">\n      <p>{{ $t('interface.notValidAddr', { currency: currency }) }}</p>\n    </div>\n    <div v-show=\"validityState === 3\" class=\"warn-message-container\">\n      <p>\n        {{\n          $t('interface.unableToValidateAddress', {\n            currency: currency\n          })\n        }}\n      </p>\n    </div>\n    <div v-show=\"validityState === 4\" class=\"warn-message-container\">\n      <p>\n        {{ EnsAddress }}\n      </p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport '@/assets/images/currency/coins/asFont/cryptocoins.css';\nimport '@/assets/images/currency/coins/asFont/cryptocoins-colors.css';\nimport { mapState } from 'vuex';\nimport debugLogger from 'debug';\nimport WAValidator from 'wallet-address-validator';\nimport MAValidator from 'multicoin-address-validator';\nimport Blockie from '@/components/Blockie';\nimport { EthereumTokens, BASE_CURRENCY, hasIcon } from '@/partners';\nimport { canValidate } from '@/partners/helpers';\nimport getMultiCoinAddress from '@/helpers/ENSMultiCoin.js';\n\nconst errorLogger = debugLogger('v5:error');\n\nexport default {\n  components: {\n    blockie: Blockie\n  },\n  props: {\n    title: {\n      type: String,\n      default: ''\n    },\n    currentAddress: {\n      type: String,\n      default: ''\n    },\n    currency: {\n      type: String,\n      default: 'ETH'\n    },\n    preFill: {\n      type: Boolean,\n      default: false\n    },\n    preFillAddress: {\n      type: String,\n      default: ''\n    }\n  },\n  data() {\n    return {\n      validityState: 0,\n      EnsAddress: '',\n      validEnsAddress: false,\n      EthereumTokens: EthereumTokens,\n      selectedAddress: '',\n      validAddress: false,\n      dropdownOpen: false,\n      unableToValidate: false,\n      addresses: [],\n      toAddressCheckMark: false\n    };\n  },\n  computed: {\n    ...mapState(['ens'])\n  },\n  watch: {\n    currentAddress(address) {\n      if (this.addresses.findIndex(addr => addr.address === address) === -1) {\n        this.addresses = [\n          {\n            address: address,\n            currency: BASE_CURRENCY\n          },\n          ...this.addresses\n        ];\n      }\n    },\n    selectedAddress(address) {\n      this.validateAddress(address);\n    },\n    currency() {\n      this.validateAddress(this.selectedAddress);\n    }\n  },\n  mounted() {\n    if (this.preFill) {\n      this.selectedAddress =\n        this.preFillAddress !== '' ? this.preFillAddress : '';\n    }\n  },\n  methods: {\n    getIcon(currency) {\n      return hasIcon(currency);\n    },\n    copyToClipboard(ref) {\n      ref.select();\n      document.execCommand('copy');\n    },\n    isToken(symbol) {\n      return typeof EthereumTokens[symbol] !== 'undefined';\n    },\n    listedAddressClick(address) {\n      this.toAddressCheckMark = true;\n      this.dropdownOpen = !this.dropdownOpen;\n      this.selectedAddress = address;\n    },\n    async checkForEns(address) {\n      if (address.includes('.')) {\n        const currency =\n          this.currency === 'ETH'\n            ? 'ETH'\n            : this.isToken(this.currency)\n            ? 'ETH'\n            : this.currency;\n        try {\n          const nativeAddress = await getMultiCoinAddress(\n            this.ens,\n            address,\n            currency\n          );\n          this.validityResult('VALID_ENS');\n          this.EnsAddress = nativeAddress;\n          return nativeAddress;\n        } catch (e) {\n          this.validityResult('INVALID_ENS');\n          return address;\n        }\n      } else {\n        this.validityResult('INVALID_ENS');\n        return address;\n      }\n    },\n    validityResult(state) {\n      const validityStates = {\n        VALID: 1,\n        INVALID: 2,\n        MAYBE_VALID: 3,\n        VALID_ENS: 4,\n        INVALID_ENS: 5\n      };\n      const validStates = [1, 3, 4];\n      if (typeof state === 'undefined') {\n        return validStates.includes(this.validityState);\n      } else if (typeof state === 'boolean') {\n        if (state) {\n          if (this.validityState !== 4) {\n            this.validityState = validityStates['VALID'];\n          }\n        } else {\n          this.validityState = validityStates['INVALID'];\n        }\n      } else {\n        this.validityState = validityStates[state];\n      }\n    },\n    async validateAddress(addr) {\n      if (this.selectedAddress !== '') {\n        this.validAddress = false;\n        this.unableToValidate = false;\n        let checkAddress = addr.address ? addr.address : addr;\n        checkAddress = await this.checkForEns(checkAddress);\n        if (EthereumTokens[this.currency]) {\n          this.validAddress = WAValidator.validate(checkAddress, 'ETH');\n          this.validityResult(this.validAddress);\n        } else {\n          try {\n            this.validAddress = WAValidator.validate(\n              checkAddress,\n              this.currency\n            );\n            this.validityResult(this.validAddress);\n          } catch (e) {\n            if (canValidate(this.currency)) {\n              try {\n                this.validAddress = MAValidator.validate(\n                  checkAddress,\n                  this.currency\n                );\n                this.validityResult(this.validAddress);\n              } catch (e) {\n                errorLogger(e);\n                this.validityResult('INVALID');\n                this.validAddress = false;\n              }\n            } else {\n              this.validityResult('MAYBE_VALID');\n              this.validAddress = true;\n              this.unableToValidate = true;\n            }\n          }\n        }\n\n        if (this.validityResult()) {\n          this.$emit('toAddress', checkAddress);\n        } else {\n          this.$emit('toAddress', '');\n        }\n      } else if (this.validityState !== 0) {\n        this.validityResult('INVALID');\n      }\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'SwapAddressSelector';\n</style>\n"]}]}