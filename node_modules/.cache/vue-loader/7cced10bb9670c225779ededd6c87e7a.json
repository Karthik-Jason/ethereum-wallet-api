{"remainingRequest":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/dapps/ScheduleTransaction/containers/ScheduleView.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/dapps/ScheduleTransaction/containers/ScheduleView.vue","mtime":1573477611660},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapState } from 'vuex';\nimport { EAC, Util } from '@ethereum-alarm-clock/lib';\nimport BigNumber from 'bignumber.js';\nimport { Datetime } from 'vue-datetime';\nimport 'vue-datetime/dist/vue-datetime.css';\nimport moment from 'moment';\nimport 'moment-timezone';\nimport * as unit from 'ethjs-unit';\nimport { Toast } from '@/helpers';\n\nimport BackButton from '@/layouts/InterfaceLayout/components/BackButton';\nimport CurrencyPicker from '../../../layouts/InterfaceLayout/components/CurrencyPicker';\nimport StandardInput from '@/components/StandardInput';\nimport StandardDropdown from '@/components/StandardDropdown';\nimport Blockie from '@/components/Blockie';\nimport { ERC20 } from '@/partners';\nimport {\n  calcSchedulingTotalCost,\n  canBeConvertedToWei,\n  EAC_SCHEDULING_CONFIG,\n  estimateBountyForGasPrice\n} from '../ScheduleHelpers';\n\nexport default {\n  name: 'ScheduleView',\n  components: {\n    'back-button': BackButton,\n    'currency-picker': CurrencyPicker,\n    'standard-input': StandardInput,\n    'standard-dropdown': StandardDropdown,\n    'datetime-picker': Datetime,\n    blockie: Blockie\n  },\n  props: {\n    tokensWithBalance: {\n      type: Array,\n      default: function() {\n        return [];\n      }\n    }\n  },\n  data() {\n    return {\n      eac: null,\n      advancedExpand: false,\n      advancedTimeBounty: false,\n      hexAddress: '',\n      address: '',\n      isValidAddress: false,\n      amount: '0',\n      gasLimit: EAC_SCHEDULING_CONFIG.FUTURE_GAS_LIMIT,\n      futureGasLimit: EAC_SCHEDULING_CONFIG.FUTURE_GAS_LIMIT,\n      minGasLimit: 0,\n      futureGasPrice: '1',\n      minGasPrice: 0.1,\n      data: '',\n      datetime: '',\n      currentBlockNumber: '',\n      selectedBlockNumber: '',\n      timeBountyPresets: EAC_SCHEDULING_CONFIG.TIME_BOUNTY_DEFAULTS,\n      timeBounty: EAC_SCHEDULING_CONFIG.TIME_BOUNTY_DEFAULTS[0],\n      windowSize: 10,\n      supportedModes: EAC_SCHEDULING_CONFIG.SUPPORTED_MODES,\n      selectedMode: EAC_SCHEDULING_CONFIG.SUPPORTED_MODES[0],\n      deposit:\n        EAC_SCHEDULING_CONFIG.TIME_BOUNTY_DEFAULTS[0] *\n        EAC_SCHEDULING_CONFIG.BOUNTY_TO_DEPOSIT_MULTIPLIER,\n      ethPrice: new BigNumber(0),\n      selectedTimeZone: moment.tz.guess(),\n      selectedCurrency: '',\n      showTokenTransferNotification: true,\n      amountInputOptions() {\n        return {\n          title: 'Amount',\n          value: this.amount,\n          type: 'number'\n        };\n      },\n      customTimeBountyInputOptions() {\n        return {\n          title: 'Time Bounty',\n          placeHolder: 'ETH',\n          value: this.timeBounty,\n          type: 'number'\n        };\n      },\n      bountyUsdDisplayOptions() {\n        return {\n          value: this.timeBountyUsd,\n          inputDisabled: true\n        };\n      },\n      blockNumberInputOptions() {\n        return {\n          title: 'Block Number',\n          value: this.selectedBlockNumber,\n          placeHolder: `Current block number: ${this.currentBlockNumber}`,\n          type: 'number'\n        };\n      },\n      dataInputOptions() {\n        return {\n          title: 'Add Data',\n          placeHolder: 'Add Data (e.g. 0x7834f874g298hf298h234f)',\n          value: this.data\n        };\n      },\n      gasLimitInputOptions() {\n        return {\n          title: 'Gas Limit',\n          value: this.gasLimit,\n          type: 'number'\n        };\n      },\n      futureGasPriceInputOptions() {\n        return {\n          title: 'Future Gas Price (gwei)',\n          value: this.futureGasPrice,\n          type: 'number'\n        };\n      },\n      futureGasLimitInputOptions() {\n        return {\n          title: 'Future Gas Limit',\n          value: this.futureGasLimit,\n          type: 'number'\n        };\n      },\n      requireDepositInputOptions() {\n        return {\n          title: 'Require a deposit',\n          value: this.deposit,\n          placeHolder: 'ETH',\n          type: 'number'\n        };\n      },\n      executionWindowInputOptions() {\n        return {\n          title: 'Execution Window',\n          value: this.windowSize,\n          placeHolder: this.selectedMode.unit,\n          type: 'number'\n        };\n      }\n    };\n  },\n  computed: {\n    ...mapState([\n      'web3',\n      'network',\n      'gasPrice',\n      'notifications',\n      'account',\n      'online'\n    ]),\n    isTokenTransfer() {\n      return this.selectedCurrency.symbol !== this.network.type.name;\n    },\n    timeBountyUsd() {\n      const formatter = new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: 'USD',\n        minimumFractionDigits: 2\n      });\n\n      return formatter.format(\n        this.ethPrice.times(new BigNumber(this.timeBounty))\n      );\n    },\n    estimatedMaximumExecutionGasPrice() {\n      if (\n        !this.isValidFutureGasPrice ||\n        !this.isValidFutureGasLimit ||\n        !this.isValidTimeBounty\n      )\n        return 0;\n\n      const estimated = Util.estimateMaximumExecutionGasPrice(\n        new BigNumber(unit.toWei(this.timeBounty, 'ether')),\n        new BigNumber(unit.toWei(this.futureGasPrice, 'gwei')),\n        new BigNumber(this.futureGasLimit)\n      );\n\n      return Math.round(unit.fromWei(estimated.toString(), 'gwei'));\n    },\n    now() {\n      return moment();\n    },\n    minBounty() {\n      if (!this.isValidFutureGasPrice) return 0;\n      const wei = unit.toWei(this.futureGasPrice, 'gwei');\n      return unit.fromWei(wei, 'ether');\n    },\n    timezoneOptions() {\n      return moment.tz.names();\n    },\n    schedulingCost() {\n      if (\n        !this.isValidFutureGasPrice ||\n        !this.isValidGasLimit ||\n        !this.isValidFutureGasLimit ||\n        !this.isValidTimeBounty\n      ) {\n        // Make the scheduling cost ridiculously big to throw an error\n        return new BigNumber(1e32 * 1e18);\n      }\n\n      return calcSchedulingTotalCost({\n        gasPrice: new BigNumber(unit.toWei(this.gasPrice.toString(), 'gwei')),\n        gasLimit: new BigNumber(this.gasLimit),\n        futureGasLimit: new BigNumber(this.futureGasLimit),\n        futureGasPrice: new BigNumber(\n          unit.toWei(this.futureGasPrice.toString(), 'gwei')\n        ),\n        timeBounty: new BigNumber(\n          unit.toWei(this.timeBounty.toString(), 'ether')\n        )\n      });\n    },\n    maxEthToSend() {\n      const accountBalance = new BigNumber(this.account.balance);\n      const sendableEth = accountBalance.minus(this.schedulingCost);\n      return sendableEth.gt(0) ? sendableEth : new BigNumber(0);\n    },\n    validInputs() {\n      return (\n        this.hasEnoughEthToSchedule &&\n        this.isValidAmount &&\n        this.isValidAddress &&\n        this.isValidExecutionWindow &&\n        this.isValidFutureGasPrice &&\n        this.isValidFutureGasLimit &&\n        this.isValidGasLimit &&\n        this.isValidTimeBounty &&\n        this.isValidWindowStart &&\n        this.isValidData\n      );\n    },\n    isValidAmount() {\n      if (!canBeConvertedToWei(this.web3, this.amount.toString())) return false;\n\n      const enteredAmount = new BigNumber(\n        this.isTokenTransfer\n          ? this.amount\n          : unit.toWei(this.amount.toString(), 'ether')\n      );\n      const max = new BigNumber(\n        this.isTokenTransfer\n          ? this.selectedCurrency.balance\n          : this.maxEthToSend.toString()\n      );\n\n      return enteredAmount.lte(max);\n    },\n    isValidDateTime() {\n      return (\n        moment(this.datetime) >\n        moment().add(this.supportedModes[0].executionWindow.min, 'minutes')\n      );\n    },\n    isValidBlockNumber() {\n      const { selectedBlockNumber, supportedModes, currentBlockNumber } = this;\n      return (\n        parseInt(selectedBlockNumber) >\n        currentBlockNumber + supportedModes[1].executionWindow.min\n      );\n    },\n    isValidWindowStart() {\n      const {\n        selectedMode,\n        supportedModes,\n        isValidBlockNumber,\n        isValidDateTime\n      } = this;\n      return selectedMode === supportedModes[0]\n        ? isValidDateTime\n        : isValidBlockNumber;\n    },\n    isValidTimeBounty() {\n      const convertibleToWei = canBeConvertedToWei(this.web3, this.timeBounty);\n      const invalidFutureGasPrice = canBeConvertedToWei(\n        this.web3,\n        this.futureGasPrice,\n        'gwei'\n      );\n      if (!invalidFutureGasPrice || !convertibleToWei) return false;\n\n      const higherThanGasPrice = new BigNumber(\n        unit.toWei(this.timeBounty, 'ether')\n      ).gte(unit.toWei(this.futureGasPrice, 'gwei'));\n      return higherThanGasPrice;\n    },\n    isValidExecutionWindow() {\n      return this.windowSize >= this.selectedMode.executionWindow.min;\n    },\n    isValidFutureGasPrice() {\n      const isHigherThanMin =\n        parseFloat(this.futureGasPrice) >= this.minGasPrice;\n      const convertibleToWei = canBeConvertedToWei(\n        this.web3,\n        this.futureGasPrice,\n        'gwei'\n      );\n      return isHigherThanMin && convertibleToWei;\n    },\n    isValidGasLimit() {\n      return new BigNumber(this.gasLimit).gte(this.minGasLimit);\n    },\n    isValidFutureGasLimit() {\n      return new BigNumber(this.futureGasLimit).gte(this.minGasLimit);\n    },\n    isValidDeposit() {\n      return canBeConvertedToWei(this.web3, this.deposit);\n    },\n    isValidData() {\n      return this.web3.utils.isHexStrict(this.data) || this.data === '';\n    },\n    hasEnoughEthToSchedule() {\n      const accountBalance = new BigNumber(this.account.balance);\n      return accountBalance.gt(this.schedulingCost);\n    }\n  },\n  watch: {\n    selectedMode() {\n      this.windowSize = this.selectedMode.executionWindow.default;\n    },\n    async notifications() {\n      const notifications = this.notifications[this.account.address];\n      const latestNotification = notifications[0];\n\n      if (latestNotification.hash) {\n        if (latestNotification.status === 'pending') {\n          const transaction = await this.web3.eth.getTransaction(\n            latestNotification.hash\n          );\n\n          try {\n            if (transaction === null) {\n              Toast.responseHandler(\n                new Error('Non-existing transaction detected'),\n                Toast.ERROR\n              );\n              return;\n            }\n\n            const isTokenTransfer = transaction.input.includes(\n              EAC_SCHEDULING_CONFIG.TOKEN_TRANSFER_METHOD_ID\n            );\n            this.$router.push({\n              name: 'Scheduled success',\n              params: {\n                txHash: latestNotification.hash,\n                isTokenTransfer,\n                selectedCurrency: isTokenTransfer\n                  ? this.selectedCurrency\n                  : null,\n                toAddress: transaction.to,\n                amount: this.amount\n              }\n            });\n          } catch (e) {\n            Toast.responseHandler(e, Toast.ERROR);\n          }\n        }\n      }\n    },\n    async selectedCurrency() {\n      this.futureGasLimit = await this.estimateGas();\n      this.gasLimit = this.isTokenTransfer\n        ? EAC_SCHEDULING_CONFIG.TOKEN_SCHEDULING_GAS_LIMIT\n        : EAC_SCHEDULING_CONFIG.FUTURE_GAS_LIMIT;\n    },\n    async hexAddress() {\n      this.futureGasLimit = await this.estimateGas();\n    }\n  },\n  beforeMount() {\n    this.selectedCurrency = {\n      name: this.network.type.name_long,\n      symbol: this.network.type.name\n    };\n\n    this.web3.eth\n      .getBlockNumber()\n      .then(res => {\n        this.currentBlockNumber = res;\n        this.selectedBlockNumber = res + 100;\n      })\n      .catch(err => {\n        Toast.responseHandler(err, Toast.ERROR);\n      });\n\n    this.datetime = moment()\n      .add(1, 'days')\n      .toISOString();\n    this.futureGasPrice = (this.gasPrice >= this.minGasPrice\n      ? this.gasPrice\n      : this.minGasPrice\n    ).toString();\n\n    this.timeBountyPresets = [\n      estimateBountyForGasPrice(this.futureGasPrice * 5, this.futureGasLimit),\n      estimateBountyForGasPrice(this.futureGasPrice * 8, this.futureGasLimit),\n      estimateBountyForGasPrice(this.futureGasPrice * 13, this.futureGasLimit)\n    ];\n\n    this.timeBounty = this.timeBountyPresets[0];\n    this.deposit = this.timeBountyPresets[0] * 2;\n  },\n  mounted: async function() {\n    if (this.online) {\n      this.eac = new EAC(this.web3);\n\n      const url = 'https://cryptorates.mewapi.io/convert/ETH';\n      const fetchValues = await fetch(url);\n      const values = await fetchValues.json();\n\n      if (!values['USDT']) {\n        Toast.responseHandler(\n          new Error(\n            'USDT conversion no longer available. Please provide an alternative USD conversion method'\n          ),\n          Toast.ERROR\n        );\n        return;\n      }\n      this.ethPrice = new BigNumber(values['USDT']);\n    }\n  },\n  methods: {\n    async estimateGas() {\n      const coinbase = await this.web3.eth.getCoinbase();\n\n      if (this.isValidAmount && this.isValidAddress) {\n        const tokenTransferData = await this.getTokenTransferData();\n        const inputData = this.data === '' ? '0x00' : this.data;\n\n        const tokenSchedulingTransaction = {\n          from: coinbase,\n          value: this.isTokenTransfer\n            ? 0\n            : unit.toWei(this.amount.toString(), 'ether'),\n          to: this.isTokenTransfer\n            ? this.selectedCurrency.address\n            : this.hexAddress,\n          data: this.isTokenTransfer ? tokenTransferData : inputData\n        };\n\n        let estimatedGasLimit;\n        try {\n          estimatedGasLimit = await this.web3.eth.estimateGas(\n            tokenSchedulingTransaction\n          );\n        } catch (e) {\n          Toast.responseHandler(e, Toast.ERROR);\n          return EAC_SCHEDULING_CONFIG.FUTURE_GAS_LIMIT.toString();\n        }\n\n        const totalEstimatedGasLimit = new BigNumber(estimatedGasLimit).plus(\n          EAC_SCHEDULING_CONFIG.TOKEN_TRANSFER_ADDITIONAL_GAS\n        );\n        return totalEstimatedGasLimit.toString();\n      }\n\n      return EAC_SCHEDULING_CONFIG.FUTURE_GAS_LIMIT.toString();\n    },\n    async getTokenTransferData() {\n      if (this.isTokenTransfer && this.isValidAmount && this.isValidAddress) {\n        const tokenContract = await new this.web3.eth.Contract(\n          ERC20,\n          this.selectedCurrency.address\n        );\n\n        const coinbase = await this.web3.eth.getCoinbase();\n        const tokenAmount = new BigNumber(\n          this.amount * Math.pow(10, this.selectedCurrency.decimals)\n        );\n\n        return tokenContract.methods\n          .transferFrom(coinbase, this.hexAddress, tokenAmount.toString())\n          .encodeABI();\n      }\n\n      return '0x00';\n    },\n    async scheduleTx() {\n      const {\n        amount,\n        hexAddress,\n        futureGasPrice,\n        futureGasLimit,\n        gasLimit,\n        selectedBlockNumber,\n        deposit,\n        windowSize,\n        timeBounty,\n        selectedMode,\n        datetime,\n        isTokenTransfer,\n        selectedCurrency\n      } = this;\n\n      let { data } = this;\n\n      if (data === '') {\n        data = '0x00';\n      }\n\n      const timestampScheduling =\n        selectedMode === EAC_SCHEDULING_CONFIG.SUPPORTED_MODES[0];\n\n      const timestamp = moment(datetime).unix();\n\n      const ethToWeiBN = value => {\n        value = value === '' ? 0 : value;\n        return new BigNumber(unit.toWei(value.toString(), 'ether'));\n      };\n\n      const schedulingOptions = {\n        toAddress: isTokenTransfer ? selectedCurrency.address : hexAddress,\n        windowStart: new BigNumber(\n          timestampScheduling ? timestamp : selectedBlockNumber\n        ),\n        timestampScheduling,\n        callGas: new BigNumber(futureGasLimit),\n        callData: isTokenTransfer ? await this.getTokenTransferData() : data,\n        callValue: isTokenTransfer ? new BigNumber(0) : ethToWeiBN(amount),\n        windowSize: new BigNumber(\n          timestampScheduling ? windowSize * 60 : windowSize\n        ),\n        bounty: ethToWeiBN(timeBounty),\n        requiredDeposit: ethToWeiBN(deposit),\n        gasPrice: new BigNumber(unit.toWei(futureGasPrice.toString(), 'gwei')),\n        fee: new BigNumber(0),\n        scheduleGas: new BigNumber(gasLimit)\n      };\n\n      const endowment = await this.eac.computeEndowment(schedulingOptions);\n\n      try {\n        await this.eac.validateScheduleOptions(schedulingOptions, endowment);\n      } catch (e) {\n        Toast.responseHandler(e, Toast.ERROR);\n        return;\n      }\n\n      this.eac.schedule(schedulingOptions);\n    },\n    copyToClipboard(ref) {\n      this.$refs[ref].select();\n      document.execCommand('copy');\n    }\n  }\n};\n",{"version":3,"sources":["ScheduleView.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4SA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ScheduleView.vue","sourceRoot":"src/dapps/ScheduleTransaction/containers","sourcesContent":["<template>\n  <div class=\"schedule-view-container\">\n    <h3 class=\"page-title\">Schedule a transaction</h3>\n\n    <div class=\"schedule-view-content\">\n      <div class=\"schedule-view-form-container\">\n        <b-container>\n          <b-row>\n            <b-col cols=\"12\" md=\"4\">\n              <div class=\"scheduling-currency-picker\">\n                <div class=\"input-title\">{{ $t('interface.sendTxType') }}</div>\n                <currency-picker\n                  :currency=\"tokensWithBalance\"\n                  :page=\"'sendEgasAmountthAndTokens'\"\n                  :token=\"true\"\n                  @selectedCurrency=\"selectedCurrency = $event\"\n                />\n              </div>\n            </b-col>\n            <b-col cols=\"12\" md=\"8\">\n              <standard-input\n                :options=\"amountInputOptions()\"\n                @changedValue=\"amount = $event\"\n              />\n              <div v-show=\"!isValidAmount\" class=\"text-danger\">\n                Amount higher than balance\n              </div>\n              <div v-show=\"!hasEnoughEthToSchedule\" class=\"text-danger\">\n                Not enough ETH on account to schedule\n              </div>\n            </b-col>\n          </b-row>\n\n          <div class=\"to-address\">\n            <div class=\"title input-title\">\n              <h4>\n                To Address\n                <blockie\n                  v-show=\"isValidAddress\"\n                  :address=\"hexAddress\"\n                  :size=\"8\"\n                  :scale=\"16\"\n                  width=\"32px\"\n                  height=\"32px\"\n                  class=\"blockie-image\"\n                />\n              </h4>\n\n              <p\n                class=\"copy-button prevent-user-select\"\n                @click=\"copyToClipboard('address')\"\n              >\n                {{ $t('common.copy') }}\n              </p>\n            </div>\n            <div class=\"the-form address-block\">\n              <input\n                v-ens-resolver=\"'address'\"\n                ref=\"address\"\n                v-model=\"address\"\n                type=\"text\"\n                name=\"name\"\n                autocomplete=\"off\"\n              />\n              <i\n                :class=\"[\n                  isValidAddress && hexAddress.length !== 0 ? '' : 'not-good',\n                  'fa fa-check-circle good-button'\n                ]\"\n                aria-hidden=\"true\"\n              />\n            </div>\n          </div>\n\n          <hr />\n\n          <div v-show=\"selectedMode === supportedModes[1]\">\n            <standard-input\n              :options=\"blockNumberInputOptions()\"\n              @changedValue=\"selectedBlockNumber = $event\"\n            />\n            <div v-show=\"!isValidBlockNumber\" class=\"text-danger\">\n              Should be at least\n              {{ supportedModes[1].executionWindow.min }} blocks in the future\n            </div>\n          </div>\n\n          <b-row v-show=\"selectedMode === supportedModes[0]\">\n            <b-col cols=\"12\" md=\"6\">\n              <div class=\"datetime-picker-container\">\n                <div class=\"input-title\">Date & Time</div>\n                <datetime-picker\n                  v-model=\"datetime\"\n                  :min-datetime=\"now.toISOString()\"\n                  :value-zone=\"selectedTimeZone\"\n                  :zone=\"selectedTimeZone\"\n                  class=\"theme-mew\"\n                  type=\"datetime\"\n                />\n                <div v-show=\"!isValidDateTime\" class=\"text-danger\">\n                  Make sure that the time is at least\n                  {{ supportedModes[0].executionWindow.min }} minutes in the\n                  future\n                </div>\n              </div>\n            </b-col>\n\n            <b-col cols=\"12\" md=\"6\">\n              <div class=\"timezone-selector\">\n                <div class=\"input-title\">Timezone</div>\n                <standard-dropdown\n                  :options=\"timezoneOptions\"\n                  :placeholder=\"selectedTimeZone\"\n                  @selection=\"selectedTimeZone = $event\"\n                />\n              </div>\n            </b-col>\n          </b-row>\n\n          <hr />\n\n          <b-row>\n            <b-col cols=\"12\" sm=\"6\" md=\"6\">\n              <div v-show=\"!advancedExpand\" class=\"time-bounty-selector\">\n                <div\n                  v-b-tooltip.hover\n                  title=\"The amount of ETH you wish to offer to TimeNodes in exchange for execution. The higher the Time Bounty, the likelier your transaction will get executed.\"\n                  class=\"input-title\"\n                >\n                  Time Bounty\n                </div>\n                <b-button-group>\n                  <b-button\n                    v-for=\"(bounty, index) in timeBountyPresets\"\n                    :key=\"index\"\n                    :class=\"['btn-group', bounty === timeBounty && 'selected']\"\n                    @click=\"timeBounty = bounty\"\n                  >\n                    {{ bounty }}\n                  </b-button>\n                </b-button-group>\n                <div class=\"timebounty-gasprice-coverage\">\n                  Covers up to\n                  <span>{{ estimatedMaximumExecutionGasPrice }}</span> gwei gas\n                  price on future execution\n                </div>\n              </div>\n\n              <div v-show=\"advancedExpand\">\n                <standard-input\n                  :options=\"customTimeBountyInputOptions()\"\n                  @changedValue=\"timeBounty = $event\"\n                />\n                <div v-show=\"!isValidTimeBounty\" class=\"text-danger\">\n                  Please set a bounty of {{ minBounty }} or higher\n                </div>\n              </div>\n            </b-col>\n\n            <b-col cols=\"12\" sm=\"6\" md=\"3\">\n              <standard-input\n                :options=\"bountyUsdDisplayOptions()\"\n                class=\"bounty-usd-display\"\n              />\n            </b-col>\n\n            <b-col cols=\"12\" sm=\"12\" md=\"3\" class=\"toggle-button-col\">\n              <hr class=\"d-block d-md-none\" />\n              <div class=\"toggle-button-container float-md-right\">\n                <h4>Advanced</h4>\n                <div class=\"toggle-button\">\n                  <!-- Rounded switch -->\n                  <div class=\"sliding-switch-white\">\n                    <label class=\"switch\">\n                      <input\n                        type=\"checkbox\"\n                        @click=\"advancedExpand = !advancedExpand\"\n                      />\n                      <span class=\"slider round\" />\n                    </label>\n                  </div>\n                </div>\n              </div>\n            </b-col>\n          </b-row>\n\n          <div v-show=\"advancedExpand\">\n            <b-row>\n              <b-col cols=\"12\" md=\"6\">\n                <div class=\"mode-container\">\n                  <div class=\"input-title\">Scheduling mode</div>\n                  <b-button-group>\n                    <b-button\n                      v-for=\"(mode, index) in supportedModes\"\n                      :key=\"index\"\n                      :class=\"['mode-btn', mode === selectedMode && 'selected']\"\n                      @click=\"selectedMode = mode\"\n                    >\n                      {{ mode.name }}\n                    </b-button>\n                  </b-button-group>\n                </div>\n              </b-col>\n\n              <b-col cols=\"12\" md=\"6\">\n                <standard-input\n                  :options=\"executionWindowInputOptions()\"\n                  @changedValue=\"windowSize = $event\"\n                />\n                <div v-show=\"!isValidExecutionWindow\" class=\"text-danger\">\n                  Please set an execution window of\n                  {{ selectedMode.executionWindow.min }} or higher\n                </div>\n              </b-col>\n            </b-row>\n\n            <standard-input\n              :options=\"requireDepositInputOptions()\"\n              @changedValue=\"deposit = $event\"\n            />\n            <div v-show=\"!isValidDeposit\" class=\"text-danger\">\n              Invalid deposit number\n            </div>\n\n            <b-row>\n              <b-col cols=\"12\" md=\"4\">\n                <standard-input\n                  :options=\"futureGasPriceInputOptions()\"\n                  @changedValue=\"futureGasPrice = $event\"\n                />\n                <div v-show=\"!isValidFutureGasPrice\" class=\"text-danger\">\n                  Please set a gas price of {{ minGasPrice }} or higher\n                </div>\n              </b-col>\n              <b-col cols=\"12\" md=\"4\">\n                <standard-input\n                  :options=\"gasLimitInputOptions()\"\n                  @changedValue=\"gasLimit = $event\"\n                />\n                <div v-show=\"!isValidGasLimit\" class=\"text-danger\">\n                  Please set a gas limit of 0 or higher\n                </div>\n              </b-col>\n              <b-col cols=\"12\" md=\"4\">\n                <standard-input\n                  :options=\"futureGasLimitInputOptions()\"\n                  @changedValue=\"futureGasLimit = $event\"\n                />\n                <div v-show=\"!isValidFutureGasLimit\" class=\"text-danger\">\n                  Please set a future gas limit of 0 or higher\n                </div>\n              </b-col>\n            </b-row>\n\n            <standard-input\n              v-if=\"!isTokenTransfer\"\n              :options=\"dataInputOptions()\"\n              @changedValue=\"data = $event\"\n            />\n            <div v-show=\"!isValidData\" class=\"text-danger\">\n              Please provide the data in a hexadecimal format.\n            </div>\n          </div>\n        </b-container>\n      </div>\n\n      <div class=\"submit-button-container\">\n        <b-alert\n          :show=\"isTokenTransfer && showTokenTransferNotification\"\n          variant=\"info\"\n          dismissible\n          class=\"mx-5\"\n          @dismissed=\"showTokenTransferNotification = false\"\n        >\n          <strong>Note:</strong> You are scheduling a token transfer. Token\n          transfers require 2 separate transactions. One for token scheduling\n          and another one for token transfer approval.\n        </b-alert>\n\n        <div\n          :class=\"[\n            validInputs ? '' : 'disabled',\n            'submit-button large-round-button-green-filled'\n          ]\"\n          @click=\"scheduleTx\"\n        >\n          Schedule Transaction\n        </div>\n      </div>\n    </div>\n    <a\n      href=\"https://blog.chronologic.network/announcing-the-ethereum-alarm-clock-chronologic-partnership-b3d7545bea3b\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n      class=\"eac-logo\"\n    />\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport { EAC, Util } from '@ethereum-alarm-clock/lib';\nimport BigNumber from 'bignumber.js';\nimport { Datetime } from 'vue-datetime';\nimport 'vue-datetime/dist/vue-datetime.css';\nimport moment from 'moment';\nimport 'moment-timezone';\nimport * as unit from 'ethjs-unit';\nimport { Toast } from '@/helpers';\n\nimport BackButton from '@/layouts/InterfaceLayout/components/BackButton';\nimport CurrencyPicker from '../../../layouts/InterfaceLayout/components/CurrencyPicker';\nimport StandardInput from '@/components/StandardInput';\nimport StandardDropdown from '@/components/StandardDropdown';\nimport Blockie from '@/components/Blockie';\nimport { ERC20 } from '@/partners';\nimport {\n  calcSchedulingTotalCost,\n  canBeConvertedToWei,\n  EAC_SCHEDULING_CONFIG,\n  estimateBountyForGasPrice\n} from '../ScheduleHelpers';\n\nexport default {\n  name: 'ScheduleView',\n  components: {\n    'back-button': BackButton,\n    'currency-picker': CurrencyPicker,\n    'standard-input': StandardInput,\n    'standard-dropdown': StandardDropdown,\n    'datetime-picker': Datetime,\n    blockie: Blockie\n  },\n  props: {\n    tokensWithBalance: {\n      type: Array,\n      default: function() {\n        return [];\n      }\n    }\n  },\n  data() {\n    return {\n      eac: null,\n      advancedExpand: false,\n      advancedTimeBounty: false,\n      hexAddress: '',\n      address: '',\n      isValidAddress: false,\n      amount: '0',\n      gasLimit: EAC_SCHEDULING_CONFIG.FUTURE_GAS_LIMIT,\n      futureGasLimit: EAC_SCHEDULING_CONFIG.FUTURE_GAS_LIMIT,\n      minGasLimit: 0,\n      futureGasPrice: '1',\n      minGasPrice: 0.1,\n      data: '',\n      datetime: '',\n      currentBlockNumber: '',\n      selectedBlockNumber: '',\n      timeBountyPresets: EAC_SCHEDULING_CONFIG.TIME_BOUNTY_DEFAULTS,\n      timeBounty: EAC_SCHEDULING_CONFIG.TIME_BOUNTY_DEFAULTS[0],\n      windowSize: 10,\n      supportedModes: EAC_SCHEDULING_CONFIG.SUPPORTED_MODES,\n      selectedMode: EAC_SCHEDULING_CONFIG.SUPPORTED_MODES[0],\n      deposit:\n        EAC_SCHEDULING_CONFIG.TIME_BOUNTY_DEFAULTS[0] *\n        EAC_SCHEDULING_CONFIG.BOUNTY_TO_DEPOSIT_MULTIPLIER,\n      ethPrice: new BigNumber(0),\n      selectedTimeZone: moment.tz.guess(),\n      selectedCurrency: '',\n      showTokenTransferNotification: true,\n      amountInputOptions() {\n        return {\n          title: 'Amount',\n          value: this.amount,\n          type: 'number'\n        };\n      },\n      customTimeBountyInputOptions() {\n        return {\n          title: 'Time Bounty',\n          placeHolder: 'ETH',\n          value: this.timeBounty,\n          type: 'number'\n        };\n      },\n      bountyUsdDisplayOptions() {\n        return {\n          value: this.timeBountyUsd,\n          inputDisabled: true\n        };\n      },\n      blockNumberInputOptions() {\n        return {\n          title: 'Block Number',\n          value: this.selectedBlockNumber,\n          placeHolder: `Current block number: ${this.currentBlockNumber}`,\n          type: 'number'\n        };\n      },\n      dataInputOptions() {\n        return {\n          title: 'Add Data',\n          placeHolder: 'Add Data (e.g. 0x7834f874g298hf298h234f)',\n          value: this.data\n        };\n      },\n      gasLimitInputOptions() {\n        return {\n          title: 'Gas Limit',\n          value: this.gasLimit,\n          type: 'number'\n        };\n      },\n      futureGasPriceInputOptions() {\n        return {\n          title: 'Future Gas Price (gwei)',\n          value: this.futureGasPrice,\n          type: 'number'\n        };\n      },\n      futureGasLimitInputOptions() {\n        return {\n          title: 'Future Gas Limit',\n          value: this.futureGasLimit,\n          type: 'number'\n        };\n      },\n      requireDepositInputOptions() {\n        return {\n          title: 'Require a deposit',\n          value: this.deposit,\n          placeHolder: 'ETH',\n          type: 'number'\n        };\n      },\n      executionWindowInputOptions() {\n        return {\n          title: 'Execution Window',\n          value: this.windowSize,\n          placeHolder: this.selectedMode.unit,\n          type: 'number'\n        };\n      }\n    };\n  },\n  computed: {\n    ...mapState([\n      'web3',\n      'network',\n      'gasPrice',\n      'notifications',\n      'account',\n      'online'\n    ]),\n    isTokenTransfer() {\n      return this.selectedCurrency.symbol !== this.network.type.name;\n    },\n    timeBountyUsd() {\n      const formatter = new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: 'USD',\n        minimumFractionDigits: 2\n      });\n\n      return formatter.format(\n        this.ethPrice.times(new BigNumber(this.timeBounty))\n      );\n    },\n    estimatedMaximumExecutionGasPrice() {\n      if (\n        !this.isValidFutureGasPrice ||\n        !this.isValidFutureGasLimit ||\n        !this.isValidTimeBounty\n      )\n        return 0;\n\n      const estimated = Util.estimateMaximumExecutionGasPrice(\n        new BigNumber(unit.toWei(this.timeBounty, 'ether')),\n        new BigNumber(unit.toWei(this.futureGasPrice, 'gwei')),\n        new BigNumber(this.futureGasLimit)\n      );\n\n      return Math.round(unit.fromWei(estimated.toString(), 'gwei'));\n    },\n    now() {\n      return moment();\n    },\n    minBounty() {\n      if (!this.isValidFutureGasPrice) return 0;\n      const wei = unit.toWei(this.futureGasPrice, 'gwei');\n      return unit.fromWei(wei, 'ether');\n    },\n    timezoneOptions() {\n      return moment.tz.names();\n    },\n    schedulingCost() {\n      if (\n        !this.isValidFutureGasPrice ||\n        !this.isValidGasLimit ||\n        !this.isValidFutureGasLimit ||\n        !this.isValidTimeBounty\n      ) {\n        // Make the scheduling cost ridiculously big to throw an error\n        return new BigNumber(1e32 * 1e18);\n      }\n\n      return calcSchedulingTotalCost({\n        gasPrice: new BigNumber(unit.toWei(this.gasPrice.toString(), 'gwei')),\n        gasLimit: new BigNumber(this.gasLimit),\n        futureGasLimit: new BigNumber(this.futureGasLimit),\n        futureGasPrice: new BigNumber(\n          unit.toWei(this.futureGasPrice.toString(), 'gwei')\n        ),\n        timeBounty: new BigNumber(\n          unit.toWei(this.timeBounty.toString(), 'ether')\n        )\n      });\n    },\n    maxEthToSend() {\n      const accountBalance = new BigNumber(this.account.balance);\n      const sendableEth = accountBalance.minus(this.schedulingCost);\n      return sendableEth.gt(0) ? sendableEth : new BigNumber(0);\n    },\n    validInputs() {\n      return (\n        this.hasEnoughEthToSchedule &&\n        this.isValidAmount &&\n        this.isValidAddress &&\n        this.isValidExecutionWindow &&\n        this.isValidFutureGasPrice &&\n        this.isValidFutureGasLimit &&\n        this.isValidGasLimit &&\n        this.isValidTimeBounty &&\n        this.isValidWindowStart &&\n        this.isValidData\n      );\n    },\n    isValidAmount() {\n      if (!canBeConvertedToWei(this.web3, this.amount.toString())) return false;\n\n      const enteredAmount = new BigNumber(\n        this.isTokenTransfer\n          ? this.amount\n          : unit.toWei(this.amount.toString(), 'ether')\n      );\n      const max = new BigNumber(\n        this.isTokenTransfer\n          ? this.selectedCurrency.balance\n          : this.maxEthToSend.toString()\n      );\n\n      return enteredAmount.lte(max);\n    },\n    isValidDateTime() {\n      return (\n        moment(this.datetime) >\n        moment().add(this.supportedModes[0].executionWindow.min, 'minutes')\n      );\n    },\n    isValidBlockNumber() {\n      const { selectedBlockNumber, supportedModes, currentBlockNumber } = this;\n      return (\n        parseInt(selectedBlockNumber) >\n        currentBlockNumber + supportedModes[1].executionWindow.min\n      );\n    },\n    isValidWindowStart() {\n      const {\n        selectedMode,\n        supportedModes,\n        isValidBlockNumber,\n        isValidDateTime\n      } = this;\n      return selectedMode === supportedModes[0]\n        ? isValidDateTime\n        : isValidBlockNumber;\n    },\n    isValidTimeBounty() {\n      const convertibleToWei = canBeConvertedToWei(this.web3, this.timeBounty);\n      const invalidFutureGasPrice = canBeConvertedToWei(\n        this.web3,\n        this.futureGasPrice,\n        'gwei'\n      );\n      if (!invalidFutureGasPrice || !convertibleToWei) return false;\n\n      const higherThanGasPrice = new BigNumber(\n        unit.toWei(this.timeBounty, 'ether')\n      ).gte(unit.toWei(this.futureGasPrice, 'gwei'));\n      return higherThanGasPrice;\n    },\n    isValidExecutionWindow() {\n      return this.windowSize >= this.selectedMode.executionWindow.min;\n    },\n    isValidFutureGasPrice() {\n      const isHigherThanMin =\n        parseFloat(this.futureGasPrice) >= this.minGasPrice;\n      const convertibleToWei = canBeConvertedToWei(\n        this.web3,\n        this.futureGasPrice,\n        'gwei'\n      );\n      return isHigherThanMin && convertibleToWei;\n    },\n    isValidGasLimit() {\n      return new BigNumber(this.gasLimit).gte(this.minGasLimit);\n    },\n    isValidFutureGasLimit() {\n      return new BigNumber(this.futureGasLimit).gte(this.minGasLimit);\n    },\n    isValidDeposit() {\n      return canBeConvertedToWei(this.web3, this.deposit);\n    },\n    isValidData() {\n      return this.web3.utils.isHexStrict(this.data) || this.data === '';\n    },\n    hasEnoughEthToSchedule() {\n      const accountBalance = new BigNumber(this.account.balance);\n      return accountBalance.gt(this.schedulingCost);\n    }\n  },\n  watch: {\n    selectedMode() {\n      this.windowSize = this.selectedMode.executionWindow.default;\n    },\n    async notifications() {\n      const notifications = this.notifications[this.account.address];\n      const latestNotification = notifications[0];\n\n      if (latestNotification.hash) {\n        if (latestNotification.status === 'pending') {\n          const transaction = await this.web3.eth.getTransaction(\n            latestNotification.hash\n          );\n\n          try {\n            if (transaction === null) {\n              Toast.responseHandler(\n                new Error('Non-existing transaction detected'),\n                Toast.ERROR\n              );\n              return;\n            }\n\n            const isTokenTransfer = transaction.input.includes(\n              EAC_SCHEDULING_CONFIG.TOKEN_TRANSFER_METHOD_ID\n            );\n            this.$router.push({\n              name: 'Scheduled success',\n              params: {\n                txHash: latestNotification.hash,\n                isTokenTransfer,\n                selectedCurrency: isTokenTransfer\n                  ? this.selectedCurrency\n                  : null,\n                toAddress: transaction.to,\n                amount: this.amount\n              }\n            });\n          } catch (e) {\n            Toast.responseHandler(e, Toast.ERROR);\n          }\n        }\n      }\n    },\n    async selectedCurrency() {\n      this.futureGasLimit = await this.estimateGas();\n      this.gasLimit = this.isTokenTransfer\n        ? EAC_SCHEDULING_CONFIG.TOKEN_SCHEDULING_GAS_LIMIT\n        : EAC_SCHEDULING_CONFIG.FUTURE_GAS_LIMIT;\n    },\n    async hexAddress() {\n      this.futureGasLimit = await this.estimateGas();\n    }\n  },\n  beforeMount() {\n    this.selectedCurrency = {\n      name: this.network.type.name_long,\n      symbol: this.network.type.name\n    };\n\n    this.web3.eth\n      .getBlockNumber()\n      .then(res => {\n        this.currentBlockNumber = res;\n        this.selectedBlockNumber = res + 100;\n      })\n      .catch(err => {\n        Toast.responseHandler(err, Toast.ERROR);\n      });\n\n    this.datetime = moment()\n      .add(1, 'days')\n      .toISOString();\n    this.futureGasPrice = (this.gasPrice >= this.minGasPrice\n      ? this.gasPrice\n      : this.minGasPrice\n    ).toString();\n\n    this.timeBountyPresets = [\n      estimateBountyForGasPrice(this.futureGasPrice * 5, this.futureGasLimit),\n      estimateBountyForGasPrice(this.futureGasPrice * 8, this.futureGasLimit),\n      estimateBountyForGasPrice(this.futureGasPrice * 13, this.futureGasLimit)\n    ];\n\n    this.timeBounty = this.timeBountyPresets[0];\n    this.deposit = this.timeBountyPresets[0] * 2;\n  },\n  mounted: async function() {\n    if (this.online) {\n      this.eac = new EAC(this.web3);\n\n      const url = 'https://cryptorates.mewapi.io/convert/ETH';\n      const fetchValues = await fetch(url);\n      const values = await fetchValues.json();\n\n      if (!values['USDT']) {\n        Toast.responseHandler(\n          new Error(\n            'USDT conversion no longer available. Please provide an alternative USD conversion method'\n          ),\n          Toast.ERROR\n        );\n        return;\n      }\n      this.ethPrice = new BigNumber(values['USDT']);\n    }\n  },\n  methods: {\n    async estimateGas() {\n      const coinbase = await this.web3.eth.getCoinbase();\n\n      if (this.isValidAmount && this.isValidAddress) {\n        const tokenTransferData = await this.getTokenTransferData();\n        const inputData = this.data === '' ? '0x00' : this.data;\n\n        const tokenSchedulingTransaction = {\n          from: coinbase,\n          value: this.isTokenTransfer\n            ? 0\n            : unit.toWei(this.amount.toString(), 'ether'),\n          to: this.isTokenTransfer\n            ? this.selectedCurrency.address\n            : this.hexAddress,\n          data: this.isTokenTransfer ? tokenTransferData : inputData\n        };\n\n        let estimatedGasLimit;\n        try {\n          estimatedGasLimit = await this.web3.eth.estimateGas(\n            tokenSchedulingTransaction\n          );\n        } catch (e) {\n          Toast.responseHandler(e, Toast.ERROR);\n          return EAC_SCHEDULING_CONFIG.FUTURE_GAS_LIMIT.toString();\n        }\n\n        const totalEstimatedGasLimit = new BigNumber(estimatedGasLimit).plus(\n          EAC_SCHEDULING_CONFIG.TOKEN_TRANSFER_ADDITIONAL_GAS\n        );\n        return totalEstimatedGasLimit.toString();\n      }\n\n      return EAC_SCHEDULING_CONFIG.FUTURE_GAS_LIMIT.toString();\n    },\n    async getTokenTransferData() {\n      if (this.isTokenTransfer && this.isValidAmount && this.isValidAddress) {\n        const tokenContract = await new this.web3.eth.Contract(\n          ERC20,\n          this.selectedCurrency.address\n        );\n\n        const coinbase = await this.web3.eth.getCoinbase();\n        const tokenAmount = new BigNumber(\n          this.amount * Math.pow(10, this.selectedCurrency.decimals)\n        );\n\n        return tokenContract.methods\n          .transferFrom(coinbase, this.hexAddress, tokenAmount.toString())\n          .encodeABI();\n      }\n\n      return '0x00';\n    },\n    async scheduleTx() {\n      const {\n        amount,\n        hexAddress,\n        futureGasPrice,\n        futureGasLimit,\n        gasLimit,\n        selectedBlockNumber,\n        deposit,\n        windowSize,\n        timeBounty,\n        selectedMode,\n        datetime,\n        isTokenTransfer,\n        selectedCurrency\n      } = this;\n\n      let { data } = this;\n\n      if (data === '') {\n        data = '0x00';\n      }\n\n      const timestampScheduling =\n        selectedMode === EAC_SCHEDULING_CONFIG.SUPPORTED_MODES[0];\n\n      const timestamp = moment(datetime).unix();\n\n      const ethToWeiBN = value => {\n        value = value === '' ? 0 : value;\n        return new BigNumber(unit.toWei(value.toString(), 'ether'));\n      };\n\n      const schedulingOptions = {\n        toAddress: isTokenTransfer ? selectedCurrency.address : hexAddress,\n        windowStart: new BigNumber(\n          timestampScheduling ? timestamp : selectedBlockNumber\n        ),\n        timestampScheduling,\n        callGas: new BigNumber(futureGasLimit),\n        callData: isTokenTransfer ? await this.getTokenTransferData() : data,\n        callValue: isTokenTransfer ? new BigNumber(0) : ethToWeiBN(amount),\n        windowSize: new BigNumber(\n          timestampScheduling ? windowSize * 60 : windowSize\n        ),\n        bounty: ethToWeiBN(timeBounty),\n        requiredDeposit: ethToWeiBN(deposit),\n        gasPrice: new BigNumber(unit.toWei(futureGasPrice.toString(), 'gwei')),\n        fee: new BigNumber(0),\n        scheduleGas: new BigNumber(gasLimit)\n      };\n\n      const endowment = await this.eac.computeEndowment(schedulingOptions);\n\n      try {\n        await this.eac.validateScheduleOptions(schedulingOptions, endowment);\n      } catch (e) {\n        Toast.responseHandler(e, Toast.ERROR);\n        return;\n      }\n\n      this.eac.schedule(schedulingOptions);\n    },\n    copyToClipboard(ref) {\n      this.$refs[ref].select();\n      document.execCommand('copy');\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'ScheduleView.scss';\n</style>\n\n<style lang=\"scss\">\n@import 'ScheduleViewUnscoped.scss';\n</style>\n"]}]}