{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/dapps/MakerDai/containers/CreateCDP/CreateCDP.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/dapps/MakerDai/containers/CreateCDP/CreateCDP.vue","mtime":1574664278278},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/thread-loader/dist/cjs.js","mtime":1574664277654},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js","mtime":1574664275010},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js","mtime":1574664277774}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapState } from 'vuex';\nimport ethUnit from 'ethjs-unit';\nimport InterfaceContainerTitle from '@/layouts/InterfaceLayout/components/InterfaceContainerTitle';\nimport InterfaceBottomText from '@/components/InterfaceBottomText';\nimport Blockie from '@/components/Blockie';\nimport DaiConfirmationModal from '../../components/DaiConfirmationModal';\nimport LoadingOverlay from '@/components/LoadingOverlay';\nimport {\n  displayFixedValue,\n  displayPercentValue,\n  displayFixedPercent\n} from '../../helpers';\n\nimport BigNumber from 'bignumber.js';\nimport Arrow from '@/assets/images/etc/single-arrow.svg';\n\nconst toBigNumber = num => {\n  return new BigNumber(num);\n};\n\nconst bnOver = (one, two, three) => {\n  return toBigNumber(one)\n    .times(toBigNumber(two))\n    .div(toBigNumber(three));\n};\n\nexport default {\n  components: {\n    'interface-container-title': InterfaceContainerTitle,\n    'interface-bottom-text': InterfaceBottomText,\n    blockie: Blockie,\n    'dai-confirmation-modal': DaiConfirmationModal,\n    'loading-overlay': LoadingOverlay\n  },\n  props: {\n    tokensWithBalance: {\n      type: Array,\n      default: function() {\n        return [];\n      }\n    },\n    getBalance: {\n      type: Function,\n      default: function() {}\n    },\n    highestGas: {\n      type: String,\n      default: '0'\n    },\n    ethPrice: {\n      type: BigNumber,\n      default: toBigNumber(0)\n    },\n    pethPrice: {\n      type: BigNumber,\n      default: toBigNumber(0)\n    },\n    liquidationPenalty: {\n      type: BigNumber,\n      default: toBigNumber(0)\n    },\n    stabilityFee: {\n      type: BigNumber,\n      default: toBigNumber(0)\n    },\n    liquidationRatio: {\n      type: BigNumber,\n      default: toBigNumber(0)\n    },\n    wethToPethRatio: {\n      type: BigNumber,\n      default: toBigNumber(0)\n    },\n    pethMin: {\n      type: BigNumber,\n      default: toBigNumber(0)\n    },\n    priceService: {\n      type: Object,\n      default: function() {\n        return {};\n      }\n    },\n    cdpService: {\n      type: Object,\n      default: function() {\n        return {};\n      }\n    },\n    proxyService: {\n      type: Object,\n      default: function() {\n        return {};\n      }\n    },\n    buildEmpty: {\n      type: Function,\n      default: function() {}\n    },\n    values: {\n      type: Object,\n      default: function() {\n        return {\n          maxPethDraw: '',\n          maxEthDraw: '',\n          maxUsdDraw: '',\n          ethCollateral: '',\n          pethCollateral: '',\n          usdCollateral: '',\n          debtValue: '',\n          maxDai: '',\n          collateralRatio: '',\n          cdpId: '',\n          stabilityFee: '',\n          minEth: '',\n          liquidationRatio: '',\n          wethToPethRatio: '',\n          liquidationPenalty: '',\n          targetPrice: '',\n          pethPrice: ''\n        };\n      }\n    }\n  },\n  data() {\n    return {\n      arrowImage: Arrow,\n      daiPrice: 0,\n      priceFloor: 0,\n      ethQty: 0,\n      daiQty: 0,\n      txInfo: {},\n      loading: false\n    };\n  },\n  computed: {\n    ...mapState(['account', 'gasPrice', 'web3', 'network', 'ens']),\n    validInputs() {\n      if (toBigNumber(this.ethQty).isNaN() || toBigNumber(this.daiQty).isNaN())\n        return false;\n      if (toBigNumber(this.ethQty).gt(0)) {\n        if (toBigNumber(this.ethQty).lte(this.values.minEth)) return false;\n        if (toBigNumber(this.maxDaiDraw).lte(toBigNumber(this.daiQty)))\n          return false;\n        if (toBigNumber(this.collatRatio).lte(1.501)) return false;\n        return toBigNumber(ethUnit.toWei(this.ethQty, 'ether').toString()).lte(\n          this.account.balance\n        );\n      }\n      return false;\n    },\n    hasEnoughEth() {\n      if (toBigNumber(this.ethQty).isNaN()) return false;\n      return toBigNumber(ethUnit.toWei(this.ethQty, 'ether').toString()).lte(\n        this.account.balance\n      );\n    },\n    atSetFloor() {\n      if (this.priceFloor <= 0) return 0;\n      return bnOver(this.ethPrice, this.liquidationRatio, this.priceFloor);\n    },\n    collatRatio() {\n      if (this.daiQty <= 0 || this.ethQty <= 0) return 0;\n      return this.calcCollatRatio(this.ethQty, this.daiQty);\n    },\n    liquidationPrice() {\n      if (this.daiQty <= 0 || this.ethQty <= 0) return 0;\n      return this.calcLiquidationPrice(this.ethQty, this.daiQty);\n    },\n    maxDaiDraw() {\n      if (this.ethQty <= 0) return 0;\n      const bufferVal = this.calcDaiDraw(this.ethQty).times(0.01);\n      return toBigNumber(this.calcDaiDraw(this.ethQty)).minus(bufferVal);\n    },\n    minEthDeposit() {\n      if (this.daiQty <= 0) return 0;\n      return this.calcMinEthDeposit(this.daiQty);\n    },\n    risky() {\n      const collRatio = this.collatRatio;\n      if (toBigNumber(collRatio).gt(0)) {\n        return toBigNumber(collRatio).lte(2);\n      }\n      return false;\n    },\n    veryRisky() {\n      const collRatio = this.collatRatio;\n      if (toBigNumber(collRatio).gt(0)) {\n        return toBigNumber(collRatio).lte(1.75);\n      }\n      return false;\n    },\n    depositInPeth() {\n      if (this.ethQty <= 0) return 0;\n      return this.toPeth(this.ethQty);\n    },\n    minEth() {\n      if (this.wethToPethRatio) {\n        return toBigNumber(this.pethMin).times(this.wethToPethRatio);\n      }\n      return '--';\n    }\n  },\n  async mounted() {\n    this.buildEmptyInstance();\n  },\n  methods: {\n    async buildEmptyInstance() {\n      this.makerCDP = await this.buildEmpty();\n      this.$forceUpdate();\n    },\n    displayPercentValue,\n    displayFixedValue,\n    displayFixedPercent,\n    async openCdp() {\n      this.loading = true;\n\n      if (this.ethQty <= 0) return 0;\n      setTimeout(() => {\n        this.loading = false;\n      }, 5000);\n\n      // [Note from David to Steve] This should be implemented on TX core.\n      // Close DAI confirmation modal\n      this.$eventHub.$on('showTxConfirmModal', () => {\n        this.$emit('cdpOpened');\n        if (this.loading) {\n          this.$refs.daiconfirmation.$refs.modal.hide();\n          this.loading = false;\n        }\n      });\n\n      await this.makerCDP.openCdp(this.ethQty, this.daiQty);\n    },\n    openDaiConfirmation() {\n      this.$refs.daiconfirmation.$refs.modal.show();\n    },\n    toUSD(eth) {\n      if (eth === undefined || eth === null) return toBigNumber(0);\n      const toUsd = this.ethPrice.times(toBigNumber(eth));\n      if (toUsd.lt(0)) {\n        return toBigNumber(0);\n      }\n      return toUsd;\n    },\n\n    toPeth(eth) {\n      if (!toBigNumber(eth).eq(0)) {\n        return toBigNumber(eth).div(this.wethToPethRatio);\n      }\n      return toBigNumber(0);\n    },\n    fromPeth(peth) {\n      if (!toBigNumber(peth).eq(0)) {\n        return toBigNumber(peth).times(this.wethToPethRatio);\n      }\n      return toBigNumber(0);\n    },\n    calcMinCollatRatio(priceFloor) {\n      return bnOver(this.ethPrice, this.liquidationRatio, priceFloor);\n    },\n    calcDaiDraw(\n      ethQty,\n      ethPrice = this.ethPrice,\n      liquidationRatio = this.liquidationRatio\n    ) {\n      if (ethQty <= 0) return 0;\n      return bnOver(ethPrice, toBigNumber(ethQty), liquidationRatio);\n    },\n\n    calcMinEthDeposit(\n      daiQty,\n      ethPrice = this.ethPrice,\n      liquidationRatio = this.liquidationRatio\n    ) {\n      if (daiQty <= 0) return 0;\n      return bnOver(liquidationRatio, daiQty, ethPrice);\n    },\n\n    calcCollatRatio(ethQty, daiQty) {\n      if (ethQty <= 0 || daiQty <= 0) return 0;\n      return bnOver(this.ethPrice, ethQty, daiQty);\n    },\n\n    calcLiquidationPrice(ethQty, daiQty) {\n      if (ethQty <= 0 || daiQty <= 0) return 0;\n      const getInt = parseInt(this.ethPrice);\n      for (let i = getInt; i > 0; i--) {\n        const atValue = bnOver(i, ethQty, daiQty).lte(this.liquidationRatio);\n        if (atValue) {\n          return i;\n        }\n      }\n      for (let i = 100; i > 0; i--) {\n        const atValue = bnOver(i / 100, ethQty, daiQty).lte(\n          this.liquidationRatio\n        );\n        if (atValue) {\n          return i / 100;\n        }\n      }\n      return 0;\n    }\n  }\n};\n",{"version":3,"sources":["CreateCDP.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"CreateCDP.vue","sourceRoot":"src/dapps/MakerDai/containers/CreateCDP","sourcesContent":["<template>\n  <div class=\"container-maker\">\n    <dai-confirmation-modal\n      ref=\"daiconfirmation\"\n      :opencdp=\"openCdp\"\n      :txinfo=\"txInfo\"\n      :liquidation-price=\"liquidationPrice\"\n      :collat-ratio=\"displayFixedPercent(collatRatio)\"\n      :liquidation-penalty=\"displayPercentValue(liquidationPenalty)\"\n      :min-ratio=\"displayPercentValue(liquidationRatio)\"\n      :current-price=\"displayFixedValue(ethPrice, 2)\"\n      :collateral=\"ethQty.toString()\"\n      :generate=\"daiQty.toString()\"\n    />\n    <loading-overlay\n      v-if=\"loading\"\n      :loadingmessage=\"$t('dappsMaker.creatingMessage')\"\n    />\n    <div class=\"manage-container\">\n      <p class=\"top-title\">\n        {{ $t('dappsMaker.maker_title') }}\n      </p>\n      <p class=\"top-title-sub\">\n        {{ $t('dappsMaker.createInstruct') }}\n      </p>\n\n      <div class=\"currency-ops-new\">\n        <div class=\"currency-picker-container\">\n          <div class=\"interface__block-title\">\n            {{ $t('dappsMaker.collateral') }}\n          </div>\n          <div class=\"dropdown-text-container dropdown-container\">\n            <p>\n              <span class=\"cc ETH cc-icon currency-symbol\" />\n              ETH\n              <span class=\"subname\">- Ethereum </span>\n            </p>\n          </div>\n          <input\n            v-model=\"ethQty\"\n            :class=\"[\n              !hasEnoughEth ? 'red-border' : '',\n              'currency-picker-container',\n              'dropdown-text-container',\n              'dropdown-container'\n            ]\"\n          />\n          <div class=\"input-block-message\">\n            <p v-if=\"!hasEnoughEth\" class=\"red-text\">Not enough ETH</p>\n            <p>\n              {{ $t('dappsMaker.minCollat') }}\n              <b>{{ displayFixedValue(minEth, 6) }}</b> ETH\n            </p>\n            <p>{{ displayFixedValue(depositInPeth, 6) }} PETH</p>\n          </div>\n        </div>\n        <div class=\"arrow\"><img :src=\"arrowImage\" alt /></div>\n        <div>\n          <div class=\"interface__block-title\">\n            {{ $t('dappsMaker.generate') }}\n          </div>\n          <div class=\"dropdown-text-container dropdown-container\">\n            <p>\n              <span class=\"cc DAI cc-icon cc-icon-dai currency-symbol\" />\n              DAI\n              <span class=\"subname\">- Maker DAI </span>\n            </p>\n          </div>\n          <input\n            v-model=\"daiQty\"\n            :class=\"[\n              veryRisky ? 'red-border' : '',\n              risky && !veryRisky ? 'orange-border' : '',\n              'currency-picker-container',\n              'dropdown-text-container',\n              'dropdown-container'\n            ]\"\n          />\n          <div class=\"input-block-message\">\n            <p>\n              {{ $t('dappsMaker.maxGenerate') }}\n              <b>{{ displayFixedValue(maxDaiDraw, 6) }}</b> DAI\n            </p>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"cdp-info-block cdp-info-entry\">\n        <ul>\n          <li>\n            <p>{{ $t('dappsMaker.minEthReq') }}</p>\n            <p>{{ displayFixedValue(minEth, 6) }} ETH</p>\n          </li>\n          <li>\n            <p>{{ $t('dappsMaker.liquidPrice') }}</p>\n            <p>\n              <b>{{ liquidationPrice }}</b> USD\n            </p>\n          </li>\n          <li>\n            <p>{{ $t('dappsMaker.currentPriceInfo') }}</p>\n            <p>{{ displayFixedValue(ethPrice, 2) }} USD</p>\n          </li>\n          <li>\n            <p>{{ $t('dappsMaker.liquidationPenalty') }}</p>\n            <p>{{ displayPercentValue(liquidationPenalty) }}%</p>\n          </li>\n          <li>\n            <p>{{ $t('dappsMaker.collateralRatio') }}</p>\n            <p\n              :class=\"[\n                veryRisky ? 'red-text' : '',\n                risky && !veryRisky ? 'orange-text' : ''\n              ]\"\n            >\n              <b>{{ displayFixedPercent(collatRatio) }}%</b>\n            </p>\n          </li>\n          <li>\n            <p>{{ $t('dappsMaker.minimumRatio') }}</p>\n            <p>{{ displayPercentValue(liquidationRatio) }}%</p>\n          </li>\n        </ul>\n      </div>\n      <div class=\"cdp-info-block cdp-info-entry\">\n        <ul>\n          <li>\n            <p>\n              {{\n                $t('dappsMaker.stabilityFeeInMkr', {\n                  value: displayFixedPercent(stabilityFee).toString()\n                })\n              }}\n            </p>\n          </li>\n        </ul>\n      </div>\n\n      <div class=\"buttons-container\">\n        <div\n          :class=\"[\n            validInputs ? '' : 'disabled',\n            'submit-button large-round-button-green-filled'\n          ]\"\n          @click=\"openDaiConfirmation\"\n        >\n          {{ $t('dappsMaker.collatAndGenerate') }}\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport ethUnit from 'ethjs-unit';\nimport InterfaceContainerTitle from '@/layouts/InterfaceLayout/components/InterfaceContainerTitle';\nimport InterfaceBottomText from '@/components/InterfaceBottomText';\nimport Blockie from '@/components/Blockie';\nimport DaiConfirmationModal from '../../components/DaiConfirmationModal';\nimport LoadingOverlay from '@/components/LoadingOverlay';\nimport {\n  displayFixedValue,\n  displayPercentValue,\n  displayFixedPercent\n} from '../../helpers';\n\nimport BigNumber from 'bignumber.js';\nimport Arrow from '@/assets/images/etc/single-arrow.svg';\n\nconst toBigNumber = num => {\n  return new BigNumber(num);\n};\n\nconst bnOver = (one, two, three) => {\n  return toBigNumber(one)\n    .times(toBigNumber(two))\n    .div(toBigNumber(three));\n};\n\nexport default {\n  components: {\n    'interface-container-title': InterfaceContainerTitle,\n    'interface-bottom-text': InterfaceBottomText,\n    blockie: Blockie,\n    'dai-confirmation-modal': DaiConfirmationModal,\n    'loading-overlay': LoadingOverlay\n  },\n  props: {\n    tokensWithBalance: {\n      type: Array,\n      default: function() {\n        return [];\n      }\n    },\n    getBalance: {\n      type: Function,\n      default: function() {}\n    },\n    highestGas: {\n      type: String,\n      default: '0'\n    },\n    ethPrice: {\n      type: BigNumber,\n      default: toBigNumber(0)\n    },\n    pethPrice: {\n      type: BigNumber,\n      default: toBigNumber(0)\n    },\n    liquidationPenalty: {\n      type: BigNumber,\n      default: toBigNumber(0)\n    },\n    stabilityFee: {\n      type: BigNumber,\n      default: toBigNumber(0)\n    },\n    liquidationRatio: {\n      type: BigNumber,\n      default: toBigNumber(0)\n    },\n    wethToPethRatio: {\n      type: BigNumber,\n      default: toBigNumber(0)\n    },\n    pethMin: {\n      type: BigNumber,\n      default: toBigNumber(0)\n    },\n    priceService: {\n      type: Object,\n      default: function() {\n        return {};\n      }\n    },\n    cdpService: {\n      type: Object,\n      default: function() {\n        return {};\n      }\n    },\n    proxyService: {\n      type: Object,\n      default: function() {\n        return {};\n      }\n    },\n    buildEmpty: {\n      type: Function,\n      default: function() {}\n    },\n    values: {\n      type: Object,\n      default: function() {\n        return {\n          maxPethDraw: '',\n          maxEthDraw: '',\n          maxUsdDraw: '',\n          ethCollateral: '',\n          pethCollateral: '',\n          usdCollateral: '',\n          debtValue: '',\n          maxDai: '',\n          collateralRatio: '',\n          cdpId: '',\n          stabilityFee: '',\n          minEth: '',\n          liquidationRatio: '',\n          wethToPethRatio: '',\n          liquidationPenalty: '',\n          targetPrice: '',\n          pethPrice: ''\n        };\n      }\n    }\n  },\n  data() {\n    return {\n      arrowImage: Arrow,\n      daiPrice: 0,\n      priceFloor: 0,\n      ethQty: 0,\n      daiQty: 0,\n      txInfo: {},\n      loading: false\n    };\n  },\n  computed: {\n    ...mapState(['account', 'gasPrice', 'web3', 'network', 'ens']),\n    validInputs() {\n      if (toBigNumber(this.ethQty).isNaN() || toBigNumber(this.daiQty).isNaN())\n        return false;\n      if (toBigNumber(this.ethQty).gt(0)) {\n        if (toBigNumber(this.ethQty).lte(this.values.minEth)) return false;\n        if (toBigNumber(this.maxDaiDraw).lte(toBigNumber(this.daiQty)))\n          return false;\n        if (toBigNumber(this.collatRatio).lte(1.501)) return false;\n        return toBigNumber(ethUnit.toWei(this.ethQty, 'ether').toString()).lte(\n          this.account.balance\n        );\n      }\n      return false;\n    },\n    hasEnoughEth() {\n      if (toBigNumber(this.ethQty).isNaN()) return false;\n      return toBigNumber(ethUnit.toWei(this.ethQty, 'ether').toString()).lte(\n        this.account.balance\n      );\n    },\n    atSetFloor() {\n      if (this.priceFloor <= 0) return 0;\n      return bnOver(this.ethPrice, this.liquidationRatio, this.priceFloor);\n    },\n    collatRatio() {\n      if (this.daiQty <= 0 || this.ethQty <= 0) return 0;\n      return this.calcCollatRatio(this.ethQty, this.daiQty);\n    },\n    liquidationPrice() {\n      if (this.daiQty <= 0 || this.ethQty <= 0) return 0;\n      return this.calcLiquidationPrice(this.ethQty, this.daiQty);\n    },\n    maxDaiDraw() {\n      if (this.ethQty <= 0) return 0;\n      const bufferVal = this.calcDaiDraw(this.ethQty).times(0.01);\n      return toBigNumber(this.calcDaiDraw(this.ethQty)).minus(bufferVal);\n    },\n    minEthDeposit() {\n      if (this.daiQty <= 0) return 0;\n      return this.calcMinEthDeposit(this.daiQty);\n    },\n    risky() {\n      const collRatio = this.collatRatio;\n      if (toBigNumber(collRatio).gt(0)) {\n        return toBigNumber(collRatio).lte(2);\n      }\n      return false;\n    },\n    veryRisky() {\n      const collRatio = this.collatRatio;\n      if (toBigNumber(collRatio).gt(0)) {\n        return toBigNumber(collRatio).lte(1.75);\n      }\n      return false;\n    },\n    depositInPeth() {\n      if (this.ethQty <= 0) return 0;\n      return this.toPeth(this.ethQty);\n    },\n    minEth() {\n      if (this.wethToPethRatio) {\n        return toBigNumber(this.pethMin).times(this.wethToPethRatio);\n      }\n      return '--';\n    }\n  },\n  async mounted() {\n    this.buildEmptyInstance();\n  },\n  methods: {\n    async buildEmptyInstance() {\n      this.makerCDP = await this.buildEmpty();\n      this.$forceUpdate();\n    },\n    displayPercentValue,\n    displayFixedValue,\n    displayFixedPercent,\n    async openCdp() {\n      this.loading = true;\n\n      if (this.ethQty <= 0) return 0;\n      setTimeout(() => {\n        this.loading = false;\n      }, 5000);\n\n      // [Note from David to Steve] This should be implemented on TX core.\n      // Close DAI confirmation modal\n      this.$eventHub.$on('showTxConfirmModal', () => {\n        this.$emit('cdpOpened');\n        if (this.loading) {\n          this.$refs.daiconfirmation.$refs.modal.hide();\n          this.loading = false;\n        }\n      });\n\n      await this.makerCDP.openCdp(this.ethQty, this.daiQty);\n    },\n    openDaiConfirmation() {\n      this.$refs.daiconfirmation.$refs.modal.show();\n    },\n    toUSD(eth) {\n      if (eth === undefined || eth === null) return toBigNumber(0);\n      const toUsd = this.ethPrice.times(toBigNumber(eth));\n      if (toUsd.lt(0)) {\n        return toBigNumber(0);\n      }\n      return toUsd;\n    },\n\n    toPeth(eth) {\n      if (!toBigNumber(eth).eq(0)) {\n        return toBigNumber(eth).div(this.wethToPethRatio);\n      }\n      return toBigNumber(0);\n    },\n    fromPeth(peth) {\n      if (!toBigNumber(peth).eq(0)) {\n        return toBigNumber(peth).times(this.wethToPethRatio);\n      }\n      return toBigNumber(0);\n    },\n    calcMinCollatRatio(priceFloor) {\n      return bnOver(this.ethPrice, this.liquidationRatio, priceFloor);\n    },\n    calcDaiDraw(\n      ethQty,\n      ethPrice = this.ethPrice,\n      liquidationRatio = this.liquidationRatio\n    ) {\n      if (ethQty <= 0) return 0;\n      return bnOver(ethPrice, toBigNumber(ethQty), liquidationRatio);\n    },\n\n    calcMinEthDeposit(\n      daiQty,\n      ethPrice = this.ethPrice,\n      liquidationRatio = this.liquidationRatio\n    ) {\n      if (daiQty <= 0) return 0;\n      return bnOver(liquidationRatio, daiQty, ethPrice);\n    },\n\n    calcCollatRatio(ethQty, daiQty) {\n      if (ethQty <= 0 || daiQty <= 0) return 0;\n      return bnOver(this.ethPrice, ethQty, daiQty);\n    },\n\n    calcLiquidationPrice(ethQty, daiQty) {\n      if (ethQty <= 0 || daiQty <= 0) return 0;\n      const getInt = parseInt(this.ethPrice);\n      for (let i = getInt; i > 0; i--) {\n        const atValue = bnOver(i, ethQty, daiQty).lte(this.liquidationRatio);\n        if (atValue) {\n          return i;\n        }\n      }\n      for (let i = 100; i > 0; i--) {\n        const atValue = bnOver(i / 100, ethQty, daiQty).lte(\n          this.liquidationRatio\n        );\n        if (atValue) {\n          return i / 100;\n        }\n      }\n      return 0;\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'CreateCDP';\n</style>\n"]}]}