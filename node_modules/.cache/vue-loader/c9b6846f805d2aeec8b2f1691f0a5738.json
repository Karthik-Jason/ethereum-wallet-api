{"remainingRequest":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/containers/NotificationsContainer/NotificationsContainer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/containers/NotificationsContainer/NotificationsContainer.vue","mtime":1573477611640},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapState } from 'vuex';\nimport store from 'store';\nimport unit from 'ethjs-unit';\nimport BigNumber from 'bignumber.js';\n\nimport SwapNotification from './components/NotificationTypes/SwapNotification';\nimport TransactionNotification from './components/NotificationTypes/TransactionNotification';\nimport TransactionDetails from './components/NotificationTypes/NotificationDetails';\nimport SwapDetails from './components/NotificationTypes/SwapDetails';\n\nimport {\n  statusTypes,\n  listComponentMapping,\n  detailComponentMapping\n} from './components/config';\n\nimport {\n  INVESTIGATE_FAILURE_KEY,\n  notificationStatuses,\n  notificationType\n} from '@/helpers/notificationFormatters';\n\nimport { SwapProviders } from '@/partners';\n\nexport default {\n  components: {\n    'swap-notification': SwapNotification,\n    'transaction-notification': TransactionNotification,\n    'transaction-details': TransactionDetails,\n    'swap-details': SwapDetails\n  },\n  data() {\n    return {\n      cancelHide: false,\n      shown: false,\n      unreadCount: 0,\n      ethPrice: new BigNumber(0),\n      detailsShown: false,\n      detailType: '',\n      notificationDetails: {}\n    };\n  },\n  computed: {\n    ...mapState(['web3', 'network', 'notifications', 'account', 'online']),\n    sortedNotifications() {\n      if (!this.notifications[this.account.address]) return [];\n      const notifications = this.notifications[this.account.address];\n      return notifications\n        .sort((a, b) => {\n          a = a.timestamp;\n          b = b.timestamp;\n\n          return a > b ? -1 : a < b ? 1 : 0;\n        })\n        .filter(entry => entry.network === this.network.type.name);\n    }\n  },\n  watch: {\n    notifications() {\n      this.countUnread();\n    }\n  },\n  mounted() {\n    if (this.notifications[this.account.address] === undefined) {\n      this.notifications[this.account.address] = [];\n      store.set('notifications', this.notifications);\n    }\n    this.countUnread();\n    if (this.online) {\n      this.fetchBalanceData();\n      this.checkForUnResolvedTxNotifications();\n    }\n  },\n  methods: {\n    hiddenModal() {\n      this.shown = false;\n      this.hideDetails();\n    },\n    checkForUnResolvedTxNotifications() {\n      if (!this.notifications[this.account.address]) return [];\n      const check = this.notifications[this.account.address]\n        .filter(entry => entry.network === this.network.type.name)\n        .filter(entry => {\n          const isOlder =\n            (new Date().getTime() - new Date(entry.timestamp).getTime()) /\n              1000 >\n            6000;\n          const isUnResolved = entry.status === notificationStatuses.PENDING;\n          const notExternalSwap =\n            entry.type === notificationType.TRANSACTION ||\n            (entry.type === notificationType.SWAP && entry.body.isDex === true);\n          const hasHash = entry.hash !== '' && entry.hash !== undefined;\n          return isOlder && isUnResolved && hasHash && notExternalSwap;\n        });\n      check.forEach(entry => {\n        this.web3.eth.getTransactionReceipt(entry.hash).then(result => {\n          if (result === null) return;\n          const noticeIdx = this.notifications[this.account.address].findIndex(\n            noticeEntry => entry.id === noticeEntry.id\n          );\n          if (noticeIdx >= 0) {\n            entry.status = result.status\n              ? notificationStatuses.COMPLETE\n              : notificationStatuses.FAILED;\n            entry.body.error = !result.status;\n            entry.body.errorMessage = result.status\n              ? ''\n              : INVESTIGATE_FAILURE_KEY;\n            entry.body.gasUsed = new BigNumber(result.gasUsed).toString();\n            entry.body.blockNumber = new BigNumber(\n              result.blockNumber\n            ).toString();\n            if (entry.body.isDex) {\n              entry.swapStatus = result.status\n                ? notificationStatuses.COMPLETE\n                : notificationStatuses.FAILED;\n              entry.body.timeRemaining = -1;\n            }\n            this.$store.dispatch('updateNotification', [\n              this.account.address,\n              noticeIdx,\n              entry\n            ]);\n          }\n        });\n      });\n    },\n    showNotifications() {\n      this.shown = true;\n      this.$refs.notification.show();\n    },\n    showDetails(details) {\n      this.cancelHide = true;\n      this.detailsShown = true;\n      this.detailType = details[0];\n      this.notificationDetails = details[1];\n      if (details.length === 3) {\n        this.notificationDetails.index = details[2];\n      }\n    },\n    hideDetails() {\n      this.detailsShown = false;\n      this.notificationDetails = {};\n      this.detailType = '';\n    },\n    useComponent(type) {\n      if (listComponentMapping[type]) {\n        return listComponentMapping[type];\n      }\n      return 'transaction-notification';\n    },\n    useDetailComponent(type) {\n      if (detailComponentMapping[type]) {\n        return detailComponentMapping[type];\n      }\n      return 'transaction-details';\n    },\n    countUnread() {\n      this.unreadCount = 0;\n      if (this.sortedNotifications.length) {\n        this.sortedNotifications.forEach(notif => {\n          if (notif.read === false) this.unreadCount++;\n        });\n      }\n    },\n    expand(idx, notif) {\n      return () => {\n        const updatedNotif = notif;\n        if (notif.expanded !== true) {\n          updatedNotif.read = true;\n          updatedNotif.expanded = true;\n        } else {\n          updatedNotif.expanded = false;\n        }\n\n        this.$store.dispatch('updateNotification', [\n          this.account.address,\n          idx,\n          updatedNotif\n        ]);\n      };\n    },\n    expandAll() {\n      this.notifications[this.account.address].forEach((notice, idx) => {\n        const updatedNotif = notice;\n        if (notice.expanded !== true) {\n          updatedNotif.read = true;\n          updatedNotif.expanded = true;\n        }\n        this.$store.dispatch('updateNotification', [\n          this.account.address,\n          idx,\n          updatedNotif\n        ]);\n      });\n    },\n    CallapseAll() {\n      this.notifications[this.account.address].forEach((notice, idx) => {\n        const updatedNotif = notice;\n        updatedNotif.expanded = false;\n        this.$store.dispatch('updateNotification', [\n          this.account.address,\n          idx,\n          updatedNotif\n        ]);\n      });\n    },\n    childUpdateNotification(idx) {\n      if (typeof idx === 'undefined') return () => {};\n      return updatedNotif => {\n        this.$store.dispatch('updateNotification', [\n          this.account.address,\n          idx,\n          updatedNotif\n        ]);\n      };\n    },\n    processStatus(rawStatus) {\n      if (statusTypes[rawStatus]) {\n        return statusTypes[rawStatus];\n      }\n      return statusTypes.statusError;\n    },\n    errorMessageString(notice) {\n      if (notice.body.errorMessage === INVESTIGATE_FAILURE_KEY) {\n        return this.$t('header.investigate');\n      }\n      return notice.body.errorMessage;\n    },\n    hashLink(hash, currency) {\n      if (currency && SwapProviders.isNotToken(currency)) {\n        return SwapProviders.getBlockChainExplorerUrl(currency, hash);\n      }\n      if (this.network.type.blockExplorerTX) {\n        return this.network.type.blockExplorerTX.replace('[[txHash]]', hash);\n      }\n    },\n    addressLink(addr, currency) {\n      if (currency && SwapProviders.isNotToken(currency)) {\n        return SwapProviders.getAddressLookupUrl(currency, addr);\n      }\n      if (this.network.type.blockExplorerAddr) {\n        return this.network.type.blockExplorerAddr.replace('[[address]]', addr);\n      }\n    },\n    dateString(notice) {\n      if (notice !== {} && this._i18n.locale !== null) {\n        return new Date(notice.timestamp).toLocaleDateString(\n          this._i18n.locale.replace('_', '-')\n        );\n      }\n      return '';\n    },\n    timeString(notice) {\n      if (notice !== {} && this._i18n.locale !== null) {\n        return new Date(notice.timestamp).toLocaleTimeString(\n          this._i18n.locale.replace('_', '-')\n        );\n      }\n      return '';\n    },\n    async fetchBalanceData() {\n      const url = 'https://cryptorates.mewapi.io/ticker';\n      const fetchValues = await fetch(url);\n      const values = await fetchValues.json();\n      if (!values) return 0;\n      if (!values && !values.data && !values.data['ETH']) return 0;\n      this.ethPrice = new BigNumber(values.data['ETH'].quotes.USD.price);\n    },\n    convertToGwei(value) {\n      if (this.notValidNumber(value)) return '';\n      return unit.fromWei(new BigNumber(value).toFixed(), 'Gwei');\n    },\n    convertToEth(value) {\n      if (this.notValidNumber(value)) return '';\n      return unit.fromWei(new BigNumber(value).toFixed(), 'ether');\n    },\n    getFiatValue(value) {\n      if (this.notValidNumber(value)) return '';\n      if (this.ethPrice === 0) return '';\n      return new BigNumber(this.convertToEth(value))\n        .multipliedBy(new BigNumber(this.ethPrice))\n        .decimalPlaces(2)\n        .toFixed();\n    },\n    notValidNumber(value) {\n      return (\n        typeof value === 'undefined' || Number.isNaN(value) || value === 'NaN'\n      );\n    }\n  }\n};\n",{"version":3,"sources":["NotificationsContainer.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+GA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"NotificationsContainer.vue","sourceRoot":"src/containers/NotificationsContainer","sourcesContent":["<template lang=\"html\">\n  <div class=\"notification-container\">\n    <div class=\"notification-logo\" @click=\"showNotifications\">\n      <img\n        alt=\"Notifications\"\n        class=\"logo-large\"\n        src=\"~@/assets/images/icons/notification.svg\"\n      />\n      <div v-show=\"unreadCount > 0\" class=\"notification-dot\">\n        <div class=\"parent\">\n          <div class=\"heart\"></div>\n        </div>\n      </div>\n    </div>\n    <b-modal\n      ref=\"notification\"\n      hide-footer\n      centered\n      no-padding\n      class=\"bootstrap-modal-wide nopadding\"\n      static\n      lazy\n      @show=\"countUnread\"\n      @hide=\"hiddenModal\"\n    >\n      <template slot=\"modal-title\">\n        <div>\n          <div v-if=\"!detailsShown\" class=\"modal-title\">\n            {{ unreadCount > 1 ? 'Notifications' : 'Notification' }}\n            <div v-show=\"unreadCount >= 0\" class=\"notification-count\">\n              <span>{{ unreadCount }}</span>\n            </div>\n          </div>\n          <div v-else class=\"modal-title show-pointer\" @click=\"hideDetails\">\n            <i class=\"fa fa-long-arrow-left\" aria-hidden=\"true\" />\n            {{ $t('common.back') }}\n          </div>\n        </div>\n      </template>\n      <div v-if=\"!detailsShown\" class=\"notification-item-container\">\n        <ul\n          v-if=\"\n            sortedNotifications !== undefined && sortedNotifications.length > 0\n          \"\n        >\n          <li>\n            <p @click=\"expandAll\">\n              <i aria-hidden=\"true\" class=\"fa fa-2x fa-angle-down\"></i>\n            </p>\n            <p @click=\"CallapseAll\">\n              <i aria-hidden=\"true\" class=\"fa fa-2x fa-angle-up\"></i>\n            </p>\n          </li>\n          <li\n            v-for=\"(notification, idx) in sortedNotifications\"\n            :key=\"notification.id + idx\"\n            class=\"notification-item\"\n          >\n            <keep-alive\n              :max=\"10\"\n              :exclude=\"['transaction-notification', 'transaction-error']\"\n            >\n              <component\n                :is=\"useComponent(notification.type)\"\n                :expand=\"expand(idx, notification)\"\n                :shown=\"shown\"\n                :notice=\"notification\"\n                :convert-to-gwei=\"convertToGwei\"\n                :convert-to-eth=\"convertToEth\"\n                :get-fiat-value=\"getFiatValue\"\n                :date-string=\"dateString\"\n                :time-string=\"timeString\"\n                :hash-link=\"hashLink\"\n                :address-link=\"addressLink\"\n                :process-status=\"processStatus\"\n                :error-message-string=\"errorMessageString\"\n                :index=\"idx\"\n                :child-update-notification=\"childUpdateNotification(idx)\"\n                @showDetails=\"showDetails\"\n              >\n              </component>\n            </keep-alive>\n          </li>\n        </ul>\n        <div v-else class=\"notification-no-item\">No notifications found :(</div>\n      </div>\n      <div v-if=\"detailsShown\" class=\"notification-item-container\">\n        <component\n          :is=\"useDetailComponent(detailType)\"\n          :shown=\"shown\"\n          :notice=\"notificationDetails\"\n          :convert-to-gwei=\"convertToGwei\"\n          :convert-to-eth=\"convertToEth\"\n          :get-fiat-value=\"getFiatValue\"\n          :date-string=\"dateString\"\n          :time-string=\"timeString\"\n          :hash-link=\"hashLink\"\n          :address-link=\"addressLink\"\n          :process-status=\"processStatus\"\n          :error-message-string=\"errorMessageString\"\n          :child-update-notification=\"\n            childUpdateNotification(notificationDetails.index)\n          \"\n        >\n        </component>\n      </div>\n    </b-modal>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport store from 'store';\nimport unit from 'ethjs-unit';\nimport BigNumber from 'bignumber.js';\n\nimport SwapNotification from './components/NotificationTypes/SwapNotification';\nimport TransactionNotification from './components/NotificationTypes/TransactionNotification';\nimport TransactionDetails from './components/NotificationTypes/NotificationDetails';\nimport SwapDetails from './components/NotificationTypes/SwapDetails';\n\nimport {\n  statusTypes,\n  listComponentMapping,\n  detailComponentMapping\n} from './components/config';\n\nimport {\n  INVESTIGATE_FAILURE_KEY,\n  notificationStatuses,\n  notificationType\n} from '@/helpers/notificationFormatters';\n\nimport { SwapProviders } from '@/partners';\n\nexport default {\n  components: {\n    'swap-notification': SwapNotification,\n    'transaction-notification': TransactionNotification,\n    'transaction-details': TransactionDetails,\n    'swap-details': SwapDetails\n  },\n  data() {\n    return {\n      cancelHide: false,\n      shown: false,\n      unreadCount: 0,\n      ethPrice: new BigNumber(0),\n      detailsShown: false,\n      detailType: '',\n      notificationDetails: {}\n    };\n  },\n  computed: {\n    ...mapState(['web3', 'network', 'notifications', 'account', 'online']),\n    sortedNotifications() {\n      if (!this.notifications[this.account.address]) return [];\n      const notifications = this.notifications[this.account.address];\n      return notifications\n        .sort((a, b) => {\n          a = a.timestamp;\n          b = b.timestamp;\n\n          return a > b ? -1 : a < b ? 1 : 0;\n        })\n        .filter(entry => entry.network === this.network.type.name);\n    }\n  },\n  watch: {\n    notifications() {\n      this.countUnread();\n    }\n  },\n  mounted() {\n    if (this.notifications[this.account.address] === undefined) {\n      this.notifications[this.account.address] = [];\n      store.set('notifications', this.notifications);\n    }\n    this.countUnread();\n    if (this.online) {\n      this.fetchBalanceData();\n      this.checkForUnResolvedTxNotifications();\n    }\n  },\n  methods: {\n    hiddenModal() {\n      this.shown = false;\n      this.hideDetails();\n    },\n    checkForUnResolvedTxNotifications() {\n      if (!this.notifications[this.account.address]) return [];\n      const check = this.notifications[this.account.address]\n        .filter(entry => entry.network === this.network.type.name)\n        .filter(entry => {\n          const isOlder =\n            (new Date().getTime() - new Date(entry.timestamp).getTime()) /\n              1000 >\n            6000;\n          const isUnResolved = entry.status === notificationStatuses.PENDING;\n          const notExternalSwap =\n            entry.type === notificationType.TRANSACTION ||\n            (entry.type === notificationType.SWAP && entry.body.isDex === true);\n          const hasHash = entry.hash !== '' && entry.hash !== undefined;\n          return isOlder && isUnResolved && hasHash && notExternalSwap;\n        });\n      check.forEach(entry => {\n        this.web3.eth.getTransactionReceipt(entry.hash).then(result => {\n          if (result === null) return;\n          const noticeIdx = this.notifications[this.account.address].findIndex(\n            noticeEntry => entry.id === noticeEntry.id\n          );\n          if (noticeIdx >= 0) {\n            entry.status = result.status\n              ? notificationStatuses.COMPLETE\n              : notificationStatuses.FAILED;\n            entry.body.error = !result.status;\n            entry.body.errorMessage = result.status\n              ? ''\n              : INVESTIGATE_FAILURE_KEY;\n            entry.body.gasUsed = new BigNumber(result.gasUsed).toString();\n            entry.body.blockNumber = new BigNumber(\n              result.blockNumber\n            ).toString();\n            if (entry.body.isDex) {\n              entry.swapStatus = result.status\n                ? notificationStatuses.COMPLETE\n                : notificationStatuses.FAILED;\n              entry.body.timeRemaining = -1;\n            }\n            this.$store.dispatch('updateNotification', [\n              this.account.address,\n              noticeIdx,\n              entry\n            ]);\n          }\n        });\n      });\n    },\n    showNotifications() {\n      this.shown = true;\n      this.$refs.notification.show();\n    },\n    showDetails(details) {\n      this.cancelHide = true;\n      this.detailsShown = true;\n      this.detailType = details[0];\n      this.notificationDetails = details[1];\n      if (details.length === 3) {\n        this.notificationDetails.index = details[2];\n      }\n    },\n    hideDetails() {\n      this.detailsShown = false;\n      this.notificationDetails = {};\n      this.detailType = '';\n    },\n    useComponent(type) {\n      if (listComponentMapping[type]) {\n        return listComponentMapping[type];\n      }\n      return 'transaction-notification';\n    },\n    useDetailComponent(type) {\n      if (detailComponentMapping[type]) {\n        return detailComponentMapping[type];\n      }\n      return 'transaction-details';\n    },\n    countUnread() {\n      this.unreadCount = 0;\n      if (this.sortedNotifications.length) {\n        this.sortedNotifications.forEach(notif => {\n          if (notif.read === false) this.unreadCount++;\n        });\n      }\n    },\n    expand(idx, notif) {\n      return () => {\n        const updatedNotif = notif;\n        if (notif.expanded !== true) {\n          updatedNotif.read = true;\n          updatedNotif.expanded = true;\n        } else {\n          updatedNotif.expanded = false;\n        }\n\n        this.$store.dispatch('updateNotification', [\n          this.account.address,\n          idx,\n          updatedNotif\n        ]);\n      };\n    },\n    expandAll() {\n      this.notifications[this.account.address].forEach((notice, idx) => {\n        const updatedNotif = notice;\n        if (notice.expanded !== true) {\n          updatedNotif.read = true;\n          updatedNotif.expanded = true;\n        }\n        this.$store.dispatch('updateNotification', [\n          this.account.address,\n          idx,\n          updatedNotif\n        ]);\n      });\n    },\n    CallapseAll() {\n      this.notifications[this.account.address].forEach((notice, idx) => {\n        const updatedNotif = notice;\n        updatedNotif.expanded = false;\n        this.$store.dispatch('updateNotification', [\n          this.account.address,\n          idx,\n          updatedNotif\n        ]);\n      });\n    },\n    childUpdateNotification(idx) {\n      if (typeof idx === 'undefined') return () => {};\n      return updatedNotif => {\n        this.$store.dispatch('updateNotification', [\n          this.account.address,\n          idx,\n          updatedNotif\n        ]);\n      };\n    },\n    processStatus(rawStatus) {\n      if (statusTypes[rawStatus]) {\n        return statusTypes[rawStatus];\n      }\n      return statusTypes.statusError;\n    },\n    errorMessageString(notice) {\n      if (notice.body.errorMessage === INVESTIGATE_FAILURE_KEY) {\n        return this.$t('header.investigate');\n      }\n      return notice.body.errorMessage;\n    },\n    hashLink(hash, currency) {\n      if (currency && SwapProviders.isNotToken(currency)) {\n        return SwapProviders.getBlockChainExplorerUrl(currency, hash);\n      }\n      if (this.network.type.blockExplorerTX) {\n        return this.network.type.blockExplorerTX.replace('[[txHash]]', hash);\n      }\n    },\n    addressLink(addr, currency) {\n      if (currency && SwapProviders.isNotToken(currency)) {\n        return SwapProviders.getAddressLookupUrl(currency, addr);\n      }\n      if (this.network.type.blockExplorerAddr) {\n        return this.network.type.blockExplorerAddr.replace('[[address]]', addr);\n      }\n    },\n    dateString(notice) {\n      if (notice !== {} && this._i18n.locale !== null) {\n        return new Date(notice.timestamp).toLocaleDateString(\n          this._i18n.locale.replace('_', '-')\n        );\n      }\n      return '';\n    },\n    timeString(notice) {\n      if (notice !== {} && this._i18n.locale !== null) {\n        return new Date(notice.timestamp).toLocaleTimeString(\n          this._i18n.locale.replace('_', '-')\n        );\n      }\n      return '';\n    },\n    async fetchBalanceData() {\n      const url = 'https://cryptorates.mewapi.io/ticker';\n      const fetchValues = await fetch(url);\n      const values = await fetchValues.json();\n      if (!values) return 0;\n      if (!values && !values.data && !values.data['ETH']) return 0;\n      this.ethPrice = new BigNumber(values.data['ETH'].quotes.USD.price);\n    },\n    convertToGwei(value) {\n      if (this.notValidNumber(value)) return '';\n      return unit.fromWei(new BigNumber(value).toFixed(), 'Gwei');\n    },\n    convertToEth(value) {\n      if (this.notValidNumber(value)) return '';\n      return unit.fromWei(new BigNumber(value).toFixed(), 'ether');\n    },\n    getFiatValue(value) {\n      if (this.notValidNumber(value)) return '';\n      if (this.ethPrice === 0) return '';\n      return new BigNumber(this.convertToEth(value))\n        .multipliedBy(new BigNumber(this.ethPrice))\n        .decimalPlaces(2)\n        .toFixed();\n    },\n    notValidNumber(value) {\n      return (\n        typeof value === 'undefined' || Number.isNaN(value) || value === 'NaN'\n      );\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import './NotificationsContainer.scss';\n</style>\n"]}]}