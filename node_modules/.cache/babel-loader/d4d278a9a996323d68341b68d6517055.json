{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/containers/NotificationsContainer/components/NotificationHeader/TransactionHeader.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/containers/NotificationsContainer/components/NotificationHeader/TransactionHeader.vue","mtime":1573477611640},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState } from 'vuex';\nimport { notificationHeaderLabels, noticeStatusFields } from \"../config\";\nexport default {\n  props: {\n    expand: {\n      type: Function,\n      default: function _default() {}\n    },\n    notice: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    processStatus: {\n      type: Function,\n      default: function _default() {}\n    },\n    dateString: {\n      type: Function,\n      default: function _default() {}\n    },\n    timeString: {\n      type: Function,\n      default: function _default() {}\n    }\n  },\n  data: function data() {\n    return {\n      unreadCount: 0\n    };\n  },\n  computed: _objectSpread({}, mapState(['web3', 'network', 'notifications', 'wallet']), {\n    typeString: function typeString() {\n      if (notificationHeaderLabels[this.notice.type]) {\n        return this.$t(notificationHeaderLabels[this.notice.type]);\n      }\n\n      return this.$t(notificationHeaderLabels['transaction']);\n    },\n    details: function details() {\n      return this.notice.body;\n    },\n    txStatus: function txStatus() {\n      return this.processStatus(this.notice[noticeStatusFields[this.notice.type]]);\n    }\n  }),\n  methods: {\n    emitShowDetails: function emitShowDetails() {\n      this.$emit('showDetails', ['transaction', this.notice]);\n    }\n  }\n};",{"version":3,"sources":["TransactionHeader.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA,SAAA,QAAA,QAAA,MAAA;AACA,SAAA,wBAAA,EAAA,kBAAA;AAEA,eAAA;AACA,EAAA,KAAA,EAAA;AACA,IAAA,MAAA,EAAA;AACA,MAAA,IAAA,EAAA,QADA;AAEA,MAAA,OAAA,EAAA,oBAAA,CAAA;AAFA,KADA;AAKA,IAAA,MAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA,oBAAA;AACA,eAAA,EAAA;AACA;AAJA,KALA;AAWA,IAAA,aAAA,EAAA;AACA,MAAA,IAAA,EAAA,QADA;AAEA,MAAA,OAAA,EAAA,oBAAA,CAAA;AAFA,KAXA;AAeA,IAAA,UAAA,EAAA;AACA,MAAA,IAAA,EAAA,QADA;AAEA,MAAA,OAAA,EAAA,oBAAA,CAAA;AAFA,KAfA;AAmBA,IAAA,UAAA,EAAA;AACA,MAAA,IAAA,EAAA,QADA;AAEA,MAAA,OAAA,EAAA,oBAAA,CAAA;AAFA;AAnBA,GADA;AAyBA,EAAA,IAzBA,kBAyBA;AACA,WAAA;AACA,MAAA,WAAA,EAAA;AADA,KAAA;AAGA,GA7BA;AA8BA,EAAA,QAAA,oBACA,QAAA,CAAA,CAAA,MAAA,EAAA,SAAA,EAAA,eAAA,EAAA,QAAA,CAAA,CADA;AAEA,IAAA,UAFA,wBAEA;AACA,UAAA,wBAAA,CAAA,KAAA,MAAA,CAAA,IAAA,CAAA,EAAA;AACA,eAAA,KAAA,EAAA,CAAA,wBAAA,CAAA,KAAA,MAAA,CAAA,IAAA,CAAA,CAAA;AACA;;AACA,aAAA,KAAA,EAAA,CAAA,wBAAA,CAAA,aAAA,CAAA,CAAA;AACA,KAPA;AAQA,IAAA,OARA,qBAQA;AACA,aAAA,KAAA,MAAA,CAAA,IAAA;AACA,KAVA;AAWA,IAAA,QAXA,sBAWA;AACA,aAAA,KAAA,aAAA,CACA,KAAA,MAAA,CAAA,kBAAA,CAAA,KAAA,MAAA,CAAA,IAAA,CAAA,CADA,CAAA;AAGA;AAfA,IA9BA;AA+CA,EAAA,OAAA,EAAA;AACA,IAAA,eADA,6BACA;AACA,WAAA,KAAA,CAAA,aAAA,EAAA,CAAA,aAAA,EAAA,KAAA,MAAA,CAAA;AACA;AAHA;AA/CA,CAAA","sourcesContent":["<template lang=\"html\">\n  <div class=\"notification-header\" @click=\"expand()\">\n    <div class=\"notification-type-status\">\n      <p :class=\"['type', notice.read ? 'read' : 'un-read']\">\n        {{ typeString }}\n      </p>\n      <p :class=\"['status', notice.read ? 'read' : 'un-read', txStatus.class]\">\n        ({{ txStatus.text }})\n      </p>\n    </div>\n    <div class=\"time-date\">\n      <p>{{ timeString(notice) }}</p>\n      <p>{{ dateString(notice) }}</p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport { notificationHeaderLabels, noticeStatusFields } from '../config';\n\nexport default {\n  props: {\n    expand: {\n      type: Function,\n      default: function() {}\n    },\n    notice: {\n      type: Object,\n      default: function() {\n        return {};\n      }\n    },\n    processStatus: {\n      type: Function,\n      default: function() {}\n    },\n    dateString: {\n      type: Function,\n      default: function() {}\n    },\n    timeString: {\n      type: Function,\n      default: function() {}\n    }\n  },\n  data() {\n    return {\n      unreadCount: 0\n    };\n  },\n  computed: {\n    ...mapState(['web3', 'network', 'notifications', 'wallet']),\n    typeString() {\n      if (notificationHeaderLabels[this.notice.type]) {\n        return this.$t(notificationHeaderLabels[this.notice.type]);\n      }\n      return this.$t(notificationHeaderLabels['transaction']);\n    },\n    details() {\n      return this.notice.body;\n    },\n    txStatus() {\n      return this.processStatus(\n        this.notice[noticeStatusFields[this.notice.type]]\n      );\n    }\n  },\n  methods: {\n    emitShowDetails() {\n      this.$emit('showDetails', ['transaction', this.notice]);\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import './TransactionHeader.scss';\n</style>\n"],"sourceRoot":"src/layouts/ExtensionBrowserAction/containers/ExtensionNotification/components/NotificationHeader"}]}