{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/thread-loader/dist/cjs.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/components/SettingsModal/SettingsModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/components/SettingsModal/SettingsModal.vue","mtime":1574664278266},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/thread-loader/dist/cjs.js","mtime":1574664277654},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js","mtime":1574664275010},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js","mtime":1574664277774}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport FullWidthDropdownMenu from '@/components/FullWidthDropdownMenu';\nimport BigNumber from 'bignumber.js';\nimport utils from 'web3-utils';\nimport store from 'store';\nimport { Toast } from '@/helpers';\nimport { mapState } from 'vuex';\nexport default {\n  name: 'Settings',\n  components: {\n    'full-width-dropdown': FullWidthDropdownMenu\n  },\n  props: {\n    gasPrice: {\n      type: String,\n      default: '0'\n    },\n    address: {\n      type: String,\n      default: ''\n    }\n  },\n  data: function data() {\n    return {\n      buttonSave: {\n        title: 'Save',\n        buttonStyle: 'green',\n        rightArrow: false,\n        leftArrow: false,\n        mobileFullWidth: true\n      },\n      buttonExport: {\n        title: 'Export',\n        buttonStyle: 'green',\n        rightArrow: false,\n        leftArrow: false,\n        mobileFullWidth: true\n      },\n      buttonUploadFile: {\n        title: 'Upload File...',\n        buttonStyle: 'green-border',\n        rightArrow: false,\n        leftArrow: false,\n        fullWidth: true,\n        noMinWidth: true\n      },\n      buttonImport: {\n        title: 'Import',\n        buttonStyle: 'green',\n        rightArrow: false,\n        leftArrow: false,\n        fullWidth: true,\n        noMinWidth: false\n      },\n      inputFileName: '',\n      selectedGasType: 'regular',\n      customGas: 0,\n      customGasEth: 0,\n      ethPrice: 0,\n      fileName: '',\n      file: '',\n      importedFile: '',\n      popup: false\n    };\n  },\n  computed: _objectSpread({}, mapState(['network', 'online']), {\n    gasPriceInputs: function gasPriceInputs() {\n      return {\n        economy: {\n          gwei: new BigNumber(utils.fromWei(new BigNumber(this.gasPrice).div(1).toFixed(0), 'gwei')).toFixed(),\n          eth: new BigNumber(utils.fromWei(new BigNumber(this.gasPrice).div(1).toFixed(0), 'ether')).toFixed()\n        },\n        regular: {\n          gwei: new BigNumber(utils.fromWei(new BigNumber(this.gasPrice).times(1.5).toFixed(0), 'gwei')).toFixed(),\n          eth: new BigNumber(utils.fromWei(new BigNumber(this.gasPrice).times(1.5).toFixed(0), 'ether')).toFixed()\n        },\n        fast: {\n          gwei: new BigNumber(utils.fromWei(new BigNumber(this.gasPrice).times(2).toFixed(0), 'gwei')).toFixed(),\n          eth: new BigNumber(utils.fromWei(new BigNumber(this.gasPrice).div(2).toFixed(0), 'ether')).toFixed()\n        }\n      };\n    }\n  }),\n  watch: {\n    customGas: function customGas(newVal) {\n      if (newVal !== '') {\n        if (new BigNumber(newVal).gte(1)) {\n          var toGwei = new BigNumber(utils.toWei(\"\".concat(newVal), 'gwei')).toFixed();\n          this.customGasEth = new BigNumber(\"\".concat(utils.fromWei(toGwei, 'ether'))).toFixed();\n        } else {\n          this.customGas = 1;\n        }\n      }\n    },\n    gasPrice: function gasPrice() {\n      this.saveGasChanges();\n    }\n  },\n  mounted: function mounted() {\n    if (this.online) {\n      this.getEthPrice();\n    }\n\n    this.exportConfig();\n    this.getGasType();\n  },\n  methods: {\n    setDataFromImportedFile: function setDataFromImportedFile() {\n      var _this = this;\n\n      var reader = new FileReader();\n      var notifObj = {};\n      notifObj[this.address] = [];\n\n      reader.onloadend = function (evt) {\n        try {\n          var notifications = store.get('notifications') || notifObj;\n          var file = JSON.parse(evt.target.result);\n          var fNotifications = file.notifications || [];\n          fNotifications.forEach(function (objAddr) {\n            var addr = Object.keys(objAddr)[0];\n            notifications[addr] = objAddr[addr];\n          });\n          store.set('notifications', notifications);\n          store.set('skipTutorial', file.main.skipTutorial);\n          store.set('customTokens', file.main.customTokens);\n          store.set('customNetworks', file.main.customNetworks);\n          store.set('customDeriviationPaths', file.main.customDeriviationPaths);\n          store.set('gas', file.main.gas);\n          _this.popup = true;\n          setTimeout(function () {\n            _this.popup = false;\n          }, 1500);\n        } catch (e) {\n          Toast.responseHandler(new Error('Something went wrong while importing file, please make sure it is a valid file'), Toast.ERROR);\n        }\n      };\n\n      reader.readAsBinaryString(this.importedFile);\n    },\n    receiveUploadedFile: function receiveUploadedFile(e) {\n      var pathParts = e.target.value.split('\\\\');\n      this.inputFileName = pathParts[pathParts.length - 1];\n      this.importedFile = e.target.files[0];\n    },\n    getGasType: function getGasType() {\n      var type = store.get('gasPriceType');\n      var amt = store.get('gasPrice');\n\n      if (type) {\n        this.selectedGasType = type;\n      }\n\n      if (amt) {\n        if (this.gasPriceInputs[type] !== undefined) {\n          this.$store.dispatch('setGasPrice', new BigNumber(this.gasPriceInputs[type].gwei).toNumber());\n        } else {\n          this.customGas = amt;\n          this.$store.dispatch('setGasPrice', new BigNumber(amt).toNumber());\n        }\n      }\n    },\n    uploadFile: function uploadFile() {\n      var uploadInput = this.$refs.uploadInput;\n      uploadInput.value = '';\n      uploadInput.click();\n    },\n    saveGasChanges: function saveGasChanges() {\n      if (this.gasPriceInputs[this.selectedGasType] !== undefined) {\n        this.$store.dispatch('setGasPrice', new BigNumber(this.gasPriceInputs[this.selectedGasType].gwei).toNumber());\n      } else {\n        this.$store.dispatch('setGasPrice', new BigNumber(this.customGas).toNumber());\n      }\n\n      if (this.$refs.gasDropdown) {\n        this.$refs.gasDropdown.dropdownOpen = false;\n      }\n    },\n    selectGasType: function selectGasType(type) {\n      store.set('gasPriceType', type);\n      this.selectedGasType = type;\n\n      if (type === 'other') {\n        this.$refs.customInput.focus();\n      }\n    },\n    exportConfig: function exportConfig() {\n      var time = new Date().toISOString();\n      var notifications = [];\n      var storedNotifs = store.get('notifications') || {};\n      Object.keys(storedNotifs).forEach(function (item) {\n        if (storedNotifs[item].length > 0) {\n          var obj = {};\n          obj[item] = storedNotifs[item];\n          notifications.push(obj);\n        }\n      });\n      var gas = {};\n\n      if (this.gasPriceInputs[this.selectedGasType] !== undefined) {\n        gas['speed'] = this.selectedGasType;\n      } else {\n        gas['price'] = this.customGas;\n      }\n\n      var exportableObject = {\n        timestamp: time,\n        main: {\n          customNetworks: store.get('customNetworks') !== undefined ? store.get('customNetworks') : [],\n          customTokens: store.get('customTokens') !== undefined ? store.get('customTokens') : {},\n          customDeriviationPaths: store.get('customDeriviationPaths') !== undefined ? store.get('customDeriviationPaths') : [],\n          gas: gas,\n          skipTutorial: true\n        },\n        notifications: notifications\n      };\n      this.fileName = \"mew-export-\".concat(time, \".json\");\n      var file = new Blob([JSON.stringify(exportableObject)], {\n        type: 'application/json'\n      });\n      this.file = window.URL.createObjectURL(file);\n    },\n    convert: function convert(price) {\n      var convertedPrice = new BigNumber(price * this.ethPrice).toFixed();\n      return this.$options.filters.concatAddr(convertedPrice);\n    },\n    getEthPrice: function () {\n      var _getEthPrice = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var price;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetch('https://cryptorates.mewapi.io/ticker?filter=ETH').then(function (res) {\n                  return res.json();\n                }).catch(function (e) {\n                  Toast.responseHandler(e, Toast.ERROR);\n                });\n\n              case 2:\n                price = _context.sent;\n                this.ethPrice = price.data.ETH.quotes.USD.price;\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getEthPrice() {\n        return _getEthPrice.apply(this, arguments);\n      }\n\n      return getEthPrice;\n    }()\n  }\n};",{"version":3,"sources":["SettingsModal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiJA,OAAA,qBAAA,MAAA,oCAAA;AACA,OAAA,SAAA,MAAA,cAAA;AACA,OAAA,KAAA,MAAA,YAAA;AACA,OAAA,KAAA,MAAA,OAAA;AACA,SAAA,KAAA,QAAA,WAAA;AACA,SAAA,QAAA,QAAA,MAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,UADA;AAEA,EAAA,UAAA,EAAA;AACA,2BAAA;AADA,GAFA;AAKA,EAAA,KAAA,EAAA;AACA,IAAA,QAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KADA;AAKA,IAAA,OAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA;AALA,GALA;AAeA,EAAA,IAfA,kBAeA;AACA,WAAA;AACA,MAAA,UAAA,EAAA;AACA,QAAA,KAAA,EAAA,MADA;AAEA,QAAA,WAAA,EAAA,OAFA;AAGA,QAAA,UAAA,EAAA,KAHA;AAIA,QAAA,SAAA,EAAA,KAJA;AAKA,QAAA,eAAA,EAAA;AALA,OADA;AAQA,MAAA,YAAA,EAAA;AACA,QAAA,KAAA,EAAA,QADA;AAEA,QAAA,WAAA,EAAA,OAFA;AAGA,QAAA,UAAA,EAAA,KAHA;AAIA,QAAA,SAAA,EAAA,KAJA;AAKA,QAAA,eAAA,EAAA;AALA,OARA;AAeA,MAAA,gBAAA,EAAA;AACA,QAAA,KAAA,EAAA,gBADA;AAEA,QAAA,WAAA,EAAA,cAFA;AAGA,QAAA,UAAA,EAAA,KAHA;AAIA,QAAA,SAAA,EAAA,KAJA;AAKA,QAAA,SAAA,EAAA,IALA;AAMA,QAAA,UAAA,EAAA;AANA,OAfA;AAuBA,MAAA,YAAA,EAAA;AACA,QAAA,KAAA,EAAA,QADA;AAEA,QAAA,WAAA,EAAA,OAFA;AAGA,QAAA,UAAA,EAAA,KAHA;AAIA,QAAA,SAAA,EAAA,KAJA;AAKA,QAAA,SAAA,EAAA,IALA;AAMA,QAAA,UAAA,EAAA;AANA,OAvBA;AA+BA,MAAA,aAAA,EAAA,EA/BA;AAgCA,MAAA,eAAA,EAAA,SAhCA;AAiCA,MAAA,SAAA,EAAA,CAjCA;AAkCA,MAAA,YAAA,EAAA,CAlCA;AAmCA,MAAA,QAAA,EAAA,CAnCA;AAoCA,MAAA,QAAA,EAAA,EApCA;AAqCA,MAAA,IAAA,EAAA,EArCA;AAsCA,MAAA,YAAA,EAAA,EAtCA;AAuCA,MAAA,KAAA,EAAA;AAvCA,KAAA;AAyCA,GAzDA;AA0DA,EAAA,QAAA,oBACA,QAAA,CAAA,CAAA,SAAA,EAAA,QAAA,CAAA,CADA;AAEA,IAAA,cAFA,4BAEA;AACA,aAAA;AACA,QAAA,OAAA,EAAA;AACA,UAAA,IAAA,EAAA,IAAA,SAAA,CACA,KAAA,CAAA,OAAA,CACA,IAAA,SAAA,CAAA,KAAA,QAAA,EAAA,GAAA,CAAA,CAAA,EAAA,OAAA,CAAA,CAAA,CADA,EAEA,MAFA,CADA,EAKA,OALA,EADA;AAOA,UAAA,GAAA,EAAA,IAAA,SAAA,CACA,KAAA,CAAA,OAAA,CACA,IAAA,SAAA,CAAA,KAAA,QAAA,EAAA,GAAA,CAAA,CAAA,EAAA,OAAA,CAAA,CAAA,CADA,EAEA,OAFA,CADA,EAKA,OALA;AAPA,SADA;AAeA,QAAA,OAAA,EAAA;AACA,UAAA,IAAA,EAAA,IAAA,SAAA,CACA,KAAA,CAAA,OAAA,CACA,IAAA,SAAA,CAAA,KAAA,QAAA,EAAA,KAAA,CAAA,GAAA,EAAA,OAAA,CAAA,CAAA,CADA,EAEA,MAFA,CADA,EAKA,OALA,EADA;AAOA,UAAA,GAAA,EAAA,IAAA,SAAA,CACA,KAAA,CAAA,OAAA,CACA,IAAA,SAAA,CAAA,KAAA,QAAA,EAAA,KAAA,CAAA,GAAA,EAAA,OAAA,CAAA,CAAA,CADA,EAEA,OAFA,CADA,EAKA,OALA;AAPA,SAfA;AA6BA,QAAA,IAAA,EAAA;AACA,UAAA,IAAA,EAAA,IAAA,SAAA,CACA,KAAA,CAAA,OAAA,CACA,IAAA,SAAA,CAAA,KAAA,QAAA,EAAA,KAAA,CAAA,CAAA,EAAA,OAAA,CAAA,CAAA,CADA,EAEA,MAFA,CADA,EAKA,OALA,EADA;AAOA,UAAA,GAAA,EAAA,IAAA,SAAA,CACA,KAAA,CAAA,OAAA,CACA,IAAA,SAAA,CAAA,KAAA,QAAA,EAAA,GAAA,CAAA,CAAA,EAAA,OAAA,CAAA,CAAA,CADA,EAEA,OAFA,CADA,EAKA,OALA;AAPA;AA7BA,OAAA;AA4CA;AA/CA,IA1DA;AA2GA,EAAA,KAAA,EAAA;AACA,IAAA,SADA,qBACA,MADA,EACA;AACA,UAAA,MAAA,KAAA,EAAA,EAAA;AACA,YAAA,IAAA,SAAA,CAAA,MAAA,EAAA,GAAA,CAAA,CAAA,CAAA,EAAA;AACA,cAAA,MAAA,GAAA,IAAA,SAAA,CACA,KAAA,CAAA,KAAA,WAAA,MAAA,GAAA,MAAA,CADA,EAEA,OAFA,EAAA;AAGA,eAAA,YAAA,GAAA,IAAA,SAAA,WACA,KAAA,CAAA,OAAA,CAAA,MAAA,EAAA,OAAA,CADA,GAEA,OAFA,EAAA;AAGA,SAPA,MAOA;AACA,eAAA,SAAA,GAAA,CAAA;AACA;AACA;AACA,KAdA;AAeA,IAAA,QAfA,sBAeA;AACA,WAAA,cAAA;AACA;AAjBA,GA3GA;AA8HA,EAAA,OA9HA,qBA8HA;AACA,QAAA,KAAA,MAAA,EAAA;AACA,WAAA,WAAA;AACA;;AACA,SAAA,YAAA;AACA,SAAA,UAAA;AACA,GApIA;AAqIA,EAAA,OAAA,EAAA;AACA,IAAA,uBADA,qCACA;AAAA;;AACA,UAAA,MAAA,GAAA,IAAA,UAAA,EAAA;AACA,UAAA,QAAA,GAAA,EAAA;AACA,MAAA,QAAA,CAAA,KAAA,OAAA,CAAA,GAAA,EAAA;;AACA,MAAA,MAAA,CAAA,SAAA,GAAA,UAAA,GAAA,EAAA;AACA,YAAA;AACA,cAAA,aAAA,GAAA,KAAA,CAAA,GAAA,CAAA,eAAA,KAAA,QAAA;AACA,cAAA,IAAA,GAAA,IAAA,CAAA,KAAA,CAAA,GAAA,CAAA,MAAA,CAAA,MAAA,CAAA;AACA,cAAA,cAAA,GAAA,IAAA,CAAA,aAAA,IAAA,EAAA;AACA,UAAA,cAAA,CAAA,OAAA,CAAA,UAAA,OAAA,EAAA;AACA,gBAAA,IAAA,GAAA,MAAA,CAAA,IAAA,CAAA,OAAA,EAAA,CAAA,CAAA;AACA,YAAA,aAAA,CAAA,IAAA,CAAA,GAAA,OAAA,CAAA,IAAA,CAAA;AACA,WAHA;AAIA,UAAA,KAAA,CAAA,GAAA,CAAA,eAAA,EAAA,aAAA;AACA,UAAA,KAAA,CAAA,GAAA,CAAA,cAAA,EAAA,IAAA,CAAA,IAAA,CAAA,YAAA;AACA,UAAA,KAAA,CAAA,GAAA,CAAA,cAAA,EAAA,IAAA,CAAA,IAAA,CAAA,YAAA;AACA,UAAA,KAAA,CAAA,GAAA,CAAA,gBAAA,EAAA,IAAA,CAAA,IAAA,CAAA,cAAA;AACA,UAAA,KAAA,CAAA,GAAA,CAAA,wBAAA,EAAA,IAAA,CAAA,IAAA,CAAA,sBAAA;AACA,UAAA,KAAA,CAAA,GAAA,CAAA,KAAA,EAAA,IAAA,CAAA,IAAA,CAAA,GAAA;AAEA,UAAA,KAAA,CAAA,KAAA,GAAA,IAAA;AAEA,UAAA,UAAA,CAAA,YAAA;AACA,YAAA,KAAA,CAAA,KAAA,GAAA,KAAA;AACA,WAFA,EAEA,IAFA,CAAA;AAGA,SApBA,CAoBA,OAAA,CAAA,EAAA;AACA,UAAA,KAAA,CAAA,eAAA,CACA,IAAA,KAAA,CACA,gFADA,CADA,EAIA,KAAA,CAAA,KAJA;AAMA;AACA,OA7BA;;AA8BA,MAAA,MAAA,CAAA,kBAAA,CAAA,KAAA,YAAA;AACA,KApCA;AAqCA,IAAA,mBArCA,+BAqCA,CArCA,EAqCA;AACA,UAAA,SAAA,GAAA,CAAA,CAAA,MAAA,CAAA,KAAA,CAAA,KAAA,CAAA,IAAA,CAAA;AACA,WAAA,aAAA,GAAA,SAAA,CAAA,SAAA,CAAA,MAAA,GAAA,CAAA,CAAA;AAEA,WAAA,YAAA,GAAA,CAAA,CAAA,MAAA,CAAA,KAAA,CAAA,CAAA,CAAA;AACA,KA1CA;AA2CA,IAAA,UA3CA,wBA2CA;AACA,UAAA,IAAA,GAAA,KAAA,CAAA,GAAA,CAAA,cAAA,CAAA;AACA,UAAA,GAAA,GAAA,KAAA,CAAA,GAAA,CAAA,UAAA,CAAA;;AACA,UAAA,IAAA,EAAA;AACA,aAAA,eAAA,GAAA,IAAA;AACA;;AAEA,UAAA,GAAA,EAAA;AACA,YAAA,KAAA,cAAA,CAAA,IAAA,MAAA,SAAA,EAAA;AACA,eAAA,MAAA,CAAA,QAAA,CACA,aADA,EAEA,IAAA,SAAA,CAAA,KAAA,cAAA,CAAA,IAAA,EAAA,IAAA,EAAA,QAAA,EAFA;AAIA,SALA,MAKA;AACA,eAAA,SAAA,GAAA,GAAA;AACA,eAAA,MAAA,CAAA,QAAA,CAAA,aAAA,EAAA,IAAA,SAAA,CAAA,GAAA,EAAA,QAAA,EAAA;AACA;AACA;AACA,KA7DA;AA8DA,IAAA,UA9DA,wBA8DA;AACA,UAAA,WAAA,GAAA,KAAA,KAAA,CAAA,WAAA;AACA,MAAA,WAAA,CAAA,KAAA,GAAA,EAAA;AACA,MAAA,WAAA,CAAA,KAAA;AACA,KAlEA;AAmEA,IAAA,cAnEA,4BAmEA;AACA,UAAA,KAAA,cAAA,CAAA,KAAA,eAAA,MAAA,SAAA,EAAA;AACA,aAAA,MAAA,CAAA,QAAA,CACA,aADA,EAEA,IAAA,SAAA,CACA,KAAA,cAAA,CAAA,KAAA,eAAA,EAAA,IADA,EAEA,QAFA,EAFA;AAMA,OAPA,MAOA;AACA,aAAA,MAAA,CAAA,QAAA,CACA,aADA,EAEA,IAAA,SAAA,CAAA,KAAA,SAAA,EAAA,QAAA,EAFA;AAIA;;AACA,UAAA,KAAA,KAAA,CAAA,WAAA,EAAA;AACA,aAAA,KAAA,CAAA,WAAA,CAAA,YAAA,GAAA,KAAA;AACA;AACA,KApFA;AAqFA,IAAA,aArFA,yBAqFA,IArFA,EAqFA;AACA,MAAA,KAAA,CAAA,GAAA,CAAA,cAAA,EAAA,IAAA;AACA,WAAA,eAAA,GAAA,IAAA;;AACA,UAAA,IAAA,KAAA,OAAA,EAAA;AACA,aAAA,KAAA,CAAA,WAAA,CAAA,KAAA;AACA;AACA,KA3FA;AA4FA,IAAA,YA5FA,0BA4FA;AACA,UAAA,IAAA,GAAA,IAAA,IAAA,GAAA,WAAA,EAAA;AACA,UAAA,aAAA,GAAA,EAAA;AACA,UAAA,YAAA,GAAA,KAAA,CAAA,GAAA,CAAA,eAAA,KAAA,EAAA;AACA,MAAA,MAAA,CAAA,IAAA,CAAA,YAAA,EAAA,OAAA,CAAA,UAAA,IAAA,EAAA;AACA,YAAA,YAAA,CAAA,IAAA,CAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,cAAA,GAAA,GAAA,EAAA;AACA,UAAA,GAAA,CAAA,IAAA,CAAA,GAAA,YAAA,CAAA,IAAA,CAAA;AACA,UAAA,aAAA,CAAA,IAAA,CAAA,GAAA;AACA;AACA,OANA;AAOA,UAAA,GAAA,GAAA,EAAA;;AACA,UAAA,KAAA,cAAA,CAAA,KAAA,eAAA,MAAA,SAAA,EAAA;AACA,QAAA,GAAA,CAAA,OAAA,CAAA,GAAA,KAAA,eAAA;AACA,OAFA,MAEA;AACA,QAAA,GAAA,CAAA,OAAA,CAAA,GAAA,KAAA,SAAA;AACA;;AAEA,UAAA,gBAAA,GAAA;AACA,QAAA,SAAA,EAAA,IADA;AAEA,QAAA,IAAA,EAAA;AACA,UAAA,cAAA,EACA,KAAA,CAAA,GAAA,CAAA,gBAAA,MAAA,SAAA,GACA,KAAA,CAAA,GAAA,CAAA,gBAAA,CADA,GAEA,EAJA;AAKA,UAAA,YAAA,EACA,KAAA,CAAA,GAAA,CAAA,cAAA,MAAA,SAAA,GACA,KAAA,CAAA,GAAA,CAAA,cAAA,CADA,GAEA,EARA;AASA,UAAA,sBAAA,EACA,KAAA,CAAA,GAAA,CAAA,wBAAA,MAAA,SAAA,GACA,KAAA,CAAA,GAAA,CAAA,wBAAA,CADA,GAEA,EAZA;AAaA,UAAA,GAAA,EAAA,GAbA;AAcA,UAAA,YAAA,EAAA;AAdA,SAFA;AAkBA,QAAA,aAAA,EAAA;AAlBA,OAAA;AAqBA,WAAA,QAAA,wBAAA,IAAA;AAEA,UAAA,IAAA,GAAA,IAAA,IAAA,CAAA,CAAA,IAAA,CAAA,SAAA,CAAA,gBAAA,CAAA,CAAA,EAAA;AACA,QAAA,IAAA,EAAA;AADA,OAAA,CAAA;AAGA,WAAA,IAAA,GAAA,MAAA,CAAA,GAAA,CAAA,eAAA,CAAA,IAAA,CAAA;AACA,KAzIA;AA0IA,IAAA,OA1IA,mBA0IA,KA1IA,EA0IA;AACA,UAAA,cAAA,GAAA,IAAA,SAAA,CAAA,KAAA,GAAA,KAAA,QAAA,EAAA,OAAA,EAAA;AACA,aAAA,KAAA,QAAA,CAAA,OAAA,CAAA,UAAA,CAAA,cAAA,CAAA;AACA,KA7IA;AA8IA,IAAA,WA9IA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBA+IA,KAAA,CACA,iDADA,CAAA,CAGA,IAHA,CAGA,UAAA,GAAA,EAAA;AACA,yBAAA,GAAA,CAAA,IAAA,EAAA;AACA,iBALA,EAMA,KANA,CAMA,UAAA,CAAA,EAAA;AACA,kBAAA,KAAA,CAAA,eAAA,CAAA,CAAA,EAAA,KAAA,CAAA,KAAA;AACA,iBARA,CA/IA;;AAAA;AA+IA,gBAAA,KA/IA;AAyJA,qBAAA,QAAA,GAAA,KAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,GAAA,CAAA,KAAA;;AAzJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AArIA,CAAA","sourcesContent":["<template>\n  <div class=\"settings-modal\">\n    <div class=\"modal-container\">\n      <b-modal\n        ref=\"settings\"\n        title=\"Settings\"\n        hide-footer\n        centered\n        class=\"bootstrap-modal nopadding\"\n        static\n        lazy\n      >\n        <div class=\"modal-contents\">\n          <full-width-dropdown\n            ref=\"gasDropdown\"\n            title=\"Transaction Speed\"\n            class=\"tx-speed\"\n          >\n            <div class=\"radio-buttons\">\n              <ul>\n                <li\n                  v-for=\"(val, key) in gasPriceInputs\"\n                  :key=\"key\"\n                  :class=\"selectedGasType === key ? 'selected' : ''\"\n                >\n                  <div>\n                    <input\n                      :id=\"key\"\n                      :value=\"key\"\n                      :checked=\"selectedGasType === key\"\n                      name=\"speedRadioInputs\"\n                      type=\"radio\"\n                      @change=\"selectGasType(key)\"\n                    />\n                    <label :for=\"key\">\n                      {{ key | capitalize }} ({{ gasPriceInputs[key].gwei }}\n                      Gwei)\n                    </label>\n                  </div>\n                  <p class=\"hidden\">\n                    {{ gasPriceInputs[key].eth }} {{ network.type.name }}\n                    <span v-if=\"ethPrice !== 0 && network.type.name === 'ETH'\">\n                      ($\n                      {{ convert(gasPriceInputs[key].eth) }})\n                    </span>\n                  </p>\n                </li>\n                <li :class=\"selectedGasType === 'other' ? 'selected' : ''\">\n                  <div>\n                    <input\n                      id=\"ccc\"\n                      :checked=\"selectedGasType === 'other'\"\n                      type=\"radio\"\n                      name=\"speedRadioInputs\"\n                      value=\"other\"\n                      @change=\"selectGasType('other')\"\n                    />\n                    <input\n                      ref=\"customInput\"\n                      v-model=\"customGas\"\n                      type=\"number\"\n                      @focus=\"selectedGasType = 'other'\"\n                    />\n                    <p class=\"gwei\">Gwei</p>\n                  </div>\n                  <p class=\"hidden\">\n                    {{ customGasEth }}\n                    {{ network.type.currencyName }}\n                    <span\n                      v-if=\"\n                        ethPrice !== 0 &&\n                          customGasEth !== 0 &&\n                          network.type.name === 'ETH'\n                      \"\n                      >($ {{ convert(customGasEth) }})</span\n                    >\n                  </p>\n                </li>\n              </ul>\n            </div>\n            <div class=\"button-block\">\n              <standard-button\n                :options=\"buttonSave\"\n                :button-disabled=\"selectedGasType === 'other' && customGas < 1\"\n                @click.native=\"saveGasChanges\"\n              />\n            </div>\n          </full-width-dropdown>\n\n          <full-width-dropdown\n            title=\"Import Configurations\"\n            class=\"import-config\"\n          >\n            <b-alert :show=\"popup\" fade variant=\"info\"\n              >Imported file successfully!</b-alert\n            >\n            <p>\n              Please click the button below to open and import you configuration\n              file from your local computer.\n            </p>\n            <div class=\"import-button-block\">\n              <div class=\"filename\">\n                {{ inputFileName }}\n              </div>\n              <input\n                ref=\"uploadInput\"\n                type=\"file\"\n                name=\"file\"\n                @change=\"receiveUploadedFile\"\n              />\n              <standard-button\n                :options=\"buttonUploadFile\"\n                @click.native=\"uploadFile\"\n              />\n            </div>\n            <div class=\"button-block\">\n              <standard-button\n                :options=\"buttonImport\"\n                :button-disabled=\"importedFile === ''\"\n                @click.native=\"setDataFromImportedFile\"\n              />\n            </div>\n          </full-width-dropdown>\n\n          <full-width-dropdown\n            title=\"Export Configurations\"\n            class=\"export-config\"\n          >\n            <p>\n              Please click the button below to download your configuration file\n              into your local computer.\n            </p>\n            <div class=\"button-block\">\n              <a :href=\"file\" :download=\"fileName\" class=\"export-button\">\n                <standard-button :options=\"buttonExport\" />\n              </a>\n            </div>\n          </full-width-dropdown>\n        </div>\n      </b-modal>\n    </div>\n  </div>\n</template>\n\n<script>\nimport FullWidthDropdownMenu from '@/components/FullWidthDropdownMenu';\nimport BigNumber from 'bignumber.js';\nimport utils from 'web3-utils';\nimport store from 'store';\nimport { Toast } from '@/helpers';\nimport { mapState } from 'vuex';\n\nexport default {\n  name: 'Settings',\n  components: {\n    'full-width-dropdown': FullWidthDropdownMenu\n  },\n  props: {\n    gasPrice: {\n      type: String,\n      default: '0'\n    },\n    address: {\n      type: String,\n      default: ''\n    }\n  },\n  data() {\n    return {\n      buttonSave: {\n        title: 'Save',\n        buttonStyle: 'green',\n        rightArrow: false,\n        leftArrow: false,\n        mobileFullWidth: true\n      },\n      buttonExport: {\n        title: 'Export',\n        buttonStyle: 'green',\n        rightArrow: false,\n        leftArrow: false,\n        mobileFullWidth: true\n      },\n      buttonUploadFile: {\n        title: 'Upload File...',\n        buttonStyle: 'green-border',\n        rightArrow: false,\n        leftArrow: false,\n        fullWidth: true,\n        noMinWidth: true\n      },\n      buttonImport: {\n        title: 'Import',\n        buttonStyle: 'green',\n        rightArrow: false,\n        leftArrow: false,\n        fullWidth: true,\n        noMinWidth: false\n      },\n      inputFileName: '',\n      selectedGasType: 'regular',\n      customGas: 0,\n      customGasEth: 0,\n      ethPrice: 0,\n      fileName: '',\n      file: '',\n      importedFile: '',\n      popup: false\n    };\n  },\n  computed: {\n    ...mapState(['network', 'online']),\n    gasPriceInputs() {\n      return {\n        economy: {\n          gwei: new BigNumber(\n            utils.fromWei(\n              new BigNumber(this.gasPrice).div(1).toFixed(0),\n              'gwei'\n            )\n          ).toFixed(),\n          eth: new BigNumber(\n            utils.fromWei(\n              new BigNumber(this.gasPrice).div(1).toFixed(0),\n              'ether'\n            )\n          ).toFixed()\n        },\n        regular: {\n          gwei: new BigNumber(\n            utils.fromWei(\n              new BigNumber(this.gasPrice).times(1.5).toFixed(0),\n              'gwei'\n            )\n          ).toFixed(),\n          eth: new BigNumber(\n            utils.fromWei(\n              new BigNumber(this.gasPrice).times(1.5).toFixed(0),\n              'ether'\n            )\n          ).toFixed()\n        },\n        fast: {\n          gwei: new BigNumber(\n            utils.fromWei(\n              new BigNumber(this.gasPrice).times(2).toFixed(0),\n              'gwei'\n            )\n          ).toFixed(),\n          eth: new BigNumber(\n            utils.fromWei(\n              new BigNumber(this.gasPrice).div(2).toFixed(0),\n              'ether'\n            )\n          ).toFixed()\n        }\n      };\n    }\n  },\n  watch: {\n    customGas(newVal) {\n      if (newVal !== '') {\n        if (new BigNumber(newVal).gte(1)) {\n          const toGwei = new BigNumber(\n            utils.toWei(`${newVal}`, 'gwei')\n          ).toFixed();\n          this.customGasEth = new BigNumber(\n            `${utils.fromWei(toGwei, 'ether')}`\n          ).toFixed();\n        } else {\n          this.customGas = 1;\n        }\n      }\n    },\n    gasPrice() {\n      this.saveGasChanges();\n    }\n  },\n  mounted() {\n    if (this.online) {\n      this.getEthPrice();\n    }\n    this.exportConfig();\n    this.getGasType();\n  },\n  methods: {\n    setDataFromImportedFile() {\n      const reader = new FileReader();\n      const notifObj = {};\n      notifObj[this.address] = [];\n      reader.onloadend = evt => {\n        try {\n          const notifications = store.get('notifications') || notifObj;\n          const file = JSON.parse(evt.target.result);\n          const fNotifications = file.notifications || [];\n          fNotifications.forEach(objAddr => {\n            const addr = Object.keys(objAddr)[0];\n            notifications[addr] = objAddr[addr];\n          });\n          store.set('notifications', notifications);\n          store.set('skipTutorial', file.main.skipTutorial);\n          store.set('customTokens', file.main.customTokens);\n          store.set('customNetworks', file.main.customNetworks);\n          store.set('customDeriviationPaths', file.main.customDeriviationPaths);\n          store.set('gas', file.main.gas);\n\n          this.popup = true;\n\n          setTimeout(() => {\n            this.popup = false;\n          }, 1500);\n        } catch (e) {\n          Toast.responseHandler(\n            new Error(\n              'Something went wrong while importing file, please make sure it is a valid file'\n            ),\n            Toast.ERROR\n          );\n        }\n      };\n      reader.readAsBinaryString(this.importedFile);\n    },\n    receiveUploadedFile(e) {\n      const pathParts = e.target.value.split('\\\\');\n      this.inputFileName = pathParts[pathParts.length - 1];\n\n      this.importedFile = e.target.files[0];\n    },\n    getGasType() {\n      const type = store.get('gasPriceType');\n      const amt = store.get('gasPrice');\n      if (type) {\n        this.selectedGasType = type;\n      }\n\n      if (amt) {\n        if (this.gasPriceInputs[type] !== undefined) {\n          this.$store.dispatch(\n            'setGasPrice',\n            new BigNumber(this.gasPriceInputs[type].gwei).toNumber()\n          );\n        } else {\n          this.customGas = amt;\n          this.$store.dispatch('setGasPrice', new BigNumber(amt).toNumber());\n        }\n      }\n    },\n    uploadFile() {\n      const uploadInput = this.$refs.uploadInput;\n      uploadInput.value = '';\n      uploadInput.click();\n    },\n    saveGasChanges() {\n      if (this.gasPriceInputs[this.selectedGasType] !== undefined) {\n        this.$store.dispatch(\n          'setGasPrice',\n          new BigNumber(\n            this.gasPriceInputs[this.selectedGasType].gwei\n          ).toNumber()\n        );\n      } else {\n        this.$store.dispatch(\n          'setGasPrice',\n          new BigNumber(this.customGas).toNumber()\n        );\n      }\n      if (this.$refs.gasDropdown) {\n        this.$refs.gasDropdown.dropdownOpen = false;\n      }\n    },\n    selectGasType(type) {\n      store.set('gasPriceType', type);\n      this.selectedGasType = type;\n      if (type === 'other') {\n        this.$refs.customInput.focus();\n      }\n    },\n    exportConfig() {\n      const time = new Date().toISOString();\n      const notifications = [];\n      const storedNotifs = store.get('notifications') || {};\n      Object.keys(storedNotifs).forEach(item => {\n        if (storedNotifs[item].length > 0) {\n          const obj = {};\n          obj[item] = storedNotifs[item];\n          notifications.push(obj);\n        }\n      });\n      const gas = {};\n      if (this.gasPriceInputs[this.selectedGasType] !== undefined) {\n        gas['speed'] = this.selectedGasType;\n      } else {\n        gas['price'] = this.customGas;\n      }\n\n      const exportableObject = {\n        timestamp: time,\n        main: {\n          customNetworks:\n            store.get('customNetworks') !== undefined\n              ? store.get('customNetworks')\n              : [],\n          customTokens:\n            store.get('customTokens') !== undefined\n              ? store.get('customTokens')\n              : {},\n          customDeriviationPaths:\n            store.get('customDeriviationPaths') !== undefined\n              ? store.get('customDeriviationPaths')\n              : [],\n          gas: gas,\n          skipTutorial: true\n        },\n        notifications: notifications\n      };\n\n      this.fileName = `mew-export-${time}.json`;\n\n      const file = new Blob([JSON.stringify(exportableObject)], {\n        type: 'application/json'\n      });\n      this.file = window.URL.createObjectURL(file);\n    },\n    convert(price) {\n      const convertedPrice = new BigNumber(price * this.ethPrice).toFixed();\n      return this.$options.filters.concatAddr(convertedPrice);\n    },\n    async getEthPrice() {\n      const price = await fetch(\n        'https://cryptorates.mewapi.io/ticker?filter=ETH'\n      )\n        .then(res => {\n          return res.json();\n        })\n        .catch(e => {\n          Toast.responseHandler(e, Toast.ERROR);\n        });\n\n      this.ethPrice = price.data.ETH.quotes.USD.price;\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'SettingsModal.scss';\n</style>\n"],"sourceRoot":"src/components/SettingsModal"}]}