{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/thread-loader/dist/cjs.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/layouts/ExtensionBrowserAction/containers/ExtensionNotification/ExtensionNotification.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/layouts/ExtensionBrowserAction/containers/ExtensionNotification/ExtensionNotification.vue","mtime":1574664278294},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/thread-loader/dist/cjs.js","mtime":1574664277654},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js","mtime":1574664275010},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js","mtime":1574664277774}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.number.is-nan\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.array.find-index\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState } from 'vuex';\nimport unit from 'ethjs-unit';\nimport BigNumber from 'bignumber.js';\nimport { isAddress } from '@/helpers/addressUtils';\nimport { ExtensionHelpers } from '@/helpers';\nimport SwapNotification from \"./components/NotificationTypes/SwapNotification/SwapNotification\";\nimport TransactionNotification from \"./components/NotificationTypes/TransactionNotification/TransactionNotification\";\nimport TransactionDetails from \"./components/NotificationTypes/NotificationDetails\";\nimport SwapDetails from \"./components/NotificationTypes/SwapDetails\";\nimport store from 'store';\nimport { statusTypes, listComponentMapping, detailComponentMapping } from \"./components/config\";\nimport { INVESTIGATE_FAILURE_KEY, notificationStatuses, notificationType } from '@/helpers/notificationFormatters';\nimport { SwapProviders } from '@/partners';\nexport default {\n  components: {\n    'swap-notification': SwapNotification,\n    'transaction-notification': TransactionNotification,\n    'transaction-details': TransactionDetails,\n    'swap-details': SwapDetails\n  },\n  data: function data() {\n    return {\n      cancelHide: false,\n      shown: false,\n      unreadCount: 0,\n      ethPrice: new BigNumber(0),\n      detailsShown: false,\n      detailType: '',\n      notificationDetails: {},\n      checkLoop: function checkLoop() {}\n    };\n  },\n  computed: _objectSpread({}, mapState(['web3', 'network', 'notifications']), {\n    sortedNotifications: function sortedNotifications() {\n      var _this = this;\n\n      var notificationCopy = {};\n      Object.keys(this.notifications).forEach(function (addr) {\n        if (!_this.notifications[addr]) {\n          notificationCopy[addr] = [];\n        } else {\n          var newArr = [];\n          notificationCopy[addr] = _this.notifications[addr];\n          notificationCopy[addr].sort(function (a, b) {\n            a = a.timestamp;\n            b = b.timestamp;\n            return a > b ? -1 : a < b ? 1 : 0;\n          });\n          notificationCopy[addr].forEach(function (entry) {\n            if (entry.network === _this.network.type.name) {\n              newArr.push(entry);\n            }\n          });\n          notificationCopy[addr] = newArr;\n        }\n      });\n      return notificationCopy;\n    }\n  }),\n  watch: {\n    notifications: function notifications() {\n      this.countUnread();\n    }\n  },\n  created: function created() {\n    window.chrome.storage.onChanged.addListener(this.notificationsSetup);\n  },\n  mounted: function mounted() {\n    this.notificationsSetup();\n  },\n  destroyed: function destroyed() {\n    clearInterval(this.checkLoop);\n    window.chrome.storage.onChanged.removeListener(this.notificationsSetup);\n  },\n  methods: {\n    notificationsSetup: function notificationsSetup() {\n      var _this2 = this;\n\n      ExtensionHelpers.getAccounts(function (items) {\n        Object.keys(items).forEach(function (item) {\n          if (isAddress(item)) {\n            if (_this2.notifications[item] === undefined) {\n              _this2.notifications[item] = [];\n              store.set('notifications', _this2.notifications);\n            }\n          }\n        });\n      });\n      this.countUnread();\n      this.fetchBalanceData();\n      this.checkForUnResolvedTxNotifications();\n      this.checkLoop = setInterval(this.checkForUnResolvedTxNotifications, 14000);\n    },\n    hiddenModal: function hiddenModal() {\n      this.shown = false;\n      this.hideDetails();\n    },\n    checkForUnResolvedTxNotifications: function checkForUnResolvedTxNotifications() {\n      var _this3 = this;\n\n      ExtensionHelpers.getAccounts(function (accs) {\n        Object.keys(accs).forEach(function (item) {\n          if (isAddress(item)) {\n            if (!_this3.notifications[item]) return [];\n\n            var check = _this3.notifications[item].filter(function (entry) {\n              return entry.network === _this3.network.type.name;\n            }).filter(function (entry) {\n              var isUnResolved = entry.status === notificationStatuses.PENDING;\n              var notExternalSwap = entry.type === notificationType.TRANSACTION || entry.type === notificationType.SWAP && entry.body.hasOwnProperty('isDex') && entry.body.isDex === true;\n              var hasHash = entry.hash !== '' && entry.hash !== undefined;\n              return isUnResolved && hasHash && notExternalSwap;\n            });\n\n            check.forEach(function (entry) {\n              _this3.web3.eth.getTransactionReceipt(entry.hash).then(function (result) {\n                if (result === null) return;\n\n                var noticeIdx = _this3.notifications[item].findIndex(function (noticeEntry) {\n                  return entry.id === noticeEntry.id;\n                });\n\n                if (noticeIdx >= 0) {\n                  entry.status = result.status ? notificationStatuses.COMPLETE : notificationStatuses.FAILED;\n                  entry.body.error = !result.status;\n                  entry.body.errorMessage = result.status ? '' : INVESTIGATE_FAILURE_KEY;\n                  entry.body.gasUsed = new BigNumber(result.gasUsed).toString();\n                  entry.body.blockNumber = new BigNumber(result.blockNumber).toString();\n\n                  if (entry.body.isDex) {\n                    entry.swapStatus = result.status ? notificationStatuses.COMPLETE : notificationStatuses.FAILED;\n                    entry.body.timeRemaining = -1;\n                  }\n\n                  _this3.$store.dispatch('updateNotification', [item, noticeIdx, entry]);\n                }\n              });\n            });\n          }\n        });\n      });\n    },\n    showNotifications: function showNotifications() {\n      this.shown = true;\n      this.$refs.notification.show();\n    },\n    showDetails: function showDetails(details) {\n      this.cancelHide = true;\n      this.detailsShown = true;\n      this.detailType = details[0];\n      this.notificationDetails = details[1];\n\n      if (details.length === 3) {\n        this.notificationDetails.index = details[2];\n      }\n    },\n    hideDetails: function hideDetails() {\n      this.detailsShown = false;\n      this.notificationDetails = {};\n      this.detailType = '';\n    },\n    useComponent: function useComponent(type) {\n      if (listComponentMapping[type]) {\n        return listComponentMapping[type];\n      }\n\n      return 'transaction-notification';\n    },\n    useDetailComponent: function useDetailComponent(type) {\n      if (detailComponentMapping[type]) {\n        return detailComponentMapping[type];\n      }\n\n      return 'transaction-details';\n    },\n    countUnread: function countUnread() {\n      var _this4 = this;\n\n      this.unreadCount = 0;\n      var notifications = Object.keys(this.sortedNotifications);\n\n      if (notifications.length) {\n        notifications.forEach(function (item) {\n          if (_this4.sortedNotifications[item].length > 0) {\n            _this4.sortedNotifications[item].forEach(function (notif) {\n              if (notif.read === false) _this4.unreadCount++;\n            });\n          }\n        });\n      }\n    },\n    expand: function expand(idx, notif, address) {\n      var _this5 = this;\n\n      return function () {\n        var updatedNotif = notif;\n\n        if (notif.expanded !== true) {\n          updatedNotif.read = true;\n          updatedNotif.expanded = true;\n        } else {\n          updatedNotif.expanded = false;\n        }\n\n        _this5.$store.dispatch('updateNotification', [address, idx, updatedNotif]);\n      };\n    },\n    hasExpanded: function hasExpanded(address) {\n      var hasExpanded = this.notifications[address].find(function (notice) {\n        return notice.expanded === true;\n      }); // eslint-disable-next-line\n\n      return !!hasExpanded;\n    },\n    expandAll: function expandAll(address) {\n      var _this6 = this;\n\n      this.notifications[address].forEach(function (notice, idx) {\n        var updatedNotif = notice;\n\n        if (notice.expanded !== true) {\n          updatedNotif.read = true;\n          updatedNotif.expanded = true;\n        }\n\n        _this6.$store.dispatch('updateNotification', [address, idx, updatedNotif]);\n      });\n    },\n    collapseAll: function collapseAll(address) {\n      var _this7 = this;\n\n      this.notifications[address].forEach(function (notice, idx) {\n        var updatedNotif = notice;\n        updatedNotif.expanded = false;\n\n        _this7.$store.dispatch('updateNotification', [address, idx, updatedNotif]);\n      });\n    },\n    childUpdateNotification: function childUpdateNotification(idx) {\n      var _this8 = this;\n\n      if (typeof idx === 'undefined') return function () {};\n      return function (updatedNotif) {\n        _this8.$store.dispatch('updateNotification', [_this8.account.address, idx, updatedNotif]);\n      };\n    },\n    processStatus: function processStatus(rawStatus) {\n      if (statusTypes[rawStatus]) {\n        return statusTypes[rawStatus];\n      }\n\n      return statusTypes.statusError;\n    },\n    errorMessageString: function errorMessageString(notice) {\n      if (notice.body.errorMessage === INVESTIGATE_FAILURE_KEY) {\n        return this.$t('header.investigate');\n      }\n\n      return notice.body.errorMessage;\n    },\n    hashLink: function hashLink(hash, currency) {\n      if (currency && SwapProviders.isNotToken(currency)) {\n        return SwapProviders.getBlockChainExplorerUrl(currency, hash);\n      }\n\n      if (this.network.type.blockExplorerTX) {\n        return this.network.type.blockExplorerTX.replace('[[txHash]]', hash);\n      }\n    },\n    addressLink: function addressLink(addr, currency) {\n      if (currency && SwapProviders.isNotToken(currency)) {\n        return SwapProviders.getAddressLookupUrl(currency, addr);\n      }\n\n      if (this.network.type.blockExplorerAddr) {\n        return this.network.type.blockExplorerAddr.replace('[[address]]', addr);\n      }\n    },\n    dateString: function dateString(notice) {\n      if (notice !== {}) {\n        return new Date(notice.timestamp).toLocaleDateString(this._i18n.locale.replace('_', '-'));\n      }\n\n      return '';\n    },\n    timeString: function timeString(notice) {\n      if (notice !== {}) {\n        return new Date(notice.timestamp).toLocaleTimeString(this._i18n.locale.replace('_', '-'));\n      }\n\n      return '';\n    },\n    fetchBalanceData: function () {\n      var _fetchBalanceData = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var url, fetchValues, values;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                url = 'https://cryptorates.mewapi.io/ticker';\n                _context.next = 3;\n                return fetch(url);\n\n              case 3:\n                fetchValues = _context.sent;\n                _context.next = 6;\n                return fetchValues.json();\n\n              case 6:\n                values = _context.sent;\n\n                if (values) {\n                  _context.next = 9;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", 0);\n\n              case 9:\n                if (!(!values && !values.data && !values.data['ETH'])) {\n                  _context.next = 11;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", 0);\n\n              case 11:\n                this.ethPrice = new BigNumber(values.data['ETH'].quotes.USD.price);\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function fetchBalanceData() {\n        return _fetchBalanceData.apply(this, arguments);\n      }\n\n      return fetchBalanceData;\n    }(),\n    convertToGwei: function convertToGwei(value) {\n      if (this.notValidNumber(value)) return '';\n      return unit.fromWei(new BigNumber(value).toFixed(), 'Gwei');\n    },\n    convertToEth: function convertToEth(value) {\n      if (this.notValidNumber(value)) return '';\n      return unit.fromWei(new BigNumber(value).toFixed(), 'ether');\n    },\n    getFiatValue: function getFiatValue(value) {\n      if (this.notValidNumber(value)) return '';\n      if (this.ethPrice === 0) return '';\n      return new BigNumber(this.convertToEth(value)).multipliedBy(new BigNumber(this.ethPrice)).decimalPlaces(2).toFixed();\n    },\n    notValidNumber: function notValidNumber(value) {\n      return typeof value === 'undefined' || Number.isNaN(value) || value === 'NaN';\n    }\n  }\n};",{"version":3,"sources":["ExtensionNotification.vue"],"names":[],"mappings":"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","sourcesContent":["<template lang=\"html\">\n  <div class=\"notification-container\">\n    <div class=\"notification-logo\" @click=\"showNotifications\">\n      <img class=\"logo-large\" src=\"~@/assets/images/icons/notification.svg\" />\n      <div v-show=\"unreadCount > 0\" class=\"notification-dot\">\n        <div class=\"parent\">\n          <div class=\"heart\"></div>\n        </div>\n      </div>\n    </div>\n    <b-modal\n      ref=\"notification\"\n      hide-footer\n      centered\n      no-padding\n      class=\"bootstrap-modal-wide nopadding\"\n      static\n      lazy\n      @show=\"countUnread\"\n      @hide=\"hiddenModal\"\n    >\n      <template slot=\"modal-title\">\n        <div>\n          <div v-if=\"!detailsShown\" class=\"modal-title\">\n            {{ unreadCount > 1 ? 'Notifications' : 'Notification' }}\n            <div v-show=\"unreadCount >= 0\" class=\"notification-count\">\n              <span>{{ unreadCount }}</span>\n            </div>\n          </div>\n          <div v-else class=\"modal-title show-pointer\" @click=\"hideDetails\">\n            <i class=\"fa fa-long-arrow-left\" aria-hidden=\"true\" />\n            {{ $t('common.back') }}\n          </div>\n        </div>\n      </template>\n      <div v-if=\"!detailsShown\" class=\"notification-item-container\">\n        <ul\n          v-if=\"\n            sortedNotifications !== undefined &&\n              Object.keys(sortedNotifications).length > 0\n          \"\n        >\n          <li\n            v-for=\"(notification, address) in sortedNotifications\"\n            :key=\"address\"\n          >\n            <div class=\"address-header\">\n              {{ address }}\n              <div>\n                <i\n                  :class=\"['fa fa-2x', 'fa-angle-down']\"\n                  aria-hidden=\"true\"\n                  @click=\"expandAll(address)\"\n                />\n                <i\n                  :class=\"['fa fa-2x', 'fa-angle-up']\"\n                  aria-hidden=\"true\"\n                  @click=\"collapseAll(address)\"\n                />\n              </div>\n            </div>\n            <ul v-if=\"notification.length > 0\">\n              <li\n                v-for=\"(noti, idx) in notification\"\n                :key=\"noti.id + idx\"\n                class=\"notification-item\"\n              >\n                <keep-alive\n                  :max=\"10\"\n                  :exclude=\"['transaction-notification', 'transaction-error']\"\n                >\n                  <component\n                    :is=\"useComponent(noti.type)\"\n                    :expand=\"expand(idx, noti, address)\"\n                    :shown=\"shown\"\n                    :notice=\"noti\"\n                    :convert-to-gwei=\"convertToGwei\"\n                    :convert-to-eth=\"convertToEth\"\n                    :get-fiat-value=\"getFiatValue\"\n                    :date-string=\"dateString\"\n                    :time-string=\"timeString\"\n                    :hash-link=\"hashLink\"\n                    :address-link=\"addressLink\"\n                    :process-status=\"processStatus\"\n                    :error-message-string=\"errorMessageString\"\n                    :index=\"idx\"\n                    :child-update-notification=\"childUpdateNotification(idx)\"\n                    @showDetails=\"showDetails\"\n                  >\n                  </component>\n                </keep-alive>\n              </li>\n            </ul>\n            <div v-else class=\"notification-no-item\">\n              No notifications found :(\n            </div>\n          </li>\n        </ul>\n        <div v-else class=\"notification-no-item\">No notifications found :(</div>\n      </div>\n      <div v-if=\"detailsShown\" class=\"notification-item-container\">\n        <component\n          :is=\"useDetailComponent(detailType)\"\n          :shown=\"shown\"\n          :notice=\"notificationDetails\"\n          :convert-to-gwei=\"convertToGwei\"\n          :convert-to-eth=\"convertToEth\"\n          :get-fiat-value=\"getFiatValue\"\n          :date-string=\"dateString\"\n          :time-string=\"timeString\"\n          :hash-link=\"hashLink\"\n          :address-link=\"addressLink\"\n          :process-status=\"processStatus\"\n          :error-message-string=\"errorMessageString\"\n          :child-update-notification=\"\n            childUpdateNotification(notificationDetails.index)\n          \"\n        >\n        </component>\n      </div>\n    </b-modal>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport unit from 'ethjs-unit';\nimport BigNumber from 'bignumber.js';\nimport { isAddress } from '@/helpers/addressUtils';\nimport { ExtensionHelpers } from '@/helpers';\n\nimport SwapNotification from './components/NotificationTypes/SwapNotification/SwapNotification';\nimport TransactionNotification from './components/NotificationTypes/TransactionNotification/TransactionNotification';\nimport TransactionDetails from './components/NotificationTypes/NotificationDetails';\nimport SwapDetails from './components/NotificationTypes/SwapDetails';\nimport store from 'store';\nimport {\n  statusTypes,\n  listComponentMapping,\n  detailComponentMapping\n} from './components/config';\n\nimport {\n  INVESTIGATE_FAILURE_KEY,\n  notificationStatuses,\n  notificationType\n} from '@/helpers/notificationFormatters';\n\nimport { SwapProviders } from '@/partners';\n\nexport default {\n  components: {\n    'swap-notification': SwapNotification,\n    'transaction-notification': TransactionNotification,\n    'transaction-details': TransactionDetails,\n    'swap-details': SwapDetails\n  },\n  data() {\n    return {\n      cancelHide: false,\n      shown: false,\n      unreadCount: 0,\n      ethPrice: new BigNumber(0),\n      detailsShown: false,\n      detailType: '',\n      notificationDetails: {},\n      checkLoop: () => {}\n    };\n  },\n  computed: {\n    ...mapState(['web3', 'network', 'notifications']),\n    sortedNotifications() {\n      const notificationCopy = {};\n\n      Object.keys(this.notifications).forEach(addr => {\n        if (!this.notifications[addr]) {\n          notificationCopy[addr] = [];\n        } else {\n          const newArr = [];\n          notificationCopy[addr] = this.notifications[addr];\n          notificationCopy[addr].sort((a, b) => {\n            a = a.timestamp;\n            b = b.timestamp;\n            return a > b ? -1 : a < b ? 1 : 0;\n          });\n          notificationCopy[addr].forEach(entry => {\n            if (entry.network === this.network.type.name) {\n              newArr.push(entry);\n            }\n          });\n          notificationCopy[addr] = newArr;\n        }\n      });\n\n      return notificationCopy;\n    }\n  },\n  watch: {\n    notifications() {\n      this.countUnread();\n    }\n  },\n  created() {\n    window.chrome.storage.onChanged.addListener(this.notificationsSetup);\n  },\n  mounted() {\n    this.notificationsSetup();\n  },\n  destroyed() {\n    clearInterval(this.checkLoop);\n    window.chrome.storage.onChanged.removeListener(this.notificationsSetup);\n  },\n  methods: {\n    notificationsSetup() {\n      ExtensionHelpers.getAccounts(items => {\n        Object.keys(items).forEach(item => {\n          if (isAddress(item)) {\n            if (this.notifications[item] === undefined) {\n              this.notifications[item] = [];\n              store.set('notifications', this.notifications);\n            }\n          }\n        });\n      });\n\n      this.countUnread();\n      this.fetchBalanceData();\n      this.checkForUnResolvedTxNotifications();\n      this.checkLoop = setInterval(\n        this.checkForUnResolvedTxNotifications,\n        14000\n      );\n    },\n    hiddenModal() {\n      this.shown = false;\n      this.hideDetails();\n    },\n    checkForUnResolvedTxNotifications() {\n      ExtensionHelpers.getAccounts(accs => {\n        Object.keys(accs).forEach(item => {\n          if (isAddress(item)) {\n            if (!this.notifications[item]) return [];\n            const check = this.notifications[item]\n              .filter(entry => entry.network === this.network.type.name)\n              .filter(entry => {\n                const isUnResolved =\n                  entry.status === notificationStatuses.PENDING;\n                const notExternalSwap =\n                  entry.type === notificationType.TRANSACTION ||\n                  (entry.type === notificationType.SWAP &&\n                    entry.body.hasOwnProperty('isDex') &&\n                    entry.body.isDex === true);\n                const hasHash = entry.hash !== '' && entry.hash !== undefined;\n                return isUnResolved && hasHash && notExternalSwap;\n              });\n            check.forEach(entry => {\n              this.web3.eth.getTransactionReceipt(entry.hash).then(result => {\n                if (result === null) return;\n                const noticeIdx = this.notifications[item].findIndex(\n                  noticeEntry => entry.id === noticeEntry.id\n                );\n                if (noticeIdx >= 0) {\n                  entry.status = result.status\n                    ? notificationStatuses.COMPLETE\n                    : notificationStatuses.FAILED;\n                  entry.body.error = !result.status;\n                  entry.body.errorMessage = result.status\n                    ? ''\n                    : INVESTIGATE_FAILURE_KEY;\n                  entry.body.gasUsed = new BigNumber(result.gasUsed).toString();\n                  entry.body.blockNumber = new BigNumber(\n                    result.blockNumber\n                  ).toString();\n                  if (entry.body.isDex) {\n                    entry.swapStatus = result.status\n                      ? notificationStatuses.COMPLETE\n                      : notificationStatuses.FAILED;\n                    entry.body.timeRemaining = -1;\n                  }\n                  this.$store.dispatch('updateNotification', [\n                    item,\n                    noticeIdx,\n                    entry\n                  ]);\n                }\n              });\n            });\n          }\n        });\n      });\n    },\n    showNotifications() {\n      this.shown = true;\n      this.$refs.notification.show();\n    },\n    showDetails(details) {\n      this.cancelHide = true;\n      this.detailsShown = true;\n      this.detailType = details[0];\n      this.notificationDetails = details[1];\n      if (details.length === 3) {\n        this.notificationDetails.index = details[2];\n      }\n    },\n    hideDetails() {\n      this.detailsShown = false;\n      this.notificationDetails = {};\n      this.detailType = '';\n    },\n    useComponent(type) {\n      if (listComponentMapping[type]) {\n        return listComponentMapping[type];\n      }\n      return 'transaction-notification';\n    },\n    useDetailComponent(type) {\n      if (detailComponentMapping[type]) {\n        return detailComponentMapping[type];\n      }\n      return 'transaction-details';\n    },\n    countUnread() {\n      this.unreadCount = 0;\n      const notifications = Object.keys(this.sortedNotifications);\n      if (notifications.length) {\n        notifications.forEach(item => {\n          if (this.sortedNotifications[item].length > 0) {\n            this.sortedNotifications[item].forEach(notif => {\n              if (notif.read === false) this.unreadCount++;\n            });\n          }\n        });\n      }\n    },\n    expand(idx, notif, address) {\n      return () => {\n        const updatedNotif = notif;\n        if (notif.expanded !== true) {\n          updatedNotif.read = true;\n          updatedNotif.expanded = true;\n        } else {\n          updatedNotif.expanded = false;\n        }\n\n        this.$store.dispatch('updateNotification', [\n          address,\n          idx,\n          updatedNotif\n        ]);\n      };\n    },\n    hasExpanded(address) {\n      const hasExpanded = this.notifications[address].find(notice => {\n        return notice.expanded === true;\n      });\n\n      // eslint-disable-next-line\n      return !!hasExpanded;\n    },\n    expandAll(address) {\n      this.notifications[address].forEach((notice, idx) => {\n        const updatedNotif = notice;\n        if (notice.expanded !== true) {\n          updatedNotif.read = true;\n          updatedNotif.expanded = true;\n        }\n        this.$store.dispatch('updateNotification', [\n          address,\n          idx,\n          updatedNotif\n        ]);\n      });\n    },\n    collapseAll(address) {\n      this.notifications[address].forEach((notice, idx) => {\n        const updatedNotif = notice;\n        updatedNotif.expanded = false;\n        this.$store.dispatch('updateNotification', [\n          address,\n          idx,\n          updatedNotif\n        ]);\n      });\n    },\n    childUpdateNotification(idx) {\n      if (typeof idx === 'undefined') return () => {};\n      return updatedNotif => {\n        this.$store.dispatch('updateNotification', [\n          this.account.address,\n          idx,\n          updatedNotif\n        ]);\n      };\n    },\n    processStatus(rawStatus) {\n      if (statusTypes[rawStatus]) {\n        return statusTypes[rawStatus];\n      }\n      return statusTypes.statusError;\n    },\n    errorMessageString(notice) {\n      if (notice.body.errorMessage === INVESTIGATE_FAILURE_KEY) {\n        return this.$t('header.investigate');\n      }\n      return notice.body.errorMessage;\n    },\n    hashLink(hash, currency) {\n      if (currency && SwapProviders.isNotToken(currency)) {\n        return SwapProviders.getBlockChainExplorerUrl(currency, hash);\n      }\n      if (this.network.type.blockExplorerTX) {\n        return this.network.type.blockExplorerTX.replace('[[txHash]]', hash);\n      }\n    },\n    addressLink(addr, currency) {\n      if (currency && SwapProviders.isNotToken(currency)) {\n        return SwapProviders.getAddressLookupUrl(currency, addr);\n      }\n      if (this.network.type.blockExplorerAddr) {\n        return this.network.type.blockExplorerAddr.replace('[[address]]', addr);\n      }\n    },\n    dateString(notice) {\n      if (notice !== {}) {\n        return new Date(notice.timestamp).toLocaleDateString(\n          this._i18n.locale.replace('_', '-')\n        );\n      }\n      return '';\n    },\n    timeString(notice) {\n      if (notice !== {}) {\n        return new Date(notice.timestamp).toLocaleTimeString(\n          this._i18n.locale.replace('_', '-')\n        );\n      }\n      return '';\n    },\n    async fetchBalanceData() {\n      const url = 'https://cryptorates.mewapi.io/ticker';\n      const fetchValues = await fetch(url);\n      const values = await fetchValues.json();\n      if (!values) return 0;\n      if (!values && !values.data && !values.data['ETH']) return 0;\n      this.ethPrice = new BigNumber(values.data['ETH'].quotes.USD.price);\n    },\n    convertToGwei(value) {\n      if (this.notValidNumber(value)) return '';\n      return unit.fromWei(new BigNumber(value).toFixed(), 'Gwei');\n    },\n    convertToEth(value) {\n      if (this.notValidNumber(value)) return '';\n      return unit.fromWei(new BigNumber(value).toFixed(), 'ether');\n    },\n    getFiatValue(value) {\n      if (this.notValidNumber(value)) return '';\n      if (this.ethPrice === 0) return '';\n      return new BigNumber(this.convertToEth(value))\n        .multipliedBy(new BigNumber(this.ethPrice))\n        .decimalPlaces(2)\n        .toFixed();\n    },\n    notValidNumber(value) {\n      return (\n        typeof value === 'undefined' || Number.isNaN(value) || value === 'NaN'\n      );\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import './ExtensionNotification.scss';\n</style>\n"],"sourceRoot":"src/layouts/ExtensionBrowserAction/containers/ExtensionNotification"}]}