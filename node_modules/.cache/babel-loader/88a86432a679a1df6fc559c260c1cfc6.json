{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/thread-loader/dist/cjs.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/eslint-loader/index.js??ref--13-0!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/dapps/ManageENS/supportedCoins.js","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/dapps/ManageENS/supportedCoins.js","mtime":1573477611660},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport _classCallCheck from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport { formatsByName } from '@ensdomains/address-encoder';\nimport MultiCoinValidator from 'multicoin-address-validator';\nimport { isValidChecksumAddress as isValidRSKChecksumAddress, toChecksumAddress as toRSKChecksumAddress } from 'rskjs-util';\nimport { RSK } from '@/networks/types';\n\nvar MValidator =\n/*#__PURE__*/\nfunction () {\n  function MValidator(type) {\n    _classCallCheck(this, MValidator);\n\n    this.type = type;\n  }\n\n  _createClass(MValidator, [{\n    key: \"validate\",\n    value: function validate(address) {\n      return MultiCoinValidator.validate(address, this.type);\n    }\n  }]);\n\n  return MValidator;\n}();\n\nvar RSKUtils =\n/*#__PURE__*/\nfunction () {\n  function RSKUtils(chainID) {\n    _classCallCheck(this, RSKUtils);\n\n    this.chainID = chainID;\n  }\n\n  _createClass(RSKUtils, [{\n    key: \"validate\",\n    value: function validate(address) {\n      return /^0x[0-9a-f]{40}$/.test(address) || isValidRSKChecksumAddress(address, this.chainID);\n    }\n  }, {\n    key: \"toChecksumAddress\",\n    value: function toChecksumAddress(address) {\n      return toRSKChecksumAddress('0x' + address.toString('hex'), this.chainID);\n    }\n  }]);\n\n  return RSKUtils;\n}();\n\nvar rskUtils = new RSKUtils(RSK.chainID);\nexport default {\n  ETH: {\n    id: 60,\n    symbol: 'ETH',\n    name: 'Ethereum',\n    validator: new MValidator('Ethereum'),\n    encode: formatsByName['ETH'].encoder,\n    decode: formatsByName['ETH'].decoder\n  },\n  ETC: {\n    id: 61,\n    symbol: 'ETC',\n    name: 'Ethereum Classic',\n    validator: new MValidator('EthereumClassic'),\n    encode: formatsByName['ETC'].encoder,\n    decode: formatsByName['ETC'].decoder\n  },\n  LTC: {\n    id: 2,\n    symbol: 'LTC',\n    name: 'Litecoin',\n    validator: new MValidator('LiteCoin'),\n    encode: formatsByName['LTC'].encoder,\n    decode: formatsByName['LTC'].decoder\n  },\n  BTC: {\n    id: 0,\n    symbol: 'BTC',\n    name: 'Bitcoin',\n    validator: new MValidator('Bitcoin'),\n    encode: formatsByName['BTC'].encoder,\n    decode: formatsByName['BTC'].decoder\n  },\n  DOGE: {\n    id: 3,\n    symbol: 'DOGE',\n    name: 'DogeCoin',\n    validator: new MValidator('DogeCoin'),\n    encode: formatsByName['DOGE'].encoder,\n    decode: formatsByName['DOGE'].decoder\n  },\n  MONA: {\n    id: 22,\n    symbol: 'MONA',\n    name: 'MonaCoin',\n    validator: new MValidator('MonaCoin'),\n    encode: formatsByName['MONA'].encoder,\n    decode: formatsByName['MONA'].decoder\n  },\n  RSK: {\n    id: 137,\n    symbol: 'RSK',\n    name: 'RootStock',\n    validator: rskUtils,\n    encode: rskUtils.toChecksumAddress.bind(rskUtils),\n    decode: formatsByName['RSK'].decoder\n  },\n  XRP: {\n    id: 144,\n    symbol: 'XRP',\n    name: 'Ripple',\n    validator: new MValidator('Ripple'),\n    encode: formatsByName['XRP'].encoder,\n    decode: formatsByName['XRP'].decoder\n  },\n  BCH: {\n    id: 145,\n    symbol: 'BCH',\n    name: 'BitcoinCash',\n    validator: new MValidator('BitcoinCash'),\n    encode: formatsByName['BCH'].encoder,\n    decode: formatsByName['BCH'].decoder\n  }\n};",{"version":3,"sources":["/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/dapps/ManageENS/supportedCoins.js"],"names":["formatsByName","MultiCoinValidator","isValidChecksumAddress","isValidRSKChecksumAddress","toChecksumAddress","toRSKChecksumAddress","RSK","MValidator","type","address","validate","RSKUtils","chainID","test","toString","rskUtils","ETH","id","symbol","name","validator","encode","encoder","decode","decoder","ETC","LTC","BTC","DOGE","MONA","bind","XRP","BCH"],"mappings":"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","sourcesContent":["import { formatsByName } from '@ensdomains/address-encoder';\nimport MultiCoinValidator from 'multicoin-address-validator';\nimport {\n  isValidChecksumAddress as isValidRSKChecksumAddress,\n  toChecksumAddress as toRSKChecksumAddress\n} from 'rskjs-util';\nimport { RSK } from '@/networks/types';\n\nclass MValidator {\n  constructor(type) {\n    this.type = type;\n  }\n  validate(address) {\n    return MultiCoinValidator.validate(address, this.type);\n  }\n}\nclass RSKUtils {\n  constructor(chainID) {\n    this.chainID = chainID;\n  }\n  validate(address) {\n    return (\n      /^0x[0-9a-f]{40}$/.test(address) ||\n      isValidRSKChecksumAddress(address, this.chainID)\n    );\n  }\n  toChecksumAddress(address) {\n    return toRSKChecksumAddress('0x' + address.toString('hex'), this.chainID);\n  }\n}\nconst rskUtils = new RSKUtils(RSK.chainID);\nexport default {\n  ETH: {\n    id: 60,\n    symbol: 'ETH',\n    name: 'Ethereum',\n    validator: new MValidator('Ethereum'),\n    encode: formatsByName['ETH'].encoder,\n    decode: formatsByName['ETH'].decoder\n  },\n  ETC: {\n    id: 61,\n    symbol: 'ETC',\n    name: 'Ethereum Classic',\n    validator: new MValidator('EthereumClassic'),\n    encode: formatsByName['ETC'].encoder,\n    decode: formatsByName['ETC'].decoder\n  },\n  LTC: {\n    id: 2,\n    symbol: 'LTC',\n    name: 'Litecoin',\n    validator: new MValidator('LiteCoin'),\n    encode: formatsByName['LTC'].encoder,\n    decode: formatsByName['LTC'].decoder\n  },\n  BTC: {\n    id: 0,\n    symbol: 'BTC',\n    name: 'Bitcoin',\n    validator: new MValidator('Bitcoin'),\n    encode: formatsByName['BTC'].encoder,\n    decode: formatsByName['BTC'].decoder\n  },\n  DOGE: {\n    id: 3,\n    symbol: 'DOGE',\n    name: 'DogeCoin',\n    validator: new MValidator('DogeCoin'),\n    encode: formatsByName['DOGE'].encoder,\n    decode: formatsByName['DOGE'].decoder\n  },\n  MONA: {\n    id: 22,\n    symbol: 'MONA',\n    name: 'MonaCoin',\n    validator: new MValidator('MonaCoin'),\n    encode: formatsByName['MONA'].encoder,\n    decode: formatsByName['MONA'].decoder\n  },\n  RSK: {\n    id: 137,\n    symbol: 'RSK',\n    name: 'RootStock',\n    validator: rskUtils,\n    encode: rskUtils.toChecksumAddress.bind(rskUtils),\n    decode: formatsByName['RSK'].decoder\n  },\n  XRP: {\n    id: 144,\n    symbol: 'XRP',\n    name: 'Ripple',\n    validator: new MValidator('Ripple'),\n    encode: formatsByName['XRP'].encoder,\n    decode: formatsByName['XRP'].decoder\n  },\n  BCH: {\n    id: 145,\n    symbol: 'BCH',\n    name: 'BitcoinCash',\n    validator: new MValidator('BitcoinCash'),\n    encode: formatsByName['BCH'].encoder,\n    decode: formatsByName['BCH'].decoder\n  }\n};\n"]}]}