{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/eslint-loader/index.js??ref--13-0!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/helpers/notificationFormatters/formatters.js","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/helpers/notificationFormatters/formatters.js","mtime":1574664278286},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js","mtime":1574664275010},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/eslint-loader/index.js","mtime":1574664275986}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.regexp.constructor\";\nimport \"core-js/modules/es6.regexp.to-string\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport BigNumber from 'bignumber.js';\nimport uuid from 'uuid/v4';\nimport { INVESTIGATE_FAILURE_KEY, type, notificationStatuses, notificationType, swapOnlyStatuses, swapIndexes, txIndexes } from \"./config\";\n/*\nERROR EXAMPLES:\n\nReturned error: known transaction: 4e6c0d9a75b6c826ad7ed3a657a6c3bf2621620bf8879b9a83597865acef2a5b\nReturned error: nonce too low\n\n */\n\nvar extractErrorMessage = function extractErrorMessage(errObj) {\n  try {\n    if (errObj.hasOwnProperty('message')) {\n      var errorMessage = errObj.message.toString();\n      var regex1 = RegExp('(?<=:).*');\n      var regEx1Matches = regex1.exec(errorMessage);\n\n      if (regEx1Matches !== null) {\n        return regEx1Matches[0];\n      }\n\n      return errorMessage;\n    }\n\n    return errObj;\n  } catch (e) {\n    return errObj;\n  }\n};\n\nvar parseStatus = function parseStatus(status) {\n  if (typeof status === 'boolean') {\n    return status;\n  } else if (typeof status === 'string') {\n    if (status.slice(0, 2) === '0x') {\n      return new BigNumber(status).gt(0);\n    }\n\n    return status.toLowerCase() === 'true';\n  } // the transaction receipt status is sometimes returning false even if the transaction was successful.\n  // Need to investigate why and where this is happening.\n\n\n  return true;\n};\n\nvar updateStatusBasedOnReciept = function updateStatusBasedOnReciept(status) {\n  return parseStatus(status) ? notificationStatuses.COMPLETE : notificationStatuses.FAILED;\n};\n\nvar formatTransactionHash = function formatTransactionHash(val, network) {\n  return {\n    id: uuid(),\n    title: 'Transaction',\n    read: false,\n    timestamp: Date.now(),\n    type: notificationType.TRANSACTION,\n    status: val[txIndexes.response] ? notificationStatuses.PENDING : notificationStatuses.FAILED,\n    hash: val[txIndexes.response].hasOwnProperty('transactionHash') ? val[txIndexes.response].transactionHash : val[txIndexes.response],\n    network: network,\n    body: {\n      error: false,\n      errorMessage: '',\n      hash: val[txIndexes.response],\n      to: val[txIndexes.txDetails].to,\n      amount: new BigNumber(val[txIndexes.txDetails].value).toString(),\n      nonce: new BigNumber(val[txIndexes.txDetails].nonce).toString(),\n      gasPrice: new BigNumber(val[txIndexes.txDetails].gasPrice).toString(),\n      gasLimit: new BigNumber(val[txIndexes.txDetails].gas).toString(),\n      tokenTransferTo: val[txIndexes.txDetails].tokenTransferTo,\n      tokenTransferVal: val[txIndexes.txDetails].tokenTransferVal,\n      tokenSymbol: val[txIndexes.txDetails].tokenSymbol\n    },\n    expanded: false\n  };\n};\n\nvar formatTransactionReciept = function formatTransactionReciept(entry, val) {\n  entry.status = updateStatusBasedOnReciept(val[txIndexes.response].status);\n  entry.body.error = !val[txIndexes.response].status;\n  entry.body.errorMessage = parseStatus(val[txIndexes.response].status) ? '' : INVESTIGATE_FAILURE_KEY;\n  entry.body.gasUsed = new BigNumber(val[txIndexes.response].gasUsed).toString();\n\n  if (val[txIndexes.response].contractAddress) {\n    entry.body.contractAddress = val[txIndexes.response].contractAddress;\n    entry.type = notificationType.CONTRACT_CREATION;\n  }\n\n  entry.body.blockNumber = new BigNumber(val[txIndexes.response].blockNumber).toString();\n\n  if (entry.body.isDex) {\n    entry.swapStatus = val[txIndexes.response].status ? notificationStatuses.COMPLETE : notificationStatuses.FAILED;\n    entry.body.timeRemaining = -1;\n  }\n\n  return entry;\n};\n\nvar formatTransactionError = function formatTransactionError(val, network) {\n  return {\n    id: uuid(),\n    title: 'Transaction',\n    read: false,\n    timestamp: Date.now(),\n    type: notificationType.ERROR,\n    status: notificationStatuses.FAILED,\n    swapStatus: notificationStatuses.FAILED,\n    hash: val[txIndexes.txDetails].hasOwnProperty('hash') ? val[txIndexes.txDetails].hash : undefined,\n    network: network,\n    body: {\n      error: true,\n      errorMessage: extractErrorMessage(val[txIndexes.response]),\n      hash: val[txIndexes.txDetails].hasOwnProperty('hash') ? val[txIndexes.txDetails].hash : undefined,\n      to: val[txIndexes.txDetails].to,\n      amount: new BigNumber(val[txIndexes.txDetails].value).toString(),\n      nonce: new BigNumber(val[txIndexes.txDetails].nonce).toString(),\n      gasPrice: new BigNumber(val[txIndexes.txDetails].gasPrice).toString(),\n      gasLimit: new BigNumber(val[txIndexes.txDetails].gas).toString()\n    },\n    expanded: false\n  };\n};\n\nvar formatTransactionErrorUpdate = function formatTransactionErrorUpdate(entry, val) {\n  entry.body.error = true;\n  entry.type = notificationType.ERROR;\n  entry.status = notificationStatuses.FAILED;\n  entry.swapStatus = notificationStatuses.FAILED;\n  entry.body.errorMessage = val[txIndexes.response].hasOwnProperty('message') ? val[txIndexes.response].message : val[txIndexes.response];\n  return entry;\n};\n\nvar formatSwap = function formatSwap(val, network) {\n  var isEthereum = val[swapIndexes.label] !== type.SWAP_ORDER;\n  var initialState = isEthereum ? swapOnlyStatuses.SENT : swapOnlyStatuses.NEW;\n  var formatted = {\n    id: uuid(),\n    title: 'Swap',\n    read: false,\n    timestamp: Date.now(),\n    type: notificationType.SWAP,\n    status: isEthereum ? val[swapIndexes.response] ? notificationStatuses.PENDING : notificationStatuses.FAILED : notificationStatuses.PENDING,\n    swapStatus: isEthereum ? val[swapIndexes.response] ? initialState : notificationStatuses.FAILED : initialState,\n    hasTransaction: isEthereum && val[swapIndexes.response],\n    hash: isEthereum ? val[swapIndexes.response] : undefined,\n    network: network,\n    body: {\n      error: false,\n      errorMessage: '',\n      providerAddress: val[swapIndexes.details].providerAddress,\n      to: val[swapIndexes.details].toAddress,\n      from: val[swapIndexes.details].fromAddress,\n      fromValue: val[swapIndexes.details].fromValue,\n      toValue: val[swapIndexes.details].toValue,\n      fromCurrency: val[swapIndexes.details].fromCurrency,\n      toCurrency: val[swapIndexes.details].toCurrency,\n      orderId: val[swapIndexes.details].parsed.orderId,\n      statusId: val[swapIndexes.details].parsed.statusId,\n      timeRemaining: val[swapIndexes.details].parsed.validFor,\n      validFor: val[swapIndexes.details].parsed.validFor,\n      createdAt: val[swapIndexes.details].parsed.timestamp,\n      rate: val[swapIndexes.details].rate,\n      provider: val[swapIndexes.details].provider,\n      special: val[swapIndexes.details].special,\n      isDex: val[swapIndexes.details].isDex\n    },\n    expanded: false\n  };\n\n  if (isEthereum) {\n    formatted.body = _objectSpread({}, formatted.body, {\n      amount: new BigNumber(val[swapIndexes.txDetails].value).toString(),\n      nonce: new BigNumber(val[swapIndexes.txDetails].nonce).toString(),\n      gasPrice: new BigNumber(val[swapIndexes.txDetails].gasPrice).toString(),\n      gasLimit: new BigNumber(val[swapIndexes.txDetails].gas).toString()\n    });\n  }\n\n  return formatted;\n};\n\nvar formatSwapReciept =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee(entry, val) {\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (entry.body.isDex) {\n              entry.swapStatus = val[swapIndexes.response].status ? notificationStatuses.COMPLETE : notificationStatuses.FAILED;\n              entry.body.timeRemaining = -1;\n            }\n\n            return _context.abrupt(\"return\", entry);\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function formatSwapReciept(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar formatSwapErrorUpdate = function formatSwapErrorUpdate(entry, val) {\n  entry.type = notificationType.SWAP_ERROR;\n  entry.body.error = true;\n  entry.status = notificationStatuses.FAILED;\n  entry.swapStatus = notificationStatuses.FAILED;\n  entry.body.errorMessage = val[swapIndexes.response].hasOwnProperty('message') ? val[swapIndexes.response].message : val[swapIndexes.response];\n  entry.body.blockNumber = new BigNumber(val[swapIndexes.response].blockNumber).toString();\n  return entry;\n};\n\nvar formatSwapError = function formatSwapError(val, network) {\n  return {\n    id: uuid(),\n    title: 'Swap',\n    read: false,\n    timestamp: Date.now(),\n    type: notificationType.SWAP_ERROR,\n    status: notificationStatuses.FAILED,\n    swapStatus: notificationStatuses.FAILED,\n    hasTransaction: true,\n    hash: undefined,\n    network: network,\n    body: {\n      error: true,\n      errorMessage: val[swapIndexes.response].hasOwnProperty('message') ? val[swapIndexes.response].message : val[swapIndexes.response],\n      hash: undefined,\n      amount: new BigNumber(val[swapIndexes.txDetails].value).toString(),\n      nonce: new BigNumber(val[swapIndexes.txDetails].nonce).toString(),\n      gasPrice: new BigNumber(val[swapIndexes.txDetails].gasPrice).toString(),\n      gasLimit: new BigNumber(val[swapIndexes.txDetails].gas).toString(),\n      to: val[swapIndexes.details].toAddress,\n      from: val[swapIndexes.details].fromAddress,\n      fromValue: val[swapIndexes.details].fromValue,\n      toValue: val[swapIndexes.details].toValue,\n      fromCurrency: val[swapIndexes.details].fromCurrency,\n      toCurrency: val[swapIndexes.details].toCurrency,\n      orderId: val[swapIndexes.details].parsed.orderId,\n      statusId: val[swapIndexes.details].parsed.statusId,\n      timeRemaining: val[swapIndexes.details].parsed.validFor,\n      validFor: val[swapIndexes.details].parsed.validFor,\n      createdAt: val[swapIndexes.details].parsed.timestamp,\n      rate: val[swapIndexes.details].rate,\n      provider: val[swapIndexes.details].provider,\n      special: val[swapIndexes.details].special,\n      isDex: val[swapIndexes.details].isDex\n    },\n    expanded: false\n  };\n};\n\nexport { formatTransactionHash, formatTransactionReciept, formatTransactionError, formatTransactionErrorUpdate, formatSwap, formatSwapReciept, formatSwapError, formatSwapErrorUpdate };",{"version":3,"sources":["/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/helpers/notificationFormatters/formatters.js"],"names":["BigNumber","uuid","INVESTIGATE_FAILURE_KEY","type","notificationStatuses","notificationType","swapOnlyStatuses","swapIndexes","txIndexes","extractErrorMessage","errObj","hasOwnProperty","errorMessage","message","toString","regex1","RegExp","regEx1Matches","exec","e","parseStatus","status","slice","gt","toLowerCase","updateStatusBasedOnReciept","COMPLETE","FAILED","formatTransactionHash","val","network","id","title","read","timestamp","Date","now","TRANSACTION","response","PENDING","hash","transactionHash","body","error","to","txDetails","amount","value","nonce","gasPrice","gasLimit","gas","tokenTransferTo","tokenTransferVal","tokenSymbol","expanded","formatTransactionReciept","entry","gasUsed","contractAddress","CONTRACT_CREATION","blockNumber","isDex","swapStatus","timeRemaining","formatTransactionError","ERROR","undefined","formatTransactionErrorUpdate","formatSwap","isEthereum","label","SWAP_ORDER","initialState","SENT","NEW","formatted","SWAP","hasTransaction","providerAddress","details","toAddress","from","fromAddress","fromValue","toValue","fromCurrency","toCurrency","orderId","parsed","statusId","validFor","createdAt","rate","provider","special","formatSwapReciept","formatSwapErrorUpdate","SWAP_ERROR","formatSwapError"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js';\nimport uuid from 'uuid/v4';\n\nimport {\n  INVESTIGATE_FAILURE_KEY,\n  type,\n  notificationStatuses,\n  notificationType,\n  swapOnlyStatuses,\n  swapIndexes,\n  txIndexes\n} from './config';\n\n/*\nERROR EXAMPLES:\n\nReturned error: known transaction: 4e6c0d9a75b6c826ad7ed3a657a6c3bf2621620bf8879b9a83597865acef2a5b\nReturned error: nonce too low\n\n */\n\nconst extractErrorMessage = errObj => {\n  try {\n    if (errObj.hasOwnProperty('message')) {\n      const errorMessage = errObj.message.toString();\n      const regex1 = RegExp('(?<=:).*');\n      const regEx1Matches = regex1.exec(errorMessage);\n      if (regEx1Matches !== null) {\n        return regEx1Matches[0];\n      }\n      return errorMessage;\n    }\n    return errObj;\n  } catch (e) {\n    return errObj;\n  }\n};\n\nconst parseStatus = status => {\n  if (typeof status === 'boolean') {\n    return status;\n  } else if (typeof status === 'string') {\n    if (status.slice(0, 2) === '0x') {\n      return new BigNumber(status).gt(0);\n    }\n    return status.toLowerCase() === 'true';\n  }\n  // the transaction receipt status is sometimes returning false even if the transaction was successful.\n  // Need to investigate why and where this is happening.\n  return true;\n};\n\nconst updateStatusBasedOnReciept = status => {\n  return parseStatus(status)\n    ? notificationStatuses.COMPLETE\n    : notificationStatuses.FAILED;\n};\n\nconst formatTransactionHash = (val, network) => {\n  return {\n    id: uuid(),\n    title: 'Transaction',\n    read: false,\n    timestamp: Date.now(),\n    type: notificationType.TRANSACTION,\n    status: val[txIndexes.response]\n      ? notificationStatuses.PENDING\n      : notificationStatuses.FAILED,\n    hash: val[txIndexes.response].hasOwnProperty('transactionHash')\n      ? val[txIndexes.response].transactionHash\n      : val[txIndexes.response],\n    network: network,\n    body: {\n      error: false,\n      errorMessage: '',\n      hash: val[txIndexes.response],\n      to: val[txIndexes.txDetails].to,\n      amount: new BigNumber(val[txIndexes.txDetails].value).toString(),\n      nonce: new BigNumber(val[txIndexes.txDetails].nonce).toString(),\n      gasPrice: new BigNumber(val[txIndexes.txDetails].gasPrice).toString(),\n      gasLimit: new BigNumber(val[txIndexes.txDetails].gas).toString(),\n      tokenTransferTo: val[txIndexes.txDetails].tokenTransferTo,\n      tokenTransferVal: val[txIndexes.txDetails].tokenTransferVal,\n      tokenSymbol: val[txIndexes.txDetails].tokenSymbol\n    },\n    expanded: false\n  };\n};\n\nconst formatTransactionReciept = (entry, val) => {\n  entry.status = updateStatusBasedOnReciept(val[txIndexes.response].status);\n  entry.body.error = !val[txIndexes.response].status;\n  entry.body.errorMessage = parseStatus(val[txIndexes.response].status)\n    ? ''\n    : INVESTIGATE_FAILURE_KEY;\n  entry.body.gasUsed = new BigNumber(\n    val[txIndexes.response].gasUsed\n  ).toString();\n  if (val[txIndexes.response].contractAddress) {\n    entry.body.contractAddress = val[txIndexes.response].contractAddress;\n    entry.type = notificationType.CONTRACT_CREATION;\n  }\n  entry.body.blockNumber = new BigNumber(\n    val[txIndexes.response].blockNumber\n  ).toString();\n\n  if (entry.body.isDex) {\n    entry.swapStatus = val[txIndexes.response].status\n      ? notificationStatuses.COMPLETE\n      : notificationStatuses.FAILED;\n    entry.body.timeRemaining = -1;\n  }\n\n  return entry;\n};\n\nconst formatTransactionError = (val, network) => {\n  return {\n    id: uuid(),\n    title: 'Transaction',\n    read: false,\n    timestamp: Date.now(),\n    type: notificationType.ERROR,\n    status: notificationStatuses.FAILED,\n    swapStatus: notificationStatuses.FAILED,\n    hash: val[txIndexes.txDetails].hasOwnProperty('hash')\n      ? val[txIndexes.txDetails].hash\n      : undefined,\n    network: network,\n    body: {\n      error: true,\n      errorMessage: extractErrorMessage(val[txIndexes.response]),\n      hash: val[txIndexes.txDetails].hasOwnProperty('hash')\n        ? val[txIndexes.txDetails].hash\n        : undefined,\n      to: val[txIndexes.txDetails].to,\n      amount: new BigNumber(val[txIndexes.txDetails].value).toString(),\n      nonce: new BigNumber(val[txIndexes.txDetails].nonce).toString(),\n      gasPrice: new BigNumber(val[txIndexes.txDetails].gasPrice).toString(),\n      gasLimit: new BigNumber(val[txIndexes.txDetails].gas).toString()\n    },\n    expanded: false\n  };\n};\n\nconst formatTransactionErrorUpdate = (entry, val) => {\n  entry.body.error = true;\n  entry.type = notificationType.ERROR;\n  entry.status = notificationStatuses.FAILED;\n  entry.swapStatus = notificationStatuses.FAILED;\n  entry.body.errorMessage = val[txIndexes.response].hasOwnProperty('message')\n    ? val[txIndexes.response].message\n    : val[txIndexes.response];\n\n  return entry;\n};\n\nconst formatSwap = (val, network) => {\n  const isEthereum = val[swapIndexes.label] !== type.SWAP_ORDER;\n  const initialState = isEthereum\n    ? swapOnlyStatuses.SENT\n    : swapOnlyStatuses.NEW;\n\n  const formatted = {\n    id: uuid(),\n    title: 'Swap',\n    read: false,\n    timestamp: Date.now(),\n    type: notificationType.SWAP,\n    status: isEthereum\n      ? val[swapIndexes.response]\n        ? notificationStatuses.PENDING\n        : notificationStatuses.FAILED\n      : notificationStatuses.PENDING,\n    swapStatus: isEthereum\n      ? val[swapIndexes.response]\n        ? initialState\n        : notificationStatuses.FAILED\n      : initialState,\n    hasTransaction: isEthereum && val[swapIndexes.response],\n    hash: isEthereum ? val[swapIndexes.response] : undefined,\n    network: network,\n    body: {\n      error: false,\n      errorMessage: '',\n      providerAddress: val[swapIndexes.details].providerAddress,\n      to: val[swapIndexes.details].toAddress,\n      from: val[swapIndexes.details].fromAddress,\n      fromValue: val[swapIndexes.details].fromValue,\n      toValue: val[swapIndexes.details].toValue,\n      fromCurrency: val[swapIndexes.details].fromCurrency,\n      toCurrency: val[swapIndexes.details].toCurrency,\n      orderId: val[swapIndexes.details].parsed.orderId,\n      statusId: val[swapIndexes.details].parsed.statusId,\n      timeRemaining: val[swapIndexes.details].parsed.validFor,\n      validFor: val[swapIndexes.details].parsed.validFor,\n      createdAt: val[swapIndexes.details].parsed.timestamp,\n      rate: val[swapIndexes.details].rate,\n      provider: val[swapIndexes.details].provider,\n      special: val[swapIndexes.details].special,\n      isDex: val[swapIndexes.details].isDex\n    },\n    expanded: false\n  };\n\n  if (isEthereum) {\n    formatted.body = {\n      ...formatted.body,\n      amount: new BigNumber(val[swapIndexes.txDetails].value).toString(),\n      nonce: new BigNumber(val[swapIndexes.txDetails].nonce).toString(),\n      gasPrice: new BigNumber(val[swapIndexes.txDetails].gasPrice).toString(),\n      gasLimit: new BigNumber(val[swapIndexes.txDetails].gas).toString()\n    };\n  }\n\n  return formatted;\n};\n\nconst formatSwapReciept = async (entry, val) => {\n  if (entry.body.isDex) {\n    entry.swapStatus = val[swapIndexes.response].status\n      ? notificationStatuses.COMPLETE\n      : notificationStatuses.FAILED;\n    entry.body.timeRemaining = -1;\n  }\n  return entry;\n};\n\nconst formatSwapErrorUpdate = (entry, val) => {\n  entry.type = notificationType.SWAP_ERROR;\n  entry.body.error = true;\n  entry.status = notificationStatuses.FAILED;\n  entry.swapStatus = notificationStatuses.FAILED;\n  entry.body.errorMessage = val[swapIndexes.response].hasOwnProperty('message')\n    ? val[swapIndexes.response].message\n    : val[swapIndexes.response];\n  entry.body.blockNumber = new BigNumber(\n    val[swapIndexes.response].blockNumber\n  ).toString();\n  return entry;\n};\n\nconst formatSwapError = (val, network) => {\n  return {\n    id: uuid(),\n    title: 'Swap',\n    read: false,\n    timestamp: Date.now(),\n    type: notificationType.SWAP_ERROR,\n    status: notificationStatuses.FAILED,\n    swapStatus: notificationStatuses.FAILED,\n    hasTransaction: true,\n    hash: undefined,\n    network: network,\n    body: {\n      error: true,\n      errorMessage: val[swapIndexes.response].hasOwnProperty('message')\n        ? val[swapIndexes.response].message\n        : val[swapIndexes.response],\n      hash: undefined,\n      amount: new BigNumber(val[swapIndexes.txDetails].value).toString(),\n      nonce: new BigNumber(val[swapIndexes.txDetails].nonce).toString(),\n      gasPrice: new BigNumber(val[swapIndexes.txDetails].gasPrice).toString(),\n      gasLimit: new BigNumber(val[swapIndexes.txDetails].gas).toString(),\n      to: val[swapIndexes.details].toAddress,\n      from: val[swapIndexes.details].fromAddress,\n      fromValue: val[swapIndexes.details].fromValue,\n      toValue: val[swapIndexes.details].toValue,\n      fromCurrency: val[swapIndexes.details].fromCurrency,\n      toCurrency: val[swapIndexes.details].toCurrency,\n      orderId: val[swapIndexes.details].parsed.orderId,\n      statusId: val[swapIndexes.details].parsed.statusId,\n      timeRemaining: val[swapIndexes.details].parsed.validFor,\n      validFor: val[swapIndexes.details].parsed.validFor,\n      createdAt: val[swapIndexes.details].parsed.timestamp,\n      rate: val[swapIndexes.details].rate,\n      provider: val[swapIndexes.details].provider,\n      special: val[swapIndexes.details].special,\n      isDex: val[swapIndexes.details].isDex\n    },\n    expanded: false\n  };\n};\n\nexport {\n  formatTransactionHash,\n  formatTransactionReciept,\n  formatTransactionError,\n  formatTransactionErrorUpdate,\n  formatSwap,\n  formatSwapReciept,\n  formatSwapError,\n  formatSwapErrorUpdate\n};\n"]}]}