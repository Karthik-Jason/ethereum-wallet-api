{"remainingRequest":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/thread-loader/dist/cjs.js!/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/eslint-loader/index.js??ref--13-0!/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/helpers/ENSMultiCoin.js","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/helpers/ENSMultiCoin.js","mtime":1573477611664},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport supportedCoins from \"../dapps/ManageENS/supportedCoins\";\nimport ResolverAbi from \"../dapps/ManageENS/ABI/resolverAbi.js\";\nimport normalise from '@/helpers/normalise';\nimport { Misc } from '@/helpers';\n\nvar getMultiCoinAddress = function getMultiCoinAddress(ens, name, coinType) {\n  return new Promise(function (resolve, reject) {\n    if (!supportedCoins[coinType]) return reject();\n    if (!Misc.isValidENSAddress(name)) return reject();\n    ens.resolver(normalise(name), ResolverAbi).addr(supportedCoins[coinType].id).then(function (bytes) {\n      if (bytes) {\n        resolve(supportedCoins[coinType].encode(new Buffer(bytes.replace('0x', ''), 'hex')));\n      } else {\n        reject();\n      }\n    }).catch(reject);\n  });\n};\n\nexport default getMultiCoinAddress;",{"version":3,"sources":["/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/helpers/ENSMultiCoin.js"],"names":["supportedCoins","ResolverAbi","normalise","Misc","getMultiCoinAddress","ens","name","coinType","Promise","resolve","reject","isValidENSAddress","resolver","addr","id","then","bytes","encode","Buffer","replace","catch"],"mappings":";AAAA,OAAOA,cAAP;AACA,OAAOC,WAAP;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,SAASC,IAAT,QAAqB,WAArB;;AACA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,GAAD,EAAMC,IAAN,EAAYC,QAAZ,EAAyB;AACnD,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAI,CAACV,cAAc,CAACO,QAAD,CAAnB,EAA+B,OAAOG,MAAM,EAAb;AAC/B,QAAI,CAACP,IAAI,CAACQ,iBAAL,CAAuBL,IAAvB,CAAL,EAAmC,OAAOI,MAAM,EAAb;AACnCL,IAAAA,GAAG,CACAO,QADH,CACYV,SAAS,CAACI,IAAD,CADrB,EAC6BL,WAD7B,EAEGY,IAFH,CAEQb,cAAc,CAACO,QAAD,CAAd,CAAyBO,EAFjC,EAGGC,IAHH,CAGQ,UAAAC,KAAK,EAAI;AACb,UAAIA,KAAJ,EAAW;AACTP,QAAAA,OAAO,CACLT,cAAc,CAACO,QAAD,CAAd,CAAyBU,MAAzB,CACE,IAAIC,MAAJ,CAAWF,KAAK,CAACG,OAAN,CAAc,IAAd,EAAoB,EAApB,CAAX,EAAoC,KAApC,CADF,CADK,CAAP;AAKD,OAND,MAMO;AACLT,QAAAA,MAAM;AACP;AACF,KAbH,EAcGU,KAdH,CAcSV,MAdT;AAeD,GAlBM,CAAP;AAmBD,CApBD;;AAqBA,eAAeN,mBAAf","sourcesContent":["import supportedCoins from '../dapps/ManageENS/supportedCoins';\nimport ResolverAbi from '../dapps/ManageENS/ABI/resolverAbi.js';\nimport normalise from '@/helpers/normalise';\nimport { Misc } from '@/helpers';\nconst getMultiCoinAddress = (ens, name, coinType) => {\n  return new Promise((resolve, reject) => {\n    if (!supportedCoins[coinType]) return reject();\n    if (!Misc.isValidENSAddress(name)) return reject();\n    ens\n      .resolver(normalise(name), ResolverAbi)\n      .addr(supportedCoins[coinType].id)\n      .then(bytes => {\n        if (bytes) {\n          resolve(\n            supportedCoins[coinType].encode(\n              new Buffer(bytes.replace('0x', ''), 'hex')\n            )\n          );\n        } else {\n          reject();\n        }\n      })\n      .catch(reject);\n  });\n};\nexport default getMultiCoinAddress;\n"]}]}