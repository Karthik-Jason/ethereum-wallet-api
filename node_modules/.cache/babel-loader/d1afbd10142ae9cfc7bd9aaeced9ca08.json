{"remainingRequest":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/thread-loader/dist/cjs.js!/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/eslint-loader/index.js??ref--13-0!/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/wallets/web3-provider/providers/etherscan-request-manager.js","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/wallets/web3-provider/providers/etherscan-request-manager.js","mtime":1573477612144},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _typeof from \"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/@babel/runtime-corejs2/helpers/esm/typeof\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport { Manager as Web3RequestManager } from 'web3-core-requestmanager';\nimport MiddleWare from \"../middleware\";\nimport EtherscanProxy from \"../etherscan-proxy\";\n\nvar EtherscanRequestManager =\n/*#__PURE__*/\nfunction () {\n  function EtherscanRequestManager(host, options) {\n    _classCallCheck(this, EtherscanRequestManager);\n\n    this.host = host;\n    this.apikey = options.apikey || 'DSH5B24BQYKD1AD8KUCDY3SAQSS6ZAU175';\n    this.proxy = new EtherscanProxy(this.host, this.apikey);\n    return new Web3RequestManager(this);\n  }\n\n  _createClass(EtherscanRequestManager, [{\n    key: \"send\",\n    value: function send(payload, callback) {\n      var _this = this;\n\n      var req = {\n        payload: payload\n      };\n      var middleware = new MiddleWare();\n      middleware.use(\n      /*#__PURE__*/\n      function () {\n        var _ref2 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee(_ref, res) {\n          var payload;\n          return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  payload = _ref.payload;\n\n                  _this.proxy.request(payload).then(function (body) {\n                    res(null, body);\n                  }).catch(function (err) {\n                    if (_typeof(err) !== Error && err.error) err = new Error(err.error.message);\n                    res(err);\n                  });\n\n                case 2:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x, _x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n      middleware.run(req, callback).then(function () {\n        callback(new Error('Etherscan doesnt support this function'));\n      });\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {}\n  }]);\n\n  return EtherscanRequestManager;\n}();\n\nexport default EtherscanRequestManager;",{"version":3,"sources":["/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/wallets/web3-provider/providers/etherscan-request-manager.js"],"names":["Manager","Web3RequestManager","MiddleWare","EtherscanProxy","EtherscanRequestManager","host","options","apikey","proxy","payload","callback","req","middleware","use","res","request","then","body","catch","err","Error","error","message","run"],"mappings":";;;;;AAAA,SAASA,OAAO,IAAIC,kBAApB,QAA8C,0BAA9C;AACA,OAAOC,UAAP;AACA,OAAOC,cAAP;;IACMC,uB;;;AACJ,mCAAYC,IAAZ,EAAkBC,OAAlB,EAA2B;AAAA;;AACzB,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKE,MAAL,GAAcD,OAAO,CAACC,MAAR,IAAkB,oCAAhC;AACA,SAAKC,KAAL,GAAa,IAAIL,cAAJ,CAAmB,KAAKE,IAAxB,EAA8B,KAAKE,MAAnC,CAAb;AACA,WAAO,IAAIN,kBAAJ,CAAuB,IAAvB,CAAP;AACD;;;;yBACIQ,O,EAASC,Q,EAAU;AAAA;;AACtB,UAAMC,GAAG,GAAG;AACVF,QAAAA,OAAO,EAAPA;AADU,OAAZ;AAGA,UAAMG,UAAU,GAAG,IAAIV,UAAJ,EAAnB;AACAU,MAAAA,UAAU,CAACC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA,gCAAe,uBAAoBC,GAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAASL,kBAAAA,OAAT,QAASA,OAAT;;AACb,kBAAA,KAAI,CAACD,KAAL,CACGO,OADH,CACWN,OADX,EAEGO,IAFH,CAEQ,UAAAC,IAAI,EAAI;AACZH,oBAAAA,GAAG,CAAC,IAAD,EAAOG,IAAP,CAAH;AACD,mBAJH,EAKGC,KALH,CAKS,UAAAC,GAAG,EAAI;AACZ,wBAAI,QAAOA,GAAP,MAAeC,KAAf,IAAwBD,GAAG,CAACE,KAAhC,EACEF,GAAG,GAAG,IAAIC,KAAJ,CAAUD,GAAG,CAACE,KAAJ,CAAUC,OAApB,CAAN;AACFR,oBAAAA,GAAG,CAACK,GAAD,CAAH;AACD,mBATH;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAf;;AAAA;AAAA;AAAA;AAAA;AAYAP,MAAAA,UAAU,CAACW,GAAX,CAAeZ,GAAf,EAAoBD,QAApB,EAA8BM,IAA9B,CAAmC,YAAM;AACvCN,QAAAA,QAAQ,CAAC,IAAIU,KAAJ,CAAU,wCAAV,CAAD,CAAR;AACD,OAFD;AAGD;;;iCACY,CAAE;;;;;;AAEjB,eAAehB,uBAAf","sourcesContent":["import { Manager as Web3RequestManager } from 'web3-core-requestmanager';\nimport MiddleWare from '../middleware';\nimport EtherscanProxy from '../etherscan-proxy';\nclass EtherscanRequestManager {\n  constructor(host, options) {\n    this.host = host;\n    this.apikey = options.apikey || 'DSH5B24BQYKD1AD8KUCDY3SAQSS6ZAU175';\n    this.proxy = new EtherscanProxy(this.host, this.apikey);\n    return new Web3RequestManager(this);\n  }\n  send(payload, callback) {\n    const req = {\n      payload\n    };\n    const middleware = new MiddleWare();\n    middleware.use(async ({ payload }, res) => {\n      this.proxy\n        .request(payload)\n        .then(body => {\n          res(null, body);\n        })\n        .catch(err => {\n          if (typeof err !== Error && err.error)\n            err = new Error(err.error.message);\n          res(err);\n        });\n    });\n    middleware.run(req, callback).then(() => {\n      callback(new Error('Etherscan doesnt support this function'));\n    });\n  }\n  disconnect() {}\n}\nexport default EtherscanRequestManager;\n"]}]}