{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/eslint-loader/index.js??ref--13-0!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/helpers/misc.js","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/helpers/misc.js","mtime":1574664278286},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js","mtime":1574664275010},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/eslint-loader/index.js","mtime":1574664275986}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport _typeof from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/@babel/runtime-corejs2/helpers/esm/typeof\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.find-index\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport _defineProperty from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.regexp.to-string\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport normalise from '@/helpers/normalise';\nimport nodeList from '@/networks';\nimport { isAddress } from \"./addressUtils\";\nimport url from 'url';\nimport utils from 'web3-utils';\nimport store from '@/store';\nimport { uint, address, string, bytes, bool } from \"./solidityTypes\";\nimport xss from 'xss';\n\nvar capitalize = function capitalize(value) {\n  if (!value) return '';\n  value = value.toString();\n  return value.charAt(0).toUpperCase() + value.slice(1);\n};\n/* Accepts string, returns boolean */\n\n\nvar isJson = function isJson(str) {\n  try {\n    JSON.parse(str);\n  } catch (e) {\n    return false;\n  }\n\n  return true;\n};\n\nvar getService = function getService(parsableUrl) {\n  var parsedUrl = url.parse(parsableUrl).hostname;\n  var splitUrl = parsedUrl.split('.');\n  if (splitUrl.length > 2) // eslint-disable-next-line\n    return capitalize(\"\".concat(splitUrl[1], \".\").concat(splitUrl[2]));\n  return capitalize(splitUrl.join('.'));\n};\n\nvar doesExist = function doesExist(val) {\n  return val !== undefined && val !== null;\n};\n\nvar padLeftEven = function padLeftEven(hex) {\n  hex = hex.length % 2 !== 0 ? '0' + hex : hex;\n  return hex;\n};\n\nvar isInt = function isInt(num) {\n  return num % 1 === 0;\n};\n\nvar formatDate = function formatDate(date) {\n  var days = ['Sun', 'Mon', 'Tues', 'Wed', 'Thurs', 'Fri', 'Sat'];\n  var day = days[new Date(date).getDay()];\n  var dateString = new Date(date).toLocaleDateString();\n  var regExp = /\\(([^)]+)\\)/;\n  var timeString = new Date(date).toTimeString();\n  var lengthMinus1 = timeString.length - 1;\n  var stripTimezone = timeString.slice(timeString.indexOf('(') + 1, lengthMinus1).split(' ').map(function (item) {\n    return item[0];\n  }).join('');\n  var removedTimezone = timeString.replace(regExp, '');\n  var removeEndNumber = removedTimezone.slice(0, 12);\n  var GMTtime = removeEndNumber.replace(removeEndNumber.slice(5, 8), '');\n  var localTime = new Date(date).toLocaleTimeString(navigator.language, {\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n  return \"\".concat(day, \". \").concat(dateString, \" \").concat(GMTtime, \" - \").concat(localTime, \" \").concat(stripTimezone);\n};\n\nvar isValidETHAddress = function isValidETHAddress(address) {\n  return isAddress(address);\n};\n\nvar isValidENSorEtherAddress = function isValidENSorEtherAddress(address) {\n  return isValidETHAddress(address) || isValidENSAddress(address);\n};\n\nvar isValidENSAddress = function isValidENSAddress(address) {\n  try {\n    address = normalise(address);\n  } catch (e) {\n    return false;\n  }\n\n  return address.lastIndexOf('.') != -1;\n};\n\nvar sanitizeHex = function sanitizeHex(hex) {\n  hex = hex.substring(0, 2) == '0x' ? hex.substring(2) : hex;\n  if (hex == '') return '0x';\n  return '0x' + padLeftEven(hex);\n};\n\nvar scrollToTop = function scrollToTop(scrollDuration) {\n  var scrollHeight = window.scrollY,\n      scrollStep = Math.PI / (scrollDuration / 15),\n      cosParameter = scrollHeight / 2;\n  var scrollCount = 0;\n  var scrollMargin;\n  var scrollInterval = setInterval(function () {\n    if (window.scrollY != 0) {\n      scrollCount = scrollCount + 1;\n      scrollMargin = cosParameter - cosParameter * Math.cos(scrollCount * scrollStep);\n      window.scrollTo(0, scrollHeight - scrollMargin);\n    } else clearInterval(scrollInterval);\n  }, 15);\n};\n\nvar validateHexString = function validateHexString(str) {\n  if (str === '') return true;\n  str = str.substring(0, 2) === '0x' ? str.substring(2).toUpperCase() : str.toUpperCase();\n  return utils.isHex(str);\n};\n\nvar reorderNetworks = function reorderNetworks() {\n  var oldObject = Object.assign({}, nodeList);\n  delete oldObject['ETH'];\n  delete oldObject['RIN'];\n  delete oldObject['ROP'];\n  var newObject = Object.assign({}, _objectSpread({\n    ETH: nodeList['ETH'],\n    ROP: nodeList['ROP'],\n    RIN: nodeList['RIN']\n  }, oldObject));\n\n  for (var net in newObject) {\n    if (newObject[net].length === 0) delete newObject[net];\n  }\n\n  return newObject;\n};\n\nvar solidityType = function solidityType(inputType) {\n  if (!inputType) inputType = '';\n\n  if (inputType.includes('[') && inputType.includes(']')) {\n    if (inputType.includes(uint)) return {\n      type: 'string',\n      solidityType: \"\".concat(uint, \"[]\")\n    };\n    if (inputType.includes(address)) return {\n      type: 'text',\n      solidityType: \"\".concat(address, \"[]\")\n    };\n    if (inputType.includes(string)) return {\n      type: 'text',\n      solidityType: \"\".concat(string, \"[]\")\n    };\n    if (inputType.includes(bytes)) return {\n      type: 'text',\n      solidityType: \"\".concat(bytes, \"[]\")\n    };\n    if (inputType.includes(bool)) return {\n      type: 'string',\n      solidityType: \"\".concat(bool, \"[]\")\n    };\n    return {\n      type: 'text',\n      solidityType: \"\".concat(string, \"[]\")\n    };\n  }\n\n  if (inputType.includes(uint)) return {\n    type: 'number',\n    solidityType: uint\n  };\n  if (inputType.includes(address)) return {\n    type: 'text',\n    solidityType: address\n  };\n  if (inputType.includes(string)) return {\n    type: 'text',\n    solidityType: string\n  };\n  if (inputType.includes(bytes)) return {\n    type: 'text',\n    solidityType: bytes\n  };\n  if (inputType.includes(bool)) return {\n    type: 'radio',\n    solidityType: bool\n  };\n  return {\n    type: 'text',\n    solidityType: string\n  };\n};\n\nvar isDarklisted = function isDarklisted(addr) {\n  var storedDarklist = store.state.darklist.data;\n  var darklisted = storedDarklist > 0 ? storedDarklist.findIndex(function (item) {\n    return utils.toChecksumAddress(item.address.toLowerCase()) === utils.toChecksumAddress(addr.toLowerCase());\n  }) : -1;\n  var errMsg = darklisted === -1 ? '' : store.state.darklist.data[darklisted].comment;\n  var errObject = {\n    error: darklisted === -1 ? false : true,\n    msg: errMsg\n  };\n  return errObject;\n};\n\nvar stringToArray = function stringToArray(str) {\n  return str.replace(/[^a-zA-Z0-9_,]+/g, '').split(',');\n};\n\nvar isContractArgValid = function isContractArgValid(value, solidityType) {\n  if (!value) value = '';\n\n  if (solidityType.includes('[') && solidityType.includes(']')) {\n    var parsedValue = Array.isArray(value) ? value : stringToArray(value);\n    var values = [];\n    parsedValue.forEach(function (item) {\n      if (solidityType.includes(uint)) {\n        values.push(item !== '' && !isNaN(item) && isInt(item));\n      } else if (solidityType.includes(address)) {\n        values.push(isAddress(item));\n      } else if (solidityType.includes(string)) {\n        values.push(item !== '');\n      } else if (solidityType.includes(bool)) {\n        values.push(_typeof(item) === _typeof(true) || item === '');\n      } else if (solidityType.includes(bytes)) {\n        values.push(validateHexString(item));\n      }\n    });\n    return !values.includes(false);\n  }\n\n  if (solidityType === 'uint') return value !== '' && !isNaN(value) && isInt(value);\n  if (solidityType === 'address') return isAddress(value);\n  if (solidityType === 'string') return true;\n  if (solidityType === 'bytes') return value.substr(0, 2) === '0x' && validateHexString(value);\n  if (solidityType === 'bool') return _typeof(value) === _typeof(true) || value === '';\n  return false;\n};\n\nvar stripTags = function stripTags(content) {\n  var insertToDom = new DOMParser().parseFromString(content, 'text/html');\n  insertToDom.body.textContent.replace(/(<([^>]+)>)/gi, '') || '';\n  var string = xss(insertToDom.body.textContent, {\n    whitelist: [],\n    stripIgnoreTag: true,\n    stripIgnoreTagBody: '*'\n  });\n  return string;\n};\n\nvar isMewCx = function isMewCx() {\n  return BUILD_TYPE === 'mewcx';\n};\n\nexport default {\n  isJson: isJson,\n  doesExist: doesExist,\n  padLeftEven: padLeftEven,\n  formatDate: formatDate,\n  isValidENSorEtherAddress: isValidENSorEtherAddress,\n  isValidENSAddress: isValidENSAddress,\n  isValidETHAddress: isValidETHAddress,\n  sanitizeHex: sanitizeHex,\n  validateHexString: validateHexString,\n  scrollToTop: scrollToTop,\n  reorderNetworks: reorderNetworks,\n  isDarklisted: isDarklisted,\n  solidityType: solidityType,\n  isInt: isInt,\n  capitalize: capitalize,\n  getService: getService,\n  stringToArray: stringToArray,\n  isContractArgValid: isContractArgValid,\n  stripTags: stripTags,\n  isMewCx: isMewCx\n};",{"version":3,"sources":["/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/helpers/misc.js"],"names":["normalise","nodeList","isAddress","url","utils","store","uint","address","string","bytes","bool","xss","capitalize","value","toString","charAt","toUpperCase","slice","isJson","str","JSON","parse","e","getService","parsableUrl","parsedUrl","hostname","splitUrl","split","length","join","doesExist","val","undefined","padLeftEven","hex","isInt","num","formatDate","date","days","day","Date","getDay","dateString","toLocaleDateString","regExp","timeString","toTimeString","lengthMinus1","stripTimezone","indexOf","map","item","removedTimezone","replace","removeEndNumber","GMTtime","localTime","toLocaleTimeString","navigator","language","hour","minute","isValidETHAddress","isValidENSorEtherAddress","isValidENSAddress","lastIndexOf","sanitizeHex","substring","scrollToTop","scrollDuration","scrollHeight","window","scrollY","scrollStep","Math","PI","cosParameter","scrollCount","scrollMargin","scrollInterval","setInterval","cos","scrollTo","clearInterval","validateHexString","isHex","reorderNetworks","oldObject","Object","assign","newObject","ETH","ROP","RIN","net","solidityType","inputType","includes","type","isDarklisted","addr","storedDarklist","state","darklist","data","darklisted","findIndex","toChecksumAddress","toLowerCase","errMsg","comment","errObject","error","msg","stringToArray","isContractArgValid","parsedValue","Array","isArray","values","forEach","push","isNaN","substr","stripTags","content","insertToDom","DOMParser","parseFromString","body","textContent","whitelist","stripIgnoreTag","stripIgnoreTagBody","isMewCx","BUILD_TYPE"],"mappings":"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","sourcesContent":["import normalise from '@/helpers/normalise';\nimport nodeList from '@/networks';\nimport { isAddress } from './addressUtils';\nimport url from 'url';\nimport utils from 'web3-utils';\nimport store from '@/store';\nimport { uint, address, string, bytes, bool } from './solidityTypes';\nimport xss from 'xss';\n\nconst capitalize = value => {\n  if (!value) return '';\n  value = value.toString();\n  return value.charAt(0).toUpperCase() + value.slice(1);\n};\n/* Accepts string, returns boolean */\nconst isJson = str => {\n  try {\n    JSON.parse(str);\n  } catch (e) {\n    return false;\n  }\n\n  return true;\n};\n\nconst getService = parsableUrl => {\n  const parsedUrl = url.parse(parsableUrl).hostname;\n  const splitUrl = parsedUrl.split('.');\n  if (splitUrl.length > 2)\n    // eslint-disable-next-line\n    return capitalize(`${splitUrl[1]}.${splitUrl[2]}`);\n  return capitalize(splitUrl.join('.'));\n};\n\nconst doesExist = val => val !== undefined && val !== null;\n\nconst padLeftEven = hex => {\n  hex = hex.length % 2 !== 0 ? '0' + hex : hex;\n  return hex;\n};\n\nconst isInt = num => {\n  return num % 1 === 0;\n};\n\nconst formatDate = date => {\n  const days = ['Sun', 'Mon', 'Tues', 'Wed', 'Thurs', 'Fri', 'Sat'];\n  const day = days[new Date(date).getDay()];\n  const dateString = new Date(date).toLocaleDateString();\n  const regExp = /\\(([^)]+)\\)/;\n  const timeString = new Date(date).toTimeString();\n  const lengthMinus1 = timeString.length - 1;\n  const stripTimezone = timeString\n    .slice(timeString.indexOf('(') + 1, lengthMinus1)\n    .split(' ')\n    .map(item => {\n      return item[0];\n    })\n    .join('');\n  const removedTimezone = timeString.replace(regExp, '');\n  const removeEndNumber = removedTimezone.slice(0, 12);\n  const GMTtime = removeEndNumber.replace(removeEndNumber.slice(5, 8), '');\n  const localTime = new Date(date).toLocaleTimeString(navigator.language, {\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n  return `${day}. ${dateString} ${GMTtime} - ${localTime} ${stripTimezone}`;\n};\nconst isValidETHAddress = address => {\n  return isAddress(address);\n};\nconst isValidENSorEtherAddress = address => {\n  return isValidETHAddress(address) || isValidENSAddress(address);\n};\nconst isValidENSAddress = function(address) {\n  try {\n    address = normalise(address);\n  } catch (e) {\n    return false;\n  }\n  return address.lastIndexOf('.') != -1;\n};\nconst sanitizeHex = hex => {\n  hex = hex.substring(0, 2) == '0x' ? hex.substring(2) : hex;\n  if (hex == '') return '0x';\n  return '0x' + padLeftEven(hex);\n};\n\nconst scrollToTop = scrollDuration => {\n  const scrollHeight = window.scrollY,\n    scrollStep = Math.PI / (scrollDuration / 15),\n    cosParameter = scrollHeight / 2;\n\n  let scrollCount = 0;\n  let scrollMargin;\n  const scrollInterval = setInterval(function() {\n    if (window.scrollY != 0) {\n      scrollCount = scrollCount + 1;\n      scrollMargin =\n        cosParameter - cosParameter * Math.cos(scrollCount * scrollStep);\n      window.scrollTo(0, scrollHeight - scrollMargin);\n    } else clearInterval(scrollInterval);\n  }, 15);\n};\n\nconst validateHexString = str => {\n  if (str === '') return true;\n  str =\n    str.substring(0, 2) === '0x'\n      ? str.substring(2).toUpperCase()\n      : str.toUpperCase();\n  return utils.isHex(str);\n};\n\nconst reorderNetworks = () => {\n  const oldObject = Object.assign({}, nodeList);\n  delete oldObject['ETH'];\n  delete oldObject['RIN'];\n  delete oldObject['ROP'];\n  const newObject = Object.assign(\n    {},\n    {\n      ETH: nodeList['ETH'],\n      ROP: nodeList['ROP'],\n      RIN: nodeList['RIN'],\n      ...oldObject\n    }\n  );\n  for (const net in newObject) {\n    if (newObject[net].length === 0) delete newObject[net];\n  }\n  return newObject;\n};\n\nconst solidityType = inputType => {\n  if (!inputType) inputType = '';\n  if (inputType.includes('[') && inputType.includes(']')) {\n    if (inputType.includes(uint))\n      return { type: 'string', solidityType: `${uint}[]` };\n    if (inputType.includes(address))\n      return { type: 'text', solidityType: `${address}[]` };\n    if (inputType.includes(string))\n      return { type: 'text', solidityType: `${string}[]` };\n    if (inputType.includes(bytes))\n      return { type: 'text', solidityType: `${bytes}[]` };\n    if (inputType.includes(bool))\n      return { type: 'string', solidityType: `${bool}[]` };\n    return { type: 'text', solidityType: `${string}[]` };\n  }\n  if (inputType.includes(uint)) return { type: 'number', solidityType: uint };\n  if (inputType.includes(address))\n    return { type: 'text', solidityType: address };\n  if (inputType.includes(string)) return { type: 'text', solidityType: string };\n  if (inputType.includes(bytes)) return { type: 'text', solidityType: bytes };\n  if (inputType.includes(bool)) return { type: 'radio', solidityType: bool };\n  return { type: 'text', solidityType: string };\n};\n\nconst isDarklisted = addr => {\n  const storedDarklist = store.state.darklist.data;\n  const darklisted =\n    storedDarklist > 0\n      ? storedDarklist.findIndex(item => {\n          return (\n            utils.toChecksumAddress(item.address.toLowerCase()) ===\n            utils.toChecksumAddress(addr.toLowerCase())\n          );\n        })\n      : -1;\n  const errMsg =\n    darklisted === -1 ? '' : store.state.darklist.data[darklisted].comment;\n  const errObject = {\n    error: darklisted === -1 ? false : true,\n    msg: errMsg\n  };\n  return errObject;\n};\n\nconst stringToArray = str => {\n  return str.replace(/[^a-zA-Z0-9_,]+/g, '').split(',');\n};\n\nconst isContractArgValid = (value, solidityType) => {\n  if (!value) value = '';\n  if (solidityType.includes('[') && solidityType.includes(']')) {\n    const parsedValue = Array.isArray(value) ? value : stringToArray(value);\n    const values = [];\n    parsedValue.forEach(item => {\n      if (solidityType.includes(uint)) {\n        values.push(item !== '' && !isNaN(item) && isInt(item));\n      } else if (solidityType.includes(address)) {\n        values.push(isAddress(item));\n      } else if (solidityType.includes(string)) {\n        values.push(item !== '');\n      } else if (solidityType.includes(bool)) {\n        values.push(typeof item === typeof true || item === '');\n      } else if (solidityType.includes(bytes)) {\n        values.push(validateHexString(item));\n      }\n    });\n    return !values.includes(false);\n  }\n  if (solidityType === 'uint')\n    return value !== '' && !isNaN(value) && isInt(value);\n  if (solidityType === 'address') return isAddress(value);\n  if (solidityType === 'string') return true;\n  if (solidityType === 'bytes')\n    return value.substr(0, 2) === '0x' && validateHexString(value);\n  if (solidityType === 'bool')\n    return typeof value === typeof true || value === '';\n  return false;\n};\n\nconst stripTags = content => {\n  const insertToDom = new DOMParser().parseFromString(content, 'text/html');\n  insertToDom.body.textContent.replace(/(<([^>]+)>)/gi, '') || '';\n  const string = xss(insertToDom.body.textContent, {\n    whitelist: [],\n    stripIgnoreTag: true,\n    stripIgnoreTagBody: '*'\n  });\n  return string;\n};\n\nconst isMewCx = () => {\n  return BUILD_TYPE === 'mewcx';\n};\n\nexport default {\n  isJson,\n  doesExist,\n  padLeftEven,\n  formatDate,\n  isValidENSorEtherAddress,\n  isValidENSAddress,\n  isValidETHAddress,\n  sanitizeHex,\n  validateHexString,\n  scrollToTop,\n  reorderNetworks,\n  isDarklisted,\n  solidityType,\n  isInt,\n  capitalize,\n  getService,\n  stringToArray,\n  isContractArgValid,\n  stripTags,\n  isMewCx\n};\n"]}]}