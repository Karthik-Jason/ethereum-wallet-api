{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/thread-loader/dist/cjs.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/dapps/ScheduleTransaction/components/ScheduledSuccess.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/dapps/ScheduleTransaction/components/ScheduledSuccess.vue","mtime":1574664278282},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/thread-loader/dist/cjs.js","mtime":1574664277654},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js","mtime":1574664275010},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js","mtime":1574664277774}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState } from 'vuex';\nimport { Transaction } from 'ethereumjs-tx';\nimport BigNumber from 'bignumber.js';\nimport { Util } from '@ethereum-alarm-clock/lib';\nimport { Toast } from '@/helpers';\nimport { ERC20 } from '@/partners';\nimport ScheduledTransactionExplorerLink from \"../components/ScheduledTransactionExplorerLink\";\nimport { EAC_SCHEDULING_CONFIG } from \"../ScheduleHelpers\";\nexport default {\n  name: 'Scheduled',\n  components: {\n    'scheduled-transaction-explorer-link': ScheduledTransactionExplorerLink\n  },\n  props: {\n    txHash: {\n      type: String,\n      default: ''\n    },\n    isTokenTransfer: {\n      type: Boolean,\n      default: false\n    },\n    toAddress: {\n      type: String,\n      default: ''\n    },\n    amount: {\n      type: String,\n      default: ''\n    },\n    selectedCurrency: {\n      type: Object,\n      default: null\n    }\n  },\n  data: function data() {\n    return {\n      approved: this.isTokenTransfer ? false : true,\n      receipt: null,\n      scheduledTxAddress: null,\n      mined: false\n    };\n  },\n  computed: _objectSpread({}, mapState(['notifications', 'web3', 'account', 'gasPrice', 'network'])),\n  watch: {\n    notifications: function () {\n      var _notifications = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var notifications, latestNotification, receipt, util, transaction;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                notifications = this.notifications[this.account.address];\n                latestNotification = notifications[0];\n\n                if (!latestNotification.hash) {\n                  _context.next = 21;\n                  break;\n                }\n\n                if (!(latestNotification.status === 'complete' && this.txHash === latestNotification.hash)) {\n                  _context.next = 13;\n                  break;\n                }\n\n                _context.next = 6;\n                return this.web3.eth.getTransactionReceipt(this.txHash);\n\n              case 6:\n                receipt = _context.sent;\n                util = new Util(this.web3);\n                this.receipt = receipt;\n                this.scheduledTxAddress = util.getTransactionRequestAddressFromReceipt(receipt);\n                this.mined = true;\n                _context.next = 21;\n                break;\n\n              case 13:\n                if (!(latestNotification.status === 'pending')) {\n                  _context.next = 21;\n                  break;\n                }\n\n                _context.next = 16;\n                return this.web3.eth.getTransaction(latestNotification.hash);\n\n              case 16:\n                transaction = _context.sent;\n\n                if (!(transaction === null)) {\n                  _context.next = 20;\n                  break;\n                }\n\n                Toast.responseHandler(new Error('Non-existing transaction detected'), Toast.ERROR);\n                return _context.abrupt(\"return\");\n\n              case 20:\n                if (transaction.input.includes(EAC_SCHEDULING_CONFIG.APPROVE_TOKEN_TRANSFER_METHOD_ID)) {\n                  if (transaction.input.includes(this.scheduledTxAddress.substring(2))) {\n                    this.approved = true;\n                  }\n                }\n\n              case 21:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function notifications() {\n        return _notifications.apply(this, arguments);\n      }\n\n      return notifications;\n    }()\n  },\n  methods: {\n    approveToken: function () {\n      var _approveToken = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var _this = this;\n\n        var tokenContract, coinbase, tokenAmount, approveTokensData, nonce, numIfHex, scheduledTokensApproveTransaction, estimatedGasLimit, approveTx, json;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (this.selectedCurrency) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                Toast.responseHandler(new Error(\"\".concat(this.txHash, \" is not a token transfer.\")), Toast.ERROR);\n                return _context2.abrupt(\"return\");\n\n              case 3:\n                _context2.next = 5;\n                return new this.web3.eth.Contract(ERC20, this.selectedCurrency.address);\n\n              case 5:\n                tokenContract = _context2.sent;\n                _context2.next = 8;\n                return this.web3.eth.getCoinbase();\n\n              case 8:\n                coinbase = _context2.sent;\n                tokenAmount = new BigNumber(this.amount * Math.pow(10, this.selectedCurrency.decimals));\n                approveTokensData = tokenContract.methods.approve(this.scheduledTxAddress, tokenAmount.toString()).encodeABI();\n                _context2.next = 13;\n                return this.web3.eth.getTransactionCount(coinbase, 'latest');\n\n              case 13:\n                nonce = _context2.sent;\n\n                numIfHex = function numIfHex(input) {\n                  return _this.web3.utils.isHexStrict(input) ? _this.web3.utils.hexToNumber(input) : input;\n                };\n\n                scheduledTokensApproveTransaction = {\n                  from: coinbase,\n                  to: this.selectedCurrency.address,\n                  value: '',\n                  data: approveTokensData,\n                  nonce: numIfHex(nonce),\n                  gasPrice: this.web3.utils.toWei(numIfHex(this.gasPrice).toString(), 'gwei')\n                };\n                _context2.next = 18;\n                return this.web3.eth.estimateGas(scheduledTokensApproveTransaction);\n\n              case 18:\n                estimatedGasLimit = _context2.sent;\n                scheduledTokensApproveTransaction.gasLimit = estimatedGasLimit + 1000000;\n                approveTx = new Transaction(scheduledTokensApproveTransaction);\n                json = approveTx.toJSON(true);\n                json.from = coinbase;\n                this.web3.eth.sendTransaction(json).catch(function (err) {\n                  Toast.responseHandler(err, Toast.ERROR);\n                });\n\n              case 24:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function approveToken() {\n        return _approveToken.apply(this, arguments);\n      }\n\n      return approveToken;\n    }()\n  }\n};",{"version":3,"sources":["ScheduledSuccess.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"scheduled-success-container\">\n    <h3 class=\"page-title\">\n      {{ isTokenTransfer && approved ? 'Approved' : 'Scheduled' }}\n    </h3>\n\n    <div class=\"page-container\">\n      <div class=\"break-word\">\n        Your TX has been scheduled with the transaction hash\n        <scheduled-transaction-explorer-link :tx-hash=\"txHash\" />{{\n          !mined ? ' and is waiting to be mined' : ''\n        }}.\n      </div>\n\n      <b-alert\n        :show=\"!approved && isTokenTransfer\"\n        variant=\"warning\"\n        class=\"m-5 horizontal-center\"\n      >\n        <div v-if=\"!mined\">\n          <div>\n            Please wait for the transaction to be mined before approving...\n          </div>\n          <div class=\"fa-3x\">\n            <i class=\"fa fa-spinner fa-spin fa-lg\" />\n          </div>\n          <div>\n            <strong>Note:</strong> If this is taking too long, follow\n            <scheduled-transaction-explorer-link\n              :tx-hash=\"txHash\"\n              :link-text=\"'this'\"\n            />\n            link to approve the transaction.\n          </div>\n        </div>\n        <div v-if=\"mined\">\n          <div>\n            The transaction has been mined. Please\n            <strong>approve</strong> the token transfer now.\n          </div>\n          <div\n            class=\"submit-button large-round-button-green-filled mt-3\"\n            @click=\"approveToken()\"\n          >\n            Approve Token Transfer\n          </div>\n        </div>\n      </b-alert>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport { Transaction } from 'ethereumjs-tx';\nimport BigNumber from 'bignumber.js';\nimport { Util } from '@ethereum-alarm-clock/lib';\n\nimport { Toast } from '@/helpers';\nimport { ERC20 } from '@/partners';\nimport ScheduledTransactionExplorerLink from '../components/ScheduledTransactionExplorerLink';\nimport { EAC_SCHEDULING_CONFIG } from '../ScheduleHelpers';\n\nexport default {\n  name: 'Scheduled',\n  components: {\n    'scheduled-transaction-explorer-link': ScheduledTransactionExplorerLink\n  },\n  props: {\n    txHash: {\n      type: String,\n      default: ''\n    },\n    isTokenTransfer: {\n      type: Boolean,\n      default: false\n    },\n    toAddress: {\n      type: String,\n      default: ''\n    },\n    amount: {\n      type: String,\n      default: ''\n    },\n    selectedCurrency: {\n      type: Object,\n      default: null\n    }\n  },\n  data() {\n    return {\n      approved: this.isTokenTransfer ? false : true,\n      receipt: null,\n      scheduledTxAddress: null,\n      mined: false\n    };\n  },\n  computed: {\n    ...mapState(['notifications', 'web3', 'account', 'gasPrice', 'network'])\n  },\n  watch: {\n    async notifications() {\n      const notifications = this.notifications[this.account.address];\n      const latestNotification = notifications[0];\n\n      if (latestNotification.hash) {\n        if (\n          latestNotification.status === 'complete' &&\n          this.txHash === latestNotification.hash\n        ) {\n          const receipt = await this.web3.eth.getTransactionReceipt(\n            this.txHash\n          );\n          const util = new Util(this.web3);\n          this.receipt = receipt;\n          this.scheduledTxAddress = util.getTransactionRequestAddressFromReceipt(\n            receipt\n          );\n          this.mined = true;\n        } else if (latestNotification.status === 'pending') {\n          const transaction = await this.web3.eth.getTransaction(\n            latestNotification.hash\n          );\n\n          if (transaction === null) {\n            Toast.responseHandler(\n              new Error('Non-existing transaction detected'),\n              Toast.ERROR\n            );\n            return;\n          }\n\n          if (\n            transaction.input.includes(\n              EAC_SCHEDULING_CONFIG.APPROVE_TOKEN_TRANSFER_METHOD_ID\n            )\n          ) {\n            if (\n              transaction.input.includes(this.scheduledTxAddress.substring(2))\n            ) {\n              this.approved = true;\n            }\n          }\n        }\n      }\n    }\n  },\n  methods: {\n    async approveToken() {\n      if (!this.selectedCurrency) {\n        Toast.responseHandler(\n          new Error(`${this.txHash} is not a token transfer.`),\n          Toast.ERROR\n        );\n        return;\n      }\n\n      const tokenContract = await new this.web3.eth.Contract(\n        ERC20,\n        this.selectedCurrency.address\n      );\n\n      const coinbase = await this.web3.eth.getCoinbase();\n      const tokenAmount = new BigNumber(\n        this.amount * Math.pow(10, this.selectedCurrency.decimals)\n      );\n\n      const approveTokensData = tokenContract.methods\n        .approve(this.scheduledTxAddress, tokenAmount.toString())\n        .encodeABI();\n      const nonce = await this.web3.eth.getTransactionCount(coinbase, 'latest');\n\n      const numIfHex = input =>\n        this.web3.utils.isHexStrict(input)\n          ? this.web3.utils.hexToNumber(input)\n          : input;\n\n      const scheduledTokensApproveTransaction = {\n        from: coinbase,\n        to: this.selectedCurrency.address,\n        value: '',\n        data: approveTokensData,\n        nonce: numIfHex(nonce),\n        gasPrice: this.web3.utils.toWei(\n          numIfHex(this.gasPrice).toString(),\n          'gwei'\n        )\n      };\n\n      const estimatedGasLimit = await this.web3.eth.estimateGas(\n        scheduledTokensApproveTransaction\n      );\n      scheduledTokensApproveTransaction.gasLimit = estimatedGasLimit + 1000000;\n      const approveTx = new Transaction(scheduledTokensApproveTransaction);\n\n      const json = approveTx.toJSON(true);\n      json.from = coinbase;\n      this.web3.eth.sendTransaction(json).catch(err => {\n        Toast.responseHandler(err, Toast.ERROR);\n      });\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\">\n@import 'ScheduledSuccess.scss';\n</style>\n"],"sourceRoot":"src/dapps/ScheduleTransaction/components"}]}