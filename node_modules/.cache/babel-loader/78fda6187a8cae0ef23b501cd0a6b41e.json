{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/layouts/InterfaceLayout/InterfaceLayout.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/layouts/InterfaceLayout/InterfaceLayout.vue","mtime":1574664278302},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js","mtime":1574664275010},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js","mtime":1574664277774}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState } from 'vuex';\nimport ENS from 'ethereum-ens';\nimport WalletPasswordModal from '@/components/WalletPasswordModal';\nimport EnterPinNumberModal from '@/components/EnterPinNumberModal';\nimport NetworkAndAddressModal from '@/layouts/AccessWalletLayout/components/NetworkAndAddressModal';\nimport HardwarePasswordModal from '@/layouts/AccessWalletLayout/components/HardwarePasswordModal';\nimport MnemonicPasswordModal from '@/layouts/AccessWalletLayout/components/MnemonicPasswordModal';\nimport MnemonicModal from '@/layouts/AccessWalletLayout/components/MnemonicModal';\nimport LedgerAppModal from '@/layouts/AccessWalletLayout/components/LedgerAppModal';\nimport InterfaceAddress from \"./components/InterfaceAddress\";\nimport InterfaceBalance from \"./components/InterfaceBalance\";\nimport InterfaceNetwork from \"./components/InterfaceNetwork\";\nimport InterfaceSideMenu from \"./components/InterfaceSideMenu\";\nimport InterfaceTokens from \"./components/InterfaceTokens\";\nimport MobileInterfaceAddress from \"./components/MobileInterfaceAddress\";\nimport PrintModal from \"./components/PrintModal\";\nimport { Web3Wallet } from '@/wallets/software';\nimport { Toast } from '@/helpers';\nimport { toChecksumAddress } from '@/helpers/addressUtils';\nimport * as networkTypes from '@/networks/types';\nimport { BigNumber } from 'bignumber.js';\nimport store from 'store';\nimport TokenBalance from '@myetherwallet/eth-token-balance';\nimport sortByBalance from '@/helpers/sortByBalance.js';\nimport AddressQrcodeModal from '@/components/AddressQrcodeModal';\nimport web3Utils from 'web3-utils';\nimport { isAddress } from '@/helpers/addressUtils';\nimport { LedgerWallet, TrezorWallet, BitBoxWallet, SecalotWallet, KeepkeyWallet } from '@/wallets';\nimport { WEB3_WALLET as WEB3_TYPE, LEDGER as LEDGER_TYPE, TREZOR as TREZOR_TYPE, BITBOX as BITBOX_TYPE, SECALOT as SECALOT_TYPE, KEEPKEY as KEEPKEY_TYPE, MNEMONIC as MNEMONIC_TYPE } from '@/wallets/bip44/walletTypes';\nexport default {\n  name: 'Interface',\n  components: {\n    'interface-side-menu': InterfaceSideMenu,\n    'interface-address': InterfaceAddress,\n    'interface-balance': InterfaceBalance,\n    'interface-network': InterfaceNetwork,\n    'interface-tokens': InterfaceTokens,\n    'wallet-password-modal': WalletPasswordModal,\n    'print-modal': PrintModal,\n    'network-and-address-modal': NetworkAndAddressModal,\n    'hardware-password-modal': HardwarePasswordModal,\n    'mnemonic-modal': MnemonicModal,\n    'mnemonic-password-modal': MnemonicPasswordModal,\n    'enter-pin-number-modal': EnterPinNumberModal,\n    'mobile-interface-address': MobileInterfaceAddress,\n    'address-qrcode-modal': AddressQrcodeModal,\n    'ledger-app-modal': LedgerAppModal\n  },\n  data: function data() {\n    return {\n      balance: '0',\n      blockNumber: 0,\n      tokens: [],\n      receivedTokens: false,\n      tokensWithBalance: [],\n      pollBlock: function pollBlock() {},\n      pollNetwork: function pollNetwork() {},\n      pollddress: function pollddress() {},\n      highestGas: '0',\n      alert: {\n        show: false,\n        msg: ''\n      },\n      hws: {\n        ledger: LedgerWallet,\n        trezor: TrezorWallet,\n        bitbox: BitBoxWallet,\n        secalot: SecalotWallet\n      },\n      hwInstance: {},\n      walletConstructor: function walletConstructor() {},\n      hardwareBrand: '',\n      phrase: '',\n      nonce: '0',\n      value: '0',\n      data: '',\n      to: '',\n      gaslimit: '21000',\n      gas: 0,\n      tokensymbol: '',\n      prefilled: false\n    };\n  },\n  computed: _objectSpread({\n    isSidemenuOpen: function isSidemenuOpen() {\n      return this.sidemenuOpen;\n    },\n    address: function address() {\n      if (this.wallet !== null) {\n        return toChecksumAddress(this.account.address);\n      }\n    }\n  }, mapState(['network', 'account', 'online', 'web3', 'Networks', 'sidemenuOpen', 'wallet', 'linkQuery'])),\n  watch: {\n    web3: function web3() {\n      this.setupOnlineEnvironment();\n    },\n    address: function address(val) {\n      if (val) this.setupOnlineEnvironment();\n    }\n  },\n  mounted: function mounted() {\n    this.setupOnlineEnvironment();\n  },\n  destroyed: function destroyed() {\n    this.clearIntervals();\n  },\n  methods: {\n    checkPrefilled: function checkPrefilled() {\n      var _self = this;\n\n      var hasLinkQuery = Object.keys(_self.linkQuery).length;\n\n      if (hasLinkQuery > 0) {\n        _self.prefilled = true;\n        var _self$linkQuery = _self.linkQuery,\n            value = _self$linkQuery.value,\n            data = _self$linkQuery.data,\n            to = _self$linkQuery.to,\n            gaslimit = _self$linkQuery.gaslimit,\n            gas = _self$linkQuery.gas,\n            tokensymbol = _self$linkQuery.tokensymbol,\n            network = _self$linkQuery.network;\n        _self.value = value && new BigNumber(value).gt(0) ? new BigNumber(value).toFixed() : '0';\n        _self.data = data && web3Utils.isHexStrict(data) ? data : '';\n        _self.to = to && isAddress(to) ? to : '';\n        _self.gaslimit = gaslimit && new BigNumber(gaslimit).gt(0) ? gaslimit : '21000';\n        _self.gas = gas && new BigNumber(gas).gt(0) ? new BigNumber(gas) : 0;\n        _self.tokensymbol = tokensymbol ? tokensymbol : '';\n\n        if (network) {\n          var foundNetwork = _self.Networks[network.toUpperCase()]; // eslint-disable-next-line\n\n\n          if (!!foundNetwork) {\n            _self.$store.dispatch('switchNetwork', foundNetwork[0]).then(function () {\n              _self.$store.dispatch('setWeb3Instance');\n            });\n          }\n        }\n\n        _self.$store.dispatch('saveQueryVal', {});\n      }\n    },\n    clearPrefilled: function clearPrefilled() {\n      this.value = '0';\n      this.data = '';\n      this.to = '';\n      this.gaslimit = '21000';\n      this.gas = 0;\n      this.tokensymbol = '';\n      this.prefilled = false;\n    },\n    openAddressQrcode: function openAddressQrcode() {\n      this.$refs.addressQrcodeModal.$refs.addressQrcode.show();\n    },\n    mnemonicphrasePasswordModalOpen: function mnemonicphrasePasswordModalOpen(phrase) {\n      this.phrase = phrase;\n      this.$refs.mnemonicPhraseModal.$refs.mnemonicPhrase.hide();\n      this.$refs.mnemonicPhrasePassword.$refs.password.show();\n    },\n    toggleNetworkAddrModal: function toggleNetworkAddrModal(walletInstance) {\n      this.$refs.hardwareModal.$refs.password.hide();\n      this.$refs.mnemonicPhrasePassword.$refs.password.hide();\n      this.hwInstance = walletInstance;\n      this.$refs.networkAddress.$refs.networkAndAddress.show();\n    },\n    togglePasswordModal: function togglePasswordModal(construct, brand) {\n      this.walletConstructor = construct;\n      this.hardwareBrand = brand;\n      this.$refs.hardwareModal.$refs.password.show();\n    },\n    ledgerAppModalOpen: function ledgerAppModalOpen() {\n      this.$refs.ledgerAppModal.$refs.ledgerApp.show();\n    },\n    switchAddress: function switchAddress() {\n      var _this = this;\n\n      switch (this.account.identifier) {\n        case LEDGER_TYPE:\n          this.ledgerAppModalOpen();\n          break;\n\n        case TREZOR_TYPE:\n          TrezorWallet().then(function (_newWallet) {\n            _this.toggleNetworkAddrModal(_newWallet);\n          }).catch(TrezorWallet.errorHandler);\n          break;\n\n        case BITBOX_TYPE:\n          this.togglePasswordModal(BitBoxWallet, 'BitBox');\n          break;\n\n        case SECALOT_TYPE:\n          this.togglePasswordModal(SecalotWallet, 'Secalot');\n          break;\n\n        case MNEMONIC_TYPE:\n          this.$refs.mnemonicPhraseModal.$refs.mnemonicPhrase.show();\n          break;\n\n        case KEEPKEY_TYPE:\n          KeepkeyWallet(false, this.$eventHub).then(function (_newWallet) {\n            _this.toggleNetworkAddrModal(_newWallet);\n          }).catch(KeepkeyWallet.errorHandler);\n          break;\n\n        default:\n          Toast.responseHandler(new Error(\"Wallet type \".concat(this.account.identifier, \" can't switch addresses\")), false);\n      }\n    },\n    print: function print() {\n      this.$refs.printModal.$refs.print.show();\n    },\n    toggleSideMenu: function toggleSideMenu() {\n      this.$store.commit('TOGGLE_SIDEMENU');\n    },\n    fetchTokens: function () {\n      var _fetchTokens = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var tokens, tb;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.receivedTokens = false;\n                tokens = [];\n\n                if (!(this.network.type.chainID === 1 || this.network.type.chainID === 3)) {\n                  _context.next = 16;\n                  break;\n                }\n\n                tb = new TokenBalance(this.web3.currentProvider);\n                _context.prev = 4;\n                _context.next = 7;\n                return tb.getBalance(this.account.address);\n\n              case 7:\n                tokens = _context.sent;\n                tokens = tokens.map(function (token) {\n                  token.address = token.addr;\n                  delete token.addr;\n                  return token;\n                });\n                _context.next = 14;\n                break;\n\n              case 11:\n                _context.prev = 11;\n                _context.t0 = _context[\"catch\"](4);\n                tokens = this.network.type.tokens.map(function (token) {\n                  token.balance = 'Load';\n                  return token;\n                });\n\n              case 14:\n                _context.next = 17;\n                break;\n\n              case 16:\n                tokens = this.network.type.tokens.map(function (token) {\n                  token.balance = 'Load';\n                  return token;\n                });\n\n              case 17:\n                return _context.abrupt(\"return\", tokens);\n\n              case 18:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[4, 11]]);\n      }));\n\n      function fetchTokens() {\n        return _fetchTokens.apply(this, arguments);\n      }\n\n      return fetchTokens;\n    }(),\n    setNonce: function () {\n      var _setNonce = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var fetchedNonce;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                store.set(this.web3.utils.sha3(this.account.address), {\n                  nonce: '0x00',\n                  timestamp: 0\n                });\n                _context2.next = 3;\n                return this.web3.eth.getTransactionCount(this.account.address).catch(function (e) {\n                  Toast.responseHandler(e, Toast.ERROR);\n                });\n\n              case 3:\n                fetchedNonce = _context2.sent;\n                this.nonce = new BigNumber(fetchedNonce).toString();\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function setNonce() {\n        return _setNonce.apply(this, arguments);\n      }\n\n      return setNonce;\n    }(),\n    getTokenBalance: function () {\n      var _getTokenBalance = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3(token) {\n        var web3, contractAbi, contract, data, balance;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                web3 = this.web3;\n                contractAbi = [{\n                  name: 'balanceOf',\n                  type: 'function',\n                  constant: true,\n                  inputs: [{\n                    name: 'address',\n                    type: 'address'\n                  }],\n                  outputs: [{\n                    name: 'out',\n                    type: 'uint256'\n                  }]\n                }];\n                contract = new web3.eth.Contract(contractAbi);\n                data = contract.methods.balanceOf(this.account.address).encodeABI();\n                _context3.next = 7;\n                return web3.eth.call({\n                  to: token.address,\n                  data: data\n                }).then(function (res) {\n                  var tokenBalance;\n\n                  if (Number(res) === 0 || res === '0x') {\n                    tokenBalance = 0;\n                  } else {\n                    var denominator = new BigNumber(10).pow(token.decimals);\n                    tokenBalance = new BigNumber(res).div(denominator).toString();\n                  }\n\n                  return tokenBalance;\n                }).catch(function (e) {\n                  Toast.responseHandler(e, false);\n                });\n\n              case 7:\n                balance = _context3.sent;\n                return _context3.abrupt(\"return\", balance);\n\n              case 11:\n                _context3.prev = 11;\n                _context3.t0 = _context3[\"catch\"](0);\n                Toast.responseHandler(_context3.t0, Toast.ERROR);\n\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 11]]);\n      }));\n\n      function getTokenBalance(_x) {\n        return _getTokenBalance.apply(this, arguments);\n      }\n\n      return getTokenBalance;\n    }(),\n    setCustomTokenStore: function setCustomTokenStore() {\n      var customTokenStore = store.get('customTokens');\n      Object.keys(networkTypes).forEach(function (network) {\n        if (customTokenStore[networkTypes[network].name] === undefined) {\n          customTokenStore[networkTypes[network].name] = [];\n        }\n      });\n      store.set('customTokens', customTokenStore);\n    },\n    setTokens: function () {\n      var _setTokens = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4() {\n        var tokens;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                this.tokens = [];\n                _context4.next = 3;\n                return this.fetchTokens();\n\n              case 3:\n                tokens = _context4.sent;\n                tokens = tokens.sort(function (a, b) {\n                  if (a.name.toUpperCase() < b.name.toUpperCase()) {\n                    return -1;\n                  } else if (a.name.toUpperCase() > b.name.toUpperCase()) {\n                    return 1;\n                  }\n\n                  return 0;\n                }).map(function (token) {\n                  var balanceCheck = new BigNumber(token.balance);\n                  var balance = balanceCheck.isNaN() ? token.balance : balanceCheck.div(new BigNumber(10).pow(token.decimals)).toFixed();\n                  var convertedToken = {\n                    address: token.address,\n                    balance: balance,\n                    decimals: token.decimals,\n                    email: token.email,\n                    name: token.name,\n                    symbol: token.symbol,\n                    website: token.website\n                  };\n                  return convertedToken;\n                });\n                this.tokens = tokens.sort(sortByBalance);\n                this.setTokensWithBalance();\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function setTokens() {\n        return _setTokens.apply(this, arguments);\n      }\n\n      return setTokens;\n    }(),\n    setTokensWithBalance: function setTokensWithBalance() {\n      var _this2 = this;\n\n      var customStore = store.get('customTokens');\n\n      if (customStore !== undefined && customStore[this.network.type.name] !== undefined && customStore[this.network.type.name].length > 0) {\n        new Promise(function (resolve) {\n          var newArr = customStore[_this2.network.type.name].map(\n          /*#__PURE__*/\n          function () {\n            var _ref = _asyncToGenerator(\n            /*#__PURE__*/\n            regeneratorRuntime.mark(function _callee5(token) {\n              return regeneratorRuntime.wrap(function _callee5$(_context5) {\n                while (1) {\n                  switch (_context5.prev = _context5.next) {\n                    case 0:\n                      _context5.next = 2;\n                      return _this2.getTokenBalance(token);\n\n                    case 2:\n                      token.balance = _context5.sent;\n                      return _context5.abrupt(\"return\", token);\n\n                    case 4:\n                    case \"end\":\n                      return _context5.stop();\n                  }\n                }\n              }, _callee5);\n            }));\n\n            return function (_x2) {\n              return _ref.apply(this, arguments);\n            };\n          }());\n\n          Promise.all(newArr).then(function (res) {\n            customStore[_this2.network.type.name] = res;\n            store.set('customTokens', customStore);\n            resolve(res);\n          });\n        }).then(function (res) {\n          var allTokens = _this2.tokens.filter(function (token) {\n            return token.balance > 0;\n          }).concat(res.filter(function (token) {\n            return token.balance > 0;\n          }));\n\n          _this2.tokensWithBalance = allTokens;\n          _this2.receivedTokens = true;\n        }).catch(function (e) {\n          Toast.responseHandler(e, Toast.ERROR);\n        });\n      } else {\n        this.receivedTokens = true;\n        this.tokensWithBalance = this.tokens.filter(function (token) {\n          return token.balance > 0;\n        });\n      }\n    },\n    getBlock: function getBlock() {\n      var _this3 = this;\n\n      this.web3.eth.getBlockNumber().then(function (res) {\n        _this3.blockNumber = res;\n\n        _this3.$store.dispatch('updateBlockNumber', res);\n      }).catch(function (e) {\n        Toast.responseHandler(e, Toast.ERROR);\n      });\n    },\n    getBalance: function getBalance() {\n      var _this4 = this;\n\n      var web3 = this.web3;\n      web3.eth.getBalance(this.address.toLowerCase()).then(function (res) {\n        _this4.balance = web3.utils.fromWei(res, 'ether');\n\n        _this4.$store.dispatch('setAccountBalance', res);\n      }).catch(function (e) {\n        Toast.responseHandler(e, Toast.ERROR);\n      });\n    },\n    checkWeb3WalletAddrChange: function checkWeb3WalletAddrChange() {\n      var _this5 = this;\n\n      var web3 = this.web3;\n      window.ethereum.on('accountsChanged', function (account) {\n        if (account.length > 1) {\n          var wallet = new Web3Wallet(account[0]);\n\n          _this5.$store.dispatch('decryptWallet', [wallet, web3]);\n        }\n      });\n    },\n    checkAndSetNetwork: function checkAndSetNetwork(id) {\n      var _this6 = this;\n\n      if (this.network.type.chainID.toString() !== \"\".concat(id)) {\n        Object.keys(networkTypes).some(function (net) {\n          if (networkTypes[net].chainID.toString() === \"\".concat(id) && _this6.Networks[net]) {\n            _this6.$store.dispatch('switchNetwork', _this6.Networks[net][0]);\n\n            return true;\n          }\n        });\n      }\n    },\n    matchWeb3WalletNetwork: function matchWeb3WalletNetwork() {\n      var _this7 = this;\n\n      this.web3.eth.net.getId().then(function (id) {\n        _this7.checkAndSetNetwork(id);\n      });\n      window.ethereum.on('networkChanged', function (netId) {\n        _this7.checkAndSetNetwork(netId);\n      });\n    },\n    setupOnlineEnvironment: web3Utils._.debounce(function () {\n      var _this8 = this;\n\n      this.clearIntervals();\n\n      if (store.get('customTokens') === undefined) {\n        store.set('customTokens', {});\n        this.setCustomTokenStore();\n      } else {\n        this.setCustomTokenStore();\n      }\n\n      if (this.online) {\n        if (this.account.address !== null) {\n          if (this.account.identifier === WEB3_TYPE) {\n            if (window.ethereum.isMetaMask || window.ethereum.isMew) {\n              this.checkWeb3WalletAddrChange();\n              this.matchWeb3WalletNetwork();\n            } else {\n              this.web3WalletPollNetwork();\n              this.web3WalletPollAddress();\n            }\n          }\n\n          this.setENS();\n          this.getBlock();\n          this.getBalance();\n          this.setTokens();\n          this.setNonce();\n          this.getHighestGas();\n          this.getBlockUpdater().then(function (_sub) {\n            _this8.pollBlock = _sub;\n          });\n        }\n      }\n    }),\n    getBlockUpdater: function () {\n      var _getBlockUpdater = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee6() {\n        var _this9 = this;\n\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                return _context6.abrupt(\"return\", new Promise(function (resolve) {\n                  var subscription = _this9.web3.eth.subscribe('newBlockHeaders', function (err) {\n                    if (err) {\n                      subscription = setInterval(_this9.getBlock, 14000);\n                    }\n\n                    resolve(subscription);\n                  }).on('data', function (headers) {\n                    _this9.blockNumber = headers.number;\n                  });\n                }));\n\n              case 1:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      function getBlockUpdater() {\n        return _getBlockUpdater.apply(this, arguments);\n      }\n\n      return getBlockUpdater;\n    }(),\n    getHighestGas: function getHighestGas() {\n      var _this10 = this;\n\n      this.web3.eth.getGasPrice().then(function (res) {\n        _this10.highestGas = new BigNumber(_this10.web3.utils.fromWei(res, 'gwei')).toString();\n      }).catch(function (e) {\n        Toast.responseHandler(e, Toast.ERROR);\n      });\n    },\n    setENS: function setENS() {\n      if (this.network.type.ens) {\n        this.$store.dispatch('setENS', new ENS(this.web3.currentProvider, this.network.type.ens.registry));\n      } else {\n        this.$store.dispatch('setENS', null);\n      }\n    },\n    clearIntervals: function clearIntervals() {\n      if (this.pollBlock.unsubscribe) this.pollBlock.unsubscribe();else clearInterval(this.pollBlock);\n      clearInterval(this.pollNetwork);\n      clearInterval(this.pollAddress);\n    },\n    web3WalletPollNetwork: function web3WalletPollNetwork() {\n      var _this11 = this;\n\n      if (!window.web3.eth.net || typeof window.web3.eth.net.getId !== 'function') return;\n      this.pollNetwork = setInterval(function () {\n        window.web3.eth.net.getId().then(function (id) {\n          if (_this11.network.type.chainID.toString() !== id) {\n            Object.keys(networkTypes).some(function (net) {\n              if (networkTypes[net].chainID === id && _this11.Networks[net]) {\n                _this11.$store.dispatch('switchNetwork', _this11.Networks[net]);\n\n                clearInterval(_this11.pollNetwork);\n                return true;\n              }\n            });\n          }\n        }).catch(function (e) {\n          Toast.responseHandler(e, false);\n        });\n      }, 500);\n    },\n    web3WalletPollAddress: function web3WalletPollAddress() {\n      var _this12 = this;\n\n      this.pollAddress = setInterval(function () {\n        if (!window.web3.eth) {\n          Toast.responseHandler(new Error('Web3 Instance not found!'), Toast.ERROR);\n          clearInterval(_this12.pollAddress);\n        }\n\n        window.web3.eth.getAccounts(function (err, accounts) {\n          if (err) {\n            Toast.responseHandler(err, false);\n            clearInterval(_this12.pollAddress);\n          }\n\n          if (!accounts.length) {\n            Toast.responseHandler(new Error('Please make sure that your Web3 Wallet is unlocked'), Toast.ERROR);\n            clearInterval(_this12.pollAddress);\n          }\n\n          var address = accounts[0];\n\n          if (_this12.account.address !== null && address.toLowerCase() !== _this12.account.address.toLowerCase()) {\n            var wallet = new Web3Wallet(address);\n\n            _this12.$store.dispatch('decryptWallet', [wallet, window.web3.currentProvider]);\n\n            clearInterval(_this12.pollAddress);\n          }\n        });\n      }, 500);\n    }\n  }\n};",{"version":3,"sources":["InterfaceLayout.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"interface-layout\">\n    <!-- Modals ******************************************************** -->\n    <!-- Modals ******************************************************** -->\n    <!-- Modals ******************************************************** -->\n    <wallet-password-modal />\n    <enter-pin-number-modal />\n    <ledger-app-modal\n      ref=\"ledgerAppModal\"\n      :networks=\"Networks\"\n      @hardwareWalletOpen=\"toggleNetworkAddrModal\"\n    />\n    <mnemonic-modal\n      ref=\"mnemonicPhraseModal\"\n      :hardware-wallet-open=\"toggleNetworkAddrModal\"\n    />\n\n    <mnemonic-password-modal\n      ref=\"mnemonicPhrasePassword\"\n      :hardware-wallet-open=\"toggleNetworkAddrModal\"\n      :phrase=\"phrase\"\n    />\n    <network-and-address-modal\n      ref=\"networkAddress\"\n      :hardware-wallet=\"hwInstance\"\n    />\n    <hardware-password-modal\n      ref=\"hardwareModal\"\n      :wallet-constructor=\"walletConstructor\"\n      :hardware-brand=\"hardwareBrand\"\n      @hardwareWalletOpen=\"toggleNetworkAddrModal\"\n    />\n    <print-modal\n      ref=\"printModal\"\n      :priv-key=\"!wallet\"\n      :address=\"account.address\"\n    />\n    <address-qrcode-modal ref=\"addressQrcodeModal\" :address=\"account.address\" />\n    <!-- Modals ******************************************************** -->\n    <!-- Modals ******************************************************** -->\n    <!-- Modals ******************************************************** -->\n    <div class=\"mobile-interface-address-block\">\n      <mobile-interface-address\n        :address=\"address\"\n        :print=\"print\"\n        :switch-addr=\"switchAddress\"\n      />\n    </div>\n\n    <div class=\"wrap\">\n      <div class=\"sidemenu\">\n        <div\n          :class=\"isSidemenuOpen && 'side-nav-open'\"\n          class=\"side-nav-background\"\n          @click=\"toggleSideMenu;\"\n        />\n        <div :class=\"isSidemenuOpen && 'side-nav-open'\" class=\"side-nav\">\n          <interface-side-menu />\n        </div>\n      </div>\n      <div class=\"contents\">\n        <div class=\"tx-contents\">\n          <div class=\"content-container mobile-hide\">\n            <interface-address\n              v-if=\"Object.keys(wallet).length > 1\"\n              :address=\"address\"\n              :print=\"print\"\n              :switch-addr=\"switchAddress\"\n              :display-addr=\"wallet.displayAddress\"\n              :qrcode=\"openAddressQrcode\"\n            />\n          </div>\n          <div class=\"content-container mobile-hide\">\n            <interface-balance :balance=\"balance\" :get-balance=\"getBalance\" />\n          </div>\n          <div class=\"content-container mobile-hide\">\n            <interface-network :block-number=\"blockNumber\" />\n          </div>\n          <router-view\n            :tokens-with-balance=\"tokensWithBalance\"\n            :get-balance=\"getBalance\"\n            :tokens=\"tokens\"\n            :highest-gas=\"highestGas\"\n            :nonce=\"nonce\"\n            :value=\"value\"\n            :data=\"data\"\n            :to=\"to\"\n            :gaslimit=\"gaslimit\"\n            :gas=\"gas\"\n            :tokensymbol=\"tokensymbol\"\n            :is-prefilled=\"prefilled\"\n            :clear-prefilled=\"clearPrefilled\"\n            :check-prefilled=\"checkPrefilled\"\n          />\n          <div class=\"tokens\">\n            <interface-tokens\n              :fetch-tokens=\"setTokens\"\n              :get-token-balance=\"getTokenBalance\"\n              :tokens=\"tokens\"\n              :received-tokens=\"receivedTokens\"\n              :reset-token-selection=\"setTokensWithBalance\"\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport ENS from 'ethereum-ens';\nimport WalletPasswordModal from '@/components/WalletPasswordModal';\nimport EnterPinNumberModal from '@/components/EnterPinNumberModal';\nimport NetworkAndAddressModal from '@/layouts/AccessWalletLayout/components/NetworkAndAddressModal';\nimport HardwarePasswordModal from '@/layouts/AccessWalletLayout/components/HardwarePasswordModal';\nimport MnemonicPasswordModal from '@/layouts/AccessWalletLayout/components/MnemonicPasswordModal';\nimport MnemonicModal from '@/layouts/AccessWalletLayout/components/MnemonicModal';\nimport LedgerAppModal from '@/layouts/AccessWalletLayout/components/LedgerAppModal';\nimport InterfaceAddress from './components/InterfaceAddress';\nimport InterfaceBalance from './components/InterfaceBalance';\nimport InterfaceNetwork from './components/InterfaceNetwork';\nimport InterfaceSideMenu from './components/InterfaceSideMenu';\nimport InterfaceTokens from './components/InterfaceTokens';\nimport MobileInterfaceAddress from './components/MobileInterfaceAddress';\nimport PrintModal from './components/PrintModal';\nimport { Web3Wallet } from '@/wallets/software';\nimport { Toast } from '@/helpers';\nimport { toChecksumAddress } from '@/helpers/addressUtils';\nimport * as networkTypes from '@/networks/types';\nimport { BigNumber } from 'bignumber.js';\nimport store from 'store';\nimport TokenBalance from '@myetherwallet/eth-token-balance';\nimport sortByBalance from '@/helpers/sortByBalance.js';\nimport AddressQrcodeModal from '@/components/AddressQrcodeModal';\nimport web3Utils from 'web3-utils';\nimport { isAddress } from '@/helpers/addressUtils';\nimport {\n  LedgerWallet,\n  TrezorWallet,\n  BitBoxWallet,\n  SecalotWallet,\n  KeepkeyWallet\n} from '@/wallets';\nimport {\n  WEB3_WALLET as WEB3_TYPE,\n  LEDGER as LEDGER_TYPE,\n  TREZOR as TREZOR_TYPE,\n  BITBOX as BITBOX_TYPE,\n  SECALOT as SECALOT_TYPE,\n  KEEPKEY as KEEPKEY_TYPE,\n  MNEMONIC as MNEMONIC_TYPE\n} from '@/wallets/bip44/walletTypes';\nexport default {\n  name: 'Interface',\n  components: {\n    'interface-side-menu': InterfaceSideMenu,\n    'interface-address': InterfaceAddress,\n    'interface-balance': InterfaceBalance,\n    'interface-network': InterfaceNetwork,\n    'interface-tokens': InterfaceTokens,\n    'wallet-password-modal': WalletPasswordModal,\n    'print-modal': PrintModal,\n    'network-and-address-modal': NetworkAndAddressModal,\n    'hardware-password-modal': HardwarePasswordModal,\n    'mnemonic-modal': MnemonicModal,\n    'mnemonic-password-modal': MnemonicPasswordModal,\n    'enter-pin-number-modal': EnterPinNumberModal,\n    'mobile-interface-address': MobileInterfaceAddress,\n    'address-qrcode-modal': AddressQrcodeModal,\n    'ledger-app-modal': LedgerAppModal\n  },\n  data() {\n    return {\n      balance: '0',\n      blockNumber: 0,\n      tokens: [],\n      receivedTokens: false,\n      tokensWithBalance: [],\n      pollBlock: () => {},\n      pollNetwork: () => {},\n      pollddress: () => {},\n      highestGas: '0',\n      alert: {\n        show: false,\n        msg: ''\n      },\n      hws: {\n        ledger: LedgerWallet,\n        trezor: TrezorWallet,\n        bitbox: BitBoxWallet,\n        secalot: SecalotWallet\n      },\n      hwInstance: {},\n      walletConstructor: () => {},\n      hardwareBrand: '',\n      phrase: '',\n      nonce: '0',\n      value: '0',\n      data: '',\n      to: '',\n      gaslimit: '21000',\n      gas: 0,\n      tokensymbol: '',\n      prefilled: false\n    };\n  },\n  computed: {\n    isSidemenuOpen() {\n      return this.sidemenuOpen;\n    },\n    address() {\n      if (this.wallet !== null) {\n        return toChecksumAddress(this.account.address);\n      }\n    },\n    ...mapState([\n      'network',\n      'account',\n      'online',\n      'web3',\n      'Networks',\n      'sidemenuOpen',\n      'wallet',\n      'linkQuery'\n    ])\n  },\n  watch: {\n    web3() {\n      this.setupOnlineEnvironment();\n    },\n    address(val) {\n      if (val) this.setupOnlineEnvironment();\n    }\n  },\n  mounted() {\n    this.setupOnlineEnvironment();\n  },\n  destroyed() {\n    this.clearIntervals();\n  },\n  methods: {\n    checkPrefilled() {\n      const _self = this;\n      const hasLinkQuery = Object.keys(_self.linkQuery).length;\n      if (hasLinkQuery > 0) {\n        _self.prefilled = true;\n        const {\n          value,\n          data,\n          to,\n          gaslimit,\n          gas,\n          tokensymbol,\n          network\n        } = _self.linkQuery;\n        _self.value =\n          value && new BigNumber(value).gt(0)\n            ? new BigNumber(value).toFixed()\n            : '0';\n        _self.data = data && web3Utils.isHexStrict(data) ? data : '';\n        _self.to = to && isAddress(to) ? to : '';\n        _self.gaslimit =\n          gaslimit && new BigNumber(gaslimit).gt(0) ? gaslimit : '21000';\n        _self.gas = gas && new BigNumber(gas).gt(0) ? new BigNumber(gas) : 0;\n        _self.tokensymbol = tokensymbol ? tokensymbol : '';\n        if (network) {\n          const foundNetwork = _self.Networks[network.toUpperCase()];\n          // eslint-disable-next-line\n          if (!!foundNetwork) {\n            _self.$store.dispatch('switchNetwork', foundNetwork[0]).then(() => {\n              _self.$store.dispatch('setWeb3Instance');\n            });\n          }\n        }\n        _self.$store.dispatch('saveQueryVal', {});\n      }\n    },\n    clearPrefilled() {\n      this.value = '0';\n      this.data = '';\n      this.to = '';\n      this.gaslimit = '21000';\n      this.gas = 0;\n      this.tokensymbol = '';\n      this.prefilled = false;\n    },\n    openAddressQrcode() {\n      this.$refs.addressQrcodeModal.$refs.addressQrcode.show();\n    },\n    mnemonicphrasePasswordModalOpen(phrase) {\n      this.phrase = phrase;\n      this.$refs.mnemonicPhraseModal.$refs.mnemonicPhrase.hide();\n      this.$refs.mnemonicPhrasePassword.$refs.password.show();\n    },\n    toggleNetworkAddrModal(walletInstance) {\n      this.$refs.hardwareModal.$refs.password.hide();\n      this.$refs.mnemonicPhrasePassword.$refs.password.hide();\n      this.hwInstance = walletInstance;\n      this.$refs.networkAddress.$refs.networkAndAddress.show();\n    },\n    togglePasswordModal(construct, brand) {\n      this.walletConstructor = construct;\n      this.hardwareBrand = brand;\n      this.$refs.hardwareModal.$refs.password.show();\n    },\n    ledgerAppModalOpen() {\n      this.$refs.ledgerAppModal.$refs.ledgerApp.show();\n    },\n    switchAddress() {\n      switch (this.account.identifier) {\n        case LEDGER_TYPE:\n          this.ledgerAppModalOpen();\n          break;\n        case TREZOR_TYPE:\n          TrezorWallet()\n            .then(_newWallet => {\n              this.toggleNetworkAddrModal(_newWallet);\n            })\n            .catch(TrezorWallet.errorHandler);\n          break;\n        case BITBOX_TYPE:\n          this.togglePasswordModal(BitBoxWallet, 'BitBox');\n          break;\n        case SECALOT_TYPE:\n          this.togglePasswordModal(SecalotWallet, 'Secalot');\n          break;\n        case MNEMONIC_TYPE:\n          this.$refs.mnemonicPhraseModal.$refs.mnemonicPhrase.show();\n          break;\n        case KEEPKEY_TYPE:\n          KeepkeyWallet(false, this.$eventHub)\n            .then(_newWallet => {\n              this.toggleNetworkAddrModal(_newWallet);\n            })\n            .catch(KeepkeyWallet.errorHandler);\n          break;\n        default:\n          Toast.responseHandler(\n            new Error(\n              `Wallet type ${this.account.identifier} can't switch addresses`\n            ),\n            false\n          );\n      }\n    },\n    print() {\n      this.$refs.printModal.$refs.print.show();\n    },\n    toggleSideMenu() {\n      this.$store.commit('TOGGLE_SIDEMENU');\n    },\n    async fetchTokens() {\n      this.receivedTokens = false;\n      let tokens = [];\n      if (this.network.type.chainID === 1 || this.network.type.chainID === 3) {\n        const tb = new TokenBalance(this.web3.currentProvider);\n        try {\n          tokens = await tb.getBalance(this.account.address);\n          tokens = tokens.map(token => {\n            token.address = token.addr;\n            delete token.addr;\n            return token;\n          });\n        } catch (e) {\n          tokens = this.network.type.tokens.map(token => {\n            token.balance = 'Load';\n            return token;\n          });\n        }\n      } else {\n        tokens = this.network.type.tokens.map(token => {\n          token.balance = 'Load';\n          return token;\n        });\n      }\n      return tokens;\n    },\n    async setNonce() {\n      store.set(this.web3.utils.sha3(this.account.address), {\n        nonce: '0x00',\n        timestamp: 0\n      });\n      const fetchedNonce = await this.web3.eth\n        .getTransactionCount(this.account.address)\n        .catch(e => {\n          Toast.responseHandler(e, Toast.ERROR);\n        });\n      this.nonce = new BigNumber(fetchedNonce).toString();\n    },\n    async getTokenBalance(token) {\n      try {\n        const web3 = this.web3;\n        const contractAbi = [\n          {\n            name: 'balanceOf',\n            type: 'function',\n            constant: true,\n            inputs: [{ name: 'address', type: 'address' }],\n            outputs: [{ name: 'out', type: 'uint256' }]\n          }\n        ];\n        const contract = new web3.eth.Contract(contractAbi);\n        const data = contract.methods\n          .balanceOf(this.account.address)\n          .encodeABI();\n        const balance = await web3.eth\n          .call({\n            to: token.address,\n            data: data\n          })\n          .then(res => {\n            let tokenBalance;\n            if (Number(res) === 0 || res === '0x') {\n              tokenBalance = 0;\n            } else {\n              const denominator = new BigNumber(10).pow(token.decimals);\n              tokenBalance = new BigNumber(res).div(denominator).toString();\n            }\n            return tokenBalance;\n          })\n          .catch(e => {\n            Toast.responseHandler(e, false);\n          });\n\n        return balance;\n      } catch (e) {\n        Toast.responseHandler(e, Toast.ERROR);\n      }\n    },\n    setCustomTokenStore() {\n      const customTokenStore = store.get('customTokens');\n      Object.keys(networkTypes).forEach(network => {\n        if (customTokenStore[networkTypes[network].name] === undefined) {\n          customTokenStore[networkTypes[network].name] = [];\n        }\n      });\n      store.set('customTokens', customTokenStore);\n    },\n    async setTokens() {\n      this.tokens = [];\n      let tokens = await this.fetchTokens();\n      tokens = tokens\n        .sort((a, b) => {\n          if (a.name.toUpperCase() < b.name.toUpperCase()) {\n            return -1;\n          } else if (a.name.toUpperCase() > b.name.toUpperCase()) {\n            return 1;\n          }\n          return 0;\n        })\n        .map(token => {\n          const balanceCheck = new BigNumber(token.balance);\n          const balance = balanceCheck.isNaN()\n            ? token.balance\n            : balanceCheck.div(new BigNumber(10).pow(token.decimals)).toFixed();\n          const convertedToken = {\n            address: token.address,\n            balance: balance,\n            decimals: token.decimals,\n            email: token.email,\n            name: token.name,\n            symbol: token.symbol,\n            website: token.website\n          };\n          return convertedToken;\n        });\n\n      this.tokens = tokens.sort(sortByBalance);\n      this.setTokensWithBalance();\n    },\n    setTokensWithBalance() {\n      const customStore = store.get('customTokens');\n      if (\n        customStore !== undefined &&\n        customStore[this.network.type.name] !== undefined &&\n        customStore[this.network.type.name].length > 0\n      ) {\n        new Promise(resolve => {\n          const newArr = customStore[this.network.type.name].map(\n            async token => {\n              token.balance = await this.getTokenBalance(token);\n              return token;\n            }\n          );\n          Promise.all(newArr).then(res => {\n            customStore[this.network.type.name] = res;\n            store.set('customTokens', customStore);\n            resolve(res);\n          });\n        })\n          .then(res => {\n            const allTokens = this.tokens\n              .filter(token => token.balance > 0)\n              .concat(res.filter(token => token.balance > 0));\n            this.tokensWithBalance = allTokens;\n            this.receivedTokens = true;\n          })\n          .catch(e => {\n            Toast.responseHandler(e, Toast.ERROR);\n          });\n      } else {\n        this.receivedTokens = true;\n        this.tokensWithBalance = this.tokens.filter(token => token.balance > 0);\n      }\n    },\n    getBlock() {\n      this.web3.eth\n        .getBlockNumber()\n        .then(res => {\n          this.blockNumber = res;\n          this.$store.dispatch('updateBlockNumber', res);\n        })\n        .catch(e => {\n          Toast.responseHandler(e, Toast.ERROR);\n        });\n    },\n    getBalance() {\n      const web3 = this.web3;\n      web3.eth\n        .getBalance(this.address.toLowerCase())\n        .then(res => {\n          this.balance = web3.utils.fromWei(res, 'ether');\n          this.$store.dispatch('setAccountBalance', res);\n        })\n        .catch(e => {\n          Toast.responseHandler(e, Toast.ERROR);\n        });\n    },\n    checkWeb3WalletAddrChange() {\n      const web3 = this.web3;\n      window.ethereum.on('accountsChanged', account => {\n        if (account.length > 1) {\n          const wallet = new Web3Wallet(account[0]);\n          this.$store.dispatch('decryptWallet', [wallet, web3]);\n        }\n      });\n    },\n    checkAndSetNetwork(id) {\n      if (this.network.type.chainID.toString() !== `${id}`) {\n        Object.keys(networkTypes).some(net => {\n          if (\n            networkTypes[net].chainID.toString() === `${id}` &&\n            this.Networks[net]\n          ) {\n            this.$store.dispatch('switchNetwork', this.Networks[net][0]);\n            return true;\n          }\n        });\n      }\n    },\n    matchWeb3WalletNetwork() {\n      this.web3.eth.net.getId().then(id => {\n        this.checkAndSetNetwork(id);\n      });\n      window.ethereum.on('networkChanged', netId => {\n        this.checkAndSetNetwork(netId);\n      });\n    },\n    setupOnlineEnvironment: web3Utils._.debounce(function() {\n      this.clearIntervals();\n      if (store.get('customTokens') === undefined) {\n        store.set('customTokens', {});\n        this.setCustomTokenStore();\n      } else {\n        this.setCustomTokenStore();\n      }\n      if (this.online) {\n        if (this.account.address !== null) {\n          if (this.account.identifier === WEB3_TYPE) {\n            if (window.ethereum.isMetaMask || window.ethereum.isMew) {\n              this.checkWeb3WalletAddrChange();\n              this.matchWeb3WalletNetwork();\n            } else {\n              this.web3WalletPollNetwork();\n              this.web3WalletPollAddress();\n            }\n          }\n          this.setENS();\n          this.getBlock();\n          this.getBalance();\n          this.setTokens();\n          this.setNonce();\n          this.getHighestGas();\n          this.getBlockUpdater().then(_sub => {\n            this.pollBlock = _sub;\n          });\n        }\n      }\n    }),\n    async getBlockUpdater() {\n      return new Promise(resolve => {\n        let subscription = this.web3.eth\n          .subscribe('newBlockHeaders', err => {\n            if (err) {\n              subscription = setInterval(this.getBlock, 14000);\n            }\n            resolve(subscription);\n          })\n          .on('data', headers => {\n            this.blockNumber = headers.number;\n          });\n      });\n    },\n    getHighestGas() {\n      this.web3.eth\n        .getGasPrice()\n        .then(res => {\n          this.highestGas = new BigNumber(\n            this.web3.utils.fromWei(res, 'gwei')\n          ).toString();\n        })\n        .catch(e => {\n          Toast.responseHandler(e, Toast.ERROR);\n        });\n    },\n    setENS() {\n      if (this.network.type.ens) {\n        this.$store.dispatch(\n          'setENS',\n          new ENS(this.web3.currentProvider, this.network.type.ens.registry)\n        );\n      } else {\n        this.$store.dispatch('setENS', null);\n      }\n    },\n    clearIntervals() {\n      if (this.pollBlock.unsubscribe) this.pollBlock.unsubscribe();\n      else clearInterval(this.pollBlock);\n      clearInterval(this.pollNetwork);\n      clearInterval(this.pollAddress);\n    },\n    web3WalletPollNetwork() {\n      if (\n        !window.web3.eth.net ||\n        typeof window.web3.eth.net.getId !== 'function'\n      )\n        return;\n      this.pollNetwork = setInterval(() => {\n        window.web3.eth.net\n          .getId()\n          .then(id => {\n            if (this.network.type.chainID.toString() !== id) {\n              Object.keys(networkTypes).some(net => {\n                if (networkTypes[net].chainID === id && this.Networks[net]) {\n                  this.$store.dispatch('switchNetwork', this.Networks[net]);\n                  clearInterval(this.pollNetwork);\n                  return true;\n                }\n              });\n            }\n          })\n          .catch(e => {\n            Toast.responseHandler(e, false);\n          });\n      }, 500);\n    },\n    web3WalletPollAddress() {\n      this.pollAddress = setInterval(() => {\n        if (!window.web3.eth) {\n          Toast.responseHandler(\n            new Error('Web3 Instance not found!'),\n            Toast.ERROR\n          );\n          clearInterval(this.pollAddress);\n        }\n\n        window.web3.eth.getAccounts((err, accounts) => {\n          if (err) {\n            Toast.responseHandler(err, false);\n            clearInterval(this.pollAddress);\n          }\n          if (!accounts.length) {\n            Toast.responseHandler(\n              new Error('Please make sure that your Web3 Wallet is unlocked'),\n              Toast.ERROR\n            );\n            clearInterval(this.pollAddress);\n          }\n          const address = accounts[0];\n\n          if (\n            this.account.address !== null &&\n            address.toLowerCase() !== this.account.address.toLowerCase()\n          ) {\n            const wallet = new Web3Wallet(address);\n            this.$store.dispatch('decryptWallet', [\n              wallet,\n              window.web3.currentProvider\n            ]);\n            clearInterval(this.pollAddress);\n          }\n        });\n      }, 500);\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'InterfaceLayout-desktop.scss';\n@import 'InterfaceLayout-tablet.scss';\n@import 'InterfaceLayout-mobile.scss';\n</style>\n"],"sourceRoot":"src/layouts/InterfaceLayout"}]}