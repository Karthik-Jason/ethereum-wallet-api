{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/thread-loader/dist/cjs.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/containers/NotificationsContainer/components/NotificationTypes/TransactionNotification/TransactionNotification.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/containers/NotificationsContainer/components/NotificationTypes/TransactionNotification/TransactionNotification.vue","mtime":1574664278274},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/thread-loader/dist/cjs.js","mtime":1574664277654},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js","mtime":1574664275010},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js","mtime":1574664277774}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState } from 'vuex';\nimport NotificationHeader from \"../../NotificationHeader\";\nexport default {\n  components: {\n    'notification-header': NotificationHeader\n  },\n  props: {\n    expand: {\n      type: Function,\n      default: function _default() {}\n    },\n    notice: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    convertToGwei: {\n      type: Function,\n      default: function _default() {}\n    },\n    convertToEth: {\n      type: Function,\n      default: function _default() {}\n    },\n    getFiatValue: {\n      type: Function,\n      default: function _default() {}\n    },\n    dateString: {\n      type: Function,\n      default: function _default() {}\n    },\n    timeString: {\n      type: Function,\n      default: function _default() {}\n    },\n    errorMessageString: {\n      type: Function,\n      default: function _default() {}\n    },\n    processStatus: {\n      type: Function,\n      default: function _default() {}\n    },\n    hashLink: {\n      type: Function,\n      default: function _default() {}\n    },\n    addressLink: {\n      type: Function,\n      default: function _default() {}\n    }\n  },\n  data: function data() {\n    return {\n      unreadCount: 0\n    };\n  },\n  computed: _objectSpread({}, mapState(['web3', 'network', 'notifications', 'wallet']), {\n    errorMessage: function errorMessage() {\n      return this.errorMessageString(this.notice);\n    },\n    isError: function isError() {\n      return this.notice.body.error;\n    },\n    isContractCreation: function isContractCreation() {\n      return this.notice.body.contractAddress !== undefined && this.notice.body.contractAddress !== null;\n    },\n    isTokenTransfer: function isTokenTransfer() {\n      return this.notice.body.tokenTransferTo !== '';\n    },\n    details: function details() {\n      return this.notice.body;\n    },\n    txStatus: function txStatus() {\n      return this.processStatus(this.notice.status);\n    }\n  }),\n  methods: {\n    emitShowDetails: function emitShowDetails() {\n      this.$emit('showDetails', ['transaction', this.notice]);\n    }\n  }\n};",{"version":3,"sources":["TransactionNotification.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0GA,SAAA,QAAA,QAAA,MAAA;AACA,OAAA,kBAAA;AAEA,eAAA;AACA,EAAA,UAAA,EAAA;AACA,2BAAA;AADA,GADA;AAIA,EAAA,KAAA,EAAA;AACA,IAAA,MAAA,EAAA;AACA,MAAA,IAAA,EAAA,QADA;AAEA,MAAA,OAAA,EAAA,oBAAA,CAAA;AAFA,KADA;AAKA,IAAA,MAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA,oBAAA;AACA,eAAA,EAAA;AACA;AAJA,KALA;AAWA,IAAA,aAAA,EAAA;AACA,MAAA,IAAA,EAAA,QADA;AAEA,MAAA,OAAA,EAAA,oBAAA,CAAA;AAFA,KAXA;AAeA,IAAA,YAAA,EAAA;AACA,MAAA,IAAA,EAAA,QADA;AAEA,MAAA,OAAA,EAAA,oBAAA,CAAA;AAFA,KAfA;AAmBA,IAAA,YAAA,EAAA;AACA,MAAA,IAAA,EAAA,QADA;AAEA,MAAA,OAAA,EAAA,oBAAA,CAAA;AAFA,KAnBA;AAuBA,IAAA,UAAA,EAAA;AACA,MAAA,IAAA,EAAA,QADA;AAEA,MAAA,OAAA,EAAA,oBAAA,CAAA;AAFA,KAvBA;AA2BA,IAAA,UAAA,EAAA;AACA,MAAA,IAAA,EAAA,QADA;AAEA,MAAA,OAAA,EAAA,oBAAA,CAAA;AAFA,KA3BA;AA+BA,IAAA,kBAAA,EAAA;AACA,MAAA,IAAA,EAAA,QADA;AAEA,MAAA,OAAA,EAAA,oBAAA,CAAA;AAFA,KA/BA;AAmCA,IAAA,aAAA,EAAA;AACA,MAAA,IAAA,EAAA,QADA;AAEA,MAAA,OAAA,EAAA,oBAAA,CAAA;AAFA,KAnCA;AAuCA,IAAA,QAAA,EAAA;AACA,MAAA,IAAA,EAAA,QADA;AAEA,MAAA,OAAA,EAAA,oBAAA,CAAA;AAFA,KAvCA;AA2CA,IAAA,WAAA,EAAA;AACA,MAAA,IAAA,EAAA,QADA;AAEA,MAAA,OAAA,EAAA,oBAAA,CAAA;AAFA;AA3CA,GAJA;AAoDA,EAAA,IApDA,kBAoDA;AACA,WAAA;AACA,MAAA,WAAA,EAAA;AADA,KAAA;AAGA,GAxDA;AAyDA,EAAA,QAAA,oBACA,QAAA,CAAA,CAAA,MAAA,EAAA,SAAA,EAAA,eAAA,EAAA,QAAA,CAAA,CADA;AAEA,IAAA,YAFA,0BAEA;AACA,aAAA,KAAA,kBAAA,CAAA,KAAA,MAAA,CAAA;AACA,KAJA;AAKA,IAAA,OALA,qBAKA;AACA,aAAA,KAAA,MAAA,CAAA,IAAA,CAAA,KAAA;AACA,KAPA;AAQA,IAAA,kBARA,gCAQA;AACA,aACA,KAAA,MAAA,CAAA,IAAA,CAAA,eAAA,KAAA,SAAA,IACA,KAAA,MAAA,CAAA,IAAA,CAAA,eAAA,KAAA,IAFA;AAIA,KAbA;AAcA,IAAA,eAdA,6BAcA;AACA,aAAA,KAAA,MAAA,CAAA,IAAA,CAAA,eAAA,KAAA,EAAA;AACA,KAhBA;AAiBA,IAAA,OAjBA,qBAiBA;AACA,aAAA,KAAA,MAAA,CAAA,IAAA;AACA,KAnBA;AAoBA,IAAA,QApBA,sBAoBA;AACA,aAAA,KAAA,aAAA,CAAA,KAAA,MAAA,CAAA,MAAA,CAAA;AACA;AAtBA,IAzDA;AAiFA,EAAA,OAAA,EAAA;AACA,IAAA,eADA,6BACA;AACA,WAAA,KAAA,CAAA,aAAA,EAAA,CAAA,aAAA,EAAA,KAAA,MAAA,CAAA;AACA;AAHA;AAjFA,CAAA","sourcesContent":["<template lang=\"html\">\n  <div>\n    <notification-header\n      :expand=\"expand\"\n      :notice=\"notice\"\n      :process-status=\"processStatus\"\n      :time-string=\"timeString\"\n      :date-string=\"dateString\"\n    >\n    </notification-header>\n    <div\n      :class=\"[\n        notice.expanded ? '' : 'unexpanded',\n        'notification-body',\n        'notification-content'\n      ]\"\n    >\n      <ul>\n        <li v-if=\"isTokenTransfer\">\n          <p>{{ $t('header.amount') }}:</p>\n          <p>{{ details.tokenTransferVal }} {{ details.tokenSymbol }}</p>\n        </li>\n        <li v-if=\"!isTokenTransfer\">\n          <p>{{ $t('header.amount') }}:</p>\n          <p>{{ convertToEth(details.amount) }} {{ network.type.name }}</p>\n        </li>\n        <li>\n          <p>{{ $t('common.toAddress') }}:</p>\n          <p>\n            <a\n              :href=\"addressLink(details.tokenTransferTo || details.to)\"\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              {{ details.tokenTransferTo || details.to }}\n            </a>\n          </p>\n        </li>\n        <li v-if=\"isTokenTransfer\">\n          <p>Via contract:</p>\n          <p>\n            <a\n              :href=\"addressLink(details.to)\"\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              {{ details.to }}\n            </a>\n          </p>\n        </li>\n        <li v-if=\"isContractCreation\">\n          <p>{{ $t('common.createdContract') }}:</p>\n          <p>\n            <a\n              :href=\"addressLink(details.contractAddress)\"\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              {{ details.contractAddress }}\n            </a>\n          </p>\n        </li>\n        <li v-if=\"notice.body.gasUsed\">\n          <p>{{ $t('common.txFee') }}:</p>\n          <p>\n            {{ convertToEth(details.gasPrice * details.gasUsed) }}\n            {{ network.type.name }}\n            <span>\n              (${{ getFiatValue(details.gasPrice * details.gasUsed) }})\n            </span>\n          </p>\n        </li>\n        <li>\n          <p>{{ $t('header.maxTxFee') }}:</p>\n          <p>\n            {{ convertToEth(details.gasPrice * details.gasLimit) }}\n            {{ network.type.name }} (${{\n              getFiatValue(details.gasPrice * details.gasLimit)\n            }})\n          </p>\n        </li>\n        <li v-if=\"notice.hash\">\n          <p>{{ $t('header.transactionHash') }}:</p>\n        </li>\n        <li v-if=\"notice.hash\">\n          <a\n            :href=\"hashLink(notice.hash)\"\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            {{ notice.hash }}\n          </a>\n        </li>\n        <li v-if=\"isError\">\n          <p>{{ $t('header.errorMessage') }}:</p>\n          <p>{{ errorMessage }}</p>\n        </li>\n        <li class=\"show-pointer\" @click=\"emitShowDetails\">\n          {{ $t('header.more') }}\n        </li>\n      </ul>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport NotificationHeader from '../../NotificationHeader';\n\nexport default {\n  components: {\n    'notification-header': NotificationHeader\n  },\n  props: {\n    expand: {\n      type: Function,\n      default: function() {}\n    },\n    notice: {\n      type: Object,\n      default: function() {\n        return {};\n      }\n    },\n    convertToGwei: {\n      type: Function,\n      default: function() {}\n    },\n    convertToEth: {\n      type: Function,\n      default: function() {}\n    },\n    getFiatValue: {\n      type: Function,\n      default: function() {}\n    },\n    dateString: {\n      type: Function,\n      default: function() {}\n    },\n    timeString: {\n      type: Function,\n      default: function() {}\n    },\n    errorMessageString: {\n      type: Function,\n      default: function() {}\n    },\n    processStatus: {\n      type: Function,\n      default: function() {}\n    },\n    hashLink: {\n      type: Function,\n      default: function() {}\n    },\n    addressLink: {\n      type: Function,\n      default: function() {}\n    }\n  },\n  data() {\n    return {\n      unreadCount: 0\n    };\n  },\n  computed: {\n    ...mapState(['web3', 'network', 'notifications', 'wallet']),\n    errorMessage() {\n      return this.errorMessageString(this.notice);\n    },\n    isError() {\n      return this.notice.body.error;\n    },\n    isContractCreation() {\n      return (\n        this.notice.body.contractAddress !== undefined &&\n        this.notice.body.contractAddress !== null\n      );\n    },\n    isTokenTransfer() {\n      return this.notice.body.tokenTransferTo !== '';\n    },\n    details() {\n      return this.notice.body;\n    },\n    txStatus() {\n      return this.processStatus(this.notice.status);\n    }\n  },\n  methods: {\n    emitShowDetails() {\n      this.$emit('showDetails', ['transaction', this.notice]);\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'TransactionNotification';\n</style>\n"],"sourceRoot":"src/layouts/ExtensionBrowserAction/containers/ExtensionNotification/components/NotificationTypes/TransactionNotification"}]}