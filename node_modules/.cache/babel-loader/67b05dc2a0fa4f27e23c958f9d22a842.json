{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/layouts/InterfaceLayout/containers/SwapContainer/components/SwapExitToFiat/SwapExitToFiat.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/layouts/InterfaceLayout/containers/SwapContainer/components/SwapExitToFiat/SwapExitToFiat.vue","mtime":1574664278306},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js","mtime":1574664275010},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js","mtime":1574664277774}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport _defineProperty from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es7.object.entries\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getNames, registerLocale } from 'i18n-iso-countries';\nimport names from 'i18n-iso-countries/langs/en.json';\nimport InterfaceContainerTitle from '@/layouts/InterfaceLayout/components/InterfaceContainerTitle';\nimport AccordionMenu from '@/components/AccordionMenu';\nimport StandardInput from '@/components/StandardInput';\nimport StandardDropdown from \"./StandardDropdown\";\nimport StandardButton from '@/components/Buttons/StandardButton';\nimport IBAN from 'iban';\nimport { providerMap } from '@/partners';\nregisterLocale(names);\nexport default {\n  components: {\n    'interface-container-title': InterfaceContainerTitle,\n    'accordion-menu': AccordionMenu,\n    'standard-input': StandardInput,\n    'standard-dropdown': StandardDropdown,\n    'standard-button': StandardButton\n  },\n  props: {\n    swapDetails: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    exitFromAddress: {\n      type: String,\n      default: ''\n    },\n    exitToFiatCallback: {\n      type: Function,\n      default: function _default() {}\n    }\n  },\n  data: function data() {\n    return {\n      localStoreKey: 'linkedPhone',\n      previouslyVerified: false,\n      addSpace: false,\n      finalizingSwap: false,\n      countryList: Object.entries(getNames('en')),\n      complete: {\n        step1: false,\n        step2: false\n      },\n      steps: {\n        step1: true,\n        step2: false\n      },\n      inputCountryCode: {\n        title: this.$t('interface.countryCode'),\n        placeHolder: '000'\n      },\n      inputPhoneNumber: {\n        title: this.$t('interface.phoneNumber'),\n        placeHolder: '000-000-0000'\n      },\n      inputVerification: {\n        title: this.$t('interface.verificationCode'),\n        placeHolder: '000000'\n      },\n      inputBicSwift: {\n        title: this.$t('interface.bicSwiftCode'),\n        popover: this.$t('interface.bicSwiftPopOver'),\n        value: ''\n      },\n      inputAbaNumber: {\n        title: this.$t('interface.abaNumber'),\n        popover: this.$t('interface.abaPopOver'),\n        value: ''\n      },\n      inputIbanNumber: {\n        title: this.$t('interface.ibanNumber'),\n        popover: this.$t('interface.ibanPopOver'),\n        value: ''\n      },\n      inputName: {\n        title: this.$t('interface.ownerName'),\n        value: ''\n      },\n      inputEmail: {\n        title: this.$t('interface.email'),\n        popover: this.$t('interface.emailPopOver'),\n        placeHolder: 'user@example.com',\n        value: ''\n      },\n      inputAddress1: {\n        title: this.$t('interface.billingAddress'),\n        placeHolder: 'Address 1',\n        value: ''\n      },\n      inputAddress2: {\n        placeHolder: this.$t('interface.addressOptional'),\n        value: ''\n      },\n      inputCity: {\n        placeHolder: this.$t('interface.city'),\n        value: ''\n      },\n      inputState: {\n        placeHolder: this.$t('interface.state'),\n        value: ''\n      },\n      inputZip: {\n        placeHolder: this.$t('interface.zipCode'),\n        value: ''\n      },\n      inputCountry: {\n        placeHolder: this.$t('interface.country'),\n        value: ''\n      },\n      button1: {\n        title: this.$t('interface.send'),\n        buttonStyle: 'green',\n        value: '',\n        noWalletTerms: true\n      },\n      verifyButton: {\n        title: this.$t('interface.verify'),\n        buttonStyle: 'green',\n        value: '',\n        noWalletTerms: true\n      },\n      button2: {\n        title: this.$t('interface.continue'),\n        buttonStyle: 'green',\n        value: '',\n        noWalletTerms: true\n      },\n      button3: {\n        title: this.$t('interface.submit'),\n        buttonStyle: 'green',\n        value: '',\n        noWalletTerms: true\n      },\n      provider: {},\n      countryCode: '',\n      validTan: false,\n      validPhoneNumber: false,\n      phoneNumber: '',\n      tan: '',\n      invalidTanEntered: false,\n      email: '',\n      orderDetails: {\n        currency: this.swapDetails.toCurrency,\n        iban: '',\n        bic_swift: '',\n        name: '',\n        address: '',\n        address_complement: '',\n        zip: '',\n        city: '',\n        state: '',\n        country: ''\n      }\n    };\n  },\n  computed: {\n    countryOptions: function countryOptions() {\n      return this.countryList;\n    },\n    isValidIBAN: function isValidIBAN() {\n      if (this.orderDetails.iban === '') {\n        return false;\n      }\n\n      return IBAN.isValid(this.orderDetails.iban);\n    },\n    canSwap: function canSwap() {\n      return this.isValidIBAN && this.orderDetails.iban !== '' && this.orderDetails.bic_swift !== '' && this.orderDetails.name !== '' && this.orderDetails.address !== '' && this.orderDetails.city !== '' && this.orderDetails.country !== '';\n    }\n  },\n  mounted: function mounted() {\n    this.openMenu();\n    var providerConstructor = providerMap.get(this.swapDetails.provider);\n    this.provider = new providerConstructor();\n  },\n  methods: {\n    roomForDropDown: function roomForDropDown(val) {\n      this.addSpace = val;\n    },\n    updateStep: function updateStep(stage) {\n      var _this = this;\n\n      var allSteps = Object.keys(this.steps);\n      allSteps.forEach(function (step) {\n        if (step !== stage) {\n          _this.steps[step] = false;\n        } else {\n          _this.steps[step] = true;\n        }\n      });\n    },\n    stageComplete: function stageComplete(stage) {\n      this.complete[stage] = true;\n    },\n    openMenu: function openMenu(val) {\n      return val;\n    },\n    backButtonAction: function backButtonAction() {\n      this.$emit('backButtonClick');\n    },\n    createExitOrder: function () {\n      var _createExitOrder = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var details, swapDetails;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.finalizingSwap = true;\n                details = _objectSpread({\n                  email: this.email,\n                  input: {\n                    amount: this.swapDetails.fromValue,\n                    currency: this.swapDetails.fromCurrency,\n                    crypto_address: this.exitFromAddress\n                  }\n                }, this.orderDetails);\n                _context.next = 4;\n                return this.provider.startSwap(_objectSpread({}, this.swapDetails, {\n                  bypass: true,\n                  orderDetails: details\n                }));\n\n              case 4:\n                swapDetails = _context.sent;\n                this.finalizingSwap = false;\n                this.exitToFiatCallback(swapDetails);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function createExitOrder() {\n        return _createExitOrder.apply(this, arguments);\n      }\n\n      return createExitOrder;\n    }()\n  }\n};",{"version":3,"sources":["SwapExitToFiat.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"swap-send-form\">\n    <div class=\"wrap\">\n      <interface-container-title\n        ><h3 @click=\"backButtonAction\">\n          <i class=\"fa fa-arrow-left\"></i>\n          {{ $t('interface.back') }}\n        </h3></interface-container-title\n      >\n\n      <div class=\"form-content-container\">\n        <div class=\"accordion-menu-container\">\n          <!-- Bank Details - accordion-menu ******************************** -->\n          <accordion-menu\n            :isopen=\"true\"\n            :title=\"$t('interface.bankInfo')\"\n            :greytitle=\"false\"\n            :editbutton=\"true\"\n            number=\"1\"\n            @titleClicked=\"updateStep('step1')\"\n          >\n            <ul>\n              <li v-if=\"previouslyVerified\">\n                <p>{{ $t('interface.previouslyVerified') }}</p>\n              </li>\n              <li>\n                <standard-input\n                  :options=\"inputIbanNumber\"\n                  @changedValue=\"orderDetails.iban = $event\"\n                />\n              </li>\n              <li>\n                <standard-input\n                  :options=\"inputBicSwift\"\n                  @changedValue=\"orderDetails.bic_swift = $event\"\n                />\n              </li>\n            </ul>\n          </accordion-menu>\n          <!-- Personal Details - accordion-menu ******************************** -->\n          <accordion-menu\n            :isopen=\"true\"\n            :title=\"$t('interface.personalInfo')\"\n            :greytitle=\"false\"\n            :editbutton=\"true\"\n            number=\"2\"\n            @titleClicked=\"updateStep('step2')\"\n          >\n            <ul>\n              <li>\n                <standard-input\n                  :options=\"inputName\"\n                  @changedValue=\"orderDetails.name = $event\"\n                />\n              </li>\n              <li>\n                <standard-input\n                  :options=\"inputEmail\"\n                  @changedValue=\"email = $event\"\n                />\n              </li>\n              <li>\n                <div class=\"grid-billing-address\">\n                  <standard-input\n                    :options=\"inputAddress1\"\n                    class=\"address1\"\n                    @changedValue=\"orderDetails.address = $event\"\n                  />\n                  <standard-input\n                    :options=\"inputAddress2\"\n                    class=\"address2\"\n                    @changedValue=\"orderDetails.address_complement = $event\"\n                  />\n                  <standard-input\n                    :options=\"inputCity\"\n                    class=\"city\"\n                    @changedValue=\"orderDetails.city = $event\"\n                  />\n                  <standard-input\n                    :options=\"inputState\"\n                    class=\"state\"\n                    @changedValue=\"orderDetails.state = $event\"\n                  />\n                  <standard-input\n                    :options=\"inputZip\"\n                    class=\"zip\"\n                    @changedValue=\"orderDetails.zip = $event\"\n                  />\n                  <standard-dropdown\n                    :options=\"countryOptions\"\n                    :placeholder=\"$t('interface.country')\"\n                    :option-display-key=\"'1'\"\n                    :option-value-key=\"'0'\"\n                    class=\"country\"\n                    @selection=\"orderDetails.country = $event\"\n                    @opened=\"roomForDropDown\"\n                  />\n                  <div v-if=\"addSpace\" class=\"extraSpace\"></div>\n                </div>\n              </li>\n            </ul>\n          </accordion-menu>\n        </div>\n        <!-- .accordion-menu-container -->\n        <div class=\"button-container\">\n          <standard-button\n            v-show=\"!finalizingSwap\"\n            :options=\"button3\"\n            :button-disabled=\"!canSwap\"\n            @click.native=\"\n              updateStep('');\n              stageComplete('step2');\n              createExitOrder();\n            \"\n          />\n          <div\n            v-show=\"finalizingSwap\"\n            class=\"disabled submit-button large-round-button-green-filled clickable\"\n          >\n            <i class=\"fa fa-spinner fa-spin\" />\n            {{ $t('interface.swapButtonLoading') }}\n          </div>\n        </div>\n        <!-- .button-container -->\n      </div>\n      <!-- .content-container -->\n    </div>\n    <!-- .wrap -->\n  </div>\n  <!-- .swap-send-form -->\n</template>\n\n<script>\nimport { getNames, registerLocale } from 'i18n-iso-countries';\nimport names from 'i18n-iso-countries/langs/en.json';\nimport InterfaceContainerTitle from '@/layouts/InterfaceLayout/components/InterfaceContainerTitle';\nimport AccordionMenu from '@/components/AccordionMenu';\nimport StandardInput from '@/components/StandardInput';\nimport StandardDropdown from './StandardDropdown';\nimport StandardButton from '@/components/Buttons/StandardButton';\nimport IBAN from 'iban';\n\nimport { providerMap } from '@/partners';\n\nregisterLocale(names);\n\nexport default {\n  components: {\n    'interface-container-title': InterfaceContainerTitle,\n    'accordion-menu': AccordionMenu,\n    'standard-input': StandardInput,\n    'standard-dropdown': StandardDropdown,\n    'standard-button': StandardButton\n  },\n  props: {\n    swapDetails: {\n      type: Object,\n      default: function() {\n        return {};\n      }\n    },\n    exitFromAddress: {\n      type: String,\n      default: ''\n    },\n    exitToFiatCallback: {\n      type: Function,\n      default: () => {}\n    }\n  },\n  data() {\n    return {\n      localStoreKey: 'linkedPhone',\n      previouslyVerified: false,\n      addSpace: false,\n      finalizingSwap: false,\n      countryList: Object.entries(getNames('en')),\n      complete: {\n        step1: false,\n        step2: false\n      },\n      steps: {\n        step1: true,\n        step2: false\n      },\n      inputCountryCode: {\n        title: this.$t('interface.countryCode'),\n        placeHolder: '000'\n      },\n      inputPhoneNumber: {\n        title: this.$t('interface.phoneNumber'),\n        placeHolder: '000-000-0000'\n      },\n      inputVerification: {\n        title: this.$t('interface.verificationCode'),\n        placeHolder: '000000'\n      },\n      inputBicSwift: {\n        title: this.$t('interface.bicSwiftCode'),\n        popover: this.$t('interface.bicSwiftPopOver'),\n        value: ''\n      },\n      inputAbaNumber: {\n        title: this.$t('interface.abaNumber'),\n        popover: this.$t('interface.abaPopOver'),\n        value: ''\n      },\n      inputIbanNumber: {\n        title: this.$t('interface.ibanNumber'),\n        popover: this.$t('interface.ibanPopOver'),\n        value: ''\n      },\n      inputName: {\n        title: this.$t('interface.ownerName'),\n        value: ''\n      },\n      inputEmail: {\n        title: this.$t('interface.email'),\n        popover: this.$t('interface.emailPopOver'),\n        placeHolder: 'user@example.com',\n        value: ''\n      },\n      inputAddress1: {\n        title: this.$t('interface.billingAddress'),\n        placeHolder: 'Address 1',\n        value: ''\n      },\n      inputAddress2: {\n        placeHolder: this.$t('interface.addressOptional'),\n        value: ''\n      },\n      inputCity: {\n        placeHolder: this.$t('interface.city'),\n        value: ''\n      },\n      inputState: {\n        placeHolder: this.$t('interface.state'),\n        value: ''\n      },\n      inputZip: {\n        placeHolder: this.$t('interface.zipCode'),\n        value: ''\n      },\n      inputCountry: {\n        placeHolder: this.$t('interface.country'),\n        value: ''\n      },\n      button1: {\n        title: this.$t('interface.send'),\n        buttonStyle: 'green',\n        value: '',\n        noWalletTerms: true\n      },\n      verifyButton: {\n        title: this.$t('interface.verify'),\n        buttonStyle: 'green',\n        value: '',\n        noWalletTerms: true\n      },\n      button2: {\n        title: this.$t('interface.continue'),\n        buttonStyle: 'green',\n        value: '',\n        noWalletTerms: true\n      },\n      button3: {\n        title: this.$t('interface.submit'),\n        buttonStyle: 'green',\n        value: '',\n        noWalletTerms: true\n      },\n      provider: {},\n      countryCode: '',\n      validTan: false,\n      validPhoneNumber: false,\n      phoneNumber: '',\n      tan: '',\n      invalidTanEntered: false,\n      email: '',\n      orderDetails: {\n        currency: this.swapDetails.toCurrency,\n        iban: '',\n        bic_swift: '',\n        name: '',\n        address: '',\n        address_complement: '',\n        zip: '',\n        city: '',\n        state: '',\n        country: ''\n      }\n    };\n  },\n  computed: {\n    countryOptions() {\n      return this.countryList;\n    },\n    isValidIBAN() {\n      if (this.orderDetails.iban === '') {\n        return false;\n      }\n      return IBAN.isValid(this.orderDetails.iban);\n    },\n    canSwap() {\n      return (\n        this.isValidIBAN &&\n        this.orderDetails.iban !== '' &&\n        this.orderDetails.bic_swift !== '' &&\n        this.orderDetails.name !== '' &&\n        this.orderDetails.address !== '' &&\n        this.orderDetails.city !== '' &&\n        this.orderDetails.country !== ''\n      );\n    }\n  },\n  mounted() {\n    this.openMenu();\n    const providerConstructor = providerMap.get(this.swapDetails.provider);\n    this.provider = new providerConstructor();\n  },\n  methods: {\n    roomForDropDown(val) {\n      this.addSpace = val;\n    },\n    updateStep(stage) {\n      const allSteps = Object.keys(this.steps);\n      allSteps.forEach(step => {\n        if (step !== stage) {\n          this.steps[step] = false;\n        } else {\n          this.steps[step] = true;\n        }\n      });\n    },\n    stageComplete(stage) {\n      this.complete[stage] = true;\n    },\n    openMenu(val) {\n      return val;\n    },\n    backButtonAction() {\n      this.$emit('backButtonClick');\n    },\n    async createExitOrder() {\n      this.finalizingSwap = true;\n      const details = {\n        email: this.email,\n        input: {\n          amount: this.swapDetails.fromValue,\n          currency: this.swapDetails.fromCurrency,\n          crypto_address: this.exitFromAddress\n        },\n        ...this.orderDetails\n      };\n\n      const swapDetails = await this.provider.startSwap({\n        ...this.swapDetails,\n        bypass: true,\n        orderDetails: details\n      });\n      this.finalizingSwap = false;\n      this.exitToFiatCallback(swapDetails);\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'SwapExitToFiat';\n</style>\n"],"sourceRoot":"src/layouts/InterfaceLayout/containers/SwapContainer/components/SwapExitToFiat"}]}