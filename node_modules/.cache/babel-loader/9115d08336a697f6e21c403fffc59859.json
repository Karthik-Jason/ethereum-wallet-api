{"remainingRequest":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/thread-loader/dist/cjs.js!/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/eslint-loader/index.js??ref--13-0!/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/wallets/web3-provider/etherscan-proxy.js","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/wallets/web3-provider/etherscan-proxy.js","mtime":1573477612132},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _classCallCheck from \"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport axios from 'axios';\nimport { toPayload } from \"./jsonrpc\";\n\nvar toQueryString = function toQueryString(params) {\n  return Object.keys(params).map(function (k) {\n    return encodeURIComponent(k) + '=' + encodeURIComponent(params[k]);\n  }).join('&');\n};\n\nvar EtherscanProxy =\n/*#__PURE__*/\nfunction () {\n  function EtherscanProxy(url, apikey) {\n    _classCallCheck(this, EtherscanProxy);\n\n    this.url = url;\n    this.apikey = apikey;\n  }\n\n  _createClass(EtherscanProxy, [{\n    key: \"etherscanXHR\",\n    value: function etherscanXHR(isGET, params) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var qString = isGET ? '?' + toQueryString(Object.assign(params, {\n          apikey: _this.apikey\n        })) : '';\n        axios({\n          method: isGET ? 'get' : 'post',\n          data: isGET ? {} : params,\n          url: _this.url + qString\n        }).then(function (res) {\n          if (!res.data.error) resolve(res.data);else reject(res.data);\n        }).catch(reject);\n      });\n    }\n  }, {\n    key: \"request\",\n    value: function request(payload) {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        switch (payload.method) {\n          case 'eth_blockNumber':\n            _this2.etherscanXHR(true, {\n              module: 'proxy',\n              action: 'eth_blockNumber'\n            }).then(function (body) {\n              resolve(toPayload(payload.id, body.result));\n            }).catch(reject);\n\n            break;\n\n          case 'eth_getBlockByNumber':\n            _this2.etherscanXHR(true, {\n              module: 'proxy',\n              action: 'eth_getBlockByNumber',\n              tag: payload.params[0],\n              boolean: payload.params[1]\n            }).then(function (body) {\n              resolve(toPayload(payload.id, body.result));\n            }).catch(reject);\n\n            break;\n\n          case 'eth_getBlockTransactionCountByNumber':\n            _this2.etherscanXHR(true, 'eth_getBlockTransactionCountByNumber', {\n              module: 'proxy',\n              action: 'eth_getBlockTransactionCountByNumber',\n              tag: payload.params[0]\n            }).then(function (body) {\n              resolve(toPayload(payload.id, body.result));\n            }).catch(reject);\n\n            break;\n\n          case 'eth_getTransactionByHash':\n            _this2.etherscanXHR(true, {\n              module: 'proxy',\n              action: 'eth_getTransactionByHash',\n              txhash: payload.params[0]\n            }).then(function (body) {\n              resolve(toPayload(payload.id, body.result));\n            }).catch(reject);\n\n            break;\n\n          case 'eth_getBalance':\n            _this2.etherscanXHR(true, {\n              module: 'account',\n              action: 'balance',\n              address: payload.params[0],\n              tag: payload.params[1]\n            }).then(function (body) {\n              resolve(toPayload(payload.id, body.result));\n            }).catch(reject);\n\n            break;\n\n          case 'eth_call':\n            Object.keys(payload.params[0]).forEach(function (key) {\n              return payload.params[0][key] === undefined ? delete payload.params[0][key] : '';\n            });\n\n            _this2.etherscanXHR(true, Object.assign(payload.params[0], {\n              module: 'proxy',\n              action: 'eth_call'\n            })).then(function (body) {\n              resolve(toPayload(payload.id, body.result));\n            }).catch(reject);\n\n            break;\n\n          case 'eth_estimateGas':\n            _this2.etherscanXHR(true, Object.assign({\n              module: 'proxy',\n              action: 'eth_estimateGas'\n            }, payload.params[0])).then(function (body) {\n              resolve(toPayload(payload.id, body.result));\n            }).catch(reject);\n\n            break;\n\n          case 'eth_sendRawTransaction':\n            _this2.etherscanXHR(true, {\n              hex: payload.params[0],\n              module: 'proxy',\n              action: 'eth_sendRawTransaction'\n            }).then(function (body) {\n              resolve(toPayload(payload.id, body.result));\n            }).catch(reject);\n\n            break;\n\n          case 'eth_getTransactionReceipt':\n            _this2.etherscanXHR(true, {\n              txhash: payload.params[0],\n              module: 'proxy',\n              action: 'eth_getTransactionReceipt'\n            }).then(function (body) {\n              resolve(toPayload(payload.id, body.result));\n            }).catch(reject);\n\n            break;\n\n          case 'eth_getTransactionCount':\n            _this2.etherscanXHR(true, {\n              address: payload.params[0],\n              tag: payload.params[1],\n              module: 'proxy',\n              action: 'eth_getTransactionCount'\n            }).then(function (body) {\n              resolve(toPayload(payload.id, body.result));\n            }).catch(reject);\n\n            break;\n\n          case 'eth_gasPrice':\n            _this2.etherscanXHR(true, {\n              module: 'proxy',\n              action: 'eth_gasPrice'\n            }).then(function (body) {\n              resolve(toPayload(payload.id, body.result));\n            }).catch(reject);\n\n            break;\n\n          case 'eth_getCode':\n            _this2.etherscanXHR(true, {\n              address: payload.params[0],\n              tag: payload.params[1],\n              module: 'proxy',\n              action: 'eth_getCode'\n            }).then(function (body) {\n              resolve(toPayload(payload.id, body.result));\n            }).catch(reject);\n\n            break;\n\n          case 'eth_getStorageAt':\n            _this2.etherscanXHR(true, {\n              address: payload.params[0],\n              position: payload.params[1],\n              tag: payload.params[2],\n              module: 'proxy',\n              action: 'eth_getStorageAt'\n            }).then(function (body) {\n              resolve(toPayload(payload.id, body.result));\n            }).catch(reject);\n\n            break;\n\n          default:\n            reject(new Error('Not supported'));\n        }\n      });\n    }\n  }]);\n\n  return EtherscanProxy;\n}();\n\nexport default EtherscanProxy;",{"version":3,"sources":["/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/wallets/web3-provider/etherscan-proxy.js"],"names":["axios","toPayload","toQueryString","params","Object","keys","map","k","encodeURIComponent","join","EtherscanProxy","url","apikey","isGET","Promise","resolve","reject","qString","assign","method","data","then","res","error","catch","payload","etherscanXHR","module","action","body","id","result","tag","boolean","txhash","address","forEach","key","undefined","hex","position","Error"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { toPayload } from './jsonrpc';\n\nconst toQueryString = params => {\n  return Object.keys(params)\n    .map(function(k) {\n      return encodeURIComponent(k) + '=' + encodeURIComponent(params[k]);\n    })\n    .join('&');\n};\nclass EtherscanProxy {\n  constructor(url, apikey) {\n    this.url = url;\n    this.apikey = apikey;\n  }\n  etherscanXHR(isGET, params) {\n    return new Promise((resolve, reject) => {\n      const qString = isGET\n        ? '?' + toQueryString(Object.assign(params, { apikey: this.apikey }))\n        : '';\n      axios({\n        method: isGET ? 'get' : 'post',\n        data: isGET ? {} : params,\n        url: this.url + qString\n      })\n        .then(res => {\n          if (!res.data.error) resolve(res.data);\n          else reject(res.data);\n        })\n        .catch(reject);\n    });\n  }\n  request(payload) {\n    return new Promise((resolve, reject) => {\n      switch (payload.method) {\n        case 'eth_blockNumber':\n          this.etherscanXHR(true, {\n            module: 'proxy',\n            action: 'eth_blockNumber'\n          })\n            .then(body => {\n              resolve(toPayload(payload.id, body.result));\n            })\n            .catch(reject);\n          break;\n        case 'eth_getBlockByNumber':\n          this.etherscanXHR(true, {\n            module: 'proxy',\n            action: 'eth_getBlockByNumber',\n            tag: payload.params[0],\n            boolean: payload.params[1]\n          })\n            .then(body => {\n              resolve(toPayload(payload.id, body.result));\n            })\n            .catch(reject);\n          break;\n        case 'eth_getBlockTransactionCountByNumber':\n          this.etherscanXHR(true, 'eth_getBlockTransactionCountByNumber', {\n            module: 'proxy',\n            action: 'eth_getBlockTransactionCountByNumber',\n            tag: payload.params[0]\n          })\n            .then(body => {\n              resolve(toPayload(payload.id, body.result));\n            })\n            .catch(reject);\n          break;\n        case 'eth_getTransactionByHash':\n          this.etherscanXHR(true, {\n            module: 'proxy',\n            action: 'eth_getTransactionByHash',\n            txhash: payload.params[0]\n          })\n            .then(body => {\n              resolve(toPayload(payload.id, body.result));\n            })\n            .catch(reject);\n          break;\n        case 'eth_getBalance':\n          this.etherscanXHR(true, {\n            module: 'account',\n            action: 'balance',\n            address: payload.params[0],\n            tag: payload.params[1]\n          })\n            .then(body => {\n              resolve(toPayload(payload.id, body.result));\n            })\n            .catch(reject);\n          break;\n        case 'eth_call':\n          Object.keys(payload.params[0]).forEach(key =>\n            payload.params[0][key] === undefined\n              ? delete payload.params[0][key]\n              : ''\n          );\n          this.etherscanXHR(\n            true,\n            Object.assign(payload.params[0], {\n              module: 'proxy',\n              action: 'eth_call'\n            })\n          )\n            .then(body => {\n              resolve(toPayload(payload.id, body.result));\n            })\n            .catch(reject);\n          break;\n        case 'eth_estimateGas':\n          this.etherscanXHR(\n            true,\n            Object.assign(\n              {\n                module: 'proxy',\n                action: 'eth_estimateGas'\n              },\n              payload.params[0]\n            )\n          )\n            .then(body => {\n              resolve(toPayload(payload.id, body.result));\n            })\n            .catch(reject);\n          break;\n        case 'eth_sendRawTransaction':\n          this.etherscanXHR(true, {\n            hex: payload.params[0],\n            module: 'proxy',\n            action: 'eth_sendRawTransaction'\n          })\n            .then(body => {\n              resolve(toPayload(payload.id, body.result));\n            })\n            .catch(reject);\n          break;\n        case 'eth_getTransactionReceipt':\n          this.etherscanXHR(true, {\n            txhash: payload.params[0],\n            module: 'proxy',\n            action: 'eth_getTransactionReceipt'\n          })\n            .then(body => {\n              resolve(toPayload(payload.id, body.result));\n            })\n            .catch(reject);\n          break;\n        case 'eth_getTransactionCount':\n          this.etherscanXHR(true, {\n            address: payload.params[0],\n            tag: payload.params[1],\n            module: 'proxy',\n            action: 'eth_getTransactionCount'\n          })\n            .then(body => {\n              resolve(toPayload(payload.id, body.result));\n            })\n            .catch(reject);\n          break;\n        case 'eth_gasPrice':\n          this.etherscanXHR(true, {\n            module: 'proxy',\n            action: 'eth_gasPrice'\n          })\n            .then(body => {\n              resolve(toPayload(payload.id, body.result));\n            })\n            .catch(reject);\n          break;\n        case 'eth_getCode':\n          this.etherscanXHR(true, {\n            address: payload.params[0],\n            tag: payload.params[1],\n            module: 'proxy',\n            action: 'eth_getCode'\n          })\n            .then(body => {\n              resolve(toPayload(payload.id, body.result));\n            })\n            .catch(reject);\n          break;\n        case 'eth_getStorageAt':\n          this.etherscanXHR(true, {\n            address: payload.params[0],\n            position: payload.params[1],\n            tag: payload.params[2],\n            module: 'proxy',\n            action: 'eth_getStorageAt'\n          })\n            .then(body => {\n              resolve(toPayload(payload.id, body.result));\n            })\n            .catch(reject);\n          break;\n        default:\n          reject(new Error('Not supported'));\n      }\n    });\n  }\n}\nexport default EtherscanProxy;\n"]}]}