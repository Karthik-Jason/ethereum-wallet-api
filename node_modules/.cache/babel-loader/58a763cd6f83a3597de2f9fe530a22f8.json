{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/layouts/InterfaceLayout/containers/SwapContainer/components/SwapConfirmationModal/SwapConfirmationModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/layouts/InterfaceLayout/containers/SwapContainer/components/SwapConfirmationModal/SwapConfirmationModal.vue","mtime":1573477612064},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport _defineProperty from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport '@/assets/images/currency/coins/asFont/cryptocoins.css';\nimport '@/assets/images/currency/coins/asFont/cryptocoins-colors.css';\nimport BigNumber from 'bignumber.js';\nimport * as unit from 'ethjs-unit';\nimport { mapState } from 'vuex';\nimport Arrow from '@/assets/images/etc/single-arrow.svg';\nimport iconBtc from '@/assets/images/currency/btc.svg';\nimport iconEth from '@/assets/images/currency/eth.svg';\nimport ButtonWithQrCode from '@/components/Buttons/ButtonWithQrCode';\nimport HelpCenterButton from '@/components/Buttons/HelpCenterButton';\nimport { EthereumTokens, BASE_CURRENCY, ERC20, fiat, utils } from '@/partners';\nimport { WEB3_WALLET } from '@/wallets/bip44/walletTypes';\nimport { type as noticeTypes } from '@/helpers/notificationFormatters';\nimport { Toast } from '@/helpers';\nexport default {\n  components: {\n    'button-with-qrcode': ButtonWithQrCode,\n    'help-center-button': HelpCenterButton\n  },\n  props: {\n    swapDetails: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    currentAddress: {\n      type: String,\n      default: ''\n    }\n  },\n  data: function data() {\n    return {\n      isToken: false,\n      preparedSwap: {},\n      finalDetails: {},\n      swapReady: false,\n      currencyIcons: {\n        BTC: iconBtc,\n        ETH: iconEth\n      },\n      timeRemaining: 0,\n      qrcode: '',\n      arrowImage: Arrow,\n      fromAddress: {},\n      toAddress: {},\n      fiatCurrenciesArray: fiat.map(function (entry) {\n        return entry.symbol;\n      })\n    };\n  },\n  computed: _objectSpread({}, mapState(['ens', 'gasPrice', 'web3', 'account', 'wallet', 'network']), {\n    toFiat: function toFiat() {\n      return this.fiatCurrenciesArray.includes(this.toAddress.name);\n    },\n    fiatDest: function fiatDest() {\n      if (this.swapDetails.orderDetails) {\n        return this.swapDetails.orderDetails.name;\n      }\n\n      return '';\n    }\n  }),\n  watch: {\n    swapDetails: function swapDetails(newValue) {\n      this.fromAddress = {\n        value: newValue.sendValue || newValue.fromValue,\n        name: newValue.fromCurrency,\n        address: newValue.fromAddress ? newValue.fromAddress : this.currentAddress\n      };\n      this.toAddress = {\n        value: newValue.providerSends || newValue.toValue,\n        name: newValue.toCurrency,\n        address: newValue.toAddress\n      };\n      this.timeUpdater(newValue);\n      this.swapStarted(newValue);\n    }\n  },\n  methods: {\n    timeUpdater: function timeUpdater(swapDetails) {\n      var _this = this;\n\n      clearInterval(this.timerInterval);\n      this.timeRemaining = utils.getTimeRemainingString(swapDetails.timestamp, swapDetails.validFor);\n      this.timerInterval = setInterval(function () {\n        _this.timeRemaining = utils.getTimeRemainingString(swapDetails.timestamp, swapDetails.validFor);\n\n        if (_this.timeRemaining === 'expired') {\n          clearInterval(_this.timerInterval);\n        }\n      }, 1000);\n    },\n    sendTransaction: function () {\n      var _sendTransaction = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.swapReady) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 2:\n                if (Array.isArray(this.preparedSwap) || Object.keys(this.preparedSwap).length > 0) {\n                  if (Array.isArray(this.preparedSwap)) {\n                    if (this.preparedSwap.length > 1) {\n                      this.web3.mew.sendBatchTransactions(this.preparedSwap).then(function (_result) {\n                        var tradeIndex;\n\n                        if (_this2.account.identifier === WEB3_WALLET) {\n                          tradeIndex = 0;\n                        } else {\n                          tradeIndex = [_result.length - 1];\n                        }\n\n                        _result.map(function (entry, idx) {\n                          if (idx !== tradeIndex) {\n                            entry.catch(function (e) {\n                              Toast.responseHandler(e, false);\n                            });\n                          }\n                        });\n\n                        _result[tradeIndex].once('transactionHash', function (hash) {\n                          _this2.$store.dispatch('addSwapNotification', [noticeTypes.SWAP_HASH, _this2.currentAddress, _this2.swapDetails, _this2.preparedSwap[_this2.preparedSwap.length - 1], hash]);\n                        }).once('receipt', function (res) {\n                          _this2.$store.dispatch('addSwapNotification', [noticeTypes.SWAP_RECEIPT, _this2.currentAddress, _this2.swapDetails, _this2.preparedSwap[_this2.preparedSwap.length - 1], res]);\n                        }).on('error', function (err) {\n                          _this2.$store.dispatch('addSwapNotification', [noticeTypes.SWAP_ERROR, _this2.currentAddress, _this2.swapDetails, _this2.preparedSwap[_this2.preparedSwap.length - 1], err]);\n                        }).catch(function (err) {\n                          Toast.responseHandler(err, false);\n                        });\n                      });\n                    } else {\n                      this.web3.eth.sendTransaction(this.preparedSwap[0]).once('transactionHash', function (hash) {\n                        _this2.$store.dispatch('addSwapNotification', [noticeTypes.SWAP_HASH, _this2.currentAddress, _this2.swapDetails, _this2.preparedSwap[0], hash]);\n                      }).once('receipt', function (res) {\n                        _this2.$store.dispatch('addSwapNotification', [noticeTypes.SWAP_RECEIPT, _this2.currentAddress, _this2.swapDetails, _this2.preparedSwap[0], res]);\n                      }).on('error', function (err) {\n                        _this2.$store.dispatch('addSwapNotification', [noticeTypes.SWAP_ERROR, _this2.currentAddress, _this2.swapDetails, _this2.preparedSwap[0], err]);\n                      }).catch(function (err) {\n                        Toast.responseHandler(err, Toast.ERROR);\n                      });\n                    }\n                  } else {\n                    this.web3.eth.sendTransaction(this.preparedSwap).once('transactionHash', function (hash) {\n                      _this2.$store.dispatch('addSwapNotification', [noticeTypes.SWAP_HASH, _this2.currentAddress, _this2.swapDetails, _this2.preparedSwap, hash]);\n                    }).once('receipt', function (res) {\n                      _this2.$store.dispatch('addSwapNotification', [noticeTypes.SWAP_RECEIPT, _this2.currentAddress, _this2.swapDetails, _this2.preparedSwap, res]);\n                    }).on('error', function (err) {\n                      _this2.$store.dispatch('addSwapNotification', [noticeTypes.SWAP_ERROR, _this2.currentAddress, _this2.swapDetails, _this2.preparedSwap, err]);\n                    }).catch(function (err) {\n                      Toast.responseHandler(err, Toast.Error);\n                    });\n                  }\n\n                  this.$emit('swapStarted', [this.currentAddress, this.swapDetails]);\n                  this.$refs.swapconfirmation.hide();\n                }\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function sendTransaction() {\n        return _sendTransaction.apply(this, arguments);\n      }\n\n      return sendTransaction;\n    }(),\n    swapStarted: function () {\n      var _swapStarted = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2(swapDetails) {\n        var _this3 = this;\n\n        var tokenInfo;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(swapDetails.isExitToFiat && !swapDetails.bypass)) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 2:\n                this.timeUpdater(swapDetails);\n                this.swapReady = false;\n                this.preparedSwap = {};\n\n                if (!(swapDetails.dataForInitialization && !Array.isArray(swapDetails.dataForInitialization))) {\n                  _context2.next = 16;\n                  break;\n                }\n\n                if (!(swapDetails.maybeToken && swapDetails.fromCurrency !== BASE_CURRENCY)) {\n                  _context2.next = 13;\n                  break;\n                }\n\n                tokenInfo = EthereumTokens[swapDetails.fromCurrency];\n\n                if (tokenInfo) {\n                  _context2.next = 10;\n                  break;\n                }\n\n                throw Error('Selected Token not known to MEW Swap');\n\n              case 10:\n                this.preparedSwap = {\n                  from: this.account.address,\n                  to: tokenInfo.contractAddress,\n                  value: 0,\n                  data: new this.web3.eth.Contract(ERC20, tokenInfo.contractAddress).methods.transfer(swapDetails.providerAddress, new BigNumber(swapDetails.fromValue).times(new BigNumber(10).pow(tokenInfo.decimals)).toFixed()).encodeABI()\n                };\n                _context2.next = 14;\n                break;\n\n              case 13:\n                if (swapDetails.maybeToken && swapDetails.fromCurrency === BASE_CURRENCY) {\n                  this.preparedSwap = {\n                    from: this.account.address,\n                    to: swapDetails.providerAddress,\n                    value: unit.toWei(swapDetails.providerReceives, 'ether')\n                  };\n                } else if (swapDetails.maybeToken && this.fiatCurrenciesArray.includes(swapDetails.toCurrency)) {\n                  this.preparedSwap = {\n                    from: this.wallet.getChecksumAddressString(),\n                    to: swapDetails.providerAddress,\n                    value: unit.toWei(swapDetails.providerReceives, 'ether')\n                  };\n                }\n\n              case 14:\n                _context2.next = 17;\n                break;\n\n              case 16:\n                this.preparedSwap = swapDetails.dataForInitialization.map(function (entry) {\n                  entry.from = _this3.account.address;\n\n                  if (+unit.toWei(_this3.gasPrice, 'gwei').toString() > +swapDetails.kyberMaxGas) {\n                    entry.gasPrice = swapDetails.kyberMaxGas;\n                  }\n\n                  return entry;\n                });\n\n              case 17:\n                this.swapReady = true;\n\n              case 18:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function swapStarted(_x) {\n        return _swapStarted.apply(this, arguments);\n      }\n\n      return swapStarted;\n    }()\n  }\n};",{"version":3,"sources":["SwapConfirmationModal.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"modal-container\">\n    <b-modal\n      ref=\"swapconfirmation\"\n      hide-footer\n      centered\n      class=\"bootstrap-modal bootstrap-modal-wide padding-40-20\"\n      title=\"Confirmation\"\n      static\n      lazy\n    >\n      <div class=\"time-remaining\">\n        <h1>{{ timeRemaining }}</h1>\n        <p>{{ $t('interface.timeRemaining') }}</p>\n      </div>\n      <div class=\"swap-detail\">\n        <div class=\"from-address\">\n          <div class=\"icon\">\n            <i :class=\"['cc', fromAddress.name, 'cc-icon']\" />\n          </div>\n          <p class=\"value\">\n            {{ fromAddress.value }}\n            <span>{{ fromAddress.name }}</span>\n          </p>\n          <p class=\"block-title\">{{ $t('interface.fromAddr') }}</p>\n          <p class=\"address\">{{ fromAddress.address }}</p>\n        </div>\n        <div class=\"right-arrow\">\n          <img :src=\"arrowImage\" alt />\n        </div>\n        <div v-if=\"!toFiat\" class=\"to-address\">\n          <div class=\"icon\">\n            <i :class=\"['cc', toAddress.name, 'cc-icon']\" />\n          </div>\n          <p class=\"value\">\n            {{ toAddress.value }}\n            <span>{{ toAddress.name }}</span>\n          </p>\n          <p class=\"block-title\">{{ $t('interface.sendTxToAddr') }}</p>\n          <p class=\"address\">{{ toAddress.address }}</p>\n        </div>\n        <div v-else class=\"to-address\">\n          <div class=\"icon\">\n            <i :class=\"['cc', toAddress.name, 'cc-icon']\" />\n          </div>\n          <p class=\"value\">\n            {{ toAddress.value }}\n            <span>{{ toAddress.name }}</span>\n          </p>\n          <p class=\"block-title\">{{ $t('common.to') }}</p>\n          <p class=\"address\">{{ fiatDest }}</p>\n        </div>\n      </div>\n      <!--<p> Exchange Rate: 0.000</p>-->\n      <div\n        :class=\"[swapReady ? '' : 'disable', 'confirm-send-button']\"\n        @click=\"sendTransaction\"\n      >\n        <button-with-qrcode\n          :qrcode=\"qrcode\"\n          :buttonname=\"$t('common.continue')\"\n        />\n      </div>\n\n      <help-center-button />\n    </b-modal>\n  </div>\n</template>\n\n<script>\nimport '@/assets/images/currency/coins/asFont/cryptocoins.css';\nimport '@/assets/images/currency/coins/asFont/cryptocoins-colors.css';\n\nimport BigNumber from 'bignumber.js';\nimport * as unit from 'ethjs-unit';\nimport { mapState } from 'vuex';\n\nimport Arrow from '@/assets/images/etc/single-arrow.svg';\nimport iconBtc from '@/assets/images/currency/btc.svg';\nimport iconEth from '@/assets/images/currency/eth.svg';\nimport ButtonWithQrCode from '@/components/Buttons/ButtonWithQrCode';\nimport HelpCenterButton from '@/components/Buttons/HelpCenterButton';\n\nimport { EthereumTokens, BASE_CURRENCY, ERC20, fiat, utils } from '@/partners';\nimport { WEB3_WALLET } from '@/wallets/bip44/walletTypes';\nimport { type as noticeTypes } from '@/helpers/notificationFormatters';\nimport { Toast } from '@/helpers';\n\nexport default {\n  components: {\n    'button-with-qrcode': ButtonWithQrCode,\n    'help-center-button': HelpCenterButton\n  },\n  props: {\n    swapDetails: {\n      type: Object,\n      default: function() {\n        return {};\n      }\n    },\n    currentAddress: {\n      type: String,\n      default: ''\n    }\n  },\n  data() {\n    return {\n      isToken: false,\n      preparedSwap: {},\n      finalDetails: {},\n      swapReady: false,\n      currencyIcons: {\n        BTC: iconBtc,\n        ETH: iconEth\n      },\n      timeRemaining: 0,\n      qrcode: '',\n      arrowImage: Arrow,\n      fromAddress: {},\n      toAddress: {},\n      fiatCurrenciesArray: fiat.map(entry => entry.symbol)\n    };\n  },\n  computed: {\n    ...mapState(['ens', 'gasPrice', 'web3', 'account', 'wallet', 'network']),\n    toFiat() {\n      return this.fiatCurrenciesArray.includes(this.toAddress.name);\n    },\n    fiatDest() {\n      if (this.swapDetails.orderDetails) {\n        return this.swapDetails.orderDetails.name;\n      }\n      return '';\n    }\n  },\n  watch: {\n    swapDetails(newValue) {\n      this.fromAddress = {\n        value: newValue.sendValue || newValue.fromValue,\n        name: newValue.fromCurrency,\n        address: newValue.fromAddress\n          ? newValue.fromAddress\n          : this.currentAddress\n      };\n      this.toAddress = {\n        value: newValue.providerSends || newValue.toValue,\n        name: newValue.toCurrency,\n        address: newValue.toAddress\n      };\n      this.timeUpdater(newValue);\n      this.swapStarted(newValue);\n    }\n  },\n  methods: {\n    timeUpdater(swapDetails) {\n      clearInterval(this.timerInterval);\n      this.timeRemaining = utils.getTimeRemainingString(\n        swapDetails.timestamp,\n        swapDetails.validFor\n      );\n      this.timerInterval = setInterval(() => {\n        this.timeRemaining = utils.getTimeRemainingString(\n          swapDetails.timestamp,\n          swapDetails.validFor\n        );\n        if (this.timeRemaining === 'expired') {\n          clearInterval(this.timerInterval);\n        }\n      }, 1000);\n    },\n    async sendTransaction() {\n      if (!this.swapReady) return;\n\n      if (\n        Array.isArray(this.preparedSwap) ||\n        Object.keys(this.preparedSwap).length > 0\n      ) {\n        if (Array.isArray(this.preparedSwap)) {\n          if (this.preparedSwap.length > 1) {\n            this.web3.mew\n              .sendBatchTransactions(this.preparedSwap)\n              .then(_result => {\n                let tradeIndex;\n                if (this.account.identifier === WEB3_WALLET) {\n                  tradeIndex = 0;\n                } else {\n                  tradeIndex = [_result.length - 1];\n                }\n                _result.map((entry, idx) => {\n                  if (idx !== tradeIndex) {\n                    entry.catch(e => {\n                      Toast.responseHandler(e, false);\n                    });\n                  }\n                });\n\n                _result[tradeIndex]\n                  .once('transactionHash', hash => {\n                    this.$store.dispatch('addSwapNotification', [\n                      noticeTypes.SWAP_HASH,\n                      this.currentAddress,\n                      this.swapDetails,\n                      this.preparedSwap[this.preparedSwap.length - 1],\n                      hash\n                    ]);\n                  })\n                  .once('receipt', res => {\n                    this.$store.dispatch('addSwapNotification', [\n                      noticeTypes.SWAP_RECEIPT,\n                      this.currentAddress,\n                      this.swapDetails,\n                      this.preparedSwap[this.preparedSwap.length - 1],\n                      res\n                    ]);\n                  })\n                  .on('error', err => {\n                    this.$store.dispatch('addSwapNotification', [\n                      noticeTypes.SWAP_ERROR,\n                      this.currentAddress,\n                      this.swapDetails,\n                      this.preparedSwap[this.preparedSwap.length - 1],\n                      err\n                    ]);\n                  })\n                  .catch(err => {\n                    Toast.responseHandler(err, false);\n                  });\n              });\n          } else {\n            this.web3.eth\n              .sendTransaction(this.preparedSwap[0])\n              .once('transactionHash', hash => {\n                this.$store.dispatch('addSwapNotification', [\n                  noticeTypes.SWAP_HASH,\n                  this.currentAddress,\n                  this.swapDetails,\n                  this.preparedSwap[0],\n                  hash\n                ]);\n              })\n              .once('receipt', res => {\n                this.$store.dispatch('addSwapNotification', [\n                  noticeTypes.SWAP_RECEIPT,\n                  this.currentAddress,\n                  this.swapDetails,\n                  this.preparedSwap[0],\n                  res\n                ]);\n              })\n              .on('error', err => {\n                this.$store.dispatch('addSwapNotification', [\n                  noticeTypes.SWAP_ERROR,\n                  this.currentAddress,\n                  this.swapDetails,\n                  this.preparedSwap[0],\n                  err\n                ]);\n              })\n              .catch(err => {\n                Toast.responseHandler(err, Toast.ERROR);\n              });\n          }\n        } else {\n          this.web3.eth\n            .sendTransaction(this.preparedSwap)\n            .once('transactionHash', hash => {\n              this.$store.dispatch('addSwapNotification', [\n                noticeTypes.SWAP_HASH,\n                this.currentAddress,\n                this.swapDetails,\n                this.preparedSwap,\n                hash\n              ]);\n            })\n            .once('receipt', res => {\n              this.$store.dispatch('addSwapNotification', [\n                noticeTypes.SWAP_RECEIPT,\n                this.currentAddress,\n                this.swapDetails,\n                this.preparedSwap,\n                res\n              ]);\n            })\n            .on('error', err => {\n              this.$store.dispatch('addSwapNotification', [\n                noticeTypes.SWAP_ERROR,\n                this.currentAddress,\n                this.swapDetails,\n                this.preparedSwap,\n                err\n              ]);\n            })\n            .catch(err => {\n              Toast.responseHandler(err, Toast.Error);\n            });\n        }\n        this.$emit('swapStarted', [this.currentAddress, this.swapDetails]);\n        this.$refs.swapconfirmation.hide();\n      }\n    },\n    async swapStarted(swapDetails) {\n      if (swapDetails.isExitToFiat && !swapDetails.bypass) return;\n      this.timeUpdater(swapDetails);\n      this.swapReady = false;\n      this.preparedSwap = {};\n      if (\n        swapDetails.dataForInitialization &&\n        !Array.isArray(swapDetails.dataForInitialization)\n      ) {\n        if (\n          swapDetails.maybeToken &&\n          swapDetails.fromCurrency !== BASE_CURRENCY\n        ) {\n          const tokenInfo = EthereumTokens[swapDetails.fromCurrency];\n          if (!tokenInfo) throw Error('Selected Token not known to MEW Swap');\n          this.preparedSwap = {\n            from: this.account.address,\n            to: tokenInfo.contractAddress,\n            value: 0,\n            data: new this.web3.eth.Contract(\n              ERC20,\n              tokenInfo.contractAddress\n            ).methods\n              .transfer(\n                swapDetails.providerAddress,\n                new BigNumber(swapDetails.fromValue)\n                  .times(new BigNumber(10).pow(tokenInfo.decimals))\n                  .toFixed()\n              )\n              .encodeABI()\n          };\n        } else if (\n          swapDetails.maybeToken &&\n          swapDetails.fromCurrency === BASE_CURRENCY\n        ) {\n          this.preparedSwap = {\n            from: this.account.address,\n            to: swapDetails.providerAddress,\n            value: unit.toWei(swapDetails.providerReceives, 'ether')\n          };\n        } else if (\n          swapDetails.maybeToken &&\n          this.fiatCurrenciesArray.includes(swapDetails.toCurrency)\n        ) {\n          this.preparedSwap = {\n            from: this.wallet.getChecksumAddressString(),\n            to: swapDetails.providerAddress,\n            value: unit.toWei(swapDetails.providerReceives, 'ether')\n          };\n        }\n      } else {\n        this.preparedSwap = swapDetails.dataForInitialization.map(entry => {\n          entry.from = this.account.address;\n          if (\n            +unit.toWei(this.gasPrice, 'gwei').toString() >\n            +swapDetails.kyberMaxGas\n          ) {\n            entry.gasPrice = swapDetails.kyberMaxGas;\n          }\n          return entry;\n        });\n      }\n      this.swapReady = true;\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'SwapConfirmationModal.scss';\n</style>\n"],"sourceRoot":"src/layouts/InterfaceLayout/containers/SwapContainer/components/SwapConfirmationModal"}]}