{"remainingRequest":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/layouts/InterfaceLayout/containers/SwapContainer/components/SwapSendToModal/SwapSendToModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/layouts/InterfaceLayout/containers/SwapContainer/components/SwapSendToModal/SwapSendToModal.vue","mtime":1573477612084},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Arrow from '@/assets/images/etc/single-arrow.svg';\nimport ButtonWithQrCode from '@/components/Buttons/ButtonWithQrCode';\nimport HelpCenterButton from '@/components/Buttons/HelpCenterButton';\nimport CheckoutForm from \"../CheckoutForm\";\nimport { fiat, utils, qrcodeBuilder } from '@/partners';\nexport default {\n  components: {\n    'button-with-qrcode': ButtonWithQrCode,\n    'help-center-button': HelpCenterButton,\n    'simplex-checkout-form': CheckoutForm\n  },\n  props: {\n    swapDetails: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    currentAddress: {\n      type: String,\n      default: ''\n    }\n  },\n  data: function data() {\n    return {\n      rawSwapDetails: {},\n      timerInterval: {},\n      timeRemaining: 0,\n      fiatCurrencies: fiat.map(function (entry) {\n        return entry.symbol;\n      }),\n      qrcode: '',\n      arrowImage: Arrow,\n      fromAddress: {},\n      toAddress: {}\n    };\n  },\n  computed: {\n    swapProvider: function swapProvider() {\n      return this.swapDetails.provider;\n    },\n    isFromFiat: function isFromFiat() {\n      return this.fiatCurrencies.includes(this.rawSwapDetails.fromCurrency);\n    },\n    toFiat: function toFiat() {\n      return this.fiatCurrencies.includes(this.rawSwapDetails.toCurrency);\n    },\n    fiatDest: function fiatDest() {\n      if (this.swapDetails.orderDetails) {\n        return this.swapDetails.orderDetails.name;\n      }\n\n      return '';\n    },\n    qrcodeContent: function qrcodeContent() {\n      if (this.swapDetails.dataForInitialization) {\n        return qrcodeBuilder(this.swapDetails.providerAddress, this.swapDetails.fromCurrency);\n      }\n    }\n  },\n  watch: {\n    swapDetails: function swapDetails(newValue) {\n      this.rawSwapDetails = newValue;\n      this.timeUpdater(newValue);\n\n      if (this.fiatCurrencies.includes(newValue.toCurrency) || this.fiatCurrencies.includes(newValue.fromCurrency)) {\n        this.fromAddress = {\n          value: newValue.fromValue,\n          name: newValue.fromCurrency,\n          address: newValue.fromAddress ? newValue.fromAddress : ''\n        };\n        this.toAddress = {\n          value: newValue.toValue,\n          name: newValue.toCurrency,\n          address: newValue.toAddress ? newValue.toAddress : ''\n        };\n      } else {\n        this.fromAddress = {\n          value: newValue.fromValue,\n          name: newValue.fromCurrency,\n          address: newValue.fromAddress ? newValue.fromAddress : ''\n        };\n        this.toAddress = {\n          value: newValue.toValue,\n          name: newValue.toCurrency,\n          address: newValue.toAddress\n        };\n      }\n    }\n  },\n  methods: {\n    timeUpdater: function timeUpdater(swapDetails) {\n      var _this = this;\n\n      clearInterval(this.timerInterval);\n      this.timeRemaining = utils.getTimeRemainingString(swapDetails.timestamp, swapDetails.validFor);\n      this.timerInterval = setInterval(function () {\n        _this.timeRemaining = utils.getTimeRemainingString(swapDetails.timestamp, swapDetails.validFor);\n\n        if (_this.timeRemaining === 'expired') {\n          clearInterval(_this.timerInterval);\n        }\n      }, 1000);\n    },\n    redirectToPartner: function redirectToPartner() {\n      var _this2 = this;\n\n      this.$store.dispatch('addSwapNotification', [\"Swap_Order\", this.currentAddress, this.swapDetails]).then(function () {\n        _this2.$refs.swapconfirmation.hide();\n      });\n    },\n    swapStarted: function swapStarted(swapDetails) {\n      this.timeUpdater(swapDetails);\n\n      if (!swapDetails.dataForInitialization) {\n        this.$refs.swapconfirmation.hide();\n        throw Error('Invalid details from swap provider');\n      }\n    },\n    sentTransaction: function sentTransaction() {\n      var _this3 = this;\n\n      this.$store.dispatch('addSwapNotification', [\"Swap_Order\", this.currentAddress, this.swapDetails]).then(function () {\n        _this3.$refs.swapconfirmation.hide();\n      });\n    }\n  }\n};",{"version":3,"sources":["SwapSendToModal.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"modal-container\">\n    <b-modal\n      ref=\"swapconfirmation\"\n      :title=\"$t('interface.reviewSwap')\"\n      hide-footer\n      centered\n      class=\"bootstrap-modal bootstrap-modal-wide padding-40-20\"\n      static\n      lazy\n    >\n      <div class=\"time-remaining\">\n        <h1>{{ timeRemaining }}</h1>\n        <p>{{ $t('interface.timeRemaining') }}</p>\n      </div>\n      <div>\n        <div class=\"swap-detail\">\n          <div class=\"from-address\">\n            <div class=\"icon\">\n              <i :class=\"['cc', fromAddress.name, 'cc-icon']\" />\n            </div>\n            <p class=\"value\">\n              {{ fromAddress.value }} <span>{{ fromAddress.name }}</span>\n            </p>\n            <p\n              v-show=\"fromAddress.address !== '' && !isFromFiat\"\n              class=\"block-title\"\n            >\n              {{ $t('interface.fromAddr') }}\n            </p>\n            <p\n              v-show=\"fromAddress.address !== '' && !isFromFiat\"\n              class=\"address\"\n            >\n              {{ fromAddress.address }}\n            </p>\n          </div>\n          <div class=\"right-arrow\"><img :src=\"arrowImage\" alt /></div>\n          <!-- Fiat to Crypto-->\n          <div v-if=\"!toFiat\" class=\"to-address\">\n            <div class=\"icon\">\n              <i :class=\"['cc', toAddress.name, 'cc-icon']\" />\n            </div>\n            <p class=\"value\">\n              {{ toAddress.value }} <span>{{ toAddress.name }}</span>\n            </p>\n            <p v-show=\"toAddress.address !== ''\" class=\"block-title\">\n              {{ $t('interface.sendTxToAddr') }}\n            </p>\n            <p v-show=\"toAddress.address !== ''\" class=\"address\">\n              {{ toAddress.address }}\n            </p>\n          </div>\n          <!-- Crypto to Crypto -->\n          <div v-else class=\"to-address\">\n            <div class=\"icon\">\n              <i :class=\"['cc', toAddress.name, 'cc-icon']\" />\n            </div>\n            <p class=\"value\">\n              {{ toAddress.value }} <span>{{ toAddress.name }}</span>\n            </p>\n            <p class=\"block-title\">{{ $t('common.to') }}</p>\n            <p class=\"address\">{{ fiatDest }}</p>\n          </div>\n        </div>\n\n        <ul v-show=\"!isFromFiat\" class=\"confirm-send-button\">\n          <li>\n            <div class=\"provider-address-details\">\n              <h4>\n                {{\n                  $t('interface.notFromEthSwap', {\n                    value: fromAddress.value,\n                    currency: fromAddress.name\n                  })\n                }}\n                <span class=\"address\">{{ qrcode }}</span>\n              </h4>\n              <p>{{ swapDetails.providerAddress }}</p>\n\n              <qrcode\n                :value=\"qrcodeContent\"\n                :options=\"{ size: 200, level: 'H', padding: 25 }\"\n              />\n            </div>\n          </li>\n          <li>\n            <div @click=\"sentTransaction\">\n              <button-with-qrcode\n                :qrcode=\"qrcode\"\n                :buttonname=\"\n                  $t('interface.sentCoins', { currency: fromAddress.name })\n                \"\n              />\n            </div>\n          </li>\n        </ul>\n        <simplex-checkout-form\n          v-if=\"isFromFiat && swapProvider === 'simplex'\"\n          :form-data=\"swapDetails.dataForInitialization\"\n          :continue-action=\"redirectToPartner\"\n        />\n      </div>\n\n      <help-center-button />\n    </b-modal>\n  </div>\n</template>\n\n<script>\nimport Arrow from '@/assets/images/etc/single-arrow.svg';\nimport ButtonWithQrCode from '@/components/Buttons/ButtonWithQrCode';\nimport HelpCenterButton from '@/components/Buttons/HelpCenterButton';\nimport CheckoutForm from '../CheckoutForm';\n\nimport { fiat, utils, qrcodeBuilder } from '@/partners';\n\nexport default {\n  components: {\n    'button-with-qrcode': ButtonWithQrCode,\n    'help-center-button': HelpCenterButton,\n    'simplex-checkout-form': CheckoutForm\n  },\n  props: {\n    swapDetails: {\n      type: Object,\n      default: function() {\n        return {};\n      }\n    },\n    currentAddress: {\n      type: String,\n      default: ''\n    }\n  },\n  data() {\n    return {\n      rawSwapDetails: {},\n      timerInterval: {},\n      timeRemaining: 0,\n      fiatCurrencies: fiat.map(entry => entry.symbol),\n      qrcode: '',\n      arrowImage: Arrow,\n      fromAddress: {},\n      toAddress: {}\n    };\n  },\n  computed: {\n    swapProvider() {\n      return this.swapDetails.provider;\n    },\n    isFromFiat() {\n      return this.fiatCurrencies.includes(this.rawSwapDetails.fromCurrency);\n    },\n    toFiat() {\n      return this.fiatCurrencies.includes(this.rawSwapDetails.toCurrency);\n    },\n    fiatDest() {\n      if (this.swapDetails.orderDetails) {\n        return this.swapDetails.orderDetails.name;\n      }\n      return '';\n    },\n    qrcodeContent() {\n      if (this.swapDetails.dataForInitialization) {\n        return qrcodeBuilder(\n          this.swapDetails.providerAddress,\n          this.swapDetails.fromCurrency\n        );\n      }\n    }\n  },\n  watch: {\n    swapDetails(newValue) {\n      this.rawSwapDetails = newValue;\n      this.timeUpdater(newValue);\n      if (\n        this.fiatCurrencies.includes(newValue.toCurrency) ||\n        this.fiatCurrencies.includes(newValue.fromCurrency)\n      ) {\n        this.fromAddress = {\n          value: newValue.fromValue,\n          name: newValue.fromCurrency,\n          address: newValue.fromAddress ? newValue.fromAddress : ''\n        };\n        this.toAddress = {\n          value: newValue.toValue,\n          name: newValue.toCurrency,\n          address: newValue.toAddress ? newValue.toAddress : ''\n        };\n      } else {\n        this.fromAddress = {\n          value: newValue.fromValue,\n          name: newValue.fromCurrency,\n          address: newValue.fromAddress ? newValue.fromAddress : ''\n        };\n        this.toAddress = {\n          value: newValue.toValue,\n          name: newValue.toCurrency,\n          address: newValue.toAddress\n        };\n      }\n    }\n  },\n  methods: {\n    timeUpdater(swapDetails) {\n      clearInterval(this.timerInterval);\n      this.timeRemaining = utils.getTimeRemainingString(\n        swapDetails.timestamp,\n        swapDetails.validFor\n      );\n      this.timerInterval = setInterval(() => {\n        this.timeRemaining = utils.getTimeRemainingString(\n          swapDetails.timestamp,\n          swapDetails.validFor\n        );\n        if (this.timeRemaining === 'expired') {\n          clearInterval(this.timerInterval);\n        }\n      }, 1000);\n    },\n    redirectToPartner() {\n      this.$store\n        .dispatch('addSwapNotification', [\n          `Swap_Order`,\n          this.currentAddress,\n          this.swapDetails\n        ])\n        .then(() => {\n          this.$refs.swapconfirmation.hide();\n        });\n    },\n    swapStarted(swapDetails) {\n      this.timeUpdater(swapDetails);\n      if (!swapDetails.dataForInitialization) {\n        this.$refs.swapconfirmation.hide();\n        throw Error('Invalid details from swap provider');\n      }\n    },\n    sentTransaction() {\n      this.$store\n        .dispatch('addSwapNotification', [\n          `Swap_Order`,\n          this.currentAddress,\n          this.swapDetails\n        ])\n        .then(() => {\n          this.$refs.swapconfirmation.hide();\n        });\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'SwapSendToModal.scss';\n</style>\n"],"sourceRoot":"src/layouts/InterfaceLayout/containers/SwapContainer/components/SwapSendToModal"}]}