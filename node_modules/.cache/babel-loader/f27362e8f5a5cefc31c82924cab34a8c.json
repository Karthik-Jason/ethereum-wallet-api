{"remainingRequest":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/layouts/InterfaceLayout/containers/InteractWithContractContainer/InteractWithContractContainer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/layouts/InterfaceLayout/containers/InteractWithContractContainer/InteractWithContractContainer.vue","mtime":1573477612012},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.number.constructor\";\nimport _toConsumableArray from \"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _typeof from \"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/@babel/runtime-corejs2/helpers/esm/typeof\";\nimport _defineProperty from \"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState } from 'vuex';\nimport CurrencyPicker from \"../../components/CurrencyPicker\";\nimport InterfaceContainerTitle from \"../../components/InterfaceContainerTitle\";\nimport InterfaceBottomText from '@/components/InterfaceBottomText';\nimport { Misc, Toast } from '@/helpers';\nimport { isAddress } from '@/helpers/addressUtils';\nimport * as unit from 'ethjs-unit';\nimport store from 'store';\nexport default {\n  components: {\n    'interface-container-title': InterfaceContainerTitle,\n    'interface-bottom-text': InterfaceBottomText,\n    'currency-picker': CurrencyPicker\n  },\n  data: function data() {\n    return {\n      abi: '',\n      address: '',\n      interact: false,\n      contractMethods: [],\n      selectedMethod: {},\n      result: '',\n      loading: false,\n      value: 0,\n      inputs: {}\n    };\n  },\n  computed: _objectSpread({}, mapState(['network', 'gasPrice', 'account', 'web3']), {\n    mergedContracts: function mergedContracts() {\n      var customContracts = store.get('customContracts') || [];\n      var concatContracts = this.network.type.contracts.concat(customContracts);\n      return concatContracts;\n    },\n    isValidAbi: function isValidAbi() {\n      return Misc.isJson(this.abi);\n    },\n    isValidAddress: function isValidAddress() {\n      return isAddress(this.address);\n    },\n    noInput: function noInput() {\n      return this.selectedMethod.constant && this.selectedMethod.inputs.length === 0;\n    },\n    resType: function resType() {\n      return _typeof(this.result);\n    },\n    allValid: function allValid() {\n      var _this = this;\n\n      var _allvalid = true;\n\n      if (this.selectedMethod.inputs) {\n        this.selectedMethod.inputs.forEach(function (item) {\n          if (!_this.isValidInput(_this.inputs[item.name], _this.getType(item.type).solidityType)) _allvalid = false;\n        });\n      }\n\n      return _allvalid && this.isValidAbi && this.isValidAddress;\n    },\n    contractArgs: function contractArgs() {\n      var _this2 = this;\n\n      var _contractArgs = [];\n\n      if (this.selectedMethod) {\n        this.selectedMethod.inputs.forEach(function (item) {\n          if (item.type === 'bytes32[]') {\n            var parsedItem = _this2.formatInput(_this2.inputs[item.name]);\n\n            _contractArgs.push(parsedItem);\n          } else if (item.type === 'address') {\n            _contractArgs.push(_this2.inputs[item.name].toLowerCase().trim());\n          } else {\n            _contractArgs.push(_this2.inputs[item.name]);\n          }\n        });\n      }\n\n      return _contractArgs;\n    },\n    txValue: function txValue() {\n      return Misc.sanitizeHex(unit.toWei(this.value, 'ether').toString(16));\n    }\n  }),\n  watch: {\n    network: function network() {\n      this.abi = '';\n      this.address = '';\n      this.interact = false;\n      this.contractMethods = [];\n      this.selectedMethod = {};\n      this.result = '';\n    }\n  },\n  methods: {\n    resetDefaults: function resetDefaults() {\n      this.abi = '';\n      this.address = '';\n      this.interact = false;\n      this.contractMethods = [];\n      this.selectedMethod = {};\n      this.result = '';\n      this.loading = false;\n      this.value = 0;\n      this.inputs = {};\n    },\n    isValidInput: Misc.isContractArgValid,\n    getType: Misc.solidityType,\n    selectedContract: function selectedContract(selected) {\n      if (selected.abi === '') {\n        this.abi = '';\n      } else {\n        this.abi = JSON.stringify(selected.abi);\n      }\n\n      this.address = selected.address;\n    },\n    selectedFunction: function selectedFunction(method) {\n      var _this3 = this;\n\n      if (!method.hasOwnProperty('constant')) return;\n      var contract = new this.web3.eth.Contract([method], this.address.toLowerCase());\n\n      if (method.constant === true && method.inputs.length === 0) {\n        contract.methods[method.name]().call({\n          from: this.account.address.toLowerCase()\n        }).then(function (res) {\n          _this3.result = res;\n        }).catch(function (e) {\n          _this3.loading = false;\n          Toast.responseHandler(e, Toast.WARN);\n        });\n      } else {\n        this.result = '';\n      }\n\n      this.loading = false;\n      this.selectedMethod = method;\n      this.selectedMethod.inputs.forEach(function (input) {\n        if (input.type === 'bool') {\n          _this3.inputs[input.name] = false;\n        }\n      });\n    },\n    formatInput: function formatInput(str) {\n      if (str[0] === '[') {\n        return str;\n      }\n\n      var newArr = str.split(',');\n      return newArr.map(function (item) {\n        return item.replace(' ', '');\n      });\n    },\n    copyToClipboard: function copyToClipboard(ref) {\n      this.$refs[ref].select();\n      document.execCommand('copy');\n    },\n    deleteInput: function deleteInput(ref) {\n      this.$refs[ref].value = '';\n    },\n    switchView: function switchView(direction) {\n      var _this4 = this;\n\n      switch (direction) {\n        case 'forward':\n          if (this.abi !== '') {\n            JSON.parse(this.abi).forEach(function (item) {\n              if (item.type !== 'constructor' && item.constant !== undefined) {\n                _this4.contractMethods.push(item);\n              }\n            });\n          }\n\n          this.interact = true;\n          this.loading = false;\n          break;\n\n        default:\n          this.resetDefaults();\n      }\n    },\n    write: function () {\n      var _write = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var _this5 = this;\n\n        var web3, contract, _contract$methods, _contract$methods2, nonce, errored, gasLimit, _contract$methods3, data, raw;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                web3 = this.web3;\n                contract = new web3.eth.Contract([this.selectedMethod], this.address.toLowerCase());\n                this.loading = true;\n\n                if (!(this.selectedMethod.constant === true)) {\n                  _context.next = 7;\n                  break;\n                }\n\n                (_contract$methods = contract.methods)[this.selectedMethod.name].apply(_contract$methods, _toConsumableArray(this.contractArgs)).call({\n                  from: this.account.address.toLowerCase()\n                }).then(function (res) {\n                  _this5.result = res;\n                  _this5.loading = false;\n                }).catch(function (e) {\n                  _this5.loading = false;\n                  Toast.responseHandler(e, false);\n                });\n\n                _context.next = 15;\n                break;\n\n              case 7:\n                _context.next = 9;\n                return web3.eth.getTransactionCount(this.account.address.toLowerCase());\n\n              case 9:\n                nonce = _context.sent;\n                errored = false;\n                _context.next = 13;\n                return (_contract$methods2 = contract.methods)[this.selectedMethod.name].apply(_contract$methods2, _toConsumableArray(this.contractArgs)).estimateGas({\n                  from: this.account.address.toLowerCase(),\n                  value: this.txValue\n                }).then(function (res) {\n                  return res;\n                }).catch(function (e) {\n                  _this5.loading = false;\n                  Toast.responseHandler(e, Toast.ERROR);\n                  errored = true;\n                });\n\n              case 13:\n                gasLimit = _context.sent;\n\n                if (!errored) {\n                  data = (_contract$methods3 = contract.methods)[this.selectedMethod.name].apply(_contract$methods3, _toConsumableArray(this.contractArgs)).encodeABI();\n                  raw = {\n                    from: this.account.address.toLowerCase(),\n                    gas: gasLimit,\n                    nonce: nonce,\n                    gasPrice: Number(unit.toWei(this.gasPrice, 'gwei')),\n                    value: this.txValue,\n                    to: this.address.toLowerCase(),\n                    data: data\n                  };\n                  this.loading = false;\n                  web3.eth.sendTransaction(raw).catch(function (err) {\n                    Toast.responseHandler(err, Toast.ERROR);\n                  });\n                }\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function write() {\n        return _write.apply(this, arguments);\n      }\n\n      return write;\n    }()\n  }\n};",{"version":3,"sources":["InteractWithContractContainer.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"interact-with-contract-container\">\n    <interface-container-title :title=\"$t('common.interactWcontract')\" />\n    <div v-if=\"!interact\" class=\"interact-div\">\n      <div class=\"send-form contract-address-container\">\n        <div class=\"title-container\">\n          <div class=\"title\">\n            <h4 class=\"contract-address-title\">\n              {{ $t('interface.contractAddr') }}\n            </h4>\n            <div class=\"select-contract no-border\">\n              <currency-picker\n                :currency=\"mergedContracts\"\n                :token=\"false\"\n                page=\"interactWContract\"\n                @selectedCurrency=\"selectedContract\"\n              />\n            </div>\n          </div>\n        </div>\n        <div class=\"the-form domain-name\">\n          <input\n            v-validate=\"'required'\"\n            v-model=\"address\"\n            type=\"text\"\n            name=\"nameAddr\"\n            placeholder=\"Enter Contract Address\"\n          />\n\n          <i\n            :class=\"[\n              isValidAddress && address !== '' ? '' : 'not-good',\n              'fa fa-check-circle good-button'\n            ]\"\n            aria-hidden=\"true\"\n            class=\"address-validation-check\"\n          />\n        </div>\n      </div>\n\n      <div class=\"send-form\">\n        <div class=\"title-container\">\n          <div class=\"title\">\n            <h4>{{ $t('interface.abiJsonInt') }}</h4>\n            <div class=\"copy-buttons\">\n              <span @click=\"deleteInput('abi')\">{{ $t('common.clear') }}</span>\n              <span @click=\"copyToClipboard('abi')\">\n                {{ $t('common.copy') }}\n              </span>\n            </div>\n          </div>\n        </div>\n        <div class=\"the-form domain-name\">\n          <textarea\n            v-validate=\"'required'\"\n            ref=\"abi\"\n            v-model=\"abi\"\n            class=\"custom-textarea-1\"\n            name=\"abiField\"\n          />\n          <i\n            :class=\"[\n              isValidAbi && abi !== '' ? '' : 'not-good',\n              'fa fa-check-circle good-button'\n            ]\"\n            aria-hidden=\"true\"\n          />\n        </div>\n      </div>\n      <div class=\"submit-button-container\">\n        <div\n          :class=\"[\n            isValidAbi &&\n            isValidAddress &&\n            (!errors.has('nameAddr') && !errors.has('abiField'))\n              ? ''\n              : 'disabled',\n            'submit-button large-round-button-green-filled clickable'\n          ]\"\n          @click=\"switchView('forward')\"\n        >\n          {{ $t('common.continue') }}\n          <img src=\"~@/assets/images/icons/right-arrow.png\" alt />\n        </div>\n        <interface-bottom-text\n          :link-text=\"$t('interface.helpCenter')\"\n          :question=\"$t('interface.haveIssues')\"\n          link=\"https://kb.myetherwallet.com\"\n        />\n      </div>\n    </div>\n    <div v-else class=\"contract-methods-container\">\n      <h4>Read/Write Contract</h4>\n      <div class=\"contract-addr-container\">\n        <div class=\"contract-addr\">\n          <p>Contract Address: {{ address }}</p>\n        </div>\n        <div class=\"picker-container\">\n          <currency-picker\n            :currency=\"contractMethods\"\n            :token=\"false\"\n            page=\"interactWContract\"\n            @selectedCurrency=\"selectedFunction\"\n          />\n        </div>\n      </div>\n      <div\n        v-if=\"selectedMethod.name !== undefined\"\n        class=\"method-arguments-container\"\n      >\n        <h4>{{ selectedMethod.name | capitalize }}</h4>\n        <div\n          v-for=\"(input, idx) in selectedMethod.inputs\"\n          :key=\"input.name + idx\"\n          class=\"input-item-container\"\n        >\n          <div class=\"title-container\">\n            <div class=\"title\">\n              <h5>{{ input.name | capitalize }} ({{ input.type }}):</h5>\n            </div>\n          </div>\n          <div class=\"input-container\">\n            <input\n              v-if=\"getType(input.type).type !== 'radio'\"\n              :disabled=\"noInput\"\n              :type=\"getType(input.type).type\"\n              v-model=\"inputs[input.name]\"\n              class=\"non-bool-input\"\n            />\n            <div\n              v-if=\"getType(input.type).type === 'radio'\"\n              class=\"bool-input-container\"\n            >\n              <div class=\"bool-items\">\n                <input\n                  v-model=\"inputs[input.name]\"\n                  :value=\"true\"\n                  :name=\"input.name\"\n                  type=\"radio\"\n                />\n                <label :for=\"input.name\">True</label>\n              </div>\n              <div class=\"bool-items\">\n                <input\n                  v-model=\"inputs[input.name]\"\n                  :value=\"false\"\n                  :name=\"input.name\"\n                  type=\"radio\"\n                  checked\n                />\n                <label :for=\"input.name\">False</label>\n              </div>\n            </div>\n            <i\n              v-if=\"!noInput\"\n              :class=\"[\n                getType(input.type).type !== 'radio' ? 'non-bool-i' : '',\n                isValidInput(\n                  inputs[input.name],\n                  getType(input.type).solidityType\n                )\n                  ? ''\n                  : 'not-good',\n                'fa fa-check-circle good-button'\n              ]\"\n              aria-hidden=\"true\"\n            />\n          </div>\n        </div>\n        <div>\n          <div class=\"title-container\">\n            <div class=\"title\">\n              <h4>{{ $t('common.value') }} in ETH:</h4>\n            </div>\n          </div>\n          <input\n            v-model=\"value\"\n            step=\"any\"\n            type=\"text\"\n            name\n            placeholder=\"ETH\"\n            class=\"non-bool-input\"\n          />\n        </div>\n        <div v-if=\"selectedMethod.constant\">\n          <div class=\"title-container\">\n            <div class=\"title\">\n              <h4>Result:</h4>\n            </div>\n          </div>\n          <div class=\"result-inputs\">\n            <input\n              v-if=\"\n                resType === 'string' ||\n                  resType === 'boolean' ||\n                  resType === 'number'\n              \"\n              v-model=\"result\"\n              type=\"text\"\n              name\n              placeholder=\"0x00000000000000\"\n              disabled\n              class=\"non-bool-input\"\n            />\n            <div v-if=\"resType === 'object'\">\n              <!--\n                Have to separate them since v-for still loops when v-if is in the same line getting max stack\n              -->\n              <div\n                v-for=\"(item, idx) in selectedMethod.outputs\"\n                :key=\"item.name + idx\"\n                class=\"result-container\"\n              >\n                <label :for=\"item.name !== '' ? item.name : item.type + idx\">\n                  {{ item.name !== '' ? item.name : item.type | capitalize }}\n                </label>\n                <input\n                  :name=\"item.name !== '' ? item.name : item.type + idx\"\n                  :value=\"result[idx]\"\n                  type=\"text\"\n                  placeholder=\"0x00000000000000\"\n                  disabled\n                  class=\"result-input\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"submit-button-container\">\n        <div class=\"interact-buttons\">\n          <div\n            class=\"submit-button large-round-button-green-border clickable\"\n            @click=\"switchView('backwards')\"\n          >\n            {{ $t('common.back') }}\n          </div>\n          <div\n            v-if=\"\n              selectedMethod.hasOwnProperty('inputs') &&\n                ((selectedMethod.constant &&\n                  selectedMethod.inputs.length > 0) ||\n                  !selectedMethod.constant)\n            \"\n            :class=\"[\n              allValid ? '' : 'disabled',\n              loading ? 'disabled' : '',\n              'submit-button large-round-button-green-filled clickable'\n            ]\"\n            @click=\"write\"\n          >\n            <span v-show=\"!loading && !selectedMethod.constant\">{{\n              $t('interface.write')\n            }}</span>\n            <span v-show=\"!loading && selectedMethod.constant\">\n              {{ $t('interface.read') }}\n            </span>\n            <i v-show=\"loading\" class=\"fa fa-spinner fa-spin fa-lg\" />\n          </div>\n        </div>\n        <interface-bottom-text\n          :link-text=\"$t('interface.helpCenter')\"\n          :question=\"$t('interface.haveIssues')\"\n          link=\"https://kb.myetherwallet.com\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport CurrencyPicker from '../../components/CurrencyPicker';\nimport InterfaceContainerTitle from '../../components/InterfaceContainerTitle';\nimport InterfaceBottomText from '@/components/InterfaceBottomText';\nimport { Misc, Toast } from '@/helpers';\nimport { isAddress } from '@/helpers/addressUtils';\nimport * as unit from 'ethjs-unit';\nimport store from 'store';\n\nexport default {\n  components: {\n    'interface-container-title': InterfaceContainerTitle,\n    'interface-bottom-text': InterfaceBottomText,\n    'currency-picker': CurrencyPicker\n  },\n  data() {\n    return {\n      abi: '',\n      address: '',\n      interact: false,\n      contractMethods: [],\n      selectedMethod: {},\n      result: '',\n      loading: false,\n      value: 0,\n      inputs: {}\n    };\n  },\n  computed: {\n    ...mapState(['network', 'gasPrice', 'account', 'web3']),\n    mergedContracts() {\n      const customContracts = store.get('customContracts') || [];\n      const concatContracts = this.network.type.contracts.concat(\n        customContracts\n      );\n      return concatContracts;\n    },\n    isValidAbi() {\n      return Misc.isJson(this.abi);\n    },\n    isValidAddress() {\n      return isAddress(this.address);\n    },\n    noInput() {\n      return (\n        this.selectedMethod.constant && this.selectedMethod.inputs.length === 0\n      );\n    },\n    resType() {\n      return typeof this.result;\n    },\n    allValid() {\n      let _allvalid = true;\n      if (this.selectedMethod.inputs) {\n        this.selectedMethod.inputs.forEach(item => {\n          if (\n            !this.isValidInput(\n              this.inputs[item.name],\n              this.getType(item.type).solidityType\n            )\n          )\n            _allvalid = false;\n        });\n      }\n      return _allvalid && this.isValidAbi && this.isValidAddress;\n    },\n    contractArgs() {\n      const _contractArgs = [];\n      if (this.selectedMethod) {\n        this.selectedMethod.inputs.forEach(item => {\n          if (item.type === 'bytes32[]') {\n            const parsedItem = this.formatInput(this.inputs[item.name]);\n            _contractArgs.push(parsedItem);\n          } else if (item.type === 'address') {\n            _contractArgs.push(this.inputs[item.name].toLowerCase().trim());\n          } else {\n            _contractArgs.push(this.inputs[item.name]);\n          }\n        });\n      }\n      return _contractArgs;\n    },\n    txValue() {\n      return Misc.sanitizeHex(unit.toWei(this.value, 'ether').toString(16));\n    }\n  },\n  watch: {\n    network() {\n      this.abi = '';\n      this.address = '';\n      this.interact = false;\n      this.contractMethods = [];\n      this.selectedMethod = {};\n      this.result = '';\n    }\n  },\n  methods: {\n    resetDefaults() {\n      this.abi = '';\n      this.address = '';\n      this.interact = false;\n      this.contractMethods = [];\n      this.selectedMethod = {};\n      this.result = '';\n      this.loading = false;\n      this.value = 0;\n      this.inputs = {};\n    },\n    isValidInput: Misc.isContractArgValid,\n    getType: Misc.solidityType,\n    selectedContract(selected) {\n      if (selected.abi === '') {\n        this.abi = '';\n      } else {\n        this.abi = JSON.stringify(selected.abi);\n      }\n      this.address = selected.address;\n    },\n    selectedFunction(method) {\n      if (!method.hasOwnProperty('constant')) return;\n      const contract = new this.web3.eth.Contract(\n        [method],\n        this.address.toLowerCase()\n      );\n      if (method.constant === true && method.inputs.length === 0) {\n        contract.methods[method.name]()\n          .call({ from: this.account.address.toLowerCase() })\n          .then(res => {\n            this.result = res;\n          })\n          .catch(e => {\n            this.loading = false;\n            Toast.responseHandler(e, Toast.WARN);\n          });\n      } else {\n        this.result = '';\n      }\n      this.loading = false;\n      this.selectedMethod = method;\n      this.selectedMethod.inputs.forEach(input => {\n        if (input.type === 'bool') {\n          this.inputs[input.name] = false;\n        }\n      });\n    },\n    formatInput(str) {\n      if (str[0] === '[') {\n        return str;\n      }\n      const newArr = str.split(',');\n      return newArr.map(function(item) {\n        return item.replace(' ', '');\n      });\n    },\n    copyToClipboard(ref) {\n      this.$refs[ref].select();\n      document.execCommand('copy');\n    },\n    deleteInput(ref) {\n      this.$refs[ref].value = '';\n    },\n    switchView(direction) {\n      switch (direction) {\n        case 'forward':\n          if (this.abi !== '') {\n            JSON.parse(this.abi).forEach(item => {\n              if (item.type !== 'constructor' && item.constant !== undefined) {\n                this.contractMethods.push(item);\n              }\n            });\n          }\n          this.interact = true;\n          this.loading = false;\n          break;\n        default:\n          this.resetDefaults();\n      }\n    },\n    async write() {\n      const web3 = this.web3;\n      const contract = new web3.eth.Contract(\n        [this.selectedMethod],\n        this.address.toLowerCase()\n      );\n      this.loading = true;\n      if (this.selectedMethod.constant === true) {\n        contract.methods[this.selectedMethod.name](...this.contractArgs)\n          .call({ from: this.account.address.toLowerCase() })\n          .then(res => {\n            this.result = res;\n            this.loading = false;\n          })\n          .catch(e => {\n            this.loading = false;\n            Toast.responseHandler(e, false);\n          });\n      } else {\n        const nonce = await web3.eth.getTransactionCount(\n          this.account.address.toLowerCase()\n        );\n        let errored = false;\n        const gasLimit = await contract.methods[this.selectedMethod.name](\n          ...this.contractArgs\n        )\n          .estimateGas({\n            from: this.account.address.toLowerCase(),\n            value: this.txValue\n          })\n          .then(res => {\n            return res;\n          })\n          .catch(e => {\n            this.loading = false;\n            Toast.responseHandler(e, Toast.ERROR);\n            errored = true;\n          });\n        if (!errored) {\n          const data = contract.methods[this.selectedMethod.name](\n            ...this.contractArgs\n          ).encodeABI();\n\n          const raw = {\n            from: this.account.address.toLowerCase(),\n            gas: gasLimit,\n            nonce: nonce,\n            gasPrice: Number(unit.toWei(this.gasPrice, 'gwei')),\n            value: this.txValue,\n            to: this.address.toLowerCase(),\n            data: data\n          };\n          this.loading = false;\n          web3.eth.sendTransaction(raw).catch(err => {\n            Toast.responseHandler(err, Toast.ERROR);\n          });\n        }\n      }\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'InteractWithContractContainer.scss';\n</style>\n"],"sourceRoot":"src/layouts/InterfaceLayout/containers/InteractWithContractContainer"}]}