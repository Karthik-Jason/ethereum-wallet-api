{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/thread-loader/dist/cjs.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/layouts/AccessWalletLayout/components/NetworkAndAddressModal/NetworkAndAddressModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/layouts/AccessWalletLayout/components/NetworkAndAddressModal/NetworkAndAddressModal.vue","mtime":1574664278286},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/thread-loader/dist/cjs.js","mtime":1574664277654},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js","mtime":1574664275010},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js","mtime":1574664277774}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport CustomerSupport from '@/components/CustomerSupport';\nimport { mapState } from 'vuex';\nimport { Misc, Toast, pathHelpers } from '@/helpers';\nimport web3utils from 'web3-utils';\nimport BigNumber from 'bignumber.js';\nimport Blockie from '@/components/Blockie';\nimport { LEDGER as LEDGER_TYPE } from '@/wallets/bip44/walletTypes';\nvar MAX_ADDRESSES = 5;\nexport default {\n  components: {\n    'customer-support': CustomerSupport,\n    blockie: Blockie\n  },\n  props: {\n    hardwareWallet: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    }\n  },\n  data: function data() {\n    return {\n      selectedId: '',\n      currentIndex: 0,\n      HDAccounts: [],\n      availablePaths: {},\n      selectedPath: '',\n      invalidPath: '',\n      customPathInput: false,\n      currentWallet: null,\n      customPath: {\n        label: '',\n        dpath: ''\n      },\n      showCollapse: false,\n      ledgerType: LEDGER_TYPE,\n      acceptTerms: false\n    };\n  },\n  computed: _objectSpread({}, mapState(['network', 'Networks', 'customPaths', 'path', 'web3', 'wallet']), {\n    selectedNetwork: function selectedNetwork() {\n      return this.network;\n    },\n    reorderNetworkList: function reorderNetworkList() {\n      return Misc.reorderNetworks();\n    },\n    isDisabled: function isDisabled() {\n      return this.selectedId !== '' && this.acceptTerms;\n    }\n  }),\n  watch: {\n    hardwareWallet: function hardwareWallet() {\n      this.getPaths();\n      this.setHDAccounts();\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    // reset component values when modal becomes hidden\n    this.$refs.networkAndAddress.$on('hidden', function () {\n      _this.availablePaths = {};\n      _this.selectedPath = '';\n      _this.invalidPath = '';\n      _this.customPathInput = false;\n      _this.currentWallet = null;\n      _this.customPath = {\n        label: '',\n        path: ''\n      };\n\n      _this.resetPaginationValues();\n    });\n  },\n  methods: {\n    switchNetwork: function switchNetwork(network) {\n      var _this2 = this;\n\n      this.$store.dispatch('switchNetwork', network).then(function () {\n        _this2.$store.dispatch('setWeb3Instance');\n\n        _this2.currentIndex = 0;\n\n        _this2.setHDAccounts();\n      });\n    },\n    unselectAllAddresses: function unselectAllAddresses(selected) {\n      document.querySelectorAll('.user-input-checkbox input').forEach(function (el) {\n        el.checked = el.id === selected;\n      });\n    },\n    setAccount: function setAccount(account) {\n      this.selectedId = 'address' + account.index;\n      this.unselectAllAddresses('address' + account.index);\n      this.currentWallet = account.account;\n    },\n    resetPaginationValues: function resetPaginationValues() {\n      this.currentIndex = 0;\n    },\n    showCustomPathInput: function showCustomPathInput() {\n      this.customPath = {\n        label: '',\n        path: ''\n      };\n      this.customPathInput = !this.customPathInput;\n    },\n    convertBalance: function convertBalance(bal) {\n      if (bal === 'loading') return bal;\n      return new BigNumber(web3utils.fromWei(bal, 'ether')).toFixed(3);\n    },\n    removeCustomPath: function removeCustomPath(path) {\n      var _this3 = this;\n\n      this.$store.dispatch('removeCustomPath', path).then(function () {\n        _this3.getPaths();\n      });\n    },\n    addCustomPath: function addCustomPath() {\n      var _this4 = this;\n\n      var customPath = pathHelpers.checkCustomPath(this.customPath.path);\n\n      if (customPath) {\n        this.customPath.path = customPath;\n        this.$store.dispatch('addCustomPath', {\n          label: this.customPath.label,\n          path: customPath\n        }).then(function () {\n          _this4.getPaths();\n        });\n        this.showCustomPathInput(); // reset the path input\n      } else {\n        this.invalidPath = this.customPath;\n      }\n    },\n    changePath: function changePath(key) {\n      var _this5 = this;\n\n      this.resetPaginationValues();\n      var selectedPath;\n\n      if (this.availablePaths[key]) {\n        selectedPath = this.availablePaths[key].path;\n      } else if (this.customPaths[key]) {\n        selectedPath = this.customPaths[key].path;\n      } else {\n        selectedPath = this.selectedPath;\n      }\n\n      this.hardwareWallet.init(selectedPath).then(function () {\n        _this5.getPaths();\n\n        _this5.currentIndex = 0;\n\n        _this5.setHDAccounts();\n\n        _this5.$refs.networkAndAddress.show();\n      }).catch(function (error) {\n        // if HD path is not supported by the hardware\n        _this5.HDAccounts = [];\n        Toast.responseHandler(error, Toast.ERROR);\n      });\n      this.selectedPath = this.hardwareWallet.getCurrentPath();\n    },\n    setBalances: web3utils._.debounce(function () {\n      var _this6 = this;\n\n      this.HDAccounts.forEach(function (account) {\n        if (account.account) {\n          _this6.web3.eth.getBalance(account.account.getAddressString()).then(function (balance) {\n            account.balance = balance;\n          }).catch(function (e) {\n            Toast.responseHandler(e, Toast.ERROR);\n          });\n        } else {\n          account.balance = 0;\n        }\n      });\n    }, 1000),\n    unlockWallet: function unlockWallet() {\n      var _this7 = this;\n\n      this.$store.dispatch('decryptWallet', [this.currentWallet]).then(function () {\n        if (_this7.wallet !== null) {\n          if (!_this7.$route.path.split('/').includes('interface')) {\n            _this7.$router.push({\n              path: 'interface'\n            });\n          }\n        }\n\n        _this7.$refs.networkAndAddress.hide();\n      }).catch(function (error) {\n        // the wallet param (param[0]) is undefined or null\n        Toast.responseHandler(error, Toast.ERROR);\n      });\n    },\n    setHDAccounts: function () {\n      var _setHDAccounts = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var i, account;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this.web3.eth) this.$store.dispatch('setWeb3Instance');\n                this.HDAccounts = [];\n                i = this.currentIndex;\n\n              case 3:\n                if (!(i < this.currentIndex + MAX_ADDRESSES)) {\n                  _context.next = 12;\n                  break;\n                }\n\n                _context.next = 6;\n                return this.hardwareWallet.getAccount(i);\n\n              case 6:\n                account = _context.sent;\n                this.HDAccounts.push({\n                  index: i,\n                  account: account,\n                  balance: 'loading'\n                });\n                this.setBalances();\n\n              case 9:\n                i++;\n                _context.next = 3;\n                break;\n\n              case 12:\n                this.currentIndex += MAX_ADDRESSES;\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function setHDAccounts() {\n        return _setHDAccounts.apply(this, arguments);\n      }\n\n      return setHDAccounts;\n    }(),\n    nextAddressSet: function nextAddressSet() {\n      this.setHDAccounts();\n    },\n    previousAddressSet: function previousAddressSet() {\n      this.currentIndex = this.currentIndex - 2 * MAX_ADDRESSES < 0 ? 0 : this.currentIndex - 2 * MAX_ADDRESSES;\n      this.setHDAccounts();\n    },\n    getPathLabel: function getPathLabel(path) {\n      for (var _p in this.customPaths) {\n        if (this.customPaths[_p].path === path) {\n          return this.customPaths[_p].label;\n        }\n      }\n\n      for (var _p2 in this.availablePaths) {\n        if (this.availablePaths[_p2].path === path) {\n          return this.availablePaths[_p2].label;\n        }\n      }\n\n      return 'Unknown';\n    },\n    getPaths: function getPaths() {\n      this.selectedPath = this.hardwareWallet.getCurrentPath();\n      this.availablePaths = this.hardwareWallet.getSupportedPaths();\n    }\n  }\n};",{"version":3,"sources":["NetworkAndAddressModal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyPA,OAAA,eAAA,MAAA,8BAAA;AACA,SAAA,QAAA,QAAA,MAAA;AACA,SAAA,IAAA,EAAA,KAAA,EAAA,WAAA,QAAA,WAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,OAAA,SAAA,MAAA,cAAA;AACA,OAAA,OAAA,MAAA,sBAAA;AACA,SAAA,MAAA,IAAA,WAAA,QAAA,6BAAA;AAEA,IAAA,aAAA,GAAA,CAAA;AACA,eAAA;AACA,EAAA,UAAA,EAAA;AACA,wBAAA,eADA;AAEA,IAAA,OAAA,EAAA;AAFA,GADA;AAKA,EAAA,KAAA,EAAA;AACA,IAAA,cAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA,oBAAA;AACA,eAAA,EAAA;AACA;AAJA;AADA,GALA;AAaA,EAAA,IAbA,kBAaA;AACA,WAAA;AACA,MAAA,UAAA,EAAA,EADA;AAEA,MAAA,YAAA,EAAA,CAFA;AAGA,MAAA,UAAA,EAAA,EAHA;AAIA,MAAA,cAAA,EAAA,EAJA;AAKA,MAAA,YAAA,EAAA,EALA;AAMA,MAAA,WAAA,EAAA,EANA;AAOA,MAAA,eAAA,EAAA,KAPA;AAQA,MAAA,aAAA,EAAA,IARA;AASA,MAAA,UAAA,EAAA;AAAA,QAAA,KAAA,EAAA,EAAA;AAAA,QAAA,KAAA,EAAA;AAAA,OATA;AAUA,MAAA,YAAA,EAAA,KAVA;AAWA,MAAA,UAAA,EAAA,WAXA;AAYA,MAAA,WAAA,EAAA;AAZA,KAAA;AAcA,GA5BA;AA6BA,EAAA,QAAA,oBACA,QAAA,CAAA,CACA,SADA,EAEA,UAFA,EAGA,aAHA,EAIA,MAJA,EAKA,MALA,EAMA,QANA,CAAA,CADA;AASA,IAAA,eATA,6BASA;AACA,aAAA,KAAA,OAAA;AACA,KAXA;AAYA,IAAA,kBAZA,gCAYA;AACA,aAAA,IAAA,CAAA,eAAA,EAAA;AACA,KAdA;AAeA,IAAA,UAfA,wBAeA;AACA,aAAA,KAAA,UAAA,KAAA,EAAA,IAAA,KAAA,WAAA;AACA;AAjBA,IA7BA;AAgDA,EAAA,KAAA,EAAA;AACA,IAAA,cADA,4BACA;AACA,WAAA,QAAA;AACA,WAAA,aAAA;AACA;AAJA,GAhDA;AAsDA,EAAA,OAtDA,qBAsDA;AAAA;;AACA;AACA,SAAA,KAAA,CAAA,iBAAA,CAAA,GAAA,CAAA,QAAA,EAAA,YAAA;AACA,MAAA,KAAA,CAAA,cAAA,GAAA,EAAA;AACA,MAAA,KAAA,CAAA,YAAA,GAAA,EAAA;AACA,MAAA,KAAA,CAAA,WAAA,GAAA,EAAA;AACA,MAAA,KAAA,CAAA,eAAA,GAAA,KAAA;AACA,MAAA,KAAA,CAAA,aAAA,GAAA,IAAA;AACA,MAAA,KAAA,CAAA,UAAA,GAAA;AAAA,QAAA,KAAA,EAAA,EAAA;AAAA,QAAA,IAAA,EAAA;AAAA,OAAA;;AACA,MAAA,KAAA,CAAA,qBAAA;AACA,KARA;AASA,GAjEA;AAkEA,EAAA,OAAA,EAAA;AACA,IAAA,aADA,yBACA,OADA,EACA;AAAA;;AACA,WAAA,MAAA,CAAA,QAAA,CAAA,eAAA,EAAA,OAAA,EAAA,IAAA,CAAA,YAAA;AACA,QAAA,MAAA,CAAA,MAAA,CAAA,QAAA,CAAA,iBAAA;;AACA,QAAA,MAAA,CAAA,YAAA,GAAA,CAAA;;AACA,QAAA,MAAA,CAAA,aAAA;AACA,OAJA;AAKA,KAPA;AAQA,IAAA,oBAAA,EAAA,8BAAA,QAAA,EAAA;AACA,MAAA,QAAA,CACA,gBADA,CACA,4BADA,EAEA,OAFA,CAEA,UAAA,EAAA,EAAA;AACA,QAAA,EAAA,CAAA,OAAA,GAAA,EAAA,CAAA,EAAA,KAAA,QAAA;AACA,OAJA;AAKA,KAdA;AAeA,IAAA,UAfA,sBAeA,OAfA,EAeA;AACA,WAAA,UAAA,GAAA,YAAA,OAAA,CAAA,KAAA;AACA,WAAA,oBAAA,CAAA,YAAA,OAAA,CAAA,KAAA;AACA,WAAA,aAAA,GAAA,OAAA,CAAA,OAAA;AACA,KAnBA;AAoBA,IAAA,qBApBA,mCAoBA;AACA,WAAA,YAAA,GAAA,CAAA;AACA,KAtBA;AAuBA,IAAA,mBAvBA,iCAuBA;AACA,WAAA,UAAA,GAAA;AAAA,QAAA,KAAA,EAAA,EAAA;AAAA,QAAA,IAAA,EAAA;AAAA,OAAA;AACA,WAAA,eAAA,GAAA,CAAA,KAAA,eAAA;AACA,KA1BA;AA2BA,IAAA,cA3BA,0BA2BA,GA3BA,EA2BA;AACA,UAAA,GAAA,KAAA,SAAA,EAAA,OAAA,GAAA;AACA,aAAA,IAAA,SAAA,CAAA,SAAA,CAAA,OAAA,CAAA,GAAA,EAAA,OAAA,CAAA,EAAA,OAAA,CAAA,CAAA,CAAA;AACA,KA9BA;AA+BA,IAAA,gBA/BA,4BA+BA,IA/BA,EA+BA;AAAA;;AACA,WAAA,MAAA,CAAA,QAAA,CAAA,kBAAA,EAAA,IAAA,EAAA,IAAA,CAAA,YAAA;AACA,QAAA,MAAA,CAAA,QAAA;AACA,OAFA;AAGA,KAnCA;AAoCA,IAAA,aApCA,2BAoCA;AAAA;;AACA,UAAA,UAAA,GAAA,WAAA,CAAA,eAAA,CAAA,KAAA,UAAA,CAAA,IAAA,CAAA;;AACA,UAAA,UAAA,EAAA;AACA,aAAA,UAAA,CAAA,IAAA,GAAA,UAAA;AACA,aAAA,MAAA,CACA,QADA,CACA,eADA,EACA;AACA,UAAA,KAAA,EAAA,KAAA,UAAA,CAAA,KADA;AAEA,UAAA,IAAA,EAAA;AAFA,SADA,EAKA,IALA,CAKA,YAAA;AACA,UAAA,MAAA,CAAA,QAAA;AACA,SAPA;AAQA,aAAA,mBAAA,GAVA,CAUA;AACA,OAXA,MAWA;AACA,aAAA,WAAA,GAAA,KAAA,UAAA;AACA;AACA,KApDA;AAqDA,IAAA,UArDA,sBAqDA,GArDA,EAqDA;AAAA;;AACA,WAAA,qBAAA;AACA,UAAA,YAAA;;AACA,UAAA,KAAA,cAAA,CAAA,GAAA,CAAA,EAAA;AACA,QAAA,YAAA,GAAA,KAAA,cAAA,CAAA,GAAA,EAAA,IAAA;AACA,OAFA,MAEA,IAAA,KAAA,WAAA,CAAA,GAAA,CAAA,EAAA;AACA,QAAA,YAAA,GAAA,KAAA,WAAA,CAAA,GAAA,EAAA,IAAA;AACA,OAFA,MAEA;AACA,QAAA,YAAA,GAAA,KAAA,YAAA;AACA;;AAEA,WAAA,cAAA,CACA,IADA,CACA,YADA,EAEA,IAFA,CAEA,YAAA;AACA,QAAA,MAAA,CAAA,QAAA;;AACA,QAAA,MAAA,CAAA,YAAA,GAAA,CAAA;;AACA,QAAA,MAAA,CAAA,aAAA;;AACA,QAAA,MAAA,CAAA,KAAA,CAAA,iBAAA,CAAA,IAAA;AACA,OAPA,EAQA,KARA,CAQA,UAAA,KAAA,EAAA;AACA;AACA,QAAA,MAAA,CAAA,UAAA,GAAA,EAAA;AACA,QAAA,KAAA,CAAA,eAAA,CAAA,KAAA,EAAA,KAAA,CAAA,KAAA;AACA,OAZA;AAaA,WAAA,YAAA,GAAA,KAAA,cAAA,CAAA,cAAA,EAAA;AACA,KA9EA;AA+EA,IAAA,WAAA,EAAA,SAAA,CAAA,CAAA,CAAA,QAAA,CAAA,YAAA;AAAA;;AACA,WAAA,UAAA,CAAA,OAAA,CAAA,UAAA,OAAA,EAAA;AACA,YAAA,OAAA,CAAA,OAAA,EAAA;AACA,UAAA,MAAA,CAAA,IAAA,CAAA,GAAA,CACA,UADA,CACA,OAAA,CAAA,OAAA,CAAA,gBAAA,EADA,EAEA,IAFA,CAEA,UAAA,OAAA,EAAA;AACA,YAAA,OAAA,CAAA,OAAA,GAAA,OAAA;AACA,WAJA,EAKA,KALA,CAKA,UAAA,CAAA,EAAA;AACA,YAAA,KAAA,CAAA,eAAA,CAAA,CAAA,EAAA,KAAA,CAAA,KAAA;AACA,WAPA;AAQA,SATA,MASA;AACA,UAAA,OAAA,CAAA,OAAA,GAAA,CAAA;AACA;AACA,OAbA;AAcA,KAfA,EAeA,IAfA,CA/EA;AA+FA,IAAA,YA/FA,0BA+FA;AAAA;;AACA,WAAA,MAAA,CACA,QADA,CACA,eADA,EACA,CAAA,KAAA,aAAA,CADA,EAEA,IAFA,CAEA,YAAA;AACA,YAAA,MAAA,CAAA,MAAA,KAAA,IAAA,EAAA;AACA,cAAA,CAAA,MAAA,CAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,GAAA,EAAA,QAAA,CAAA,WAAA,CAAA,EAAA;AACA,YAAA,MAAA,CAAA,OAAA,CAAA,IAAA,CAAA;AACA,cAAA,IAAA,EAAA;AADA,aAAA;AAGA;AACA;;AAEA,QAAA,MAAA,CAAA,KAAA,CAAA,iBAAA,CAAA,IAAA;AACA,OAZA,EAaA,KAbA,CAaA,UAAA,KAAA,EAAA;AACA;AACA,QAAA,KAAA,CAAA,eAAA,CAAA,KAAA,EAAA,KAAA,CAAA,KAAA;AACA,OAhBA;AAiBA,KAjHA;AAkHA,IAAA,aAlHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmHA,oBAAA,CAAA,KAAA,IAAA,CAAA,GAAA,EAAA,KAAA,MAAA,CAAA,QAAA,CAAA,iBAAA;AACA,qBAAA,UAAA,GAAA,EAAA;AAEA,gBAAA,CAtHA,GAsHA,KAAA,YAtHA;;AAAA;AAAA,sBAuHA,CAAA,GAAA,KAAA,YAAA,GAAA,aAvHA;AAAA;AAAA;AAAA;;AAAA;AAAA,uBA0HA,KAAA,cAAA,CAAA,UAAA,CAAA,CAAA,CA1HA;;AAAA;AA0HA,gBAAA,OA1HA;AA2HA,qBAAA,UAAA,CAAA,IAAA,CAAA;AACA,kBAAA,KAAA,EAAA,CADA;AAEA,kBAAA,OAAA,EAAA,OAFA;AAGA,kBAAA,OAAA,EAAA;AAHA,iBAAA;AAKA,qBAAA,WAAA;;AAhIA;AAwHA,gBAAA,CAAA,EAxHA;AAAA;AAAA;;AAAA;AAkIA,qBAAA,YAAA,IAAA,aAAA;;AAlIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAoIA,IAAA,cApIA,4BAoIA;AACA,WAAA,aAAA;AACA,KAtIA;AAuIA,IAAA,kBAvIA,gCAuIA;AACA,WAAA,YAAA,GACA,KAAA,YAAA,GAAA,IAAA,aAAA,GAAA,CAAA,GACA,CADA,GAEA,KAAA,YAAA,GAAA,IAAA,aAHA;AAIA,WAAA,aAAA;AACA,KA7IA;AA8IA,IAAA,YA9IA,wBA8IA,IA9IA,EA8IA;AACA,WAAA,IAAA,EAAA,IAAA,KAAA,WAAA,EAAA;AACA,YAAA,KAAA,WAAA,CAAA,EAAA,EAAA,IAAA,KAAA,IAAA,EAAA;AACA,iBAAA,KAAA,WAAA,CAAA,EAAA,EAAA,KAAA;AACA;AACA;;AAEA,WAAA,IAAA,GAAA,IAAA,KAAA,cAAA,EAAA;AACA,YAAA,KAAA,cAAA,CAAA,GAAA,EAAA,IAAA,KAAA,IAAA,EAAA;AACA,iBAAA,KAAA,cAAA,CAAA,GAAA,EAAA,KAAA;AACA;AACA;;AAEA,aAAA,SAAA;AACA,KA5JA;AA6JA,IAAA,QA7JA,sBA6JA;AACA,WAAA,YAAA,GAAA,KAAA,cAAA,CAAA,cAAA,EAAA;AACA,WAAA,cAAA,GAAA,KAAA,cAAA,CAAA,iBAAA,EAAA;AACA;AAhKA;AAlEA,CAAA","sourcesContent":["<template>\n  <b-modal\n    ref=\"networkAndAddress\"\n    :title=\"$t('accessWallet.networkAndAddress')\"\n    hide-footer\n    class=\"bootstrap-modal nopadding modal-network-and-address\"\n    centered\n    static\n    lazy\n  >\n    <div class=\"modal-content-container\">\n      <div class=\"collapse-container\">\n        <b-btn\n          v-b-toggle.collapse1\n          class=\"collapse-open-button\"\n          variant=\"primary\"\n        >\n          <p class=\"button-number\">1</p>\n          <div class=\"network\">\n            <p>{{ $t('common.network') }}</p>\n            <p class=\"network-name monospace\">\n              ({{ selectedNetwork.type.name }} - {{ selectedNetwork.service }})\n            </p>\n          </div>\n          <p v-if=\"false\" class=\"right-button\">{{ $t('common.cancel') }}</p>\n        </b-btn>\n        <b-collapse\n          id=\"collapse1\"\n          class=\"collapse-content\"\n          accordion=\"networkaddraccordion\"\n        >\n          <ul class=\"networks\">\n            <li\n              v-for=\"(key, index) in Object.keys(reorderNetworkList)\"\n              :key=\"$router.path + key + index\"\n            >\n              <div class=\"network-title\">\n                <div class=\"network-icon-container\">\n                  <img\n                    v-if=\"Networks[key][0].type.icon\"\n                    :src=\"Networks[key][0].type.icon\"\n                    alt\n                  />\n                  <div v-else class=\"no-icon\">\n                    <p>No</p>\n                    <p>Icon</p>\n                  </div>\n                </div>\n                <p>{{ key }}</p>\n              </div>\n              <div class=\"network-content\">\n                <p\n                  v-for=\"net in Networks[key]\"\n                  :key=\"net.service\"\n                  :class=\"\n                    net.service === selectedNetwork.service &&\n                    net.type &&\n                    net.type.name === selectedNetwork.type.name\n                      ? 'current-network'\n                      : ''\n                  \"\n                  @click=\"switchNetwork(net)\"\n                >\n                  {{ net.service }}\n                </p>\n              </div>\n            </li>\n          </ul>\n        </b-collapse>\n      </div>\n      <div class=\"collapse-container\">\n        <b-btn\n          v-b-toggle.collapse2\n          class=\"collapse-open-button\"\n          variant=\"primary\"\n        >\n          <p class=\"button-number\">2</p>\n          <p>{{ $t('common.address') }}</p>\n        </b-btn>\n        <b-collapse\n          id=\"collapse2\"\n          accordion=\"networkaddraccordion\"\n          visible\n          class=\"collapse-content\"\n        >\n          <!-- Derivation Path Drop down -->\n          <div\n            v-show=\"hardwareWallet.identifier !== ledgerType\"\n            class=\"content-container-1\"\n          >\n            <div class=\"hd-derivation\">\n              <h4>{{ $t('accessWallet.hdDerivationPath') }}</h4>\n              <div class=\"dropdown-button-container\">\n                <b-dropdown\n                  id=\"hd-derivation-path\"\n                  :text=\"getPathLabel(selectedPath)\"\n                  right\n                  class=\"dropdown-button-2\"\n                >\n                  <b-dropdown-item\n                    v-for=\"(val, key) in availablePaths\"\n                    :class=\"selectedPath === val.path ? 'active' : ''\"\n                    :key=\"'base' + key\"\n                    @click=\"changePath(key)\"\n                    >{{ val.label }}</b-dropdown-item\n                  >\n                  <b-dropdown-divider />\n                  <b-dropdown-item>\n                    {{ $t('accessWallet.customPaths') }}\n                  </b-dropdown-item>\n                  <b-dropdown-item\n                    v-for=\"(val, key) in customPaths\"\n                    :class=\"selectedPath === val.path ? 'active' : ''\"\n                    :key=\"key\"\n                  >\n                    <div class=\"custom-networks\">\n                      <div @click=\"changePath(key)\">{{ val.label }}</div>\n                      <span>\n                        <i\n                          class=\"fa fa-times-circle\"\n                          @click.prevent=\"removeCustomPath(val)\"\n                        />\n                      </span>\n                    </div>\n                  </b-dropdown-item>\n                  <b-dropdown-item @click=\"showCustomPathInput\">\n                    {{ $t('accessWallet.addCustomPath') }}\n                  </b-dropdown-item>\n                </b-dropdown>\n              </div>\n            </div>\n            <p\n              v-show=\"invalidPath !== '' && customPathInput\"\n              class=\"error-message-container\"\n            >\n              {{\n                $t('accessWallet.invalidPathDesc', { path: invalidPath.path })\n              }}\n            </p>\n            <p v-show=\"!customPathInput\" class=\"derivation-brands monospace\">\n              {{ getPathLabel(selectedPath) }} ({{ selectedPath }})\n            </p>\n            <div v-show=\"customPathInput\" class=\"custom-path-container\">\n              <label for=\"customPathLabel\">{{ $t('common.alias') }}</label>\n              <input\n                id=\"customPathLabel\"\n                v-model=\"customPath.label\"\n                placeholder=\"my custom path\"\n              />\n              <label for=\"customPathInput\">{{ $t('common.path') }}</label>\n              <input\n                id=\"customPathInput\"\n                v-model=\"customPath.path\"\n                placeholder=\"m/44'/1'/0'/0\"\n              />\n              <button class=\"submit-button cancel\" @click=\"showCustomPathInput\">\n                {{ $t('common.cancel') }}\n              </button>\n              <button class=\"submit-button submit\" @click=\"addCustomPath\">\n                {{ $t('accessWallet.addCustomPath') }}\n              </button>\n            </div>\n          </div>\n          <!-- Address List -->\n          <div class=\"content-container-2\">\n            <div class=\"address-block-container\">\n              <div class=\"block-title\">\n                <h4>{{ $t('accessWallet.interactAddr') }}</h4>\n              </div>\n\n              <ul class=\"address-block table-header fours\">\n                <li>{{ $t('accessWallet.id') }}</li>\n                <li>{{ $t('common.address') }}</li>\n                <li>{{ $t('common.balance') }}</li>\n              </ul>\n\n              <ul\n                v-for=\"account in HDAccounts\"\n                :data-address=\"'address' + account.index\"\n                :key=\"account.index\"\n                :class=\"[\n                  selectedId === 'address' + account.index ? 'selected' : '',\n                  'address-block address-data fours'\n                ]\"\n                @click=\"setAccount(account)\"\n              >\n                <li>\n                  <blockie\n                    :address=\"account.account.getChecksumAddressString()\"\n                    :size=\"8\"\n                    :scale=\"16\"\n                    width=\"30px\"\n                    height=\"30px\"\n                  />\n                </li>\n                <li class=\"monospace\">\n                  {{ account.account.getChecksumAddressString() | concatAddr }}\n                </li>\n                <li class=\"monospace\">{{ convertBalance(account.balance) }}</li>\n                <li class=\"user-input-checkbox\">\n                  <label class=\"checkbox-container checkbox-container-small\">\n                    <input\n                      :id=\"'address' + account.index\"\n                      type=\"checkbox\"\n                      @click=\"unselectAllAddresses\"\n                    />\n                    <span class=\"checkmark checkmark-small\" />\n                  </label>\n                </li>\n              </ul>\n            </div>\n            <!-- .address-block-container -->\n            <div class=\"address-nav\">\n              <span @click=\"previousAddressSet()\"\n                >&lt; {{ $t('common.previous') }}</span\n              >\n              <span @click=\"nextAddressSet()\"\n                >{{ $t('common.next') }} &gt;</span\n              >\n            </div>\n          </div>\n          <!-- .content-container-2 -->\n        </b-collapse>\n        <div class=\"accept-terms\">\n          <label class=\"checkbox-container\">\n            {{ $t('accessWallet.acceptTerms') }}\n            <router-link to=\"/terms-and-conditions\"\n              >{{ $t('common.terms') }}.</router-link\n            >\n            <input v-model=\"acceptTerms\" type=\"checkbox\" />\n            <span class=\"checkmark\" />\n          </label>\n        </div>\n        <div class=\"button-container\">\n          <b-btn\n            :disabled=\"!isDisabled\"\n            class=\"mid-round-button-green-filled close-button\"\n            @click.prevent=\"unlockWallet\"\n            >{{ $t('common.accessMyWallet') }}</b-btn\n          >\n        </div>\n        <customer-support />\n      </div>\n    </div>\n    <!-- .modal-content-container -->\n  </b-modal>\n</template>\n\n<script>\nimport CustomerSupport from '@/components/CustomerSupport';\nimport { mapState } from 'vuex';\nimport { Misc, Toast, pathHelpers } from '@/helpers';\nimport web3utils from 'web3-utils';\nimport BigNumber from 'bignumber.js';\nimport Blockie from '@/components/Blockie';\nimport { LEDGER as LEDGER_TYPE } from '@/wallets/bip44/walletTypes';\n\nconst MAX_ADDRESSES = 5;\nexport default {\n  components: {\n    'customer-support': CustomerSupport,\n    blockie: Blockie\n  },\n  props: {\n    hardwareWallet: {\n      type: Object,\n      default: function() {\n        return {};\n      }\n    }\n  },\n  data() {\n    return {\n      selectedId: '',\n      currentIndex: 0,\n      HDAccounts: [],\n      availablePaths: {},\n      selectedPath: '',\n      invalidPath: '',\n      customPathInput: false,\n      currentWallet: null,\n      customPath: { label: '', dpath: '' },\n      showCollapse: false,\n      ledgerType: LEDGER_TYPE,\n      acceptTerms: false\n    };\n  },\n  computed: {\n    ...mapState([\n      'network',\n      'Networks',\n      'customPaths',\n      'path',\n      'web3',\n      'wallet'\n    ]),\n    selectedNetwork() {\n      return this.network;\n    },\n    reorderNetworkList() {\n      return Misc.reorderNetworks();\n    },\n    isDisabled() {\n      return this.selectedId !== '' && this.acceptTerms;\n    }\n  },\n  watch: {\n    hardwareWallet() {\n      this.getPaths();\n      this.setHDAccounts();\n    }\n  },\n  mounted() {\n    // reset component values when modal becomes hidden\n    this.$refs.networkAndAddress.$on('hidden', () => {\n      this.availablePaths = {};\n      this.selectedPath = '';\n      this.invalidPath = '';\n      this.customPathInput = false;\n      this.currentWallet = null;\n      this.customPath = { label: '', path: '' };\n      this.resetPaginationValues();\n    });\n  },\n  methods: {\n    switchNetwork(network) {\n      this.$store.dispatch('switchNetwork', network).then(() => {\n        this.$store.dispatch('setWeb3Instance');\n        this.currentIndex = 0;\n        this.setHDAccounts();\n      });\n    },\n    unselectAllAddresses: function(selected) {\n      document\n        .querySelectorAll('.user-input-checkbox input')\n        .forEach(function(el) {\n          el.checked = el.id === selected;\n        });\n    },\n    setAccount(account) {\n      this.selectedId = 'address' + account.index;\n      this.unselectAllAddresses('address' + account.index);\n      this.currentWallet = account.account;\n    },\n    resetPaginationValues() {\n      this.currentIndex = 0;\n    },\n    showCustomPathInput() {\n      this.customPath = { label: '', path: '' };\n      this.customPathInput = !this.customPathInput;\n    },\n    convertBalance(bal) {\n      if (bal === 'loading') return bal;\n      return new BigNumber(web3utils.fromWei(bal, 'ether')).toFixed(3);\n    },\n    removeCustomPath(path) {\n      this.$store.dispatch('removeCustomPath', path).then(() => {\n        this.getPaths();\n      });\n    },\n    addCustomPath() {\n      const customPath = pathHelpers.checkCustomPath(this.customPath.path);\n      if (customPath) {\n        this.customPath.path = customPath;\n        this.$store\n          .dispatch('addCustomPath', {\n            label: this.customPath.label,\n            path: customPath\n          })\n          .then(() => {\n            this.getPaths();\n          });\n        this.showCustomPathInput(); // reset the path input\n      } else {\n        this.invalidPath = this.customPath;\n      }\n    },\n    changePath(key) {\n      this.resetPaginationValues();\n      let selectedPath;\n      if (this.availablePaths[key]) {\n        selectedPath = this.availablePaths[key].path;\n      } else if (this.customPaths[key]) {\n        selectedPath = this.customPaths[key].path;\n      } else {\n        selectedPath = this.selectedPath;\n      }\n\n      this.hardwareWallet\n        .init(selectedPath)\n        .then(() => {\n          this.getPaths();\n          this.currentIndex = 0;\n          this.setHDAccounts();\n          this.$refs.networkAndAddress.show();\n        })\n        .catch(error => {\n          // if HD path is not supported by the hardware\n          this.HDAccounts = [];\n          Toast.responseHandler(error, Toast.ERROR);\n        });\n      this.selectedPath = this.hardwareWallet.getCurrentPath();\n    },\n    setBalances: web3utils._.debounce(function() {\n      this.HDAccounts.forEach(account => {\n        if (account.account) {\n          this.web3.eth\n            .getBalance(account.account.getAddressString())\n            .then(balance => {\n              account.balance = balance;\n            })\n            .catch(e => {\n              Toast.responseHandler(e, Toast.ERROR);\n            });\n        } else {\n          account.balance = 0;\n        }\n      });\n    }, 1000),\n    unlockWallet() {\n      this.$store\n        .dispatch('decryptWallet', [this.currentWallet])\n        .then(() => {\n          if (this.wallet !== null) {\n            if (!this.$route.path.split('/').includes('interface')) {\n              this.$router.push({\n                path: 'interface'\n              });\n            }\n          }\n\n          this.$refs.networkAndAddress.hide();\n        })\n        .catch(error => {\n          // the wallet param (param[0]) is undefined or null\n          Toast.responseHandler(error, Toast.ERROR);\n        });\n    },\n    async setHDAccounts() {\n      if (!this.web3.eth) this.$store.dispatch('setWeb3Instance');\n      this.HDAccounts = [];\n      for (\n        let i = this.currentIndex;\n        i < this.currentIndex + MAX_ADDRESSES;\n        i++\n      ) {\n        const account = await this.hardwareWallet.getAccount(i);\n        this.HDAccounts.push({\n          index: i,\n          account: account,\n          balance: 'loading'\n        });\n        this.setBalances();\n      }\n      this.currentIndex += MAX_ADDRESSES;\n    },\n    nextAddressSet() {\n      this.setHDAccounts();\n    },\n    previousAddressSet() {\n      this.currentIndex =\n        this.currentIndex - 2 * MAX_ADDRESSES < 0\n          ? 0\n          : this.currentIndex - 2 * MAX_ADDRESSES;\n      this.setHDAccounts();\n    },\n    getPathLabel(path) {\n      for (const _p in this.customPaths) {\n        if (this.customPaths[_p].path === path) {\n          return this.customPaths[_p].label;\n        }\n      }\n\n      for (const _p in this.availablePaths) {\n        if (this.availablePaths[_p].path === path) {\n          return this.availablePaths[_p].label;\n        }\n      }\n\n      return 'Unknown';\n    },\n    getPaths() {\n      this.selectedPath = this.hardwareWallet.getCurrentPath();\n      this.availablePaths = this.hardwareWallet.getSupportedPaths();\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'NetworkAndAddressModal-desktop.scss';\n@import 'NetworkAndAddressModal-tablet.scss';\n@import 'NetworkAndAddressModal-mobile.scss';\n\n.activeConn {\n  color: gray;\n}\n</style>\n"],"sourceRoot":"src/layouts/AccessWalletLayout/components/NetworkAndAddressModal"}]}