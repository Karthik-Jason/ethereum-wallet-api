{"remainingRequest":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/eslint-loader/index.js??ref--13-0!/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/partners/bity/bity.js","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/partners/bity/bity.js","mtime":1573477612092},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.map\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _classCallCheck from \"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport BigNumber from 'bignumber.js';\nimport { networkSymbols, BASE_CURRENCY, swapNotificationStatuses } from \"../partnersConfig\";\nimport { utils } from \"../helpers\";\nimport { Toast } from '@/helpers';\nimport { getRates, openOrder, orderDetails, getStatus, getExitRates, getCyptoToFiatOrderDetails, getEstimate, createOrder } from \"./bity-calls\";\nimport { bityStatuses, BityCurrencies, bityFiatCurrencies, PROVIDER_NAME, TIME_SWAP_VALID, BITY_MAX, BITY_MIN, BITY_DECIMALS, BASE_EQUIVALENT_CURRENCY, FIAT_EQUIVALENT_CURRENCY, FIAT_MIN, FIAT_MAX } from \"./config\";\n\nfunction disabledPairing(currencyList, symbol, invalid, side) {\n  if (currencyList[symbol]) {\n    if (side === 'from') {\n      if (currencyList[symbol].invalidFrom) {\n        return !currencyList[symbol].invalidFrom.includes(invalid);\n      }\n\n      return true;\n    } else if (side === 'to') {\n      if (currencyList[symbol].invalidTo) {\n        return currencyList[symbol].invalidTo.includes(invalid);\n      }\n\n      return true;\n    }\n\n    return true;\n  }\n}\n\nvar BitySwap =\n/*#__PURE__*/\nfunction () {\n  function BitySwap() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, BitySwap);\n\n    this.name = BitySwap.getName();\n    this.network = props.network || networkSymbols.ETH;\n    this.decimals = BITY_DECIMALS;\n    this.hasRates = 0;\n    this.mainPairs = ['REP', 'ETH'];\n    this.minValue = BITY_MIN;\n    this.maxValue = BITY_MAX;\n    this.fiatMinValue = FIAT_MIN;\n    this.fiatMaxValue = FIAT_MAX;\n    this.fiatCurrencies = Object.keys(bityFiatCurrencies);\n    this.rates = new Map();\n    this.retrieveRates();\n  }\n\n  _createClass(BitySwap, [{\n    key: \"retrieveRates\",\n    value: function () {\n      var _retrieveRates = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var _this = this;\n\n        var exitRates, exitData, rates, data;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n\n                if (this.isValidNetwork) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 3:\n                _context.next = 5;\n                return getExitRates();\n\n              case 5:\n                exitRates = _context.sent;\n                exitData = exitRates.pairs;\n                _context.next = 9;\n                return getRates();\n\n              case 9:\n                rates = _context.sent;\n                data = rates.objects;\n                exitData.forEach(function (entry) {\n                  if (entry.enabled) {\n                    data.forEach(function (rateEntry) {\n                      if (rateEntry.pair === entry.input + entry.output && !_this.fiatCurrencies.includes(entry.input)) {\n                        _this.rates.set(\"\".concat(entry.input, \"/\").concat(entry.output), parseFloat(rateEntry.rate_we_buy));\n                      }\n                    });\n                  }\n                });\n                data.forEach(function (pair) {\n                  if (~_this.mainPairs.indexOf(pair.pair.substring(3))) {\n                    if (pair.is_enabled && !_this.fiatCurrencies.includes(pair.source)) {\n                      _this.rates.set(\"\".concat(pair.source, \"/\").concat(pair.target), parseFloat(pair.rate_we_sell));\n                    }\n                  } else if (~_this.mainPairs.indexOf(pair.pair.substring(0, 3))) {\n                    if (pair.is_enabled && !_this.fiatCurrencies.includes(pair.source)) {\n                      _this.rates.set(\"\".concat(pair.source, \"/\").concat(pair.target), parseFloat(pair.rate_we_buy));\n                    }\n                  }\n                });\n                this.hasRates = data.length > 0 ? this.hasRates + 1 : 0;\n                _context.next = 19;\n                break;\n\n              case 16:\n                _context.prev = 16;\n                _context.t0 = _context[\"catch\"](0);\n                throw _context.t0;\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 16]]);\n      }));\n\n      function retrieveRates() {\n        return _retrieveRates.apply(this, arguments);\n      }\n\n      return retrieveRates;\n    }()\n  }, {\n    key: \"_getRate\",\n    value: function _getRate(fromToken, toToken) {\n      if (this.rates.has(\"\".concat(fromToken, \"/\").concat(toToken))) {\n        return this.rates.get(\"\".concat(fromToken, \"/\").concat(toToken));\n      }\n\n      return -1;\n    }\n  }, {\n    key: \"_getRateEstimate\",\n    value: function () {\n      var _getRateEstimate2 = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2(fromCurrency, toCurrency, fromValue) {\n        var reqInfo;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                reqInfo = {\n                  pair: fromCurrency + toCurrency,\n                  fromValue: fromValue.toString(),\n                  toCurrency: toCurrency,\n                  fromCurrency: fromCurrency\n                };\n                _context2.next = 3;\n                return getEstimate(reqInfo);\n\n              case 3:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function _getRateEstimate(_x, _x2, _x3) {\n        return _getRateEstimate2.apply(this, arguments);\n      }\n\n      return _getRateEstimate;\n    }()\n  }, {\n    key: \"calculateRate\",\n    value: function calculateRate(inVal, outVal) {\n      return new BigNumber(outVal).div(inVal);\n    }\n  }, {\n    key: \"getRate\",\n    value: function () {\n      var _getRate2 = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3(fromCurrency, toCurrency, fromValue) {\n        var expRate, rate;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this._getRateEstimate(fromCurrency, toCurrency, fromValue);\n\n              case 2:\n                expRate = _context3.sent;\n                rate = this.calculateRate(expRate.input.amount, expRate.output.amount);\n                this.rates.set(\"\".concat(fromCurrency, \"/\").concat(toCurrency), rate);\n                return _context3.abrupt(\"return\", {\n                  fromCurrency: fromCurrency,\n                  toCurrency: toCurrency,\n                  provider: this.name,\n                  rate: rate,\n                  toValue: expRate.output.amount,\n                  minValue: new BigNumber(expRate.input.minimum_amount).plus(new BigNumber(expRate.input.minimum_amount).times(0.000001)),\n                  // because we truncate the number at 6 decimal places\n                  maxValue: this.fiatCurrencies.includes(toCurrency) ? this.getChfEquivalentMaxMin(fromCurrency, true) : this.getBtcEquivalentMaxMin(fromCurrency, true)\n                });\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getRate(_x4, _x5, _x6) {\n        return _getRate2.apply(this, arguments);\n      }\n\n      return getRate;\n    }()\n  }, {\n    key: \"getRateUpdate\",\n    value: function () {\n      var _getRateUpdate = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4(fromCurrency, toCurrency, fromValue) {\n        var expRate, rate;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this._getRateEstimate(fromCurrency, toCurrency, fromValue);\n\n              case 2:\n                expRate = _context4.sent;\n                rate = this.calculateRate(expRate.input.amount, expRate.output.amount);\n                this.rates.set(\"\".concat(fromCurrency, \"/\").concat(toCurrency), rate);\n                return _context4.abrupt(\"return\", {\n                  fromCurrency: fromCurrency,\n                  toCurrency: toCurrency,\n                  provider: this.name,\n                  rate: rate,\n                  minValue: new BigNumber(expRate.input.minimum_amount).plus(new BigNumber(expRate.input.minimum_amount).times(0.000001)),\n                  // because we truncate the number at 6 decimal places\n                  maxValue: this.fiatCurrencies.includes(toCurrency) ? this.getChfEquivalentMaxMin(fromCurrency, true) : this.getBtcEquivalentMaxMin(fromCurrency, true)\n                });\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getRateUpdate(_x7, _x8, _x9) {\n        return _getRateUpdate.apply(this, arguments);\n      }\n\n      return getRateUpdate;\n    }()\n  }, {\n    key: \"validSwap\",\n    value: function validSwap(fromCurrency, toCurrency) {\n      if (this.isValidNetwork) {\n        return this.rates.has(\"\".concat(fromCurrency, \"/\").concat(toCurrency));\n      }\n\n      return false;\n    }\n  }, {\n    key: \"minCheck\",\n    value: function minCheck(fromCurrency, fromValue, toCurrency, toValue) {\n      return this.validityCheck(fromCurrency, fromValue, toCurrency, toValue) !== 'lessThanMin';\n    }\n  }, {\n    key: \"maxCheck\",\n    value: function maxCheck(fromCurrency, fromValue, toCurrency, toValue) {\n      return this.validityCheck(fromCurrency, fromValue, toCurrency, toValue) !== 'greaterThanMax';\n    }\n  }, {\n    key: \"getBtcEquivalentMaxMin\",\n    value: function getBtcEquivalentMaxMin(currency, max) {\n      if (currency === BASE_EQUIVALENT_CURRENCY) {\n        return max ? this.maxValue : this.minValue;\n      }\n\n      var btcRate = this._getRate(currency, BASE_EQUIVALENT_CURRENCY);\n\n      return max ? new BigNumber(this.maxValue).div(new BigNumber(btcRate)).toFixed(6, BigNumber.ROUND_UP) : new BigNumber(this.minValue).div(new BigNumber(btcRate)).toFixed(6, BigNumber.ROUND_UP);\n    }\n  }, {\n    key: \"getChfEquivalentMaxMin\",\n    value: function getChfEquivalentMaxMin(cryptoCurrency, max) {\n      if (cryptoCurrency === FIAT_EQUIVALENT_CURRENCY) {\n        return max ? this.fiatMaxValue : this.fiatMinValue;\n      }\n\n      var chfRate = this._getRate(cryptoCurrency, FIAT_EQUIVALENT_CURRENCY);\n\n      return max ? new BigNumber(this.fiatMaxValue).div(new BigNumber(chfRate)).toFixed(6, BigNumber.ROUND_UP) : new BigNumber(this.fiatMinValue).div(new BigNumber(chfRate)).toFixed(6, BigNumber.ROUND_UP);\n    }\n  }, {\n    key: \"validityCheck\",\n    value: function validityCheck(fromCurrency, fromValue, toCurrency, toValue) {\n      if (this.fiatCurrencies.includes(toCurrency)) {\n        if (new BigNumber(fromValue).times(new BigNumber(this._getRate(fromCurrency, FIAT_EQUIVALENT_CURRENCY))).toFixed(2) < this.fiatMinValue) return 'lessThanMin';else if (fromValue * this._getRate(fromCurrency, FIAT_EQUIVALENT_CURRENCY) > this.fiatMaxValue) {\n          return 'greaterThanMax';\n        }\n        return 'noErrors';\n      }\n\n      if (toValue < this.minValue || fromValue < this.minValue) return 'lessThanMin';else if (toCurrency === BASE_EQUIVALENT_CURRENCY && toValue > this.maxValue || fromCurrency === BASE_EQUIVALENT_CURRENCY && fromValue > this.maxValue) {\n        return 'greaterThanMax';\n      } else if (this.mainPairs.includes(toCurrency) || this.mainPairs.includes(fromCurrency)) {\n        if (toValue * this._getRate(toCurrency, BASE_EQUIVALENT_CURRENCY) > this.maxValue || fromValue * this._getRate(fromCurrency, BASE_EQUIVALENT_CURRENCY) > this.maxValue) {\n          return 'greaterThanMax';\n        }\n      }\n      return 'noErrors';\n    }\n  }, {\n    key: \"setNetwork\",\n    value: function setNetwork(network) {\n      this.network = network;\n    }\n  }, {\n    key: \"getInitialCurrencyEntries\",\n    value: function getInitialCurrencyEntries(collectMapFrom, collectMapTo) {\n      for (var prop in this.currencies) {\n        if (this.currencies[prop]) {\n          collectMapTo.set(prop, {\n            symbol: prop,\n            name: this.currencies[prop].name\n          });\n\n          if (!this.fiatCurrencies.includes(prop)) {\n            collectMapFrom.set(prop, {\n              symbol: prop,\n              name: this.currencies[prop].name\n            });\n          }\n        }\n      }\n    }\n  }, {\n    key: \"getUpdatedFromCurrencyEntries\",\n    value: function getUpdatedFromCurrencyEntries(value, collectMap) {\n      if (this.currencies[value.symbol]) {\n        for (var prop in this.currencies) {\n          if (disabledPairing(this.currencies, value.symbol, prop, 'from')) {\n            if (this.currencies[prop] && !this.fiatCurrencies.includes(prop)) {\n              collectMap.set(prop, {\n                symbol: prop,\n                name: this.currencies[prop].name\n              });\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: \"getUpdatedToCurrencyEntries\",\n    value: function getUpdatedToCurrencyEntries(value, collectMap) {\n      if (this.currencies[value.symbol]) {\n        for (var prop in this.currencies) {\n          if (disabledPairing(this.currencies, value.symbol, prop, 'to')) {\n            if (this.currencies[prop]) collectMap.set(prop, {\n              symbol: prop,\n              name: this.currencies[prop].name\n            });\n          }\n        }\n      }\n    }\n  }, {\n    key: \"checkIfExit\",\n    value: function checkIfExit(swapDetails) {\n      return this.fiatCurrencies.includes(swapDetails.toCurrency);\n    }\n  }, {\n    key: \"startSwap\",\n    value: function () {\n      var _startSwap = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee5(swapDetails) {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (!(this.checkIfExit(swapDetails) && !swapDetails.bypass)) {\n                  _context5.next = 8;\n                  break;\n                }\n\n                if (!(swapDetails.exitFromAddress === '')) {\n                  _context5.next = 3;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", {});\n\n              case 3:\n                swapDetails.dataForInitialization = false;\n                swapDetails.isExitToFiat = true;\n                return _context5.abrupt(\"return\", swapDetails);\n\n              case 8:\n                if (!this.checkIfExit(swapDetails)) {\n                  _context5.next = 26;\n                  break;\n                }\n\n                _context5.next = 11;\n                return createOrder(swapDetails);\n\n              case 11:\n                swapDetails.dataForInitialization = _context5.sent;\n\n                if (!swapDetails.dataForInitialization) {\n                  _context5.next = 23;\n                  break;\n                }\n\n                swapDetails.providerReceives = swapDetails.dataForInitialization.input.amount;\n                swapDetails.providerSends = swapDetails.dataForInitialization.output.amount;\n                swapDetails.parsed = BitySwap.parseExitOrder(swapDetails.dataForInitialization);\n                swapDetails.timestamp = swapDetails.parsed.timestamp.replace('ZZ', 'Z');\n                swapDetails.providerSends = swapDetails.parsed.recValue;\n                swapDetails.providerAddress = swapDetails.dataForInitialization.payment_address;\n                swapDetails.isDex = BitySwap.isDex();\n                swapDetails.validFor = swapDetails.parsed.validFor;\n                _context5.next = 24;\n                break;\n\n              case 23:\n                throw Error('abort');\n\n              case 24:\n                _context5.next = 39;\n                break;\n\n              case 26:\n                if (this.checkIfExit(swapDetails)) {\n                  _context5.next = 39;\n                  break;\n                }\n\n                _context5.next = 29;\n                return this.buildOrder(swapDetails);\n\n              case 29:\n                swapDetails.dataForInitialization = _context5.sent;\n\n                if (swapDetails.dataForInitialization) {\n                  _context5.next = 32;\n                  break;\n                }\n\n                throw Error('abort');\n\n              case 32:\n                swapDetails.providerReceives = swapDetails.dataForInitialization.input.amount;\n                swapDetails.providerSends = swapDetails.dataForInitialization.output.amount;\n                swapDetails.parsed = BitySwap.parseOrder(swapDetails.dataForInitialization);\n                swapDetails.providerSends = swapDetails.parsed.recValue;\n                swapDetails.providerAddress = swapDetails.dataForInitialization.payment_address;\n                swapDetails.isDex = BitySwap.isDex();\n                swapDetails.validFor = swapDetails.parsed.validFor;\n\n              case 39:\n                return _context5.abrupt(\"return\", swapDetails);\n\n              case 40:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function startSwap(_x10) {\n        return _startSwap.apply(this, arguments);\n      }\n\n      return startSwap;\n    }()\n  }, {\n    key: \"buildOrder\",\n    value: function () {\n      var _buildOrder = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee6(_ref) {\n        var fromCurrency, toCurrency, fromValue, toValue, toAddress, order;\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                fromCurrency = _ref.fromCurrency, toCurrency = _ref.toCurrency, fromValue = _ref.fromValue, toValue = _ref.toValue, toAddress = _ref.toAddress;\n\n                if (!this.maxCheck(fromCurrency, fromValue, toCurrency, toValue)) {\n                  _context6.next = 6;\n                  break;\n                }\n\n                order = {\n                  amount: fromValue,\n                  mode: 0,\n                  pair: fromCurrency + toCurrency,\n                  destAddress: toAddress\n                };\n                _context6.next = 5;\n                return openOrder(order);\n\n              case 5:\n                return _context6.abrupt(\"return\", _context6.sent);\n\n              case 6:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function buildOrder(_x11) {\n        return _buildOrder.apply(this, arguments);\n      }\n\n      return buildOrder;\n    }()\n  }, {\n    key: \"getExitOrderDetails\",\n    value: function () {\n      var _getExitOrderDetails = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee7(detailsUrl) {\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                return _context7.abrupt(\"return\", getCyptoToFiatOrderDetails(detailsUrl));\n\n              case 1:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      function getExitOrderDetails(_x12) {\n        return _getExitOrderDetails.apply(this, arguments);\n      }\n\n      return getExitOrderDetails;\n    }()\n  }, {\n    key: \"startSpecial\",\n    value: function () {\n      var _startSpecial = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee8() {\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n\n      function startSpecial() {\n        return _startSpecial.apply(this, arguments);\n      }\n\n      return startSpecial;\n    }()\n  }, {\n    key: \"isValidNetwork\",\n    get: function get() {\n      return this.network === networkSymbols.ETH;\n    }\n  }, {\n    key: \"currencies\",\n    get: function get() {\n      if (this.isValidNetwork) {\n        return BityCurrencies;\n      }\n\n      return {};\n    }\n  }, {\n    key: \"ratesRetrieved\",\n    get: function get() {\n      return this.hasRates > 0 && this.rates.size > 0;\n    }\n  }], [{\n    key: \"getName\",\n    value: function getName() {\n      return PROVIDER_NAME;\n    }\n  }, {\n    key: \"isDex\",\n    value: function isDex() {\n      return false;\n    }\n  }, {\n    key: \"parseOrder\",\n    value: function parseOrder(order) {\n      return {\n        orderId: order.reference,\n        statusId: order.id,\n        sendToAddress: order.payment_address,\n        recValue: order.output.amount,\n        sendValue: order.payment_amount,\n        status: order.status,\n        timestamp: order.timestamp_created,\n        validFor: order.validFor || TIME_SWAP_VALID\n      };\n    }\n  }, {\n    key: \"parseExitOrder\",\n    value: function parseExitOrder(order) {\n      return {\n        orderId: order.reference,\n        statusId: order.id,\n        sendToAddress: order.payment_address,\n        recValue: order.amount,\n        sendValue: order.payment_amount,\n        status: order.status,\n        timestamp: order.timestamp_created,\n        validFor: order.validFor || TIME_SWAP_VALID\n      };\n    }\n  }, {\n    key: \"getOrderStatus\",\n    value: function () {\n      var _getOrderStatus = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee9(noticeDetails) {\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                if (!Object.keys(bityFiatCurrencies).includes(noticeDetails.toCurrency)) {\n                  _context9.next = 2;\n                  break;\n                }\n\n                return _context9.abrupt(\"return\", BitySwap.getOrderStatusFiat(noticeDetails));\n\n              case 2:\n                return _context9.abrupt(\"return\", BitySwap.getOrderStatusCrypto(noticeDetails));\n\n              case 3:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9);\n      }));\n\n      function getOrderStatus(_x13) {\n        return _getOrderStatus.apply(this, arguments);\n      }\n\n      return getOrderStatus;\n    }()\n  }, {\n    key: \"getOrderStatusCrypto\",\n    value: function () {\n      var _getOrderStatusCrypto = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee10(noticeDetails) {\n        var data;\n        return regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.prev = 0;\n                _context10.next = 3;\n                return getStatus(noticeDetails.statusId);\n\n              case 3:\n                data = _context10.sent;\n\n                if (!(data.status === bityStatuses.EXEC)) {\n                  _context10.next = 6;\n                  break;\n                }\n\n                return _context10.abrupt(\"return\", swapNotificationStatuses.COMPLETE);\n\n              case 6:\n                if (!(data.input.status !== bityStatuses.FILL)) {\n                  _context10.next = 15;\n                  break;\n                }\n\n                _context10.t0 = data.input.status;\n                _context10.next = _context10.t0 === bityStatuses.OPEN ? 10 : _context10.t0 === bityStatuses.RCVE ? 11 : _context10.t0 === bityStatuses.CONF ? 11 : _context10.t0 === bityStatuses.CANC ? 12 : 13;\n                break;\n\n              case 10:\n                return _context10.abrupt(\"return\", swapNotificationStatuses.NEW);\n\n              case 11:\n                return _context10.abrupt(\"return\", swapNotificationStatuses.PENDING);\n\n              case 12:\n                return _context10.abrupt(\"return\", swapNotificationStatuses.CANCELLED);\n\n              case 13:\n                _context10.next = 21;\n                break;\n\n              case 15:\n                _context10.t1 = data.output.status;\n                _context10.next = _context10.t1 === bityStatuses.FILL ? 18 : _context10.t1 === bityStatuses.CANC ? 19 : 20;\n                break;\n\n              case 18:\n                return _context10.abrupt(\"return\", swapNotificationStatuses.COMPLETE);\n\n              case 19:\n                return _context10.abrupt(\"return\", swapNotificationStatuses.CANCELLED);\n\n              case 20:\n                return _context10.abrupt(\"return\", swapNotificationStatuses.PENDING);\n\n              case 21:\n                _context10.next = 26;\n                break;\n\n              case 23:\n                _context10.prev = 23;\n                _context10.t2 = _context10[\"catch\"](0);\n                Toast.responseHandler(_context10.t2, false);\n\n              case 26:\n                return _context10.abrupt(\"return\", swapNotificationStatuses.PENDING);\n\n              case 27:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, null, [[0, 23]]);\n      }));\n\n      function getOrderStatusCrypto(_x14) {\n        return _getOrderStatusCrypto.apply(this, arguments);\n      }\n\n      return getOrderStatusCrypto;\n    }()\n  }, {\n    key: \"getOrderStatusFiat\",\n    value: function () {\n      var _getOrderStatusFiat = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee11(noticeDetails) {\n        var data, timeSinceOrder;\n        return regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.prev = 0;\n                _context11.next = 3;\n                return orderDetails({\n                  detailsUrl: noticeDetails.statusId\n                });\n\n              case 3:\n                data = _context11.sent;\n\n                if (utils.isJson(data)) {\n                  _context11.next = 6;\n                  break;\n                }\n\n                return _context11.abrupt(\"return\", swapNotificationStatuses.PENDING);\n\n              case 6:\n                // Since the status cannot be relied upon, we are going to assume the order went through after 10 min, if their was no error with the eth transaction.\n                // Cannot make the same assumption with regards to chains other than ethereum.\n                timeSinceOrder = (new Date().getTime() - new Date(data.timestamp_created).getTime()) / 1000;\n\n                if (!(timeSinceOrder > 600 && data.status === bityStatuses.OPEN && data.input.currency === BASE_CURRENCY)) {\n                  _context11.next = 9;\n                  break;\n                }\n\n                return _context11.abrupt(\"return\", swapNotificationStatuses.COMPLETE);\n\n              case 9:\n                _context11.t0 = data.status;\n                _context11.next = _context11.t0 === bityStatuses.OPEN ? 12 : _context11.t0 === bityStatuses.RCVE ? 12 : _context11.t0 === bityStatuses.CONF ? 12 : _context11.t0 === bityStatuses.FILL ? 13 : _context11.t0 === bityStatuses.CANC ? 14 : 15;\n                break;\n\n              case 12:\n                return _context11.abrupt(\"return\", swapNotificationStatuses.PENDING);\n\n              case 13:\n                return _context11.abrupt(\"return\", swapNotificationStatuses.COMPLETE);\n\n              case 14:\n                return _context11.abrupt(\"return\", swapNotificationStatuses.CANCELLED);\n\n              case 15:\n                _context11.next = 20;\n                break;\n\n              case 17:\n                _context11.prev = 17;\n                _context11.t1 = _context11[\"catch\"](0);\n                Toast.responseHandler(_context11.t1, false);\n\n              case 20:\n                return _context11.abrupt(\"return\", swapNotificationStatuses.PENDING);\n\n              case 21:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, null, [[0, 17]]);\n      }));\n\n      function getOrderStatusFiat(_x15) {\n        return _getOrderStatusFiat.apply(this, arguments);\n      }\n\n      return getOrderStatusFiat;\n    }()\n  }]);\n\n  return BitySwap;\n}();\n\nexport { BitySwap as default };",{"version":3,"sources":["/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/partners/bity/bity.js"],"names":["BigNumber","networkSymbols","BASE_CURRENCY","swapNotificationStatuses","utils","Toast","getRates","openOrder","orderDetails","getStatus","getExitRates","getCyptoToFiatOrderDetails","getEstimate","createOrder","bityStatuses","BityCurrencies","bityFiatCurrencies","PROVIDER_NAME","TIME_SWAP_VALID","BITY_MAX","BITY_MIN","BITY_DECIMALS","BASE_EQUIVALENT_CURRENCY","FIAT_EQUIVALENT_CURRENCY","FIAT_MIN","FIAT_MAX","disabledPairing","currencyList","symbol","invalid","side","invalidFrom","includes","invalidTo","BitySwap","props","name","getName","network","ETH","decimals","hasRates","mainPairs","minValue","maxValue","fiatMinValue","fiatMaxValue","fiatCurrencies","Object","keys","rates","Map","retrieveRates","isValidNetwork","exitRates","exitData","pairs","data","objects","forEach","entry","enabled","rateEntry","pair","input","output","set","parseFloat","rate_we_buy","indexOf","substring","is_enabled","source","target","rate_we_sell","length","fromToken","toToken","has","get","fromCurrency","toCurrency","fromValue","reqInfo","toString","inVal","outVal","div","_getRateEstimate","expRate","rate","calculateRate","amount","provider","toValue","minimum_amount","plus","times","getChfEquivalentMaxMin","getBtcEquivalentMaxMin","validityCheck","currency","max","btcRate","_getRate","toFixed","ROUND_UP","cryptoCurrency","chfRate","collectMapFrom","collectMapTo","prop","currencies","value","collectMap","swapDetails","checkIfExit","bypass","exitFromAddress","dataForInitialization","isExitToFiat","providerReceives","providerSends","parsed","parseExitOrder","timestamp","replace","recValue","providerAddress","payment_address","isDex","validFor","Error","buildOrder","parseOrder","toAddress","maxCheck","order","mode","destAddress","detailsUrl","size","orderId","reference","statusId","id","sendToAddress","sendValue","payment_amount","status","timestamp_created","noticeDetails","getOrderStatusFiat","getOrderStatusCrypto","EXEC","COMPLETE","FILL","OPEN","RCVE","CONF","CANC","NEW","PENDING","CANCELLED","responseHandler","isJson","timeSinceOrder","Date","getTime"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js';\nimport {\n  networkSymbols,\n  BASE_CURRENCY,\n  swapNotificationStatuses\n} from '../partnersConfig';\nimport { utils } from '../helpers';\nimport { Toast } from '@/helpers';\nimport {\n  getRates,\n  openOrder,\n  orderDetails,\n  getStatus,\n  getExitRates,\n  getCyptoToFiatOrderDetails,\n  getEstimate,\n  createOrder\n} from './bity-calls';\nimport {\n  bityStatuses,\n  BityCurrencies,\n  bityFiatCurrencies,\n  PROVIDER_NAME,\n  TIME_SWAP_VALID,\n  BITY_MAX,\n  BITY_MIN,\n  BITY_DECIMALS,\n  BASE_EQUIVALENT_CURRENCY,\n  FIAT_EQUIVALENT_CURRENCY,\n  FIAT_MIN,\n  FIAT_MAX\n} from './config';\n\nfunction disabledPairing(currencyList, symbol, invalid, side) {\n  if (currencyList[symbol]) {\n    if (side === 'from') {\n      if (currencyList[symbol].invalidFrom) {\n        return !currencyList[symbol].invalidFrom.includes(invalid);\n      }\n      return true;\n    } else if (side === 'to') {\n      if (currencyList[symbol].invalidTo) {\n        return currencyList[symbol].invalidTo.includes(invalid);\n      }\n      return true;\n    }\n    return true;\n  }\n}\n\nexport default class BitySwap {\n  constructor(props = {}) {\n    this.name = BitySwap.getName();\n    this.network = props.network || networkSymbols.ETH;\n    this.decimals = BITY_DECIMALS;\n    this.hasRates = 0;\n    this.mainPairs = ['REP', 'ETH'];\n    this.minValue = BITY_MIN;\n    this.maxValue = BITY_MAX;\n    this.fiatMinValue = FIAT_MIN;\n    this.fiatMaxValue = FIAT_MAX;\n    this.fiatCurrencies = Object.keys(bityFiatCurrencies);\n    this.rates = new Map();\n\n    this.retrieveRates();\n  }\n\n  static getName() {\n    return PROVIDER_NAME;\n  }\n\n  static isDex() {\n    return false;\n  }\n\n  get isValidNetwork() {\n    return this.network === networkSymbols.ETH;\n  }\n\n  get currencies() {\n    if (this.isValidNetwork) {\n      return BityCurrencies;\n    }\n    return {};\n  }\n\n  get ratesRetrieved() {\n    return this.hasRates > 0 && this.rates.size > 0;\n  }\n\n  async retrieveRates() {\n    try {\n      if (!this.isValidNetwork) return;\n      const exitRates = await getExitRates();\n      const exitData = exitRates.pairs;\n      const rates = await getRates();\n      const data = rates.objects;\n\n      exitData.forEach(entry => {\n        if (entry.enabled) {\n          data.forEach(rateEntry => {\n            if (\n              rateEntry.pair === entry.input + entry.output &&\n              !this.fiatCurrencies.includes(entry.input)\n            ) {\n              this.rates.set(\n                `${entry.input}/${entry.output}`,\n                parseFloat(rateEntry.rate_we_buy)\n              );\n            }\n          });\n        }\n      });\n      data.forEach(pair => {\n        if (~this.mainPairs.indexOf(pair.pair.substring(3))) {\n          if (pair.is_enabled && !this.fiatCurrencies.includes(pair.source)) {\n            this.rates.set(\n              `${pair.source}/${pair.target}`,\n              parseFloat(pair.rate_we_sell)\n            );\n          }\n        } else if (~this.mainPairs.indexOf(pair.pair.substring(0, 3))) {\n          if (pair.is_enabled && !this.fiatCurrencies.includes(pair.source)) {\n            this.rates.set(\n              `${pair.source}/${pair.target}`,\n              parseFloat(pair.rate_we_buy)\n            );\n          }\n        }\n      });\n      this.hasRates = data.length > 0 ? this.hasRates + 1 : 0;\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  _getRate(fromToken, toToken) {\n    if (this.rates.has(`${fromToken}/${toToken}`)) {\n      return this.rates.get(`${fromToken}/${toToken}`);\n    }\n    return -1;\n  }\n\n  async _getRateEstimate(fromCurrency, toCurrency, fromValue) {\n    const reqInfo = {\n      pair: fromCurrency + toCurrency,\n      fromValue: fromValue.toString(),\n      toCurrency: toCurrency,\n      fromCurrency: fromCurrency\n    };\n    return await getEstimate(reqInfo);\n  }\n\n  calculateRate(inVal, outVal) {\n    return new BigNumber(outVal).div(inVal);\n  }\n\n  async getRate(fromCurrency, toCurrency, fromValue) {\n    const expRate = await this._getRateEstimate(\n      fromCurrency,\n      toCurrency,\n      fromValue\n    );\n\n    const rate = this.calculateRate(\n      expRate.input.amount,\n      expRate.output.amount\n    );\n    this.rates.set(`${fromCurrency}/${toCurrency}`, rate);\n    return {\n      fromCurrency,\n      toCurrency,\n      provider: this.name,\n      rate: rate,\n      toValue: expRate.output.amount,\n      minValue: new BigNumber(expRate.input.minimum_amount).plus(\n        new BigNumber(expRate.input.minimum_amount).times(0.000001)\n      ), // because we truncate the number at 6 decimal places\n      maxValue: this.fiatCurrencies.includes(toCurrency)\n        ? this.getChfEquivalentMaxMin(fromCurrency, true)\n        : this.getBtcEquivalentMaxMin(fromCurrency, true)\n    };\n  }\n\n  async getRateUpdate(fromCurrency, toCurrency, fromValue) {\n    const expRate = await this._getRateEstimate(\n      fromCurrency,\n      toCurrency,\n      fromValue\n    );\n\n    const rate = this.calculateRate(\n      expRate.input.amount,\n      expRate.output.amount\n    );\n    this.rates.set(`${fromCurrency}/${toCurrency}`, rate);\n\n    return {\n      fromCurrency,\n      toCurrency,\n      provider: this.name,\n      rate: rate,\n      minValue: new BigNumber(expRate.input.minimum_amount).plus(\n        new BigNumber(expRate.input.minimum_amount).times(0.000001)\n      ), // because we truncate the number at 6 decimal places\n      maxValue: this.fiatCurrencies.includes(toCurrency)\n        ? this.getChfEquivalentMaxMin(fromCurrency, true)\n        : this.getBtcEquivalentMaxMin(fromCurrency, true)\n    };\n  }\n\n  validSwap(fromCurrency, toCurrency) {\n    if (this.isValidNetwork) {\n      return this.rates.has(`${fromCurrency}/${toCurrency}`);\n    }\n    return false;\n  }\n\n  minCheck(fromCurrency, fromValue, toCurrency, toValue) {\n    return (\n      this.validityCheck(fromCurrency, fromValue, toCurrency, toValue) !==\n      'lessThanMin'\n    );\n  }\n\n  maxCheck(fromCurrency, fromValue, toCurrency, toValue) {\n    return (\n      this.validityCheck(fromCurrency, fromValue, toCurrency, toValue) !==\n      'greaterThanMax'\n    );\n  }\n\n  getBtcEquivalentMaxMin(currency, max) {\n    if (currency === BASE_EQUIVALENT_CURRENCY) {\n      return max ? this.maxValue : this.minValue;\n    }\n    const btcRate = this._getRate(currency, BASE_EQUIVALENT_CURRENCY);\n    return max\n      ? new BigNumber(this.maxValue)\n          .div(new BigNumber(btcRate))\n          .toFixed(6, BigNumber.ROUND_UP)\n      : new BigNumber(this.minValue)\n          .div(new BigNumber(btcRate))\n          .toFixed(6, BigNumber.ROUND_UP);\n  }\n\n  getChfEquivalentMaxMin(cryptoCurrency, max) {\n    if (cryptoCurrency === FIAT_EQUIVALENT_CURRENCY) {\n      return max ? this.fiatMaxValue : this.fiatMinValue;\n    }\n    const chfRate = this._getRate(cryptoCurrency, FIAT_EQUIVALENT_CURRENCY);\n    return max\n      ? new BigNumber(this.fiatMaxValue)\n          .div(new BigNumber(chfRate))\n          .toFixed(6, BigNumber.ROUND_UP)\n      : new BigNumber(this.fiatMinValue)\n          .div(new BigNumber(chfRate))\n          .toFixed(6, BigNumber.ROUND_UP);\n  }\n\n  validityCheck(fromCurrency, fromValue, toCurrency, toValue) {\n    if (this.fiatCurrencies.includes(toCurrency)) {\n      if (\n        new BigNumber(fromValue)\n          .times(\n            new BigNumber(this._getRate(fromCurrency, FIAT_EQUIVALENT_CURRENCY))\n          )\n          .toFixed(2) < this.fiatMinValue\n      )\n        return 'lessThanMin';\n      else if (\n        fromValue * this._getRate(fromCurrency, FIAT_EQUIVALENT_CURRENCY) >\n        this.fiatMaxValue\n      ) {\n        return 'greaterThanMax';\n      }\n      return 'noErrors';\n    }\n\n    if (toValue < this.minValue || fromValue < this.minValue)\n      return 'lessThanMin';\n    else if (\n      (toCurrency === BASE_EQUIVALENT_CURRENCY && toValue > this.maxValue) ||\n      (fromCurrency === BASE_EQUIVALENT_CURRENCY && fromValue > this.maxValue)\n    ) {\n      return 'greaterThanMax';\n    } else if (\n      this.mainPairs.includes(toCurrency) ||\n      this.mainPairs.includes(fromCurrency)\n    ) {\n      if (\n        toValue * this._getRate(toCurrency, BASE_EQUIVALENT_CURRENCY) >\n          this.maxValue ||\n        fromValue * this._getRate(fromCurrency, BASE_EQUIVALENT_CURRENCY) >\n          this.maxValue\n      ) {\n        return 'greaterThanMax';\n      }\n    }\n    return 'noErrors';\n  }\n\n  setNetwork(network) {\n    this.network = network;\n  }\n\n  getInitialCurrencyEntries(collectMapFrom, collectMapTo) {\n    for (const prop in this.currencies) {\n      if (this.currencies[prop]) {\n        collectMapTo.set(prop, {\n          symbol: prop,\n          name: this.currencies[prop].name\n        });\n        if (!this.fiatCurrencies.includes(prop)) {\n          collectMapFrom.set(prop, {\n            symbol: prop,\n            name: this.currencies[prop].name\n          });\n        }\n      }\n    }\n  }\n\n  getUpdatedFromCurrencyEntries(value, collectMap) {\n    if (this.currencies[value.symbol]) {\n      for (const prop in this.currencies) {\n        if (disabledPairing(this.currencies, value.symbol, prop, 'from')) {\n          if (this.currencies[prop] && !this.fiatCurrencies.includes(prop)) {\n            collectMap.set(prop, {\n              symbol: prop,\n              name: this.currencies[prop].name\n            });\n          }\n        }\n      }\n    }\n  }\n\n  getUpdatedToCurrencyEntries(value, collectMap) {\n    if (this.currencies[value.symbol]) {\n      for (const prop in this.currencies) {\n        if (disabledPairing(this.currencies, value.symbol, prop, 'to')) {\n          if (this.currencies[prop])\n            collectMap.set(prop, {\n              symbol: prop,\n              name: this.currencies[prop].name\n            });\n        }\n      }\n    }\n  }\n\n  checkIfExit(swapDetails) {\n    return this.fiatCurrencies.includes(swapDetails.toCurrency);\n  }\n\n  async startSwap(swapDetails) {\n    if (this.checkIfExit(swapDetails) && !swapDetails.bypass) {\n      if (swapDetails.exitFromAddress === '') return {};\n      swapDetails.dataForInitialization = false;\n      swapDetails.isExitToFiat = true;\n      return swapDetails;\n    } else if (this.checkIfExit(swapDetails)) {\n      swapDetails.dataForInitialization = await createOrder(swapDetails);\n      if (swapDetails.dataForInitialization) {\n        swapDetails.providerReceives =\n          swapDetails.dataForInitialization.input.amount;\n        swapDetails.providerSends =\n          swapDetails.dataForInitialization.output.amount;\n        swapDetails.parsed = BitySwap.parseExitOrder(\n          swapDetails.dataForInitialization\n        );\n        swapDetails.timestamp = swapDetails.parsed.timestamp.replace('ZZ', 'Z');\n        swapDetails.providerSends = swapDetails.parsed.recValue;\n        swapDetails.providerAddress =\n          swapDetails.dataForInitialization.payment_address;\n        swapDetails.isDex = BitySwap.isDex();\n        swapDetails.validFor = swapDetails.parsed.validFor;\n      } else {\n        throw Error('abort');\n      }\n    } else if (!this.checkIfExit(swapDetails)) {\n      swapDetails.dataForInitialization = await this.buildOrder(swapDetails);\n      if (!swapDetails.dataForInitialization) throw Error('abort');\n      swapDetails.providerReceives =\n        swapDetails.dataForInitialization.input.amount;\n      swapDetails.providerSends =\n        swapDetails.dataForInitialization.output.amount;\n      swapDetails.parsed = BitySwap.parseOrder(\n        swapDetails.dataForInitialization\n      );\n      swapDetails.providerSends = swapDetails.parsed.recValue;\n      swapDetails.providerAddress =\n        swapDetails.dataForInitialization.payment_address;\n      swapDetails.isDex = BitySwap.isDex();\n      swapDetails.validFor = swapDetails.parsed.validFor;\n    }\n\n    return swapDetails;\n  }\n\n  async buildOrder({\n    fromCurrency,\n    toCurrency,\n    fromValue,\n    toValue,\n    toAddress\n  }) {\n    if (this.maxCheck(fromCurrency, fromValue, toCurrency, toValue)) {\n      const order = {\n        amount: fromValue,\n        mode: 0,\n        pair: fromCurrency + toCurrency,\n        destAddress: toAddress\n      };\n\n      return await openOrder(order);\n    }\n  }\n\n  async getExitOrderDetails(detailsUrl) {\n    return getCyptoToFiatOrderDetails(detailsUrl);\n  }\n\n  async startSpecial() {}\n\n  static parseOrder(order) {\n    return {\n      orderId: order.reference,\n      statusId: order.id,\n      sendToAddress: order.payment_address,\n      recValue: order.output.amount,\n      sendValue: order.payment_amount,\n      status: order.status,\n      timestamp: order.timestamp_created,\n      validFor: order.validFor || TIME_SWAP_VALID\n    };\n  }\n\n  static parseExitOrder(order) {\n    return {\n      orderId: order.reference,\n      statusId: order.id,\n      sendToAddress: order.payment_address,\n      recValue: order.amount,\n      sendValue: order.payment_amount,\n      status: order.status,\n      timestamp: order.timestamp_created,\n      validFor: order.validFor || TIME_SWAP_VALID\n    };\n  }\n\n  static async getOrderStatus(noticeDetails) {\n    if (Object.keys(bityFiatCurrencies).includes(noticeDetails.toCurrency)) {\n      return BitySwap.getOrderStatusFiat(noticeDetails);\n    }\n    return BitySwap.getOrderStatusCrypto(noticeDetails);\n  }\n\n  static async getOrderStatusCrypto(noticeDetails) {\n    try {\n      const data = await getStatus(noticeDetails.statusId);\n      if (data.status === bityStatuses.EXEC) {\n        return swapNotificationStatuses.COMPLETE;\n      }\n      if (data.input.status !== bityStatuses.FILL) {\n        switch (data.input.status) {\n          case bityStatuses.OPEN:\n            return swapNotificationStatuses.NEW;\n          case bityStatuses.RCVE:\n          case bityStatuses.CONF:\n            return swapNotificationStatuses.PENDING;\n          case bityStatuses.CANC:\n            return swapNotificationStatuses.CANCELLED;\n        }\n      } else {\n        switch (data.output.status) {\n          case bityStatuses.FILL:\n            return swapNotificationStatuses.COMPLETE;\n          case bityStatuses.CANC:\n            return swapNotificationStatuses.CANCELLED;\n          default:\n            return swapNotificationStatuses.PENDING;\n        }\n      }\n    } catch (e) {\n      Toast.responseHandler(e, false);\n    }\n    return swapNotificationStatuses.PENDING;\n  }\n\n  static async getOrderStatusFiat(noticeDetails) {\n    try {\n      const data = await orderDetails({ detailsUrl: noticeDetails.statusId });\n      if (!utils.isJson(data)) return swapNotificationStatuses.PENDING;\n\n      // Since the status cannot be relied upon, we are going to assume the order went through after 10 min, if their was no error with the eth transaction.\n      // Cannot make the same assumption with regards to chains other than ethereum.\n      const timeSinceOrder =\n        (new Date().getTime() - new Date(data.timestamp_created).getTime()) /\n        1000;\n      if (\n        timeSinceOrder > 600 &&\n        data.status === bityStatuses.OPEN &&\n        data.input.currency === BASE_CURRENCY\n      ) {\n        return swapNotificationStatuses.COMPLETE;\n      }\n      switch (data.status) {\n        case bityStatuses.OPEN:\n        case bityStatuses.RCVE:\n        case bityStatuses.CONF:\n          return swapNotificationStatuses.PENDING;\n        case bityStatuses.FILL:\n          return swapNotificationStatuses.COMPLETE;\n        case bityStatuses.CANC:\n          return swapNotificationStatuses.CANCELLED;\n      }\n    } catch (e) {\n      Toast.responseHandler(e, false);\n    }\n    return swapNotificationStatuses.PENDING;\n  }\n}\n"]}]}