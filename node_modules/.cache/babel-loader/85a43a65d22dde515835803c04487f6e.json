{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/thread-loader/dist/cjs.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/layouts/InterfaceLayout/containers/SwapContainer/components/SwapWidget/SwapWidget.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/layouts/InterfaceLayout/containers/SwapContainer/components/SwapWidget/SwapWidget.vue","mtime":1573477612084},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport _toConsumableArray from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.array.find\";\nimport _defineProperty from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.number.constructor\";\n\nvar _watch;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport BigNumber from 'bignumber.js';\nimport debug from 'debug';\nimport { mapState } from 'vuex';\nimport { Toast } from '@/helpers';\nimport ProvidersRadioSelector from \"../ProvidersRadioSelector\";\nimport DropDownAddressSelector from \"../SwapAddressSelector\";\nimport InterfaceBottomText from '@/components/InterfaceBottomText';\nimport InterfaceContainerTitle from \"../../../../components/InterfaceContainerTitle\";\nimport swapIcon from '@/assets/images/icons/swap-widget.svg';\nimport ImageKybernetowrk from '@/assets/images/etc/kybernetwork.png';\nimport ImageBity from '@/assets/images/etc/bity.png';\nimport ImageVisaMaster from '@/assets/images/etc/visamaster.png';\nimport SwapCurrencyPicker from \"../SwapCurrencyPicker\";\nimport SwapConfirmationModal from \"../SwapConfirmationModal\";\nimport SwapExitToFiat from \"../SwapExitToFiat\";\nimport SwapSendToModal from \"../SwapSendToModal\";\nimport { SwapProviders, providers, bestProviderForQuantity, bestRateForQuantity, isValidEntry, providerNames, supportedProviders, BASE_CURRENCY, fiat, MIN_SWAP_AMOUNT, ERC20 } from '@/partners';\nvar errorLogger = debug('v5:swapContainer');\nimport SwapSendForm from \"../SwapExitToFiat\";\n\nvar toBigNumber = function toBigNumber(num) {\n  return new BigNumber(num);\n};\n\nexport default {\n  components: {\n    'interface-bottom-text': InterfaceBottomText,\n    'interface-container-title': InterfaceContainerTitle,\n    'swap-currency-picker': SwapCurrencyPicker,\n    'drop-down-address-selector': DropDownAddressSelector,\n    'providers-radio-selector': ProvidersRadioSelector,\n    'swap-confirmation-modal': SwapConfirmationModal,\n    'swap-exit-to-fiat': SwapExitToFiat,\n    'swap-send-form': SwapSendForm,\n    'swap-send-to-modal': SwapSendToModal\n  },\n  props: {\n    tokensWithBalance: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    suppliedFrom: {\n      type: Object,\n      default: function _default() {\n        return {\n          symbol: 'ETH',\n          name: 'Ethereum'\n        };\n      }\n    },\n    suppliedTo: {\n      type: Object,\n      default: function _default() {\n        return {\n          symbol: 'BTC',\n          name: 'Bitcoin'\n        };\n      }\n    },\n    suppliedToAmount: {\n      type: Number,\n      default: 0\n    },\n    suppliedFromAmount: {\n      type: Number,\n      default: 0\n    },\n    destAddress: {\n      type: String,\n      default: ''\n    },\n    isWidget: {\n      type: Boolean,\n      default: true\n    }\n  },\n  data: function data() {\n    return {\n      baseCurrency: BASE_CURRENCY,\n      toAddress: '',\n      currentAddress: '',\n      refundAddress: '',\n      exitFromAddress: '',\n      fromCurrency: 'ETH',\n      toCurrency: 'ETH',\n      displayToValue: 1,\n      displayFromValue: 1,\n      fromValue: 1,\n      toValue: 1,\n      invalidFrom: 'none',\n      lastBestRate: 0,\n      selectedProvider: {},\n      swapDetails: {},\n      currencyDetails: {},\n      swap: new SwapProviders(providers, {\n        network: this.$store.state.network.type.name,\n        web3: this.$store.state.web3,\n        getRateForUnit: false\n      }, {\n        tokensWithBalance: this.tokensWithBalance,\n        overrideDecimals: true,\n        online: this.$store.state.online\n      }),\n      images: {\n        kybernetowrk: ImageKybernetowrk,\n        bity: ImageBity,\n        visaMaster: ImageVisaMaster,\n        swap: swapIcon\n      },\n      toArray: [],\n      fromArray: [],\n      providerData: [],\n      tokenBalances: {},\n      providerRatesRecieved: [],\n      noProvidersPair: {},\n      providersFound: [],\n      tempStatuses: [],\n      overrideFrom: {},\n      overrideTo: {},\n      providerNames: providerNames,\n      supportedProviders: supportedProviders,\n      fiatCurrenciesArray: fiat.map(function (entry) {\n        return entry.symbol;\n      }),\n      finalizingSwap: false,\n      validAddress: true,\n      validRefundAddress: true,\n      validExitAddress: true,\n      ratesRetrived: false,\n      issueRecievingRates: false,\n      loadingData: true,\n      haveProviderRates: false,\n      loadingError: false,\n      switchCurrencyOrder: false,\n      bityExitToFiat: false,\n      exitToFiatCallback: function exitToFiatCallback() {},\n      debounceUpdateEstimate: {},\n      debounceDoThing: {},\n      widgetOpen: false,\n      loadingWidget: false\n    };\n  },\n  computed: _objectSpread({}, mapState(['account', 'ens', 'gasPrice', 'web3', 'network', 'online']), {\n    bestRate: function bestRate() {\n      var _this = this;\n\n      try {\n        if (this.providerData.length > 0) {\n          if (this.selectedProvider.provider) {\n            return this.providerList.find(function (entry) {\n              return entry.provider === _this.selectedProvider.provider;\n            }).rate;\n          }\n\n          return bestRateForQuantity(_toConsumableArray(this.providerList), this.fromValue);\n        }\n\n        return this.lastBestRate;\n      } catch (e) {\n        errorLogger(e);\n      }\n    },\n    fromBelowMinAllowed: function fromBelowMinAllowed() {\n      if (new BigNumber(MIN_SWAP_AMOUNT).gt(new BigNumber(this.fromValue))) return \"\".concat(this.$t('interface.belowMin'), \" \").concat(MIN_SWAP_AMOUNT);\n      if (new BigNumber(this.selectedProvider.minValue).gt(new BigNumber(this.fromValue))) return this.$t('interface.belowMin', {\n        value: toBigNumber(this.selectedProvider.maxValue).toFixed(6),\n        currency: this.fromCurrency\n      });\n      return false;\n    },\n    fromAboveMaxAllowed: function fromAboveMaxAllowed() {\n      if (this.selectedProvider.provider === this.providerNames.bity) {\n        if (this.checkBityMax) {\n          return this.$t('interface.aboveMax', {\n            value: toBigNumber(this.selectedProvider.maxValue).toFixed(6),\n            currency: this.fromCurrency\n          });\n        }\n\n        return false;\n      } else if (toBigNumber(this.fromValue).gt(toBigNumber(this.selectedProvider.maxValue)) && toBigNumber(this.selectedProvider.maxValue).gt(toBigNumber(0))) return this.$t('interface.aboveMaxSwap', {\n        value: toBigNumber(this.selectedProvider.maxValue).toFixed(6),\n        currency: this.fromCurrency\n      });\n\n      return false;\n    },\n    toBelowMinAllowed: function toBelowMinAllowed() {\n      if (this.checkBityMin) return this.$t('interface.belowMinGeneral');\n      if (toBigNumber(0).gte(toBigNumber(this.toValue))) return this.$t('interface.belowMinGeneral');\n      return false;\n    },\n    toAboveMaxAllowed: function toAboveMaxAllowed() {\n      if (this.checkBityMax) return this.$t('interface.aboveMaxGeneral');\n      return false;\n    },\n    providerList: function providerList() {\n      if (this.providerData.length > 0) {\n        return bestProviderForQuantity(_toConsumableArray(this.providerData), this.fromValue);\n      }\n\n      return [];\n    },\n    isExitToFiat: function isExitToFiat() {\n      return this.fiatCurrenciesArray.includes(this.toCurrency);\n    },\n    validSwap: function validSwap() {\n      // initial chack.  will provide an alert on the next screen if no address is provided\n      var canExit = this.isExitToFiat && this.fromCurrency !== this.baseCurrency ? this.exitFromAddress !== '' : true;\n      return this.hasEnough && (this.toAddress !== '' || canExit) && this.allAddressesValid && toBigNumber(this.selectedProvider.minValue).lte(toBigNumber(this.fromValue)) && (toBigNumber(this.fromValue).lte(toBigNumber(this.selectedProvider.maxValue)) || this.selectedProvider.maxValue === 0);\n    },\n    checkBityMin: function checkBityMin() {\n      if (this.swap.isProvider(this.providerNames.bity)) {\n        return !this.swap.getProvider(this.providerNames.bity).minCheck(this.fromCurrency, this.fromValue, this.toCurrency, this.toValue) && this.selectedProvider.provider === this.providerNames.bity;\n      }\n\n      return false;\n    },\n    checkBityMax: function checkBityMax() {\n      if (this.swap.isProvider(this.providerNames.bity)) {\n        return !this.swap.getProvider(this.providerNames.bity).maxCheck(this.fromCurrency, this.fromValue, this.toCurrency, this.toValue) && this.selectedProvider.provider === this.providerNames.bity;\n      }\n\n      return false;\n    },\n    showRefundAddress: function showRefundAddress() {\n      return !SwapProviders.isToken(this.fromCurrency) && this.selectedProvider.provider === this.providerNames.changelly;\n    },\n    allAddressesValid: function allAddressesValid() {\n      var validBaseToAddress = this.toAddress !== '' && this.validAddress;\n\n      if (this.isExitToFiat) {\n        if (this.fromCurrency === this.baseCurrency) {\n          return true;\n        }\n\n        return this.exitFromAddress !== '' && this.validExitAddress;\n      }\n\n      if (this.showRefundAddress) {\n        if (this.fromCurrency === this.baseCurrency || SwapProviders.isToken(this.fromCurrency)) {\n          var validRefundAddress = this.refundAddress === '' && this.validRefundAddress;\n          return validBaseToAddress && validRefundAddress;\n        }\n\n        return SwapProviders.checkAddress(this.refundAddress, this.fromCurrency);\n      }\n\n      return validBaseToAddress;\n    },\n    hasEnough: function hasEnough() {\n      if (SwapProviders.isToken(this.fromCurrency) && this.fromCurrency !== this.baseCurrency) {\n        var enteredVal = this.swap.convertToTokenWei(this.fromCurrency, this.fromValue);\n        return new BigNumber(this.tokenBalances[this.fromCurrency]).gte(new BigNumber(enteredVal));\n      } else if (this.fromCurrency === this.baseCurrency) {\n        var _enteredVal = this.swap.convertToTokenWei(this.fromCurrency, this.fromValue);\n\n        return new BigNumber(this.account.balance).gt(new BigNumber(_enteredVal));\n      }\n\n      return true;\n    },\n    exitSourceAddress: function exitSourceAddress() {\n      return this.isExitToFiat && this.fromCurrency === this.baseCurrency ? this.currentAddress : this.exitFromAddress;\n    }\n  }),\n  watch: (_watch = {}, _defineProperty(_watch, 'this.network.type.name', function thisNetworkTypeName() {\n    this.swap.updateNetwork(this.network.type.name);\n  }), _defineProperty(_watch, 'swap.updateProviderRates', function swapUpdateProviderRates() {\n    var _this$swap$initialCur = this.swap.initialCurrencyLists,\n        toArray = _this$swap$initialCur.toArray,\n        fromArray = _this$swap$initialCur.fromArray;\n    this.toArray = toArray;\n    this.fromArray = fromArray;\n  }), _defineProperty(_watch, 'swap.haveProviderRates', function swapHaveProviderRates() {\n    var _this2 = this;\n\n    this.haveProviderRates = this.swap.haveProviderRates;\n\n    var _this$swap$buildIniti = this.swap.buildInitialCurrencyArrays(),\n        toArray = _this$swap$buildIniti.toArray,\n        fromArray = _this$swap$buildIniti.fromArray;\n\n    this.toArray = toArray;\n    this.fromArray = fromArray;\n    this.lastBestRate = bestRateForQuantity(_toConsumableArray(this.providerList), this.fromValue);\n    this.updateRateEstimate(this.fromCurrency, this.toCurrency, this.fromValue, 'from');\n\n    if (this.isWidget && this.widgetOpen) {\n      this.$once('swapRatesUpdated', function () {\n        if (_this2.suppliedToAmount > 0) {\n          _this2.toValue = _this2.suppliedToAmount;\n          _this2.fromValue = _this2.swap.calculateFromValue(_this2.toValue, _this2.bestRate, _this2.fromCurrency);\n        } else if (_this2.suppliedFromAmount > 0) {\n          _this2.fromValue = _this2.suppliedFromAmount;\n          _this2.toValue = _this2.swap.calculateToValue(_this2.fromValue, _this2.bestRate, _this2.toCurrency);\n        }\n      });\n    }\n  }), _defineProperty(_watch, \"network\", function network(newVal) {\n    this.providerData = [];\n    this.haveProviderRates = false;\n    this.loadingData = false;\n    this.swap = new SwapProviders(providers, {\n      network: newVal.type.name,\n      web3: this.web3\n    });\n  }), _watch),\n  mounted: function mounted() {\n    var _this3 = this;\n\n    if (this.online) {\n      var _this$swap$initialCur2 = this.swap.initialCurrencyLists,\n          toArray = _this$swap$initialCur2.toArray,\n          fromArray = _this$swap$initialCur2.fromArray;\n      this.toArray = toArray;\n      this.fromArray = fromArray;\n      this.currentAddress = this.account.address;\n      this.debounceUpdateEstimate = this.web3.utils._.debounce(this.updateEstimate, 300);\n      this.debounceReviseRateEstimate = this.web3.utils._.debounce(this.updateRateEstimate, 2000);\n      this.$refs.modal.$on('shown', function () {\n        _this3.widgetOpen = true;\n\n        if (_this3.isWidget) {\n          _this3.toAddress = _this3.destAddress !== '' ? _this3.destAddress : '';\n          _this3.fromCurrency = _this3.suppliedFrom.symbol;\n          _this3.toCurrency = _this3.suppliedTo.symbol;\n          _this3.overrideFrom = _this3.suppliedFrom;\n          _this3.overrideTo = _this3.suppliedTo;\n\n          if (toBigNumber(_this3.suppliedToAmount).gt(0)) {\n            _this3.updateRateEstimate(_this3.suppliedFrom.symbol, _this3.suppliedTo.symbol, _this3.suppliedToAmount, 'to');\n\n            _this3.loadingWidget = true;\n            _this3.toValue = _this3.suppliedToAmount;\n\n            _this3.amountChanged('to');\n          } else {\n            _this3.updateRateEstimate(_this3.suppliedFrom.symbol, _this3.suppliedTo.symbol, _this3.suppliedFromAmount, 'from');\n\n            _this3.toValue = 0;\n\n            _this3.amountChanged('from');\n          }\n        }\n      });\n      this.$refs.modal.$on('hide', function () {\n        _this3.widgetOpen = false;\n      });\n    }\n  },\n  methods: {\n    reset: function reset() {\n      this.updateRateEstimate(this.fromCurrency, this.toCurrency, this.fromValue, 'from');\n      this.finalizingSwap = false;\n      this.validAddress = true;\n      this.issueRecievingRates = false;\n      this.loadingError = false;\n      this.switchCurrencyOrder = false;\n      this.bityExitToFiat = false;\n    },\n    flipCurrencies: function flipCurrencies() {\n      if (!this.isWidget) {\n        this.switchCurrencyOrder = true;\n        var origTo = this.toValue;\n        this.fromCurrency = this.currencyDetails.to.symbol;\n        this.toCurrency = this.currencyDetails.from.symbol;\n        this.overrideFrom = this.currencyDetails.to;\n        this.overrideTo = this.currencyDetails.from;\n        this.updateRateEstimate(this.fromCurrency, this.toCurrency, origTo, 'from');\n        this.switchCurrencyOrder = false;\n      }\n    },\n    setSelectedProvider: function setSelectedProvider(provider) {\n      this.selectedProvider = this.providerList.find(function (entry) {\n        return entry.provider === provider;\n      });\n      this.updateEstimate('from');\n    },\n    setToAddress: function setToAddress(address) {\n      this.toAddress = address;\n    },\n    setRefundAddress: function setRefundAddress(address) {\n      this.refundAddress = address;\n    },\n    setExitFromAddress: function setExitFromAddress(address) {\n      this.exitFromAddress = address;\n    },\n    swapAll: function swapAll() {\n      this.fromValue = this.swap.convertToTokenBase(this.fromCurrency, this.tokenBalances[this.fromCurrency]);\n      this.amountChanged('from');\n    },\n    setFromCurrency: function setFromCurrency(value) {\n      var dir = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'from';\n      this.currencyDetails.from = value;\n      this.fromCurrency = value.symbol;\n      this.getBalance(this.fromCurrency);\n      this.toArray = this.swap.setToCurrencyBuilder(value);\n      this.updateRateEstimate(this.fromCurrency, this.toCurrency, this.fromValue, dir);\n    },\n    setToCurrency: function setToCurrency(value) {\n      var dir = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'to';\n      this.currencyDetails.to = value;\n      this.toCurrency = value.symbol;\n      this.fromArray = this.swap.setFromCurrencyBuilder(value);\n      this.updateRateEstimate(this.fromCurrency, this.toCurrency, this.fromValue, dir);\n    },\n    getBalance: function () {\n      var _getBalance = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(currency) {\n        var balance;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(SwapProviders.isToken(currency) && currency !== this.baseCurrency)) {\n                  _context.next = 5;\n                  break;\n                }\n\n                _context.next = 3;\n                return new this.web3.eth.Contract(ERC20, this.swap.getTokenAddress(currency)).methods.balanceOf(this.currentAddress).call();\n\n              case 3:\n                balance = _context.sent;\n                this.$set(this.tokenBalances, currency, balance);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getBalance(_x) {\n        return _getBalance.apply(this, arguments);\n      }\n\n      return getBalance;\n    }(),\n    amountChanged: function amountChanged(direction) {\n      if (isValidEntry(this.fromValue) && direction === 'from' || isValidEntry(this.toValue) && direction === 'to') {\n        if (this.swap.getProvider(this.providerNames.simplex).currencies.fiat[this.fromCurrency]) {\n          this.debounceUpdateEstimate(this.providerNames.simplex + direction);\n        } else {\n          this.simplexUpdate = false;\n          this.debounceUpdateEstimate(direction);\n          var fromCur = this.fromCurrency;\n          var toCur = this.toCurrency;\n          var fromVal = this.fromValue;\n          this.debounceReviseRateEstimate(fromCur, toCur, fromVal, direction);\n        }\n      }\n    },\n    updateEstimate: function () {\n      var _updateEstimate = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2(input) {\n        var fromValue, toValue, simplexProvider, simplexRateDetails, rate, _rate;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!this.simplexUpdate) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                this.simplexUpdate = false;\n                return _context2.abrupt(\"return\");\n\n              case 3:\n                _context2.t0 = input;\n                _context2.next = _context2.t0 === 'to' ? 6 : _context2.t0 === 'from' ? 8 : _context2.t0 === \"\".concat(this.providerNames.simplex, \"to\") ? 10 : _context2.t0 === \"\".concat(this.providerNames.simplex, \"from\") ? 26 : 42;\n                break;\n\n              case 6:\n                this.fromValue = this.swap.calculateFromValue(this.toValue, this.bestRate, this.fromCurrency);\n                return _context2.abrupt(\"break\", 47);\n\n              case 8:\n                this.toValue = this.swap.calculateToValue(this.fromValue, this.bestRate, this.toCurrency);\n                return _context2.abrupt(\"break\", 47);\n\n              case 10:\n                this.simplexUpdate = true;\n                simplexProvider = this.swap.getProvider(this.providerNames.simplex);\n\n                if (!simplexProvider.canQuote(this.fromValue, this.toValue)) {\n                  _context2.next = 20;\n                  break;\n                }\n\n                _context2.next = 15;\n                return simplexProvider.updateDigital(this.fromCurrency, this.toCurrency, this.toValue);\n\n              case 15:\n                simplexRateDetails = _context2.sent;\n                this.fromValue = simplexRateDetails.fromValue;\n                this.toValue = simplexRateDetails.toValue;\n                _context2.next = 25;\n                break;\n\n              case 20:\n                _context2.next = 22;\n                return simplexProvider.updateFiat(this.fromCurrency, this.toCurrency, 51);\n\n              case 22:\n                simplexRateDetails = _context2.sent;\n                rate = new BigNumber(simplexRateDetails.toValue).div(simplexRateDetails.fromValue).toString(10);\n                this.fromValue = this.swap.calculateFromValue(this.toValue, rate, this.fromCurrency);\n\n              case 25:\n                return _context2.abrupt(\"break\", 47);\n\n              case 26:\n                this.simplexUpdate = true;\n                simplexProvider = this.swap.getProvider(this.providerNames.simplex);\n\n                if (!simplexProvider.canQuote(this.fromValue, this.toValue)) {\n                  _context2.next = 36;\n                  break;\n                }\n\n                _context2.next = 31;\n                return simplexProvider.updateFiat(this.fromCurrency, this.toCurrency, this.fromValue);\n\n              case 31:\n                simplexRateDetails = _context2.sent;\n                this.fromValue = simplexRateDetails.fromValue;\n                this.toValue = simplexRateDetails.toValue;\n                _context2.next = 41;\n                break;\n\n              case 36:\n                _context2.next = 38;\n                return simplexProvider.updateFiat(this.fromCurrency, this.toCurrency, 51);\n\n              case 38:\n                simplexRateDetails = _context2.sent;\n                _rate = new BigNumber(simplexRateDetails.toValue).div(simplexRateDetails.fromValue).toString(10);\n                this.toValue = this.swap.calculateToValue(this.fromValue, _rate);\n\n              case 41:\n                return _context2.abrupt(\"break\", 47);\n\n              case 42:\n                toValue = this.swap.calculateToValue(this.fromValue, this.bestRate);\n                fromValue = this.swap.calculateFromValue(this.toValue, this.bestRate);\n                this.toValue = toValue;\n                this.fromValue = fromValue;\n                return _context2.abrupt(\"break\", 47);\n\n              case 47:\n                if (this.toValue - this.suppliedToAmount > 1 && this.loadingWidget) {\n                  this.loadingWidget = false;\n                  this.toValue = this.suppliedToAmount;\n                  this.updateEstimate('to');\n                }\n\n              case 48:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function updateEstimate(_x2) {\n        return _updateEstimate.apply(this, arguments);\n      }\n\n      return updateEstimate;\n    }(),\n    updateRateEstimate: function () {\n      var _updateRateEstimate = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3(fromCurrency, toCurrency, fromValue, to) {\n        var _this4 = this;\n\n        var _ref, providersFound, callsToMake, results;\n\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!this.haveProviderRates) {\n                  _context3.next = 16;\n                  break;\n                }\n\n                this.loadingData = true;\n                this.noProvidersPair = {\n                  fromCurrency: fromCurrency,\n                  toCurrency: toCurrency\n                };\n                this.selectedProvider = {}; // Reset the selected provider when new rate pair is choosen\n\n                this.providerData = [];\n                _context3.next = 7;\n                return this.swap.updateRateEstimate(fromCurrency, toCurrency, fromValue, this.toValue);\n\n              case 7:\n                _ref = _context3.sent;\n                providersFound = _ref.providersFound;\n                callsToMake = _ref.callsToMake;\n                this.providersFound = providersFound;\n                _context3.next = 13;\n                return Promise.all(callsToMake.map(function (func) {\n                  return func(fromCurrency, toCurrency, fromValue, _this4.toValue);\n                }));\n\n              case 13:\n                results = _context3.sent;\n                this.loadingData = false;\n\n                if (results.every(function (entry) {\n                  return entry.fromCurrency === _this4.fromCurrency && entry.toCurrency === _this4.toCurrency;\n                })) {\n                  this.providerData = bestProviderForQuantity(results.map(function (entry) {\n                    if (+entry.rate > 0) {\n                      return {\n                        provider: entry.provider,\n                        fromCurrency: fromCurrency,\n                        fromValue: _this4.fromValue,\n                        toCurrency: toCurrency,\n                        rate: +entry.rate,\n                        minValue: entry.minValue || 0,\n                        maxValue: entry.maxValue || 0,\n                        computeConversion: function computeConversion(_fromValue) {\n                          var rate = new BigNumber(entry.rate);\n                          return new BigNumber(_fromValue).times(rate).toFixed(6).toString(10);\n                        }\n                      };\n                    }\n                  }), fromValue);\n                  this.$emit('swapRatesUpdated');\n                  this.updateEstimate(to);\n                }\n\n              case 16:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function updateRateEstimate(_x3, _x4, _x5, _x6) {\n        return _updateRateEstimate.apply(this, arguments);\n      }\n\n      return updateRateEstimate;\n    }(),\n    swapConfirmationModalOpen: function () {\n      var _swapConfirmationModalOpen = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4() {\n        var _this5 = this;\n\n        var providerDetails, swapDetails;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n\n                if (!this.validSwap) {\n                  _context4.next = 10;\n                  break;\n                }\n\n                this.finalizingSwap = true;\n                providerDetails = this.providerList.find(function (entry) {\n                  return entry.provider === _this5.selectedProvider.provider;\n                });\n                swapDetails = {\n                  providerDetails: providerDetails,\n                  fromValue: this.fromValue,\n                  toValue: this.toValue,\n                  toAddress: this.toAddress || this.currentAddress,\n                  fromAddress: this.currentAddress,\n                  refundAddress: SwapProviders.isToken(providerDetails.fromCurrency) ? this.currentAddress : this.refundAddress,\n                  exitFromAddress: this.isExitToFiat && this.fromCurrency === this.baseCurrency ? this.currentAddress : this.exitFromAddress\n                };\n                _context4.next = 7;\n                return this.swap.startSwap(swapDetails);\n\n              case 7:\n                this.swapDetails = _context4.sent;\n                this.finalizingSwap = false;\n\n                if (this.swapDetails.isExitToFiat) {\n                  this.bityExitToFiat = true;\n\n                  this.exitToFiatCallback = function (swapDetailsExit) {\n                    _this5.bityExitToFiat = false;\n                    _this5.swapDetails = swapDetailsExit;\n\n                    _this5.openConfirmModal(_this5.swapDetails);\n                  };\n                } else {\n                  this.openConfirmModal(this.swapDetails);\n                }\n\n              case 10:\n                _context4.next = 22;\n                break;\n\n              case 12:\n                _context4.prev = 12;\n                _context4.t0 = _context4[\"catch\"](0);\n\n                if (!(_context4.t0.message === 'abort')) {\n                  _context4.next = 17;\n                  break;\n                }\n\n                this.finalizingSwap = false;\n                return _context4.abrupt(\"return\");\n\n              case 17:\n                this.$refs.swapConfirmation.$refs.swapconfirmation.hide();\n                this.$refs.swapSendTo.$refs.swapconfirmation.hide();\n                this.finalizingSwap = false;\n                errorLogger(_context4.t0);\n                Toast.responseHandler(_context4.t0, false);\n\n              case 22:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[0, 12]]);\n      }));\n\n      function swapConfirmationModalOpen() {\n        return _swapConfirmationModalOpen.apply(this, arguments);\n      }\n\n      return swapConfirmationModalOpen;\n    }(),\n    openConfirmModal: function openConfirmModal(swapDetails) {\n      if (swapDetails.dataForInitialization && swapDetails.maybeToken) {\n        this.$refs.swapConfirmation.$refs.swapconfirmation.show();\n      } else if (swapDetails.dataForInitialization && !swapDetails.maybeToken) {\n        this.$refs.swapSendTo.$refs.swapconfirmation.show();\n      } else {\n        throw Error('Error while requesting finalized details from provider');\n      }\n    },\n    exitToFiatAbort: function exitToFiatAbort() {\n      // get any component state values to temporarily persist, and reset swap state to state before exit to fiat selected.\n      this.bityExitToFiat = !this.bityExitToFiat;\n    },\n    resetSwapState: function resetSwapState() {\n      this.$refs.modal.hide();\n      this.reset();\n    }\n  }\n};",{"version":3,"sources":["SwapWidget.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmOA,OAAA,SAAA,MAAA,cAAA;AACA,OAAA,KAAA,MAAA,OAAA;AACA,SAAA,QAAA,QAAA,MAAA;AAEA,SAAA,KAAA,QAAA,WAAA;AACA,OAAA,sBAAA;AACA,OAAA,uBAAA;AACA,OAAA,mBAAA,MAAA,kCAAA;AACA,OAAA,uBAAA;AACA,OAAA,QAAA,MAAA,uCAAA;AACA,OAAA,iBAAA,MAAA,sCAAA;AACA,OAAA,SAAA,MAAA,8BAAA;AACA,OAAA,eAAA,MAAA,oCAAA;AAEA,OAAA,kBAAA;AACA,OAAA,qBAAA;AACA,OAAA,cAAA;AACA,OAAA,eAAA;AAEA,SACA,aADA,EAEA,SAFA,EAGA,uBAHA,EAIA,mBAJA,EAKA,YALA,EAMA,aANA,EAOA,kBAPA,EAQA,aARA,EASA,IATA,EAUA,eAVA,EAWA,KAXA,QAYA,YAZA;AAcA,IAAA,WAAA,GAAA,KAAA,CAAA,kBAAA,CAAA;AACA,OAAA,YAAA;;AAEA,IAAA,WAAA,GAAA,SAAA,WAAA,CAAA,GAAA,EAAA;AACA,SAAA,IAAA,SAAA,CAAA,GAAA,CAAA;AACA,CAFA;;AAIA,eAAA;AACA,EAAA,UAAA,EAAA;AACA,6BAAA,mBADA;AAEA,iCAAA,uBAFA;AAGA,4BAAA,kBAHA;AAIA,kCAAA,uBAJA;AAKA,gCAAA,sBALA;AAMA,+BAAA,qBANA;AAOA,yBAAA,cAPA;AAQA,sBAAA,YARA;AASA,0BAAA;AATA,GADA;AAYA,EAAA,KAAA,EAAA;AACA,IAAA,iBAAA,EAAA;AACA,MAAA,IAAA,EAAA,KADA;AAEA,MAAA,OAAA,EAAA,oBAAA;AACA,eAAA,EAAA;AACA;AAJA,KADA;AAOA,IAAA,YAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA,oBAAA;AACA,eAAA;AACA,UAAA,MAAA,EAAA,KADA;AAEA,UAAA,IAAA,EAAA;AAFA,SAAA;AAIA;AAPA,KAPA;AAgBA,IAAA,UAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA,oBAAA;AACA,eAAA;AACA,UAAA,MAAA,EAAA,KADA;AAEA,UAAA,IAAA,EAAA;AAFA,SAAA;AAIA;AAPA,KAhBA;AAyBA,IAAA,gBAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KAzBA;AA6BA,IAAA,kBAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KA7BA;AAiCA,IAAA,WAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KAjCA;AAqCA,IAAA,QAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA;AArCA,GAZA;AAsDA,EAAA,IAtDA,kBAsDA;AACA,WAAA;AACA,MAAA,YAAA,EAAA,aADA;AAEA,MAAA,SAAA,EAAA,EAFA;AAGA,MAAA,cAAA,EAAA,EAHA;AAIA,MAAA,aAAA,EAAA,EAJA;AAKA,MAAA,eAAA,EAAA,EALA;AAMA,MAAA,YAAA,EAAA,KANA;AAOA,MAAA,UAAA,EAAA,KAPA;AAQA,MAAA,cAAA,EAAA,CARA;AASA,MAAA,gBAAA,EAAA,CATA;AAUA,MAAA,SAAA,EAAA,CAVA;AAWA,MAAA,OAAA,EAAA,CAXA;AAYA,MAAA,WAAA,EAAA,MAZA;AAaA,MAAA,YAAA,EAAA,CAbA;AAcA,MAAA,gBAAA,EAAA,EAdA;AAeA,MAAA,WAAA,EAAA,EAfA;AAgBA,MAAA,eAAA,EAAA,EAhBA;AAiBA,MAAA,IAAA,EAAA,IAAA,aAAA,CACA,SADA,EAEA;AACA,QAAA,OAAA,EAAA,KAAA,MAAA,CAAA,KAAA,CAAA,OAAA,CAAA,IAAA,CAAA,IADA;AAEA,QAAA,IAAA,EAAA,KAAA,MAAA,CAAA,KAAA,CAAA,IAFA;AAGA,QAAA,cAAA,EAAA;AAHA,OAFA,EAOA;AACA,QAAA,iBAAA,EAAA,KAAA,iBADA;AAEA,QAAA,gBAAA,EAAA,IAFA;AAGA,QAAA,MAAA,EAAA,KAAA,MAAA,CAAA,KAAA,CAAA;AAHA,OAPA,CAjBA;AA8BA,MAAA,MAAA,EAAA;AACA,QAAA,YAAA,EAAA,iBADA;AAEA,QAAA,IAAA,EAAA,SAFA;AAGA,QAAA,UAAA,EAAA,eAHA;AAIA,QAAA,IAAA,EAAA;AAJA,OA9BA;AAoCA,MAAA,OAAA,EAAA,EApCA;AAqCA,MAAA,SAAA,EAAA,EArCA;AAsCA,MAAA,YAAA,EAAA,EAtCA;AAuCA,MAAA,aAAA,EAAA,EAvCA;AAwCA,MAAA,qBAAA,EAAA,EAxCA;AAyCA,MAAA,eAAA,EAAA,EAzCA;AA0CA,MAAA,cAAA,EAAA,EA1CA;AA2CA,MAAA,YAAA,EAAA,EA3CA;AA4CA,MAAA,YAAA,EAAA,EA5CA;AA6CA,MAAA,UAAA,EAAA,EA7CA;AA8CA,MAAA,aAAA,EAAA,aA9CA;AA+CA,MAAA,kBAAA,EAAA,kBA/CA;AAgDA,MAAA,mBAAA,EAAA,IAAA,CAAA,GAAA,CAAA,UAAA,KAAA;AAAA,eAAA,KAAA,CAAA,MAAA;AAAA,OAAA,CAhDA;AAiDA,MAAA,cAAA,EAAA,KAjDA;AAkDA,MAAA,YAAA,EAAA,IAlDA;AAmDA,MAAA,kBAAA,EAAA,IAnDA;AAoDA,MAAA,gBAAA,EAAA,IApDA;AAqDA,MAAA,aAAA,EAAA,KArDA;AAsDA,MAAA,mBAAA,EAAA,KAtDA;AAuDA,MAAA,WAAA,EAAA,IAvDA;AAwDA,MAAA,iBAAA,EAAA,KAxDA;AAyDA,MAAA,YAAA,EAAA,KAzDA;AA0DA,MAAA,mBAAA,EAAA,KA1DA;AA2DA,MAAA,cAAA,EAAA,KA3DA;AA4DA,MAAA,kBAAA,EAAA,8BAAA,CAAA,CA5DA;AA6DA,MAAA,sBAAA,EAAA,EA7DA;AA8DA,MAAA,eAAA,EAAA,EA9DA;AA+DA,MAAA,UAAA,EAAA,KA/DA;AAgEA,MAAA,aAAA,EAAA;AAhEA,KAAA;AAkEA,GAzHA;AA0HA,EAAA,QAAA,oBACA,QAAA,CAAA,CAAA,SAAA,EAAA,KAAA,EAAA,UAAA,EAAA,MAAA,EAAA,SAAA,EAAA,QAAA,CAAA,CADA;AAEA,IAAA,QAFA,sBAEA;AAAA;;AACA,UAAA;AACA,YAAA,KAAA,YAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,cAAA,KAAA,gBAAA,CAAA,QAAA,EAAA;AACA,mBAAA,KAAA,YAAA,CAAA,IAAA,CAAA,UAAA,KAAA,EAAA;AACA,qBAAA,KAAA,CAAA,QAAA,KAAA,KAAA,CAAA,gBAAA,CAAA,QAAA;AACA,aAFA,EAEA,IAFA;AAGA;;AACA,iBAAA,mBAAA,oBAAA,KAAA,YAAA,GAAA,KAAA,SAAA,CAAA;AACA;;AACA,eAAA,KAAA,YAAA;AACA,OAVA,CAUA,OAAA,CAAA,EAAA;AACA,QAAA,WAAA,CAAA,CAAA,CAAA;AACA;AACA,KAhBA;AAiBA,IAAA,mBAjBA,iCAiBA;AACA,UAAA,IAAA,SAAA,CAAA,eAAA,EAAA,EAAA,CAAA,IAAA,SAAA,CAAA,KAAA,SAAA,CAAA,CAAA,EACA,iBAAA,KAAA,EAAA,CAAA,oBAAA,CAAA,cAAA,eAAA;AACA,UACA,IAAA,SAAA,CAAA,KAAA,gBAAA,CAAA,QAAA,EAAA,EAAA,CACA,IAAA,SAAA,CAAA,KAAA,SAAA,CADA,CADA,EAKA,OAAA,KAAA,EAAA,CAAA,oBAAA,EAAA;AACA,QAAA,KAAA,EAAA,WAAA,CAAA,KAAA,gBAAA,CAAA,QAAA,CAAA,CAAA,OAAA,CAAA,CAAA,CADA;AAEA,QAAA,QAAA,EAAA,KAAA;AAFA,OAAA,CAAA;AAIA,aAAA,KAAA;AACA,KA9BA;AA+BA,IAAA,mBA/BA,iCA+BA;AACA,UAAA,KAAA,gBAAA,CAAA,QAAA,KAAA,KAAA,aAAA,CAAA,IAAA,EAAA;AACA,YAAA,KAAA,YAAA,EAAA;AACA,iBAAA,KAAA,EAAA,CAAA,oBAAA,EAAA;AACA,YAAA,KAAA,EAAA,WAAA,CAAA,KAAA,gBAAA,CAAA,QAAA,CAAA,CAAA,OAAA,CAAA,CAAA,CADA;AAEA,YAAA,QAAA,EAAA,KAAA;AAFA,WAAA,CAAA;AAIA;;AACA,eAAA,KAAA;AACA,OARA,MAQA,IACA,WAAA,CAAA,KAAA,SAAA,CAAA,CAAA,EAAA,CACA,WAAA,CAAA,KAAA,gBAAA,CAAA,QAAA,CADA,KAGA,WAAA,CAAA,KAAA,gBAAA,CAAA,QAAA,CAAA,CAAA,EAAA,CAAA,WAAA,CAAA,CAAA,CAAA,CAJA,EAMA,OAAA,KAAA,EAAA,CAAA,wBAAA,EAAA;AACA,QAAA,KAAA,EAAA,WAAA,CAAA,KAAA,gBAAA,CAAA,QAAA,CAAA,CAAA,OAAA,CAAA,CAAA,CADA;AAEA,QAAA,QAAA,EAAA,KAAA;AAFA,OAAA,CAAA;;AAIA,aAAA,KAAA;AACA,KAnDA;AAoDA,IAAA,iBApDA,+BAoDA;AACA,UAAA,KAAA,YAAA,EAAA,OAAA,KAAA,EAAA,CAAA,2BAAA,CAAA;AACA,UAAA,WAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,WAAA,CAAA,KAAA,OAAA,CAAA,CAAA,EACA,OAAA,KAAA,EAAA,CAAA,2BAAA,CAAA;AACA,aAAA,KAAA;AACA,KAzDA;AA0DA,IAAA,iBA1DA,+BA0DA;AACA,UAAA,KAAA,YAAA,EAAA,OAAA,KAAA,EAAA,CAAA,2BAAA,CAAA;AACA,aAAA,KAAA;AACA,KA7DA;AA8DA,IAAA,YA9DA,0BA8DA;AACA,UAAA,KAAA,YAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,eAAA,uBAAA,oBAAA,KAAA,YAAA,GAAA,KAAA,SAAA,CAAA;AACA;;AACA,aAAA,EAAA;AACA,KAnEA;AAoEA,IAAA,YApEA,0BAoEA;AACA,aAAA,KAAA,mBAAA,CAAA,QAAA,CAAA,KAAA,UAAA,CAAA;AACA,KAtEA;AAuEA,IAAA,SAvEA,uBAuEA;AACA;AACA,UAAA,OAAA,GACA,KAAA,YAAA,IAAA,KAAA,YAAA,KAAA,KAAA,YAAA,GACA,KAAA,eAAA,KAAA,EADA,GAEA,IAHA;AAIA,aACA,KAAA,SAAA,KACA,KAAA,SAAA,KAAA,EAAA,IAAA,OADA,KAEA,KAAA,iBAFA,IAGA,WAAA,CAAA,KAAA,gBAAA,CAAA,QAAA,CAAA,CAAA,GAAA,CACA,WAAA,CAAA,KAAA,SAAA,CADA,CAHA,KAMA,WAAA,CAAA,KAAA,SAAA,CAAA,CAAA,GAAA,CACA,WAAA,CAAA,KAAA,gBAAA,CAAA,QAAA,CADA,KAGA,KAAA,gBAAA,CAAA,QAAA,KAAA,CATA,CADA;AAYA,KAzFA;AA0FA,IAAA,YA1FA,0BA0FA;AACA,UAAA,KAAA,IAAA,CAAA,UAAA,CAAA,KAAA,aAAA,CAAA,IAAA,CAAA,EAAA;AACA,eACA,CAAA,KAAA,IAAA,CACA,WADA,CACA,KAAA,aAAA,CAAA,IADA,EAEA,QAFA,CAGA,KAAA,YAHA,EAIA,KAAA,SAJA,EAKA,KAAA,UALA,EAMA,KAAA,OANA,CAAA,IAOA,KAAA,gBAAA,CAAA,QAAA,KAAA,KAAA,aAAA,CAAA,IARA;AAUA;;AACA,aAAA,KAAA;AACA,KAxGA;AAyGA,IAAA,YAzGA,0BAyGA;AACA,UAAA,KAAA,IAAA,CAAA,UAAA,CAAA,KAAA,aAAA,CAAA,IAAA,CAAA,EAAA;AACA,eACA,CAAA,KAAA,IAAA,CACA,WADA,CACA,KAAA,aAAA,CAAA,IADA,EAEA,QAFA,CAGA,KAAA,YAHA,EAIA,KAAA,SAJA,EAKA,KAAA,UALA,EAMA,KAAA,OANA,CAAA,IAOA,KAAA,gBAAA,CAAA,QAAA,KAAA,KAAA,aAAA,CAAA,IARA;AAUA;;AACA,aAAA,KAAA;AACA,KAvHA;AAwHA,IAAA,iBAxHA,+BAwHA;AACA,aACA,CAAA,aAAA,CAAA,OAAA,CAAA,KAAA,YAAA,CAAA,IACA,KAAA,gBAAA,CAAA,QAAA,KAAA,KAAA,aAAA,CAAA,SAFA;AAIA,KA7HA;AA8HA,IAAA,iBA9HA,+BA8HA;AACA,UAAA,kBAAA,GAAA,KAAA,SAAA,KAAA,EAAA,IAAA,KAAA,YAAA;;AAEA,UAAA,KAAA,YAAA,EAAA;AACA,YAAA,KAAA,YAAA,KAAA,KAAA,YAAA,EAAA;AACA,iBAAA,IAAA;AACA;;AACA,eAAA,KAAA,eAAA,KAAA,EAAA,IAAA,KAAA,gBAAA;AACA;;AACA,UAAA,KAAA,iBAAA,EAAA;AACA,YACA,KAAA,YAAA,KAAA,KAAA,YAAA,IACA,aAAA,CAAA,OAAA,CAAA,KAAA,YAAA,CAFA,EAGA;AACA,cAAA,kBAAA,GACA,KAAA,aAAA,KAAA,EAAA,IAAA,KAAA,kBADA;AAEA,iBAAA,kBAAA,IAAA,kBAAA;AACA;;AACA,eAAA,aAAA,CAAA,YAAA,CACA,KAAA,aADA,EAEA,KAAA,YAFA,CAAA;AAIA;;AAEA,aAAA,kBAAA;AACA,KAvJA;AAwJA,IAAA,SAxJA,uBAwJA;AACA,UACA,aAAA,CAAA,OAAA,CAAA,KAAA,YAAA,KACA,KAAA,YAAA,KAAA,KAAA,YAFA,EAGA;AACA,YAAA,UAAA,GAAA,KAAA,IAAA,CAAA,iBAAA,CACA,KAAA,YADA,EAEA,KAAA,SAFA,CAAA;AAKA,eAAA,IAAA,SAAA,CAAA,KAAA,aAAA,CAAA,KAAA,YAAA,CAAA,EAAA,GAAA,CACA,IAAA,SAAA,CAAA,UAAA,CADA,CAAA;AAGA,OAZA,MAYA,IAAA,KAAA,YAAA,KAAA,KAAA,YAAA,EAAA;AACA,YAAA,WAAA,GAAA,KAAA,IAAA,CAAA,iBAAA,CACA,KAAA,YADA,EAEA,KAAA,SAFA,CAAA;;AAIA,eAAA,IAAA,SAAA,CAAA,KAAA,OAAA,CAAA,OAAA,EAAA,EAAA,CACA,IAAA,SAAA,CAAA,WAAA,CADA,CAAA;AAGA;;AACA,aAAA,IAAA;AACA,KA/KA;AAgLA,IAAA,iBAhLA,+BAgLA;AACA,aAAA,KAAA,YAAA,IAAA,KAAA,YAAA,KAAA,KAAA,YAAA,GACA,KAAA,cADA,GAEA,KAAA,eAFA;AAGA;AApLA,IA1HA;AAgTA,EAAA,KAAA,wCACA,wBADA,iCACA;AACA,SAAA,IAAA,CAAA,aAAA,CAAA,KAAA,OAAA,CAAA,IAAA,CAAA,IAAA;AACA,GAHA,2BAIA,0BAJA,qCAIA;AAAA,gCACA,KAAA,IAAA,CAAA,oBADA;AAAA,QACA,OADA,yBACA,OADA;AAAA,QACA,SADA,yBACA,SADA;AAEA,SAAA,OAAA,GAAA,OAAA;AACA,SAAA,SAAA,GAAA,SAAA;AACA,GARA,2BASA,wBATA,mCASA;AAAA;;AACA,SAAA,iBAAA,GAAA,KAAA,IAAA,CAAA,iBAAA;;AADA,gCAEA,KAAA,IAAA,CAAA,0BAAA,EAFA;AAAA,QAEA,OAFA,yBAEA,OAFA;AAAA,QAEA,SAFA,yBAEA,SAFA;;AAGA,SAAA,OAAA,GAAA,OAAA;AACA,SAAA,SAAA,GAAA,SAAA;AACA,SAAA,YAAA,GAAA,mBAAA,oBACA,KAAA,YADA,GAEA,KAAA,SAFA,CAAA;AAIA,SAAA,kBAAA,CACA,KAAA,YADA,EAEA,KAAA,UAFA,EAGA,KAAA,SAHA,EAIA,MAJA;;AAMA,QAAA,KAAA,QAAA,IAAA,KAAA,UAAA,EAAA;AACA,WAAA,KAAA,CAAA,kBAAA,EAAA,YAAA;AACA,YAAA,MAAA,CAAA,gBAAA,GAAA,CAAA,EAAA;AACA,UAAA,MAAA,CAAA,OAAA,GAAA,MAAA,CAAA,gBAAA;AACA,UAAA,MAAA,CAAA,SAAA,GAAA,MAAA,CAAA,IAAA,CAAA,kBAAA,CACA,MAAA,CAAA,OADA,EAEA,MAAA,CAAA,QAFA,EAGA,MAAA,CAAA,YAHA,CAAA;AAKA,SAPA,MAOA,IAAA,MAAA,CAAA,kBAAA,GAAA,CAAA,EAAA;AACA,UAAA,MAAA,CAAA,SAAA,GAAA,MAAA,CAAA,kBAAA;AACA,UAAA,MAAA,CAAA,OAAA,GAAA,MAAA,CAAA,IAAA,CAAA,gBAAA,CACA,MAAA,CAAA,SADA,EAEA,MAAA,CAAA,QAFA,EAGA,MAAA,CAAA,UAHA,CAAA;AAKA;AACA,OAhBA;AAiBA;AACA,GA3CA,uDA4CA,MA5CA,EA4CA;AACA,SAAA,YAAA,GAAA,EAAA;AACA,SAAA,iBAAA,GAAA,KAAA;AACA,SAAA,WAAA,GAAA,KAAA;AACA,SAAA,IAAA,GAAA,IAAA,aAAA,CAAA,SAAA,EAAA;AACA,MAAA,OAAA,EAAA,MAAA,CAAA,IAAA,CAAA,IADA;AAEA,MAAA,IAAA,EAAA,KAAA;AAFA,KAAA,CAAA;AAIA,GApDA,UAhTA;AAsWA,EAAA,OAtWA,qBAsWA;AAAA;;AACA,QAAA,KAAA,MAAA,EAAA;AAAA,mCACA,KAAA,IAAA,CAAA,oBADA;AAAA,UACA,OADA,0BACA,OADA;AAAA,UACA,SADA,0BACA,SADA;AAEA,WAAA,OAAA,GAAA,OAAA;AACA,WAAA,SAAA,GAAA,SAAA;AACA,WAAA,cAAA,GAAA,KAAA,OAAA,CAAA,OAAA;AACA,WAAA,sBAAA,GAAA,KAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA,QAAA,CACA,KAAA,cADA,EAEA,GAFA,CAAA;AAIA,WAAA,0BAAA,GAAA,KAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA,QAAA,CACA,KAAA,kBADA,EAEA,IAFA,CAAA;AAKA,WAAA,KAAA,CAAA,KAAA,CAAA,GAAA,CAAA,OAAA,EAAA,YAAA;AACA,QAAA,MAAA,CAAA,UAAA,GAAA,IAAA;;AACA,YAAA,MAAA,CAAA,QAAA,EAAA;AACA,UAAA,MAAA,CAAA,SAAA,GAAA,MAAA,CAAA,WAAA,KAAA,EAAA,GAAA,MAAA,CAAA,WAAA,GAAA,EAAA;AACA,UAAA,MAAA,CAAA,YAAA,GAAA,MAAA,CAAA,YAAA,CAAA,MAAA;AACA,UAAA,MAAA,CAAA,UAAA,GAAA,MAAA,CAAA,UAAA,CAAA,MAAA;AACA,UAAA,MAAA,CAAA,YAAA,GAAA,MAAA,CAAA,YAAA;AACA,UAAA,MAAA,CAAA,UAAA,GAAA,MAAA,CAAA,UAAA;;AAEA,cAAA,WAAA,CAAA,MAAA,CAAA,gBAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,EAAA;AACA,YAAA,MAAA,CAAA,kBAAA,CACA,MAAA,CAAA,YAAA,CAAA,MADA,EAEA,MAAA,CAAA,UAAA,CAAA,MAFA,EAGA,MAAA,CAAA,gBAHA,EAIA,IAJA;;AAOA,YAAA,MAAA,CAAA,aAAA,GAAA,IAAA;AACA,YAAA,MAAA,CAAA,OAAA,GAAA,MAAA,CAAA,gBAAA;;AACA,YAAA,MAAA,CAAA,aAAA,CAAA,IAAA;AACA,WAXA,MAWA;AACA,YAAA,MAAA,CAAA,kBAAA,CACA,MAAA,CAAA,YAAA,CAAA,MADA,EAEA,MAAA,CAAA,UAAA,CAAA,MAFA,EAGA,MAAA,CAAA,kBAHA,EAIA,MAJA;;AAMA,YAAA,MAAA,CAAA,OAAA,GAAA,CAAA;;AACA,YAAA,MAAA,CAAA,aAAA,CAAA,MAAA;AACA;AACA;AACA,OA/BA;AAiCA,WAAA,KAAA,CAAA,KAAA,CAAA,GAAA,CAAA,MAAA,EAAA,YAAA;AACA,QAAA,MAAA,CAAA,UAAA,GAAA,KAAA;AACA,OAFA;AAGA;AACA,GA1ZA;AA2ZA,EAAA,OAAA,EAAA;AACA,IAAA,KADA,mBACA;AACA,WAAA,kBAAA,CACA,KAAA,YADA,EAEA,KAAA,UAFA,EAGA,KAAA,SAHA,EAIA,MAJA;AAMA,WAAA,cAAA,GAAA,KAAA;AACA,WAAA,YAAA,GAAA,IAAA;AACA,WAAA,mBAAA,GAAA,KAAA;AACA,WAAA,YAAA,GAAA,KAAA;AACA,WAAA,mBAAA,GAAA,KAAA;AACA,WAAA,cAAA,GAAA,KAAA;AACA,KAdA;AAeA,IAAA,cAfA,4BAeA;AACA,UAAA,CAAA,KAAA,QAAA,EAAA;AACA,aAAA,mBAAA,GAAA,IAAA;AACA,YAAA,MAAA,GAAA,KAAA,OAAA;AACA,aAAA,YAAA,GAAA,KAAA,eAAA,CAAA,EAAA,CAAA,MAAA;AACA,aAAA,UAAA,GAAA,KAAA,eAAA,CAAA,IAAA,CAAA,MAAA;AACA,aAAA,YAAA,GAAA,KAAA,eAAA,CAAA,EAAA;AACA,aAAA,UAAA,GAAA,KAAA,eAAA,CAAA,IAAA;AACA,aAAA,kBAAA,CACA,KAAA,YADA,EAEA,KAAA,UAFA,EAGA,MAHA,EAIA,MAJA;AAMA,aAAA,mBAAA,GAAA,KAAA;AACA;AACA,KA/BA;AAgCA,IAAA,mBAhCA,+BAgCA,QAhCA,EAgCA;AACA,WAAA,gBAAA,GAAA,KAAA,YAAA,CAAA,IAAA,CAAA,UAAA,KAAA,EAAA;AACA,eAAA,KAAA,CAAA,QAAA,KAAA,QAAA;AACA,OAFA,CAAA;AAGA,WAAA,cAAA,CAAA,MAAA;AACA,KArCA;AAsCA,IAAA,YAtCA,wBAsCA,OAtCA,EAsCA;AACA,WAAA,SAAA,GAAA,OAAA;AACA,KAxCA;AAyCA,IAAA,gBAzCA,4BAyCA,OAzCA,EAyCA;AACA,WAAA,aAAA,GAAA,OAAA;AACA,KA3CA;AA4CA,IAAA,kBA5CA,8BA4CA,OA5CA,EA4CA;AACA,WAAA,eAAA,GAAA,OAAA;AACA,KA9CA;AA+CA,IAAA,OA/CA,qBA+CA;AACA,WAAA,SAAA,GAAA,KAAA,IAAA,CAAA,kBAAA,CACA,KAAA,YADA,EAEA,KAAA,aAAA,CAAA,KAAA,YAAA,CAFA,CAAA;AAIA,WAAA,aAAA,CAAA,MAAA;AACA,KArDA;AAsDA,IAAA,eAtDA,2BAsDA,KAtDA,EAsDA;AAAA,UAAA,GAAA,uEAAA,MAAA;AACA,WAAA,eAAA,CAAA,IAAA,GAAA,KAAA;AACA,WAAA,YAAA,GAAA,KAAA,CAAA,MAAA;AACA,WAAA,UAAA,CAAA,KAAA,YAAA;AACA,WAAA,OAAA,GAAA,KAAA,IAAA,CAAA,oBAAA,CAAA,KAAA,CAAA;AACA,WAAA,kBAAA,CACA,KAAA,YADA,EAEA,KAAA,UAFA,EAGA,KAAA,SAHA,EAIA,GAJA;AAMA,KAjEA;AAkEA,IAAA,aAlEA,yBAkEA,KAlEA,EAkEA;AAAA,UAAA,GAAA,uEAAA,IAAA;AACA,WAAA,eAAA,CAAA,EAAA,GAAA,KAAA;AACA,WAAA,UAAA,GAAA,KAAA,CAAA,MAAA;AACA,WAAA,SAAA,GAAA,KAAA,IAAA,CAAA,sBAAA,CAAA,KAAA,CAAA;AACA,WAAA,kBAAA,CACA,KAAA,YADA,EAEA,KAAA,UAFA,EAGA,KAAA,SAHA,EAIA,GAJA;AAMA,KA5EA;AA6EA,IAAA,UA7EA;AAAA;AAAA;AAAA,+CA6EA,QA7EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBA8EA,aAAA,CAAA,OAAA,CAAA,QAAA,KAAA,QAAA,KAAA,KAAA,YA9EA;AAAA;AAAA;AAAA;;AAAA;AAAA,uBA+EA,IAAA,KAAA,IAAA,CAAA,GAAA,CAAA,QAAA,CACA,KADA,EAEA,KAAA,IAAA,CAAA,eAAA,CAAA,QAAA,CAFA,EAGA,OAHA,CAIA,SAJA,CAIA,KAAA,cAJA,EAKA,IALA,EA/EA;;AAAA;AA+EA,gBAAA,OA/EA;AAsFA,qBAAA,IAAA,CAAA,KAAA,aAAA,EAAA,QAAA,EAAA,OAAA;;AAtFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAyFA,IAAA,aAzFA,yBAyFA,SAzFA,EAyFA;AACA,UACA,YAAA,CAAA,KAAA,SAAA,CAAA,IAAA,SAAA,KAAA,MAAA,IACA,YAAA,CAAA,KAAA,OAAA,CAAA,IAAA,SAAA,KAAA,IAFA,EAGA;AACA,YACA,KAAA,IAAA,CAAA,WAAA,CAAA,KAAA,aAAA,CAAA,OAAA,EAAA,UAAA,CAAA,IAAA,CACA,KAAA,YADA,CADA,EAIA;AACA,eAAA,sBAAA,CAAA,KAAA,aAAA,CAAA,OAAA,GAAA,SAAA;AACA,SANA,MAMA;AACA,eAAA,aAAA,GAAA,KAAA;AACA,eAAA,sBAAA,CAAA,SAAA;AACA,cAAA,OAAA,GAAA,KAAA,YAAA;AACA,cAAA,KAAA,GAAA,KAAA,UAAA;AACA,cAAA,OAAA,GAAA,KAAA,SAAA;AACA,eAAA,0BAAA,CAAA,OAAA,EAAA,KAAA,EAAA,OAAA,EAAA,SAAA;AACA;AACA;AACA,KA7GA;AA8GA,IAAA,cA9GA;AAAA;AAAA;AAAA,gDA8GA,KA9GA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,qBA+GA,KAAA,aA/GA;AAAA;AAAA;AAAA;;AAgHA,qBAAA,aAAA,GAAA,KAAA;AAhHA;;AAAA;AAAA,+BAoHA,KApHA;AAAA,kDAqHA,IArHA,wBA4HA,MA5HA,kCAmIA,KAAA,aAAA,CAAA,OAnIA,0CAmKA,KAAA,aAAA,CAAA,OAnKA;AAAA;;AAAA;AAsHA,qBAAA,SAAA,GAAA,KAAA,IAAA,CAAA,kBAAA,CACA,KAAA,OADA,EAEA,KAAA,QAFA,EAGA,KAAA,YAHA,CAAA;AAtHA;;AAAA;AA6HA,qBAAA,OAAA,GAAA,KAAA,IAAA,CAAA,gBAAA,CACA,KAAA,SADA,EAEA,KAAA,QAFA,EAGA,KAAA,UAHA,CAAA;AA7HA;;AAAA;AAoIA,qBAAA,aAAA,GAAA,IAAA;AACA,gBAAA,eAAA,GAAA,KAAA,IAAA,CAAA,WAAA,CAAA,KAAA,aAAA,CAAA,OAAA,CAAA;;AArIA,qBAuIA,eAAA,CAAA,QAAA,CAAA,KAAA,SAAA,EAAA,KAAA,OAAA,CAvIA;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAwIA,eAAA,CAAA,aAAA,CACA,KAAA,YADA,EAEA,KAAA,UAFA,EAGA,KAAA,OAHA,CAxIA;;AAAA;AAwIA,gBAAA,kBAxIA;AA8IA,qBAAA,SAAA,GAAA,kBAAA,CAAA,SAAA;AACA,qBAAA,OAAA,GAAA,kBAAA,CAAA,OAAA;AA/IA;AAAA;;AAAA;AAAA;AAAA,uBAiJA,eAAA,CAAA,UAAA,CACA,KAAA,YADA,EAEA,KAAA,UAFA,EAGA,EAHA,CAjJA;;AAAA;AAiJA,gBAAA,kBAjJA;AAuJA,gBAAA,IAvJA,GAuJA,IAAA,SAAA,CAAA,kBAAA,CAAA,OAAA,EACA,GADA,CACA,kBAAA,CAAA,SADA,EAEA,QAFA,CAEA,EAFA,CAvJA;AA2JA,qBAAA,SAAA,GAAA,KAAA,IAAA,CAAA,kBAAA,CACA,KAAA,OADA,EAEA,IAFA,EAGA,KAAA,YAHA,CAAA;;AA3JA;AAAA;;AAAA;AAoKA,qBAAA,aAAA,GAAA,IAAA;AACA,gBAAA,eAAA,GAAA,KAAA,IAAA,CAAA,WAAA,CAAA,KAAA,aAAA,CAAA,OAAA,CAAA;;AArKA,qBAsKA,eAAA,CAAA,QAAA,CAAA,KAAA,SAAA,EAAA,KAAA,OAAA,CAtKA;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAuKA,eAAA,CAAA,UAAA,CACA,KAAA,YADA,EAEA,KAAA,UAFA,EAGA,KAAA,SAHA,CAvKA;;AAAA;AAuKA,gBAAA,kBAvKA;AA6KA,qBAAA,SAAA,GAAA,kBAAA,CAAA,SAAA;AACA,qBAAA,OAAA,GAAA,kBAAA,CAAA,OAAA;AA9KA;AAAA;;AAAA;AAAA;AAAA,uBAgLA,eAAA,CAAA,UAAA,CACA,KAAA,YADA,EAEA,KAAA,UAFA,EAGA,EAHA,CAhLA;;AAAA;AAgLA,gBAAA,kBAhLA;AAsLA,gBAAA,KAtLA,GAsLA,IAAA,SAAA,CAAA,kBAAA,CAAA,OAAA,EACA,GADA,CACA,kBAAA,CAAA,SADA,EAEA,QAFA,CAEA,EAFA,CAtLA;AA0LA,qBAAA,OAAA,GAAA,KAAA,IAAA,CAAA,gBAAA,CAAA,KAAA,SAAA,EAAA,KAAA,CAAA;;AA1LA;AAAA;;AAAA;AA+LA,gBAAA,OAAA,GAAA,KAAA,IAAA,CAAA,gBAAA,CAAA,KAAA,SAAA,EAAA,KAAA,QAAA,CAAA;AACA,gBAAA,SAAA,GAAA,KAAA,IAAA,CAAA,kBAAA,CAAA,KAAA,OAAA,EAAA,KAAA,QAAA,CAAA;AACA,qBAAA,OAAA,GAAA,OAAA;AACA,qBAAA,SAAA,GAAA,SAAA;AAlMA;;AAAA;AAsMA,oBAAA,KAAA,OAAA,GAAA,KAAA,gBAAA,GAAA,CAAA,IAAA,KAAA,aAAA,EAAA;AACA,uBAAA,aAAA,GAAA,KAAA;AACA,uBAAA,OAAA,GAAA,KAAA,gBAAA;AACA,uBAAA,cAAA,CAAA,IAAA;AACA;;AA1MA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA4MA,IAAA,kBA5MA;AAAA;AAAA;AAAA,gDA4MA,YA5MA,EA4MA,UA5MA,EA4MA,SA5MA,EA4MA,EA5MA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,qBA6MA,KAAA,iBA7MA;AAAA;AAAA;AAAA;;AA8MA,qBAAA,WAAA,GAAA,IAAA;AACA,qBAAA,eAAA,GAAA;AAAA,kBAAA,YAAA,EAAA,YAAA;AAAA,kBAAA,UAAA,EAAA;AAAA,iBAAA;AACA,qBAAA,gBAAA,GAAA,EAAA,CAhNA,CAgNA;;AACA,qBAAA,YAAA,GAAA,EAAA;AAjNA;AAAA,uBAqNA,KAAA,IAAA,CAAA,kBAAA,CACA,YADA,EAEA,UAFA,EAGA,SAHA,EAIA,KAAA,OAJA,CArNA;;AAAA;AAAA;AAmNA,gBAAA,cAnNA,QAmNA,cAnNA;AAoNA,gBAAA,WApNA,QAoNA,WApNA;AA2NA,qBAAA,cAAA,GAAA,cAAA;AA3NA;AAAA,uBA4NA,OAAA,CAAA,GAAA,CACA,WAAA,CAAA,GAAA,CAAA,UAAA,IAAA;AAAA,yBACA,IAAA,CAAA,YAAA,EAAA,UAAA,EAAA,SAAA,EAAA,MAAA,CAAA,OAAA,CADA;AAAA,iBAAA,CADA,CA5NA;;AAAA;AA4NA,gBAAA,OA5NA;AAiOA,qBAAA,WAAA,GAAA,KAAA;;AACA,oBACA,OAAA,CAAA,KAAA,CACA,UAAA,KAAA;AAAA,yBACA,KAAA,CAAA,YAAA,KAAA,MAAA,CAAA,YAAA,IACA,KAAA,CAAA,UAAA,KAAA,MAAA,CAAA,UAFA;AAAA,iBADA,CADA,EAMA;AACA,uBAAA,YAAA,GAAA,uBAAA,CACA,OAAA,CAAA,GAAA,CAAA,UAAA,KAAA,EAAA;AACA,wBAAA,CAAA,KAAA,CAAA,IAAA,GAAA,CAAA,EAAA;AACA,6BAAA;AACA,wBAAA,QAAA,EAAA,KAAA,CAAA,QADA;AAEA,wBAAA,YAAA,EAAA,YAFA;AAGA,wBAAA,SAAA,EAAA,MAAA,CAAA,SAHA;AAIA,wBAAA,UAAA,EAAA,UAJA;AAKA,wBAAA,IAAA,EAAA,CAAA,KAAA,CAAA,IALA;AAMA,wBAAA,QAAA,EAAA,KAAA,CAAA,QAAA,IAAA,CANA;AAOA,wBAAA,QAAA,EAAA,KAAA,CAAA,QAAA,IAAA,CAPA;AAQA,wBAAA,iBAAA,EAAA,2BAAA,UAAA,EAAA;AACA,8BAAA,IAAA,GAAA,IAAA,SAAA,CAAA,KAAA,CAAA,IAAA,CAAA;AACA,iCAAA,IAAA,SAAA,CAAA,UAAA,EACA,KADA,CACA,IADA,EAEA,OAFA,CAEA,CAFA,EAGA,QAHA,CAGA,EAHA,CAAA;AAIA;AAdA,uBAAA;AAgBA;AACA,mBAnBA,CADA,EAqBA,SArBA,CAAA;AAuBA,uBAAA,KAAA,CAAA,kBAAA;AACA,uBAAA,cAAA,CAAA,EAAA;AACA;;AAlQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAqQA,IAAA,yBArQA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,qBAuQA,KAAA,SAvQA;AAAA;AAAA;AAAA;;AAwQA,qBAAA,cAAA,GAAA,IAAA;AACA,gBAAA,eAzQA,GAyQA,KAAA,YAAA,CAAA,IAAA,CAAA,UAAA,KAAA,EAAA;AACA,yBAAA,KAAA,CAAA,QAAA,KAAA,MAAA,CAAA,gBAAA,CAAA,QAAA;AACA,iBAFA,CAzQA;AA4QA,gBAAA,WA5QA,GA4QA;AACA,kBAAA,eAAA,EAAA,eADA;AAEA,kBAAA,SAAA,EAAA,KAAA,SAFA;AAGA,kBAAA,OAAA,EAAA,KAAA,OAHA;AAIA,kBAAA,SAAA,EAAA,KAAA,SAAA,IAAA,KAAA,cAJA;AAKA,kBAAA,WAAA,EAAA,KAAA,cALA;AAMA,kBAAA,aAAA,EAAA,aAAA,CAAA,OAAA,CAAA,eAAA,CAAA,YAAA,IACA,KAAA,cADA,GAEA,KAAA,aARA;AASA,kBAAA,eAAA,EACA,KAAA,YAAA,IAAA,KAAA,YAAA,KAAA,KAAA,YAAA,GACA,KAAA,cADA,GAEA,KAAA;AAZA,iBA5QA;AAAA;AAAA,uBA0RA,KAAA,IAAA,CAAA,SAAA,CAAA,WAAA,CA1RA;;AAAA;AA0RA,qBAAA,WA1RA;AA2RA,qBAAA,cAAA,GAAA,KAAA;;AAEA,oBAAA,KAAA,WAAA,CAAA,YAAA,EAAA;AACA,uBAAA,cAAA,GAAA,IAAA;;AACA,uBAAA,kBAAA,GAAA,UAAA,eAAA,EAAA;AACA,oBAAA,MAAA,CAAA,cAAA,GAAA,KAAA;AACA,oBAAA,MAAA,CAAA,WAAA,GAAA,eAAA;;AACA,oBAAA,MAAA,CAAA,gBAAA,CAAA,MAAA,CAAA,WAAA;AACA,mBAJA;AAKA,iBAPA,MAOA;AACA,uBAAA,gBAAA,CAAA,KAAA,WAAA;AACA;;AAtSA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA,sBA0SA,aAAA,OAAA,KAAA,OA1SA;AAAA;AAAA;AAAA;;AA2SA,qBAAA,cAAA,GAAA,KAAA;AA3SA;;AAAA;AA8SA,qBAAA,KAAA,CAAA,gBAAA,CAAA,KAAA,CAAA,gBAAA,CAAA,IAAA;AACA,qBAAA,KAAA,CAAA,UAAA,CAAA,KAAA,CAAA,gBAAA,CAAA,IAAA;AACA,qBAAA,cAAA,GAAA,KAAA;AACA,gBAAA,WAAA,cAAA;AACA,gBAAA,KAAA,CAAA,eAAA,eAAA,KAAA;;AAlTA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAqTA,IAAA,gBArTA,4BAqTA,WArTA,EAqTA;AACA,UAAA,WAAA,CAAA,qBAAA,IAAA,WAAA,CAAA,UAAA,EAAA;AACA,aAAA,KAAA,CAAA,gBAAA,CAAA,KAAA,CAAA,gBAAA,CAAA,IAAA;AACA,OAFA,MAEA,IAAA,WAAA,CAAA,qBAAA,IAAA,CAAA,WAAA,CAAA,UAAA,EAAA;AACA,aAAA,KAAA,CAAA,UAAA,CAAA,KAAA,CAAA,gBAAA,CAAA,IAAA;AACA,OAFA,MAEA;AACA,cAAA,KAAA,CAAA,wDAAA,CAAA;AACA;AACA,KA7TA;AA8TA,IAAA,eA9TA,6BA8TA;AACA;AACA,WAAA,cAAA,GAAA,CAAA,KAAA,cAAA;AACA,KAjUA;AAkUA,IAAA,cAlUA,4BAkUA;AACA,WAAA,KAAA,CAAA,KAAA,CAAA,IAAA;AACA,WAAA,KAAA;AACA;AArUA;AA3ZA,CAAA","sourcesContent":["<template>\n  <div class=\"modal-container\">\n    <b-modal\n      ref=\"modal\"\n      title=\"Swap Widget\"\n      centered\n      class=\"bootstrap-modal bootstrap-modal-wide padding-40-20\"\n      hide-footer\n      static\n      lazy\n    >\n      <div class=\"swap-container\">\n        <div v-show=\"!bityExitToFiat\">\n          <swap-confirmation-modal\n            ref=\"swapConfirmation\"\n            :selected-provider=\"selectedProvider\"\n            :swap-details=\"swapDetails\"\n            :current-address=\"currentAddress\"\n            @swapStarted=\"resetSwapState\"\n          />\n\n          <swap-send-to-modal\n            ref=\"swapSendTo\"\n            :selected-provider=\"selectedProvider\"\n            :swap-details=\"swapDetails\"\n            :current-address=\"currentAddress\"\n            @swapStarted=\"resetSwapState\"\n          />\n\n          <div class=\"form-content-container\">\n            <div class=\"send-form\">\n              <div class=\"form-block amount-to-address\">\n                <div class=\"amount\">\n                  <div class=\"title title-and-copy\">\n                    <h4>{{ $t('common.from') }}</h4>\n                    <p\n                      v-if=\"tokenBalances[fromCurrency] > 0\"\n                      class=\"all-button prevent-user-select\"\n                      @click=\"swapAll\"\n                    >\n                      {{ $t('common.totalBalance') }}\n                    </p>\n                  </div>\n                  <swap-currency-picker\n                    :currencies=\"fromArray\"\n                    :override-currency=\"overrideFrom\"\n                    :from-source=\"true\"\n                    :selectable=\"!isWidget\"\n                    page=\"SwapContainerFrom\"\n                    @selectedCurrency=\"setFromCurrency\"\n                  />\n                  <div class=\"the-form amount-number\">\n                    <input\n                      v-model=\"fromValue\"\n                      type=\"number\"\n                      name\n                      value\n                      step=\"any\"\n                      placeholder=\"Deposit Amount\"\n                      @input=\"amountChanged('from')\"\n                    />\n                  </div>\n                  <div class=\"error-message-container\">\n                    <p v-if=\"fromBelowMinAllowed\">{{ fromBelowMinAllowed }}</p>\n                    <p v-if=\"!hasEnough && !fromBelowMinAllowed\">\n                      {{ $t('common.dontHaveEnough') }}\n                    </p>\n                    <p v-if=\"fromAboveMaxAllowed\">{{ fromAboveMaxAllowed }}</p>\n                  </div>\n                </div>\n                <div class=\"exchange-icon\" @click=\"flipCurrencies\">\n                  <img :src=\"images.swap\" alt />\n                </div>\n                <div class=\"amount\">\n                  <div class=\"title\">\n                    <h4>{{ $t('common.to') }}</h4>\n                  </div>\n                  <swap-currency-picker\n                    :currencies=\"toArray\"\n                    :override-currency=\"overrideTo\"\n                    :from-source=\"false\"\n                    :selectable=\"!isWidget\"\n                    page=\"SwapContainerTo\"\n                    @selectedCurrency=\"setToCurrency\"\n                  />\n                  <div class=\"the-form amount-number\">\n                    <input\n                      v-model=\"toValue\"\n                      type=\"number\"\n                      name\n                      value\n                      step=\"any\"\n                      placeholder=\"Received Amount\"\n                      @input=\"amountChanged('to')\"\n                    />\n                  </div>\n                  <div class=\"error-message-container\">\n                    <p v-if=\"toBelowMinAllowed\">{{ toBelowMinAllowed }}</p>\n                    <p v-if=\"toAboveMaxAllowed\">{{ toAboveMaxAllowed }}</p>\n                  </div>\n                </div>\n              </div>\n              <!-- form-block amount-to-address -->\n            </div>\n\n            <div v-show=\"!isExitToFiat\" class=\"send-form\">\n              <div class=\"the-form gas-amount\">\n                <drop-down-address-selector\n                  :currency=\"toCurrency\"\n                  :current-address=\"currentAddress\"\n                  :copybutton=\"true\"\n                  :title=\"$t('common.toAddress')\"\n                  :pre-fill=\"true\"\n                  :pre-fill-address=\"destAddress\"\n                  @toAddress=\"setToAddress\"\n                  @validAddress=\"validAddress = $event\"\n                />\n              </div>\n              <div v-show=\"!validAddress\" class=\"error-message-container\">\n                <p>\n                  {{ $t('interface.notValidAddr', { currency: toCurrency }) }}\n                </p>\n              </div>\n            </div>\n\n            <div\n              v-show=\"isExitToFiat && fromCurrency !== baseCurrency\"\n              class=\"send-form\"\n            >\n              <div class=\"the-form gas-amount\">\n                <drop-down-address-selector\n                  :currency=\"fromCurrency\"\n                  :current-address=\"currentAddress\"\n                  :copybutton=\"true\"\n                  :title=\"$t('interface.fromAddr')\"\n                  @toAddress=\"setExitFromAddress\"\n                  @validAddress=\"validExitAddress = $event\"\n                />\n              </div>\n              <div v-show=\"!validExitAddress\" class=\"error-message-container\">\n                <p>\n                  {{\n                    $t('interface.notValidAddrSrc', { currency: fromCurrency })\n                  }}\n                </p>\n              </div>\n            </div>\n\n            <div v-show=\"showRefundAddress\" class=\"send-form\">\n              <div class=\"the-form gas-amount\">\n                <drop-down-address-selector\n                  :currency=\"fromCurrency\"\n                  :current-address=\"currentAddress\"\n                  :copybutton=\"true\"\n                  :title=\"$t('interface.refund', { currency: fromCurrency })\"\n                  @toAddress=\"setRefundAddress\"\n                  @validAddress=\"validRefundAddress = $event\"\n                />\n              </div>\n              <div v-show=\"!validRefundAddress\" class=\"error-message-container\">\n                <p>\n                  {{ $t('interface.notValidAddr', { currency: fromCurrency }) }}\n                </p>\n              </div>\n            </div>\n\n            <div class=\"send-form\">\n              <div class=\"title-container\">\n                <div class=\"title title-and-copy\">\n                  <h4>{{ $t('interface.providers') }}</h4>\n                </div>\n              </div>\n              <providers-radio-selector\n                :loading-provider-error=\"loadingError\"\n                :loading-provider-rates=\"!haveProviderRates\"\n                :provider-data=\"providerList\"\n                :from-value=\"+fromValue\"\n                :to-value=\"+toValue\"\n                :no-providers-pair=\"noProvidersPair\"\n                :loading-data=\"loadingData\"\n                :providers-found=\"providersFound\"\n                :provider-selected=\"selectedProvider\"\n                :switch-currency-order=\"switchCurrencyOrder\"\n                :all-supported-providers=\"supportedProviders\"\n                @selectedProvider=\"setSelectedProvider\"\n              />\n            </div>\n\n            <div class=\"submit-button-container\">\n              <div\n                v-show=\"finalizingSwap\"\n                class=\"disabled submit-button large-round-button-green-filled clickable\"\n              >\n                <i class=\"fa fa-spinner fa-spin\" />\n                {{ $t('interface.swapButtonLoading') }}\n              </div>\n              <div\n                v-show=\"!finalizingSwap\"\n                :class=\"[\n                  validSwap ? '' : 'disabled',\n                  'submit-button large-round-button-green-filled clickable'\n                ]\"\n                @click=\"swapConfirmationModalOpen\"\n              >\n                {{ $t('common.continue') }}\n                <i class=\"fa fa-long-arrow-right\" aria-hidden=\"true\" />\n              </div>\n              <interface-bottom-text\n                :link-text=\"$t('interface.helpCenter')\"\n                :question=\"$t('interface.haveIssues')\"\n                link=\"https://kb.myetherwallet.com\"\n              />\n            </div>\n          </div>\n        </div>\n        <swap-exit-to-fiat\n          v-if=\"bityExitToFiat\"\n          :swap-details=\"swapDetails\"\n          :exit-from-address=\"exitSourceAddress\"\n          :exit-to-fiat-callback=\"exitToFiatCallback\"\n          @backButtonClick=\"exitToFiatAbort\"\n        ></swap-exit-to-fiat>\n      </div>\n    </b-modal>\n  </div>\n</template>\n<script>\nimport BigNumber from 'bignumber.js';\nimport debug from 'debug';\nimport { mapState } from 'vuex';\n\nimport { Toast } from '@/helpers';\nimport ProvidersRadioSelector from '../ProvidersRadioSelector';\nimport DropDownAddressSelector from '../SwapAddressSelector';\nimport InterfaceBottomText from '@/components/InterfaceBottomText';\nimport InterfaceContainerTitle from '../../../../components/InterfaceContainerTitle';\nimport swapIcon from '@/assets/images/icons/swap-widget.svg';\nimport ImageKybernetowrk from '@/assets/images/etc/kybernetwork.png';\nimport ImageBity from '@/assets/images/etc/bity.png';\nimport ImageVisaMaster from '@/assets/images/etc/visamaster.png';\n\nimport SwapCurrencyPicker from '../SwapCurrencyPicker';\nimport SwapConfirmationModal from '../SwapConfirmationModal';\nimport SwapExitToFiat from '../SwapExitToFiat';\nimport SwapSendToModal from '../SwapSendToModal';\n\nimport {\n  SwapProviders,\n  providers,\n  bestProviderForQuantity,\n  bestRateForQuantity,\n  isValidEntry,\n  providerNames,\n  supportedProviders,\n  BASE_CURRENCY,\n  fiat,\n  MIN_SWAP_AMOUNT,\n  ERC20\n} from '@/partners';\n\nconst errorLogger = debug('v5:swapContainer');\nimport SwapSendForm from '../SwapExitToFiat';\n\nconst toBigNumber = num => {\n  return new BigNumber(num);\n};\n\nexport default {\n  components: {\n    'interface-bottom-text': InterfaceBottomText,\n    'interface-container-title': InterfaceContainerTitle,\n    'swap-currency-picker': SwapCurrencyPicker,\n    'drop-down-address-selector': DropDownAddressSelector,\n    'providers-radio-selector': ProvidersRadioSelector,\n    'swap-confirmation-modal': SwapConfirmationModal,\n    'swap-exit-to-fiat': SwapExitToFiat,\n    'swap-send-form': SwapSendForm,\n    'swap-send-to-modal': SwapSendToModal\n  },\n  props: {\n    tokensWithBalance: {\n      type: Array,\n      default: function() {\n        return [];\n      }\n    },\n    suppliedFrom: {\n      type: Object,\n      default: function() {\n        return {\n          symbol: 'ETH',\n          name: 'Ethereum'\n        };\n      }\n    },\n    suppliedTo: {\n      type: Object,\n      default: function() {\n        return {\n          symbol: 'BTC',\n          name: 'Bitcoin'\n        };\n      }\n    },\n    suppliedToAmount: {\n      type: Number,\n      default: 0\n    },\n    suppliedFromAmount: {\n      type: Number,\n      default: 0\n    },\n    destAddress: {\n      type: String,\n      default: ''\n    },\n    isWidget: {\n      type: Boolean,\n      default: true\n    }\n  },\n  data() {\n    return {\n      baseCurrency: BASE_CURRENCY,\n      toAddress: '',\n      currentAddress: '',\n      refundAddress: '',\n      exitFromAddress: '',\n      fromCurrency: 'ETH',\n      toCurrency: 'ETH',\n      displayToValue: 1,\n      displayFromValue: 1,\n      fromValue: 1,\n      toValue: 1,\n      invalidFrom: 'none',\n      lastBestRate: 0,\n      selectedProvider: {},\n      swapDetails: {},\n      currencyDetails: {},\n      swap: new SwapProviders(\n        providers,\n        {\n          network: this.$store.state.network.type.name,\n          web3: this.$store.state.web3,\n          getRateForUnit: false\n        },\n        {\n          tokensWithBalance: this.tokensWithBalance,\n          overrideDecimals: true,\n          online: this.$store.state.online\n        }\n      ),\n      images: {\n        kybernetowrk: ImageKybernetowrk,\n        bity: ImageBity,\n        visaMaster: ImageVisaMaster,\n        swap: swapIcon\n      },\n      toArray: [],\n      fromArray: [],\n      providerData: [],\n      tokenBalances: {},\n      providerRatesRecieved: [],\n      noProvidersPair: {},\n      providersFound: [],\n      tempStatuses: [],\n      overrideFrom: {},\n      overrideTo: {},\n      providerNames: providerNames,\n      supportedProviders: supportedProviders,\n      fiatCurrenciesArray: fiat.map(entry => entry.symbol),\n      finalizingSwap: false,\n      validAddress: true,\n      validRefundAddress: true,\n      validExitAddress: true,\n      ratesRetrived: false,\n      issueRecievingRates: false,\n      loadingData: true,\n      haveProviderRates: false,\n      loadingError: false,\n      switchCurrencyOrder: false,\n      bityExitToFiat: false,\n      exitToFiatCallback: () => {},\n      debounceUpdateEstimate: {},\n      debounceDoThing: {},\n      widgetOpen: false,\n      loadingWidget: false\n    };\n  },\n  computed: {\n    ...mapState(['account', 'ens', 'gasPrice', 'web3', 'network', 'online']),\n    bestRate() {\n      try {\n        if (this.providerData.length > 0) {\n          if (this.selectedProvider.provider) {\n            return this.providerList.find(entry => {\n              return entry.provider === this.selectedProvider.provider;\n            }).rate;\n          }\n          return bestRateForQuantity([...this.providerList], this.fromValue);\n        }\n        return this.lastBestRate;\n      } catch (e) {\n        errorLogger(e);\n      }\n    },\n    fromBelowMinAllowed() {\n      if (new BigNumber(MIN_SWAP_AMOUNT).gt(new BigNumber(this.fromValue)))\n        return `${this.$t('interface.belowMin')} ${MIN_SWAP_AMOUNT}`;\n      if (\n        new BigNumber(this.selectedProvider.minValue).gt(\n          new BigNumber(this.fromValue)\n        )\n      )\n        return this.$t('interface.belowMin', {\n          value: toBigNumber(this.selectedProvider.maxValue).toFixed(6),\n          currency: this.fromCurrency\n        });\n      return false;\n    },\n    fromAboveMaxAllowed() {\n      if (this.selectedProvider.provider === this.providerNames.bity) {\n        if (this.checkBityMax) {\n          return this.$t('interface.aboveMax', {\n            value: toBigNumber(this.selectedProvider.maxValue).toFixed(6),\n            currency: this.fromCurrency\n          });\n        }\n        return false;\n      } else if (\n        toBigNumber(this.fromValue).gt(\n          toBigNumber(this.selectedProvider.maxValue)\n        ) &&\n        toBigNumber(this.selectedProvider.maxValue).gt(toBigNumber(0))\n      )\n        return this.$t('interface.aboveMaxSwap', {\n          value: toBigNumber(this.selectedProvider.maxValue).toFixed(6),\n          currency: this.fromCurrency\n        });\n      return false;\n    },\n    toBelowMinAllowed() {\n      if (this.checkBityMin) return this.$t('interface.belowMinGeneral');\n      if (toBigNumber(0).gte(toBigNumber(this.toValue)))\n        return this.$t('interface.belowMinGeneral');\n      return false;\n    },\n    toAboveMaxAllowed() {\n      if (this.checkBityMax) return this.$t('interface.aboveMaxGeneral');\n      return false;\n    },\n    providerList() {\n      if (this.providerData.length > 0) {\n        return bestProviderForQuantity([...this.providerData], this.fromValue);\n      }\n      return [];\n    },\n    isExitToFiat() {\n      return this.fiatCurrenciesArray.includes(this.toCurrency);\n    },\n    validSwap() {\n      // initial chack.  will provide an alert on the next screen if no address is provided\n      const canExit =\n        this.isExitToFiat && this.fromCurrency !== this.baseCurrency\n          ? this.exitFromAddress !== ''\n          : true;\n      return (\n        this.hasEnough &&\n        (this.toAddress !== '' || canExit) &&\n        this.allAddressesValid &&\n        toBigNumber(this.selectedProvider.minValue).lte(\n          toBigNumber(this.fromValue)\n        ) &&\n        (toBigNumber(this.fromValue).lte(\n          toBigNumber(this.selectedProvider.maxValue)\n        ) ||\n          this.selectedProvider.maxValue === 0)\n      );\n    },\n    checkBityMin() {\n      if (this.swap.isProvider(this.providerNames.bity)) {\n        return (\n          !this.swap\n            .getProvider(this.providerNames.bity)\n            .minCheck(\n              this.fromCurrency,\n              this.fromValue,\n              this.toCurrency,\n              this.toValue\n            ) && this.selectedProvider.provider === this.providerNames.bity\n        );\n      }\n      return false;\n    },\n    checkBityMax() {\n      if (this.swap.isProvider(this.providerNames.bity)) {\n        return (\n          !this.swap\n            .getProvider(this.providerNames.bity)\n            .maxCheck(\n              this.fromCurrency,\n              this.fromValue,\n              this.toCurrency,\n              this.toValue\n            ) && this.selectedProvider.provider === this.providerNames.bity\n        );\n      }\n      return false;\n    },\n    showRefundAddress() {\n      return (\n        !SwapProviders.isToken(this.fromCurrency) &&\n        this.selectedProvider.provider === this.providerNames.changelly\n      );\n    },\n    allAddressesValid() {\n      const validBaseToAddress = this.toAddress !== '' && this.validAddress;\n\n      if (this.isExitToFiat) {\n        if (this.fromCurrency === this.baseCurrency) {\n          return true;\n        }\n        return this.exitFromAddress !== '' && this.validExitAddress;\n      }\n      if (this.showRefundAddress) {\n        if (\n          this.fromCurrency === this.baseCurrency ||\n          SwapProviders.isToken(this.fromCurrency)\n        ) {\n          const validRefundAddress =\n            this.refundAddress === '' && this.validRefundAddress;\n          return validBaseToAddress && validRefundAddress;\n        }\n        return SwapProviders.checkAddress(\n          this.refundAddress,\n          this.fromCurrency\n        );\n      }\n\n      return validBaseToAddress;\n    },\n    hasEnough() {\n      if (\n        SwapProviders.isToken(this.fromCurrency) &&\n        this.fromCurrency !== this.baseCurrency\n      ) {\n        const enteredVal = this.swap.convertToTokenWei(\n          this.fromCurrency,\n          this.fromValue\n        );\n\n        return new BigNumber(this.tokenBalances[this.fromCurrency]).gte(\n          new BigNumber(enteredVal)\n        );\n      } else if (this.fromCurrency === this.baseCurrency) {\n        const enteredVal = this.swap.convertToTokenWei(\n          this.fromCurrency,\n          this.fromValue\n        );\n        return new BigNumber(this.account.balance).gt(\n          new BigNumber(enteredVal)\n        );\n      }\n      return true;\n    },\n    exitSourceAddress() {\n      return this.isExitToFiat && this.fromCurrency === this.baseCurrency\n        ? this.currentAddress\n        : this.exitFromAddress;\n    }\n  },\n  watch: {\n    ['this.network.type.name']() {\n      this.swap.updateNetwork(this.network.type.name);\n    },\n    ['swap.updateProviderRates']() {\n      const { toArray, fromArray } = this.swap.initialCurrencyLists;\n      this.toArray = toArray;\n      this.fromArray = fromArray;\n    },\n    ['swap.haveProviderRates']() {\n      this.haveProviderRates = this.swap.haveProviderRates;\n      const { toArray, fromArray } = this.swap.buildInitialCurrencyArrays();\n      this.toArray = toArray;\n      this.fromArray = fromArray;\n      this.lastBestRate = bestRateForQuantity(\n        [...this.providerList],\n        this.fromValue\n      );\n      this.updateRateEstimate(\n        this.fromCurrency,\n        this.toCurrency,\n        this.fromValue,\n        'from'\n      );\n      if (this.isWidget && this.widgetOpen) {\n        this.$once('swapRatesUpdated', () => {\n          if (this.suppliedToAmount > 0) {\n            this.toValue = this.suppliedToAmount;\n            this.fromValue = this.swap.calculateFromValue(\n              this.toValue,\n              this.bestRate,\n              this.fromCurrency\n            );\n          } else if (this.suppliedFromAmount > 0) {\n            this.fromValue = this.suppliedFromAmount;\n            this.toValue = this.swap.calculateToValue(\n              this.fromValue,\n              this.bestRate,\n              this.toCurrency\n            );\n          }\n        });\n      }\n    },\n    network(newVal) {\n      this.providerData = [];\n      this.haveProviderRates = false;\n      this.loadingData = false;\n      this.swap = new SwapProviders(providers, {\n        network: newVal.type.name,\n        web3: this.web3\n      });\n    }\n  },\n  mounted() {\n    if (this.online) {\n      const { toArray, fromArray } = this.swap.initialCurrencyLists;\n      this.toArray = toArray;\n      this.fromArray = fromArray;\n      this.currentAddress = this.account.address;\n      this.debounceUpdateEstimate = this.web3.utils._.debounce(\n        this.updateEstimate,\n        300\n      );\n      this.debounceReviseRateEstimate = this.web3.utils._.debounce(\n        this.updateRateEstimate,\n        2000\n      );\n\n      this.$refs.modal.$on('shown', () => {\n        this.widgetOpen = true;\n        if (this.isWidget) {\n          this.toAddress = this.destAddress !== '' ? this.destAddress : '';\n          this.fromCurrency = this.suppliedFrom.symbol;\n          this.toCurrency = this.suppliedTo.symbol;\n          this.overrideFrom = this.suppliedFrom;\n          this.overrideTo = this.suppliedTo;\n\n          if (toBigNumber(this.suppliedToAmount).gt(0)) {\n            this.updateRateEstimate(\n              this.suppliedFrom.symbol,\n              this.suppliedTo.symbol,\n              this.suppliedToAmount,\n              'to'\n            );\n\n            this.loadingWidget = true;\n            this.toValue = this.suppliedToAmount;\n            this.amountChanged('to');\n          } else {\n            this.updateRateEstimate(\n              this.suppliedFrom.symbol,\n              this.suppliedTo.symbol,\n              this.suppliedFromAmount,\n              'from'\n            );\n            this.toValue = 0;\n            this.amountChanged('from');\n          }\n        }\n      });\n\n      this.$refs.modal.$on('hide', () => {\n        this.widgetOpen = false;\n      });\n    }\n  },\n  methods: {\n    reset() {\n      this.updateRateEstimate(\n        this.fromCurrency,\n        this.toCurrency,\n        this.fromValue,\n        'from'\n      );\n      this.finalizingSwap = false;\n      this.validAddress = true;\n      this.issueRecievingRates = false;\n      this.loadingError = false;\n      this.switchCurrencyOrder = false;\n      this.bityExitToFiat = false;\n    },\n    flipCurrencies() {\n      if (!this.isWidget) {\n        this.switchCurrencyOrder = true;\n        const origTo = this.toValue;\n        this.fromCurrency = this.currencyDetails.to.symbol;\n        this.toCurrency = this.currencyDetails.from.symbol;\n        this.overrideFrom = this.currencyDetails.to;\n        this.overrideTo = this.currencyDetails.from;\n        this.updateRateEstimate(\n          this.fromCurrency,\n          this.toCurrency,\n          origTo,\n          'from'\n        );\n        this.switchCurrencyOrder = false;\n      }\n    },\n    setSelectedProvider(provider) {\n      this.selectedProvider = this.providerList.find(entry => {\n        return entry.provider === provider;\n      });\n      this.updateEstimate('from');\n    },\n    setToAddress(address) {\n      this.toAddress = address;\n    },\n    setRefundAddress(address) {\n      this.refundAddress = address;\n    },\n    setExitFromAddress(address) {\n      this.exitFromAddress = address;\n    },\n    swapAll() {\n      this.fromValue = this.swap.convertToTokenBase(\n        this.fromCurrency,\n        this.tokenBalances[this.fromCurrency]\n      );\n      this.amountChanged('from');\n    },\n    setFromCurrency(value, dir = 'from') {\n      this.currencyDetails.from = value;\n      this.fromCurrency = value.symbol;\n      this.getBalance(this.fromCurrency);\n      this.toArray = this.swap.setToCurrencyBuilder(value);\n      this.updateRateEstimate(\n        this.fromCurrency,\n        this.toCurrency,\n        this.fromValue,\n        dir\n      );\n    },\n    setToCurrency(value, dir = 'to') {\n      this.currencyDetails.to = value;\n      this.toCurrency = value.symbol;\n      this.fromArray = this.swap.setFromCurrencyBuilder(value);\n      this.updateRateEstimate(\n        this.fromCurrency,\n        this.toCurrency,\n        this.fromValue,\n        dir\n      );\n    },\n    async getBalance(currency) {\n      if (SwapProviders.isToken(currency) && currency !== this.baseCurrency) {\n        const balance = await new this.web3.eth.Contract(\n          ERC20,\n          this.swap.getTokenAddress(currency)\n        ).methods\n          .balanceOf(this.currentAddress)\n          .call();\n\n        this.$set(this.tokenBalances, currency, balance);\n      }\n    },\n    amountChanged(direction) {\n      if (\n        (isValidEntry(this.fromValue) && direction === 'from') ||\n        (isValidEntry(this.toValue) && direction === 'to')\n      ) {\n        if (\n          this.swap.getProvider(this.providerNames.simplex).currencies.fiat[\n            this.fromCurrency\n          ]\n        ) {\n          this.debounceUpdateEstimate(this.providerNames.simplex + direction);\n        } else {\n          this.simplexUpdate = false;\n          this.debounceUpdateEstimate(direction);\n          const fromCur = this.fromCurrency;\n          const toCur = this.toCurrency;\n          const fromVal = this.fromValue;\n          this.debounceReviseRateEstimate(fromCur, toCur, fromVal, direction);\n        }\n      }\n    },\n    async updateEstimate(input) {\n      if (this.simplexUpdate) {\n        this.simplexUpdate = false;\n        return;\n      }\n      let fromValue, toValue, simplexProvider, simplexRateDetails;\n      switch (input) {\n        case 'to':\n          this.fromValue = this.swap.calculateFromValue(\n            this.toValue,\n            this.bestRate,\n            this.fromCurrency\n          );\n          break;\n        case 'from':\n          this.toValue = this.swap.calculateToValue(\n            this.fromValue,\n            this.bestRate,\n            this.toCurrency\n          );\n          break;\n        case `${this.providerNames.simplex}to`:\n          this.simplexUpdate = true;\n          simplexProvider = this.swap.getProvider(this.providerNames.simplex);\n\n          if (simplexProvider.canQuote(this.fromValue, this.toValue)) {\n            simplexRateDetails = await simplexProvider.updateDigital(\n              this.fromCurrency,\n              this.toCurrency,\n              this.toValue\n            );\n\n            this.fromValue = simplexRateDetails.fromValue;\n            this.toValue = simplexRateDetails.toValue;\n          } else {\n            simplexRateDetails = await simplexProvider.updateFiat(\n              this.fromCurrency,\n              this.toCurrency,\n              51\n            );\n\n            const rate = new BigNumber(simplexRateDetails.toValue)\n              .div(simplexRateDetails.fromValue)\n              .toString(10);\n\n            this.fromValue = this.swap.calculateFromValue(\n              this.toValue,\n              rate,\n              this.fromCurrency\n            );\n          }\n\n          break;\n        case `${this.providerNames.simplex}from`:\n          this.simplexUpdate = true;\n          simplexProvider = this.swap.getProvider(this.providerNames.simplex);\n          if (simplexProvider.canQuote(this.fromValue, this.toValue)) {\n            simplexRateDetails = await simplexProvider.updateFiat(\n              this.fromCurrency,\n              this.toCurrency,\n              this.fromValue\n            );\n\n            this.fromValue = simplexRateDetails.fromValue;\n            this.toValue = simplexRateDetails.toValue;\n          } else {\n            simplexRateDetails = await simplexProvider.updateFiat(\n              this.fromCurrency,\n              this.toCurrency,\n              51\n            );\n\n            const rate = new BigNumber(simplexRateDetails.toValue)\n              .div(simplexRateDetails.fromValue)\n              .toString(10);\n\n            this.toValue = this.swap.calculateToValue(this.fromValue, rate);\n          }\n\n          break;\n        default:\n          toValue = this.swap.calculateToValue(this.fromValue, this.bestRate);\n          fromValue = this.swap.calculateFromValue(this.toValue, this.bestRate);\n          this.toValue = toValue;\n          this.fromValue = fromValue;\n          break;\n      }\n\n      if (this.toValue - this.suppliedToAmount > 1 && this.loadingWidget) {\n        this.loadingWidget = false;\n        this.toValue = this.suppliedToAmount;\n        this.updateEstimate('to');\n      }\n    },\n    async updateRateEstimate(fromCurrency, toCurrency, fromValue, to) {\n      if (this.haveProviderRates) {\n        this.loadingData = true;\n        this.noProvidersPair = { fromCurrency, toCurrency };\n        this.selectedProvider = {}; // Reset the selected provider when new rate pair is choosen\n        this.providerData = [];\n        const {\n          providersFound,\n          callsToMake\n        } = await this.swap.updateRateEstimate(\n          fromCurrency,\n          toCurrency,\n          fromValue,\n          this.toValue\n        );\n        this.providersFound = providersFound;\n        const results = await Promise.all(\n          callsToMake.map(func =>\n            func(fromCurrency, toCurrency, fromValue, this.toValue)\n          )\n        );\n        this.loadingData = false;\n        if (\n          results.every(\n            entry =>\n              entry.fromCurrency === this.fromCurrency &&\n              entry.toCurrency === this.toCurrency\n          )\n        ) {\n          this.providerData = bestProviderForQuantity(\n            results.map(entry => {\n              if (+entry.rate > 0) {\n                return {\n                  provider: entry.provider,\n                  fromCurrency,\n                  fromValue: this.fromValue,\n                  toCurrency,\n                  rate: +entry.rate,\n                  minValue: entry.minValue || 0,\n                  maxValue: entry.maxValue || 0,\n                  computeConversion: function(_fromValue) {\n                    const rate = new BigNumber(entry.rate);\n                    return new BigNumber(_fromValue)\n                      .times(rate)\n                      .toFixed(6)\n                      .toString(10);\n                  }\n                };\n              }\n            }),\n            fromValue\n          );\n          this.$emit('swapRatesUpdated');\n          this.updateEstimate(to);\n        }\n      }\n    },\n    async swapConfirmationModalOpen() {\n      try {\n        if (this.validSwap) {\n          this.finalizingSwap = true;\n          const providerDetails = this.providerList.find(entry => {\n            return entry.provider === this.selectedProvider.provider;\n          });\n          const swapDetails = {\n            providerDetails: providerDetails,\n            fromValue: this.fromValue,\n            toValue: this.toValue,\n            toAddress: this.toAddress || this.currentAddress,\n            fromAddress: this.currentAddress,\n            refundAddress: SwapProviders.isToken(providerDetails.fromCurrency)\n              ? this.currentAddress\n              : this.refundAddress,\n            exitFromAddress:\n              this.isExitToFiat && this.fromCurrency === this.baseCurrency\n                ? this.currentAddress\n                : this.exitFromAddress\n          };\n          this.swapDetails = await this.swap.startSwap(swapDetails);\n          this.finalizingSwap = false;\n\n          if (this.swapDetails.isExitToFiat) {\n            this.bityExitToFiat = true;\n            this.exitToFiatCallback = swapDetailsExit => {\n              this.bityExitToFiat = false;\n              this.swapDetails = swapDetailsExit;\n              this.openConfirmModal(this.swapDetails);\n            };\n          } else {\n            this.openConfirmModal(this.swapDetails);\n          }\n        }\n      } catch (e) {\n        //abort (empty response from provider or failure to finalize details)\n        if (e.message === 'abort') {\n          this.finalizingSwap = false;\n          return;\n        }\n        this.$refs.swapConfirmation.$refs.swapconfirmation.hide();\n        this.$refs.swapSendTo.$refs.swapconfirmation.hide();\n        this.finalizingSwap = false;\n        errorLogger(e);\n        Toast.responseHandler(e, false);\n      }\n    },\n    openConfirmModal(swapDetails) {\n      if (swapDetails.dataForInitialization && swapDetails.maybeToken) {\n        this.$refs.swapConfirmation.$refs.swapconfirmation.show();\n      } else if (swapDetails.dataForInitialization && !swapDetails.maybeToken) {\n        this.$refs.swapSendTo.$refs.swapconfirmation.show();\n      } else {\n        throw Error('Error while requesting finalized details from provider');\n      }\n    },\n    exitToFiatAbort() {\n      // get any component state values to temporarily persist, and reset swap state to state before exit to fiat selected.\n      this.bityExitToFiat = !this.bityExitToFiat;\n    },\n    resetSwapState() {\n      this.$refs.modal.hide();\n      this.reset();\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'SwapWidget.scss';\n</style>\n"],"sourceRoot":"src/layouts/InterfaceLayout/containers/SwapContainer/components/SwapWidget"}]}