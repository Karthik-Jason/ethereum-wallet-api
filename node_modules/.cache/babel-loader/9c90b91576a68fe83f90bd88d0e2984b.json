{"remainingRequest":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/eslint-loader/index.js??ref--13-0!/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/dapps/ScheduleTransaction/ScheduleHelpers.js","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/dapps/ScheduleTransaction/ScheduleHelpers.js","mtime":1573477611660},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport BigNumber from 'bignumber.js';\nimport { Toast } from '@/helpers';\nimport { Util } from '@ethereum-alarm-clock/lib';\nimport * as unit from 'ethjs-unit';\nvar EAC_SCHEDULING_CONFIG = {\n  FEE: new BigNumber('0'),\n  TOKEN_TRANSFER_ADDITIONAL_GAS: new BigNumber('20000'),\n  TOKEN_SCHEDULING_GAS_LIMIT: new BigNumber('1500000'),\n  FUTURE_GAS_LIMIT: new BigNumber('1000000'),\n  TIME_BOUNTY_MIN: new BigNumber('1'),\n  TIME_BOUNTY_DEFAULTS: ['0.01', '0.02', '0.03'],\n  BOUNTY_TO_DEPOSIT_MULTIPLIER: 2,\n  SUPPORTED_MODES: [{\n    name: 'Date & Time',\n    executionWindow: {\n      min: 5,\n      default: 10\n    },\n    unit: 'Minutes'\n  }, {\n    name: 'Block Number',\n    executionWindow: {\n      min: 20,\n      default: 90\n    },\n    unit: 'Blocks'\n  }],\n  TOKEN_TRANSFER_METHOD_ID: '23b872dd',\n  APPROVE_TOKEN_TRANSFER_METHOD_ID: '095ea7b3'\n};\n\nvar calcSchedulingTotalCost = function calcSchedulingTotalCost(_ref) {\n  var gasPrice = _ref.gasPrice,\n      gasLimit = _ref.gasLimit,\n      futureGasLimit = _ref.futureGasLimit,\n      futureGasPrice = _ref.futureGasPrice,\n      timeBounty = _ref.timeBounty;\n  var deployCost = gasPrice.times(gasLimit);\n  var futureExecutionCost = timeBounty.plus(futureGasLimit.times(futureGasPrice));\n  return deployCost.plus(futureExecutionCost).plus(EAC_SCHEDULING_CONFIG.FEE);\n};\n\nvar canBeConvertedToWei = function canBeConvertedToWei(web3, string) {\n  var denomination = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'ether';\n\n  try {\n    web3.utils.toWei(string.toString(), denomination);\n  } catch (e) {\n    if (!e.message.includes('too many decimal places') || !e.message.includes(\"invalid number value ''\")) {\n      Toast.responseHandler(e, false);\n    }\n\n    return false;\n  }\n\n  return true;\n};\n\nvar estimateBountyForGasPrice = function estimateBountyForGasPrice(gasPrice, futureGasLimit) {\n  var estimatedWei = Util.estimateBountyForExecutionGasPrice(new BigNumber(unit.toWei(Math.round(gasPrice).toString(), 'gwei')), new BigNumber(futureGasLimit.toString()), new BigNumber(unit.toWei('0', 'gwei')));\n  var estimatedEth = unit.fromWei(estimatedWei.toString(), 'ether'); // Estimate the number of decimals to show\n\n  var decimalPoints = 0;\n\n  if (estimatedEth.substring(0, 2) === '0.') {\n    var endFound = false;\n    var i = estimatedEth.length;\n\n    while (i && !endFound) {\n      i -= 1;\n      var char = estimatedEth.charAt(estimatedEth.length - i - 1);\n\n      if (char !== '0' && char !== '.') {\n        endFound = true;\n        break;\n      }\n\n      decimalPoints += 1;\n    }\n  }\n\n  return parseFloat(estimatedEth).toFixed(decimalPoints);\n};\n\nexport { calcSchedulingTotalCost, canBeConvertedToWei, EAC_SCHEDULING_CONFIG, estimateBountyForGasPrice };",{"version":3,"sources":["/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/dapps/ScheduleTransaction/ScheduleHelpers.js"],"names":["BigNumber","Toast","Util","unit","EAC_SCHEDULING_CONFIG","FEE","TOKEN_TRANSFER_ADDITIONAL_GAS","TOKEN_SCHEDULING_GAS_LIMIT","FUTURE_GAS_LIMIT","TIME_BOUNTY_MIN","TIME_BOUNTY_DEFAULTS","BOUNTY_TO_DEPOSIT_MULTIPLIER","SUPPORTED_MODES","name","executionWindow","min","default","TOKEN_TRANSFER_METHOD_ID","APPROVE_TOKEN_TRANSFER_METHOD_ID","calcSchedulingTotalCost","gasPrice","gasLimit","futureGasLimit","futureGasPrice","timeBounty","deployCost","times","futureExecutionCost","plus","canBeConvertedToWei","web3","string","denomination","utils","toWei","toString","e","message","includes","responseHandler","estimateBountyForGasPrice","estimatedWei","estimateBountyForExecutionGasPrice","Math","round","estimatedEth","fromWei","decimalPoints","substring","endFound","i","length","char","charAt","parseFloat","toFixed"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js';\nimport { Toast } from '@/helpers';\nimport { Util } from '@ethereum-alarm-clock/lib';\nimport * as unit from 'ethjs-unit';\n\nconst EAC_SCHEDULING_CONFIG = {\n  FEE: new BigNumber('0'),\n  TOKEN_TRANSFER_ADDITIONAL_GAS: new BigNumber('20000'),\n  TOKEN_SCHEDULING_GAS_LIMIT: new BigNumber('1500000'),\n  FUTURE_GAS_LIMIT: new BigNumber('1000000'),\n  TIME_BOUNTY_MIN: new BigNumber('1'),\n  TIME_BOUNTY_DEFAULTS: ['0.01', '0.02', '0.03'],\n  BOUNTY_TO_DEPOSIT_MULTIPLIER: 2,\n  SUPPORTED_MODES: [\n    {\n      name: 'Date & Time',\n      executionWindow: {\n        min: 5,\n        default: 10\n      },\n      unit: 'Minutes'\n    },\n    {\n      name: 'Block Number',\n      executionWindow: {\n        min: 20,\n        default: 90\n      },\n      unit: 'Blocks'\n    }\n  ],\n  TOKEN_TRANSFER_METHOD_ID: '23b872dd',\n  APPROVE_TOKEN_TRANSFER_METHOD_ID: '095ea7b3'\n};\n\nconst calcSchedulingTotalCost = ({\n  gasPrice,\n  gasLimit,\n  futureGasLimit,\n  futureGasPrice,\n  timeBounty\n}) => {\n  const deployCost = gasPrice.times(gasLimit);\n  const futureExecutionCost = timeBounty.plus(\n    futureGasLimit.times(futureGasPrice)\n  );\n  return deployCost.plus(futureExecutionCost).plus(EAC_SCHEDULING_CONFIG.FEE);\n};\n\nconst canBeConvertedToWei = (web3, string, denomination = 'ether') => {\n  try {\n    web3.utils.toWei(string.toString(), denomination);\n  } catch (e) {\n    if (\n      !e.message.includes('too many decimal places') ||\n      !e.message.includes(`invalid number value ''`)\n    ) {\n      Toast.responseHandler(e, false);\n    }\n    return false;\n  }\n  return true;\n};\n\nconst estimateBountyForGasPrice = (gasPrice, futureGasLimit) => {\n  const estimatedWei = Util.estimateBountyForExecutionGasPrice(\n    new BigNumber(unit.toWei(Math.round(gasPrice).toString(), 'gwei')),\n    new BigNumber(futureGasLimit.toString()),\n    new BigNumber(unit.toWei('0', 'gwei'))\n  );\n\n  const estimatedEth = unit.fromWei(estimatedWei.toString(), 'ether');\n\n  // Estimate the number of decimals to show\n  let decimalPoints = 0;\n  if (estimatedEth.substring(0, 2) === '0.') {\n    let endFound = false;\n\n    let i = estimatedEth.length;\n    while (i && !endFound) {\n      i -= 1;\n      const char = estimatedEth.charAt(estimatedEth.length - i - 1);\n      if (char !== '0' && char !== '.') {\n        endFound = true;\n        break;\n      }\n      decimalPoints += 1;\n    }\n  }\n\n  return parseFloat(estimatedEth).toFixed(decimalPoints);\n};\n\nexport {\n  calcSchedulingTotalCost,\n  canBeConvertedToWei,\n  EAC_SCHEDULING_CONFIG,\n  estimateBountyForGasPrice\n};\n"]}]}