{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/thread-loader/dist/cjs.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/layouts/InterfaceLayout/containers/SendCurrencyContainer/SendCurrencyContainer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/layouts/InterfaceLayout/containers/SendCurrencyContainer/SendCurrencyContainer.vue","mtime":1574677251112},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/thread-loader/dist/cjs.js","mtime":1574664277654},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js","mtime":1574664275010},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js","mtime":1574664277774}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _typeof from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/@babel/runtime-corejs2/helpers/esm/typeof\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.regexp.split\";\nimport _defineProperty from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.number.constructor\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState } from 'vuex';\nimport InterfaceContainerTitle from \"../../components/InterfaceContainerTitle\";\nimport CurrencyPicker from \"../../components/CurrencyPicker\";\nimport InterfaceBottomText from '@/components/InterfaceBottomText';\nimport Blockie from '@/components/Blockie';\nimport { Transaction } from 'ethereumjs-tx';\nimport { Misc, Toast } from '@/helpers';\nimport BigNumber from 'bignumber.js';\nimport ethUnit from 'ethjs-unit';\nimport utils from 'web3-utils';\nimport fetch from 'node-fetch';\nexport default {\n  components: {\n    'interface-container-title': InterfaceContainerTitle,\n    'interface-bottom-text': InterfaceBottomText,\n    blockie: Blockie,\n    'currency-picker': CurrencyPicker\n  },\n  props: {\n    checkPrefilled: {\n      type: Function,\n      default: function _default() {}\n    },\n    clearPrefilled: {\n      type: Function,\n      default: function _default() {}\n    },\n    isPrefilled: {\n      type: Boolean,\n      default: false\n    },\n    value: {\n      type: String,\n      default: '0'\n    },\n    data: {\n      type: String,\n      default: ''\n    },\n    to: {\n      type: String,\n      default: ''\n    },\n    gaslimit: {\n      type: String,\n      default: ''\n    },\n    gas: {\n      type: Number,\n      default: 0\n    },\n    tokensymbol: {\n      type: String,\n      default: ''\n    },\n    tokensWithBalance: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    getBalance: {\n      type: Function,\n      default: function _default() {}\n    },\n    highestGas: {\n      type: String,\n      default: '0'\n    }\n  },\n  data: function data() {\n    return {\n      advancedExpand: false,\n      isValidAddress: false,\n      hexAddress: '',\n      address: '',\n      toValue: '0',\n      gasLimit: '21000',\n      toData: '',\n      selectedCurrency: '',\n      ethPrice: 0\n    };\n  },\n  computed: _objectSpread({}, mapState(['account', 'gasPrice', 'web3', 'network', 'linkQuery', 'online']), {\n    txFee: function txFee() {\n      return new BigNumber(ethUnit.toWei(this.gasPrice, 'gwei')).times(this.gasLimit || 0);\n    },\n    txFeeEth: function txFeeEth() {\n      if (new BigNumber(this.txFee).gt(0)) {\n        return ethUnit.fromWei(this.txFee, 'ether');\n      }\n\n      return 0;\n    },\n    isValidAmount: function isValidAmount() {\n      var notEnoughGasMsg = this.$t('errorsGlobal.notAValidAmountTotal') + ' Gas ' + this.$t('errorsGlobal.toSend');\n      var notEnoughTokenMsg = this.$t('errorsGlobal.notAValidAmountTotal') + ' ' + this.selectedCurrency.symbol + ' ' + this.$t('errorsGlobal.toSend');\n      var notEnoughCurrencyMsg = this.$t('errorsGlobal.notAValidAmountTotal') + ' ' + this.network.type.currencyName + ' ' + this.$t('errorsGlobal.toSend');\n      var invalidValueMsg = this.$t('errorsGlobal.invalidValue');\n      var enoughTokenBalance = new BigNumber(this.toValue).lte(this.selectedCurrency.balance);\n      var enoughCurrency = new BigNumber(this.toValue).plus(this.txFeeEth).lte(this.balanceDefault);\n      var enoughGas = new BigNumber(this.txFeeEth).lte(this.balanceDefault);\n      var validDecimal = this.isValidDecimals;\n\n      if (new BigNumber(this.toValue).lt(0)) {\n        return {\n          msg: invalidValueMsg,\n          valid: false\n        };\n      }\n\n      if (this.isToken) {\n        var enoughBalance = enoughTokenBalance && enoughGas && validDecimal;\n        return {\n          valid: enoughBalance,\n          msg: enoughBalance ? '' : !enoughTokenBalance ? notEnoughTokenMsg : !enoughGas ? notEnoughGasMsg : invalidValueMsg\n        };\n      }\n\n      return {\n        valid: enoughCurrency && validDecimal,\n        msg: enoughCurrency ? '' : !enoughCurrency ? notEnoughCurrencyMsg : invalidValueMsg\n      };\n    },\n    isValidDecimals: function isValidDecimals() {\n      var decimals = (this.toValue + '').split('.')[1];\n      if (!decimals) return true;\n\n      if (this.isToken) {\n        return decimals.length <= this.selectedCurrency.decimals;\n      }\n\n      return decimals.length <= 18;\n    },\n    isValidData: function isValidData() {\n      return Misc.validateHexString(this.toData);\n    },\n    isValidGasLimit: function isValidGasLimit() {\n      return new BigNumber(this.gasLimit).gte(0);\n    },\n    balanceDefault: function balanceDefault() {\n      return new BigNumber(ethUnit.fromWei(this.account.balance, 'ether'));\n    },\n    validInputs: function validInputs() {\n      return this.isValidAmount.valid && this.isValidAddress && new BigNumber(this.gasLimit).gte(0) && Misc.validateHexString(this.toData);\n    },\n    isToken: function isToken() {\n      var symbol = this.network.type.currencyName;\n      return this.selectedCurrency.symbol !== symbol;\n    },\n    txData: function txData() {\n      if (this.isToken) {\n        return this.getTokenTransferABI(this.toValue, this.selectedCurrency.decimals);\n      }\n\n      return Misc.sanitizeHex(this.toData);\n    },\n    txValue: function txValue() {\n      if (this.isToken) {\n        return '0x00';\n      }\n\n      return Misc.sanitizeHex(ethUnit.toWei(this.toValue, 'ether').toString(16));\n    },\n    txTo: function txTo() {\n      return this.isToken ? this.selectedCurrency.address.toLowerCase() : this.hexAddress.toLowerCase().trim();\n    },\n    multiWatch: function multiWatch() {\n      return this.toValue, this.isValidAddress, this.toData, this.selectedCurrency, new Date().getTime() / 1000;\n    },\n    convert: function convert() {\n      if (this.ethPrice) {\n        return new BigNumber(new BigNumber(this.txFeeEth).times(new BigNumber(this.ethPrice))).toFixed(2).toString();\n      }\n\n      return '--';\n    }\n  }),\n  watch: {\n    multiWatch: utils._.debounce(function () {\n      if (this.validInputs) this.estimateGas();\n    }, 500),\n    network: function network(newVal) {\n      if (this.online && newVal.type.name === 'ETH') this.getEthPrice();\n    },\n    isPrefilled: function isPrefilled() {\n      this.prefillForm();\n    }\n  },\n  mounted: function mounted() {\n    this.checkPrefilled();\n    if (this.online && this.network.type.name === 'ETH') this.getEthPrice();\n  },\n  methods: {\n    prefillForm: function prefillForm() {\n      var _this = this;\n\n      if (this.isPrefilled) {\n        var foundToken = this.tokensymbol ? this.tokensWithBalance.find(function (item) {\n          return item.symbol.toLowerCase() === _this.tokensymbol.toLowerCase();\n        }) : undefined;\n        this.toData = Misc.validateHexString(this.data) ? this.data : '';\n        this.toValue = this.value;\n        this.hexAddress = this.to;\n        this.address = this.to;\n        this.gasLimit = new BigNumber(this.gaslimit).toString();\n        this.selectedCurrency = foundToken ? foundToken : this.selectedCurrency;\n        this.advancedExpand = true;\n        Toast.responseHandler('Form has been prefilled. Please proceed with caution!', Toast.WARN);\n        this.clearPrefilled();\n      }\n    },\n    openSettings: function openSettings() {\n      this.$eventHub.$emit('open-settings');\n    },\n    sendEntireBalance: function sendEntireBalance() {\n      if (this.isToken) this.toValue = this.selectedCurrency.balance;else this.toValue = this.balanceDefault > 0 ? this.balanceDefault.minus(ethUnit.fromWei(new BigNumber(ethUnit.toWei(this.gasPrice, 'gwei')).times(this.gasLimit).toString(), 'ether')) : 0;\n    },\n    getTokenTransferABI: function getTokenTransferABI(amount, decimals) {\n      var jsonInterface = [{\n        constant: false,\n        inputs: [{\n          name: '_to',\n          type: 'address'\n        }, {\n          name: '_amount',\n          type: 'uint256'\n        }],\n        name: 'transfer',\n        outputs: [{\n          name: '',\n          type: 'bool'\n        }],\n        payable: false,\n        stateMutability: 'nonpayable',\n        type: 'function'\n      }];\n      var contract = new this.web3.eth.Contract(jsonInterface);\n      return contract.methods.transfer(this.hexAddress.toLowerCase(), new BigNumber(amount).times(new BigNumber(10).pow(decimals)).toFixed()).encodeABI();\n    },\n    estimateGas: function () {\n      var _estimateGas = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var coinbase, params;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.web3.eth.getCoinbase();\n\n              case 2:\n                coinbase = _context.sent;\n                params = {\n                  from: coinbase,\n                  value: this.txValue,\n                  to: this.txTo,\n                  gasPrice: Misc.sanitizeHex(ethUnit.toWei(this.gasPrice, 'gwei').toString(16)),\n                  data: this.txData\n                };\n                this.web3.eth.estimateGas(params).then(function (gasLimit) {\n                  _this2.gasLimit = gasLimit;\n                }).catch(function (err) {\n                  _this2.gasLimit = -1;\n                  Toast.responseHandler(err, Toast.ERROR);\n                });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function estimateGas() {\n        return _estimateGas.apply(this, arguments);\n      }\n\n      return estimateGas;\n    }(),\n    submitTransaction: function () {\n      var _submitTransaction = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var coinbase, nonce, raw, _tx, json;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                window.scrollTo(0, 0);\n                _context2.prev = 1;\n                _context2.next = 4;\n                return this.web3.eth.getCoinbase();\n\n              case 4:\n                coinbase = _context2.sent;\n                _context2.next = 7;\n                return this.web3.eth.getTransactionCount(coinbase);\n\n              case 7:\n                nonce = _context2.sent;\n                raw = {\n                  nonce: Misc.sanitizeHex(new BigNumber(nonce).toString(16)),\n                  gasPrice: Misc.sanitizeHex(ethUnit.toWei(this.gasPrice, 'gwei').toString(16)),\n                  gasLimit: Misc.sanitizeHex(new BigNumber(this.gasLimit).toString(16)),\n                  to: this.txTo,\n                  value: this.txValue,\n                  data: this.txData\n                };\n                _tx = new Transaction(raw);\n                json = _tx.toJSON(true);\n                json.from = coinbase;\n                this.web3.eth.sendTransaction(json).catch(function (err) {\n                  Toast.responseHandler(err, Toast.ERROR);\n                });\n                _context2.next = 18;\n                break;\n\n              case 15:\n                _context2.prev = 15;\n                _context2.t0 = _context2[\"catch\"](1);\n                Toast.responseHandler(_context2.t0, Toast.ERROR);\n\n              case 18:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[1, 15]]);\n      }));\n\n      function submitTransaction() {\n        return _submitTransaction.apply(this, arguments);\n      }\n\n      return submitTransaction;\n    }(),\n    getEthPrice: function () {\n      var _getEthPrice = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3() {\n        var price;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return fetch('https://cryptorates.mewapi.io/ticker?filter=ETH').then(function (res) {\n                  return res.json();\n                }).catch(function (e) {\n                  Toast.responseHandler(e, Toast.ERROR);\n                });\n\n              case 2:\n                price = _context3.sent;\n                this.ethPrice = _typeof(price) === 'object' ? price.data.ETH.quotes.USD.price : 0;\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getEthPrice() {\n        return _getEthPrice.apply(this, arguments);\n      }\n\n      return getEthPrice;\n    }(),\n    copyToClipboard: function copyToClipboard(ref) {\n      this.$refs[ref].select();\n      document.execCommand('copy');\n    }\n  }\n};",{"version":3,"sources":["SendCurrencyContainer.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"send-currency-container\">\n    <interface-container-title :title=\"$t('common.sendTx')\" />\n    <div class=\"send-form\">\n      <div class=\"form-block amount-to-address\">\n        <div class=\"amount\">\n          <div class=\"single-input-block\">\n            <div class=\"title\">\n              <h4>{{ $t('interface.sendTxType') }}</h4>\n            </div>\n            <currency-picker\n              :currency=\"tokensWithBalance\"\n              :page=\"'sendEthAndTokens'\"\n              :token=\"true\"\n              :default=\"selectedCurrency !== '' ? selectedCurrency : {}\"\n              @selectedCurrency=\"selectedCurrency = $event\"\n            />\n          </div>\n          <div class=\"single-input-block\">\n            <div class=\"title\">\n              <h4>{{ $t('interface.sendTxAmount') }}</h4>\n              <p\n                class=\"title-button prevent-user-select\"\n                @click=\"sendEntireBalance\"\n              >\n                Entire Balance\n              </p>\n            </div>\n            <div class=\"the-form amount-number\">\n              <input\n                v-validate=\"'min_value:0'\"\n                v-model=\"toValue\"\n                type=\"number\"\n                placeholder=\"Amount\"\n                min=\"0\"\n                name=\"value\"\n                step=\"any\"\n              />\n              <i\n                :class=\"[\n                  !isValidAmount.valid || errors.has('value') ? 'not-good' : '',\n                  'fa fa-check-circle good-button'\n                ]\"\n                aria-hidden=\"true\"\n              />\n            </div>\n            <div\n              v-if=\"!isValidAmount.valid || errors.has('value')\"\n              class=\"error-message-container\"\n            >\n              <p>{{ isValidAmount.msg }}</p>\n            </div>\n          </div>\n        </div>\n        <div class=\"to-address\">\n          <div class=\"title\">\n            <h4>\n              {{ $t('interface.sendTxToAddr') }}\n              <blockie\n                v-show=\"isValidAddress\"\n                :address=\"hexAddress\"\n                :size=\"8\"\n                :scale=\"16\"\n                width=\"32px\"\n                height=\"32px\"\n                class=\"blockie-image\"\n              />\n            </h4>\n\n            <p\n              class=\"copy-button prevent-user-select\"\n              @click=\"copyToClipboard('address')\"\n            >\n              {{ $t('common.copy') }}\n            </p>\n          </div>\n          <div class=\"the-form address-block\">\n            <input\n              v-ens-resolver=\"'address'\"\n              ref=\"address\"\n              v-model=\"address\"\n              type=\"text\"\n              name=\"name\"\n              autocomplete=\"off\"\n            />\n            <i\n              :class=\"[\n                isValidAddress && hexAddress.length !== 0 ? '' : 'not-good',\n                'fa fa-check-circle good-button'\n              ]\"\n              aria-hidden=\"true\"\n            />\n          </div>\n        </div>\n        <div class=\"tx-fee\">\n          <div class=\"title\">\n            <h4>\n              {{ $t('common.txFee') }}\n            </h4>\n            <p class=\"copy-button prevent-user-select\" @click=\"openSettings\">\n              {{ $t('common.edit') }}\n            </p>\n          </div>\n          <div class=\"fee-value\">\n            <div class=\"gwei\">\n              {{ gasPrice }} Gwei\n              <!--(Economic)-->\n            </div>\n            <div v-show=\"network.type.name === 'ETH'\" class=\"usd\">\n              Cost {{ txFeeEth }} ETH = ${{ convert }}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"send-form advanced\">\n      <div class=\"advanced-content\">\n        <div class=\"toggle-button-container\">\n          <h4>{{ $t('common.advanced') }}</h4>\n          <div class=\"toggle-button\">\n            <span>{{ $t('interface.dataGas') }}</span>\n            <!-- Rounded switch -->\n            <div class=\"sliding-switch-white\">\n              <label class=\"switch\">\n                <input\n                  type=\"checkbox\"\n                  @click=\"advancedExpand = !advancedExpand\"\n                />\n                <span class=\"slider round\" />\n              </label>\n            </div>\n          </div>\n        </div>\n        <div\n          :class=\"advancedExpand && 'input-container-open'\"\n          class=\"input-container\"\n        >\n          <div class=\"margin-container\">\n            <div v-show=\"!isToken\" class=\"the-form user-input\">\n              <p>Add Data</p>\n              <input\n                v-model=\"toData\"\n                type=\"text\"\n                placeholder=\"Add Data (e.g. 0x7834f874g298hf298h234f)\"\n                autocomplete=\"off\"\n              />\n              <i\n                :class=\"[\n                  isValidData ? '' : 'not-good',\n                  'fa fa-check-circle good-button'\n                ]\"\n                aria-hidden=\"true\"\n              />\n            </div>\n            <div class=\"the-form user-input\">\n              <p>{{ $t('common.gasLimit') | capitalize }}</p>\n              <input\n                v-model=\"gasLimit\"\n                :placeholder=\"$t('common.gasLimit')\"\n                type=\"number\"\n                min=\"0\"\n                name\n              />\n              <i\n                :class=\"[\n                  isValidGasLimit ? '' : 'not-good',\n                  'fa fa-check-circle good-button'\n                ]\"\n                aria-hidden=\"true\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"submit-button-container\">\n      <div\n        :class=\"[\n          validInputs ? '' : 'disabled',\n          'submit-button large-round-button-green-filled'\n        ]\"\n        @click=\"submitTransaction\"\n      >\n        {{ $t('interface.sendTx') }}\n      </div>\n      <!-- <interface-bottom-text\n        :link-text=\"$t('interface.helpCenter')\"\n        :question=\"$t('interface.haveIssues')\"\n        link=\"https://kb.myetherwallet.com\"\n      /> -->\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport InterfaceContainerTitle from '../../components/InterfaceContainerTitle';\nimport CurrencyPicker from '../../components/CurrencyPicker';\nimport InterfaceBottomText from '@/components/InterfaceBottomText';\nimport Blockie from '@/components/Blockie';\nimport { Transaction } from 'ethereumjs-tx';\nimport { Misc, Toast } from '@/helpers';\nimport BigNumber from 'bignumber.js';\nimport ethUnit from 'ethjs-unit';\nimport utils from 'web3-utils';\nimport fetch from 'node-fetch';\n\nexport default {\n  components: {\n    'interface-container-title': InterfaceContainerTitle,\n    'interface-bottom-text': InterfaceBottomText,\n    blockie: Blockie,\n    'currency-picker': CurrencyPicker\n  },\n  props: {\n    checkPrefilled: {\n      type: Function,\n      default: () => {}\n    },\n    clearPrefilled: {\n      type: Function,\n      default: () => {}\n    },\n    isPrefilled: {\n      type: Boolean,\n      default: false\n    },\n    value: {\n      type: String,\n      default: '0'\n    },\n    data: {\n      type: String,\n      default: ''\n    },\n    to: {\n      type: String,\n      default: ''\n    },\n    gaslimit: {\n      type: String,\n      default: ''\n    },\n    gas: {\n      type: Number,\n      default: 0\n    },\n    tokensymbol: {\n      type: String,\n      default: ''\n    },\n    tokensWithBalance: {\n      type: Array,\n      default: function() {\n        return [];\n      }\n    },\n    getBalance: {\n      type: Function,\n      default: function() {}\n    },\n    highestGas: {\n      type: String,\n      default: '0'\n    }\n  },\n  data() {\n    return {\n      advancedExpand: false,\n      isValidAddress: false,\n      hexAddress: '',\n      address: '',\n      toValue: '0',\n      gasLimit: '21000',\n      toData: '',\n      selectedCurrency: '',\n      ethPrice: 0\n    };\n  },\n\n  computed: {\n    ...mapState([\n      'account',\n      'gasPrice',\n      'web3',\n      'network',\n      'linkQuery',\n      'online'\n    ]),\n    txFee() {\n      return new BigNumber(ethUnit.toWei(this.gasPrice, 'gwei')).times(\n        this.gasLimit || 0\n      );\n    },\n    txFeeEth() {\n      if (new BigNumber(this.txFee).gt(0)) {\n        return ethUnit.fromWei(this.txFee, 'ether');\n      }\n      return 0;\n    },\n    isValidAmount() {\n      const notEnoughGasMsg =\n        this.$t('errorsGlobal.notAValidAmountTotal') +\n        ' Gas ' +\n        this.$t('errorsGlobal.toSend');\n      const notEnoughTokenMsg =\n        this.$t('errorsGlobal.notAValidAmountTotal') +\n        ' ' +\n        this.selectedCurrency.symbol +\n        ' ' +\n        this.$t('errorsGlobal.toSend');\n      const notEnoughCurrencyMsg =\n        this.$t('errorsGlobal.notAValidAmountTotal') +\n        ' ' +\n        this.network.type.currencyName +\n        ' ' +\n        this.$t('errorsGlobal.toSend');\n      const invalidValueMsg = this.$t('errorsGlobal.invalidValue');\n      const enoughTokenBalance = new BigNumber(this.toValue).lte(\n        this.selectedCurrency.balance\n      );\n      const enoughCurrency = new BigNumber(this.toValue)\n        .plus(this.txFeeEth)\n        .lte(this.balanceDefault);\n      const enoughGas = new BigNumber(this.txFeeEth).lte(this.balanceDefault);\n      const validDecimal = this.isValidDecimals;\n      if (new BigNumber(this.toValue).lt(0)) {\n        return {\n          msg: invalidValueMsg,\n          valid: false\n        };\n      }\n      if (this.isToken) {\n        const enoughBalance = enoughTokenBalance && enoughGas && validDecimal;\n        return {\n          valid: enoughBalance,\n          msg: enoughBalance\n            ? ''\n            : !enoughTokenBalance\n            ? notEnoughTokenMsg\n            : !enoughGas\n            ? notEnoughGasMsg\n            : invalidValueMsg\n        };\n      }\n      return {\n        valid: enoughCurrency && validDecimal,\n        msg: enoughCurrency\n          ? ''\n          : !enoughCurrency\n          ? notEnoughCurrencyMsg\n          : invalidValueMsg\n      };\n    },\n    isValidDecimals() {\n      const decimals = (this.toValue + '').split('.')[1];\n      if (!decimals) return true;\n      if (this.isToken) {\n        return decimals.length <= this.selectedCurrency.decimals;\n      }\n      return decimals.length <= 18;\n    },\n    isValidData() {\n      return Misc.validateHexString(this.toData);\n    },\n    isValidGasLimit() {\n      return new BigNumber(this.gasLimit).gte(0);\n    },\n    balanceDefault() {\n      return new BigNumber(ethUnit.fromWei(this.account.balance, 'ether'));\n    },\n    validInputs() {\n      return (\n        this.isValidAmount.valid &&\n        this.isValidAddress &&\n        new BigNumber(this.gasLimit).gte(0) &&\n        Misc.validateHexString(this.toData)\n      );\n    },\n    isToken() {\n      const symbol = this.network.type.currencyName;\n      return this.selectedCurrency.symbol !== symbol;\n    },\n    txData() {\n      if (this.isToken) {\n        return this.getTokenTransferABI(\n          this.toValue,\n          this.selectedCurrency.decimals\n        );\n      }\n      return Misc.sanitizeHex(this.toData);\n    },\n    txValue() {\n      if (this.isToken) {\n        return '0x00';\n      }\n      return Misc.sanitizeHex(\n        ethUnit.toWei(this.toValue, 'ether').toString(16)\n      );\n    },\n    txTo() {\n      return this.isToken\n        ? this.selectedCurrency.address.toLowerCase()\n        : this.hexAddress.toLowerCase().trim();\n    },\n    multiWatch() {\n      return (\n        this.toValue,\n        this.isValidAddress,\n        this.toData,\n        this.selectedCurrency,\n        new Date().getTime() / 1000\n      );\n    },\n    convert() {\n      if (this.ethPrice) {\n        return new BigNumber(\n          new BigNumber(this.txFeeEth).times(new BigNumber(this.ethPrice))\n        )\n          .toFixed(2)\n          .toString();\n      }\n      return '--';\n    }\n  },\n  watch: {\n    multiWatch: utils._.debounce(function() {\n      if (this.validInputs) this.estimateGas();\n    }, 500),\n    network(newVal) {\n      if (this.online && newVal.type.name === 'ETH') this.getEthPrice();\n    },\n    isPrefilled() {\n      this.prefillForm();\n    }\n  },\n  mounted() {\n    this.checkPrefilled();\n    if (this.online && this.network.type.name === 'ETH') this.getEthPrice();\n  },\n  methods: {\n    prefillForm() {\n      if (this.isPrefilled) {\n        const foundToken = this.tokensymbol\n          ? this.tokensWithBalance.find(item => {\n              return (\n                item.symbol.toLowerCase() === this.tokensymbol.toLowerCase()\n              );\n            })\n          : undefined;\n\n        this.toData = Misc.validateHexString(this.data) ? this.data : '';\n        this.toValue = this.value;\n        this.hexAddress = this.to;\n        this.address = this.to;\n        this.gasLimit = new BigNumber(this.gaslimit).toString();\n\n        this.selectedCurrency = foundToken ? foundToken : this.selectedCurrency;\n        this.advancedExpand = true;\n        Toast.responseHandler(\n          'Form has been prefilled. Please proceed with caution!',\n          Toast.WARN\n        );\n        this.clearPrefilled();\n      }\n    },\n    openSettings() {\n      this.$eventHub.$emit('open-settings');\n    },\n    sendEntireBalance() {\n      if (this.isToken) this.toValue = this.selectedCurrency.balance;\n      else\n        this.toValue =\n          this.balanceDefault > 0\n            ? this.balanceDefault.minus(\n                ethUnit.fromWei(\n                  new BigNumber(ethUnit.toWei(this.gasPrice, 'gwei'))\n                    .times(this.gasLimit)\n                    .toString(),\n                  'ether'\n                )\n              )\n            : 0;\n    },\n    getTokenTransferABI(amount, decimals) {\n      const jsonInterface = [\n        {\n          constant: false,\n          inputs: [\n            { name: '_to', type: 'address' },\n            { name: '_amount', type: 'uint256' }\n          ],\n          name: 'transfer',\n          outputs: [{ name: '', type: 'bool' }],\n          payable: false,\n          stateMutability: 'nonpayable',\n          type: 'function'\n        }\n      ];\n      const contract = new this.web3.eth.Contract(jsonInterface);\n      return contract.methods\n        .transfer(\n          this.hexAddress.toLowerCase(),\n          new BigNumber(amount).times(new BigNumber(10).pow(decimals)).toFixed()\n        )\n        .encodeABI();\n    },\n    async estimateGas() {\n      const coinbase = await this.web3.eth.getCoinbase();\n      const params = {\n        from: coinbase,\n        value: this.txValue,\n        to: this.txTo,\n        gasPrice: Misc.sanitizeHex(\n          ethUnit.toWei(this.gasPrice, 'gwei').toString(16)\n        ),\n        data: this.txData\n      };\n      this.web3.eth\n        .estimateGas(params)\n        .then(gasLimit => {\n          this.gasLimit = gasLimit;\n        })\n        .catch(err => {\n          this.gasLimit = -1;\n          Toast.responseHandler(err, Toast.ERROR);\n        });\n    },\n    async submitTransaction() {\n      window.scrollTo(0, 0);\n      try {\n        const coinbase = await this.web3.eth.getCoinbase();\n        const nonce = await this.web3.eth.getTransactionCount(coinbase);\n        const raw = {\n          nonce: Misc.sanitizeHex(new BigNumber(nonce).toString(16)),\n          gasPrice: Misc.sanitizeHex(\n            ethUnit.toWei(this.gasPrice, 'gwei').toString(16)\n          ),\n          gasLimit: Misc.sanitizeHex(new BigNumber(this.gasLimit).toString(16)),\n          to: this.txTo,\n          value: this.txValue,\n          data: this.txData\n        };\n        const _tx = new Transaction(raw);\n        const json = _tx.toJSON(true);\n        json.from = coinbase;\n        this.web3.eth.sendTransaction(json).catch(err => {\n          Toast.responseHandler(err, Toast.ERROR);\n        });\n      } catch (e) {\n        Toast.responseHandler(e, Toast.ERROR);\n      }\n    },\n    async getEthPrice() {\n      const price = await fetch(\n        'https://cryptorates.mewapi.io/ticker?filter=ETH'\n      )\n        .then(res => {\n          return res.json();\n        })\n        .catch(e => {\n          Toast.responseHandler(e, Toast.ERROR);\n        });\n      this.ethPrice =\n        typeof price === 'object' ? price.data.ETH.quotes.USD.price : 0;\n    },\n    copyToClipboard(ref) {\n      this.$refs[ref].select();\n      document.execCommand('copy');\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'SendCurrencyContainer.scss';\n</style>\n"],"sourceRoot":"src/layouts/InterfaceLayout/containers/SendCurrencyContainer"}]}