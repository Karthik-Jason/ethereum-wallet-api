{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/dapps/ManageENS/ManageENS.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/dapps/ManageENS/ManageENS.vue","mtime":1574664278282},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js","mtime":1574664275010},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js","mtime":1574664277774}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.find\";\nimport _toConsumableArray from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.regexp.split\";\nimport _defineProperty from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport BackButton from '@/layouts/InterfaceLayout/components/BackButton';\nimport RegistrarAbi from \"./ABI/registrarAbi\";\nimport PermanentRegistrarControllerAbi from \"./ABI/permanentRegistrarController\";\nimport baseRegistrarAbi from \"./ABI/baseRegistrarAbi\";\nimport DeedContractAbi from \"./ABI/deedContractAbi\";\nimport RegistryAbi from \"./ABI/registryAbi.js\";\nimport FifsRegistrarAbi from \"./ABI/fifsRegistrarAbi.js\";\nimport ResolverAbi from \"./ABI/resolverAbi.js\";\nimport * as unit from 'ethjs-unit';\nimport * as nameHashPckg from 'eth-ens-namehash';\nimport normalise from '@/helpers/normalise';\nimport { mapState } from 'vuex';\nimport { Toast } from '@/helpers';\nimport DNSRegistrar from '@ensdomains/dnsregistrar';\nimport BigNumber from 'bignumber.js';\nimport supportedCoins from \"./supportedCoins\";\nimport supportedTxt from \"./supportedTxt\";\n\nvar bip39 = require('bip39');\n\nvar permanentRegistrar = {\n  INTERFACE_CONTROLLER: '0x018fac06',\n  INTERFACE_LEGACY_REGISTRAR: '0x7ba18ba1'\n};\nvar MULTICOIN_SUPPORT_INTERFACE = '0xf1cb7e06';\nvar TEXT_RECORD_SUPPORT_INTERFACE = '0x59d1d43c';\nvar REGISTRAR_TYPES = {\n  FIFS: 'fifs',\n  PERMANENT: 'permanent'\n};\nexport default {\n  components: {\n    'back-button': BackButton\n  },\n  data: function data() {\n    return {\n      domainName: '',\n      loading: false,\n      nameHash: '',\n      labelHash: '',\n      owner: '',\n      deedOwner: '',\n      secretPhrase: '',\n      registrarAddress: '',\n      raw: {},\n      contractInitiated: false,\n      step: 1,\n      domainNameErr: false,\n      ensRegistryContract: {},\n      dnsRegistrar: {},\n      dnsClaim: {},\n      dnsOwner: '',\n      legacyRegistrar: {},\n      minimumAge: 0,\n      duration: 1,\n      commitmentCreated: false,\n      publicResolverAddress: '',\n      resolverMultiCoinSupport: false,\n      supportedCoins: supportedCoins,\n      txtRecords: {},\n      supportedTxt: supportedTxt,\n      recordContract: {},\n      resolverTxtSupport: false\n    };\n  },\n  computed: _objectSpread({}, mapState(['web3', 'network', 'account', 'gasPrice', 'ens']), {\n    registrarTLD: function registrarTLD() {\n      return this.network.type.ens.registrarTLD;\n    },\n    registrarType: function registrarType() {\n      return this.network.type.ens.registrarType;\n    },\n    multiTld: function multiTld() {\n      return this.network.type.ens.hasOwnProperty('supportedTld') && this.network.type.ens.supportedTld.length > 1;\n    },\n    parsedTld: function parsedTld() {\n      if (this.parsedHostName.length) {\n        var hasTld = this.domainName.lastIndexOf('.');\n        return hasTld > -1 ? this.domainName.substr(hasTld + 1, this.domainName.length) : this.registrarTLD;\n      }\n\n      return '';\n    },\n    parsedHostName: function parsedHostName() {\n      return this.domainName.substr(0, this.domainName.lastIndexOf('.') > -1 ? this.domainName.lastIndexOf('.') : this.domainName.length);\n    },\n    parsedDomainName: function parsedDomainName() {\n      return this.parsedHostName + '.' + this.parsedTld;\n    },\n    isSubDomain: function isSubDomain() {\n      return this.domainName.split('.').length - 1 > 1;\n    }\n  }),\n  watch: {\n    ens: function ens(newVal) {\n      if (newVal) {\n        this.setRegistrar();\n      }\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    this.$nextTick(function () {\n      _this.setup();\n    });\n  },\n  methods: {\n    setup: function () {\n      var _setup = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var type;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.isPermanentLive = true;\n                this.domainName = '';\n                this.loading = false;\n                this.nameHash = '';\n                this.labelHash = '';\n                this.owner = '';\n                this.deedOwner = '';\n                this.secretPhrase = '';\n                this.registrarAddress = '';\n                this.raw = {};\n                this.contractInitiated = false;\n                this.step = 1;\n                this.contractInitiated = false;\n                this.contractInitiated = true;\n                this.domainNameErr = false;\n                this.dnsRegistrar = {};\n                this.dnsClaim = {};\n                this.legacyRegistrar = {};\n                this.minimumAge = 0;\n                this.duration = 1;\n                this.commitmentCreated = false;\n                this.publicResolverAddress = '';\n                this.resolverMultiCoinSupport = false;\n                this.resolverTxtSupport = false;\n                this.supportedCoins = supportedCoins;\n                this.txtRecords = {};\n                this.recordContract = {};\n\n                if (this.ens) {\n                  this.setRegistrar();\n                }\n\n                for (type in this.supportedCoins) {\n                  this.supportedCoins[type].value = '';\n                }\n\n              case 29:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function setup() {\n        return _setup.apply(this, arguments);\n      }\n\n      return setup;\n    }(),\n    setRegistrar: function () {\n      var _setRegistrar = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var web3, tld, controllerAddress;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                web3 = this.web3;\n                tld = this.registrarTLD;\n                _context2.next = 4;\n                return this.getRegistrarAddress(tld);\n\n              case 4:\n                this.registrarAddress = _context2.sent;\n                this.ensRegistryContract = new web3.eth.Contract(RegistryAbi, this.network.type.ens.registry);\n\n                if (!(this.registrarType === REGISTRAR_TYPES.FIFS)) {\n                  _context2.next = 10;\n                  break;\n                }\n\n                this.registrarContract = new web3.eth.Contract(FifsRegistrarAbi, this.registrarAddress);\n                _context2.next = 23;\n                break;\n\n              case 10:\n                if (!(this.registrarType === REGISTRAR_TYPES.PERMANENT)) {\n                  _context2.next = 23;\n                  break;\n                }\n\n                _context2.prev = 11;\n                _context2.next = 14;\n                return this.ens.resolver(this.registrarTLD, ResolverAbi).interfaceImplementer(permanentRegistrar.INTERFACE_CONTROLLER);\n\n              case 14:\n                controllerAddress = _context2.sent;\n                this.registrarControllerContract = new this.web3.eth.Contract(PermanentRegistrarControllerAbi, controllerAddress);\n                this.registrarContract = new this.web3.eth.Contract(baseRegistrarAbi, this.registrarAddress);\n                _context2.next = 23;\n                break;\n\n              case 19:\n                _context2.prev = 19;\n                _context2.t0 = _context2[\"catch\"](11);\n                this.isPermanentLive = false;\n                Toast.responseHandler('ENS Permanent registrar is not available yet, please try again later', Toast.ERROR);\n\n              case 23:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[11, 19]]);\n      }));\n\n      function setRegistrar() {\n        return _setRegistrar.apply(this, arguments);\n      }\n\n      return setRegistrar;\n    }(),\n    transferDomain: function () {\n      var _transferDomain = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3(toAddress) {\n        var to, data, transferTx;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (this.registrarType === REGISTRAR_TYPES.FIFS) {\n                  data = this.ensRegistryContract.methods.setOwner(this.nameHash, toAddress).encodeABI();\n                  to = this.network.type.ens.registry;\n                } else if (this.registrarType === REGISTRAR_TYPES.PERMANENT) {\n                  data = this.registrarContract.methods.safeTransferFrom(this.account.address, toAddress, this.labelHash).encodeABI();\n                  to = this.registrarAddress;\n                }\n\n                transferTx = {\n                  from: this.account.address,\n                  to: to,\n                  data: data,\n                  value: 0\n                };\n                this.web3.eth.sendTransaction(transferTx).catch(function (err) {\n                  Toast.responseHandler(err, false);\n                });\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function transferDomain(_x) {\n        return _transferDomain.apply(this, arguments);\n      }\n\n      return transferDomain;\n    }(),\n    setMultiCoin: function () {\n      var _setMultiCoin = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4(coin) {\n        var _this2 = this;\n\n        var web3, address, publicResolverAddress, currentResolverAddress, publicResolverContract, getDecodedAddress, setAddrTx, setResolverTx, migrateEthAddress;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                web3 = this.web3;\n                address = this.account.address;\n                publicResolverAddress = this.publicResolverAddress;\n                _context4.next = 5;\n                return this.ensRegistryContract.methods.resolver(this.nameHash).call();\n\n              case 5:\n                currentResolverAddress = _context4.sent;\n                publicResolverContract = new web3.eth.Contract(ResolverAbi, publicResolverAddress);\n\n                getDecodedAddress = function getDecodedAddress(_coinItem) {\n                  var decodedAddress = '0x';\n\n                  if (_coinItem.value !== '' && _coinItem.value) {\n                    decodedAddress = _coinItem.decode(_coinItem.value);\n                  }\n\n                  return decodedAddress;\n                };\n\n                setAddrTx = coin.map(function (item) {\n                  return {\n                    from: address,\n                    to: publicResolverAddress,\n                    data: publicResolverContract.methods.setAddr(_this2.nameHash, item.id, getDecodedAddress(item)).encodeABI(),\n                    value: 0,\n                    gasPrice: new BigNumber(unit.toWei(_this2.gasPrice, 'gwei')).toFixed()\n                  };\n                });\n\n                if (!this.resolverMultiCoinSupport) {\n                  setAddrTx.data = publicResolverContract.methods.setAddr(this.nameHash, getDecodedAddress(coin[0])).encodeABI();\n                }\n\n                if (currentResolverAddress.toLowerCase() === publicResolverAddress.toLowerCase()) {\n                  if (coin.length === 1) {\n                    web3.eth.sendTransaction(setAddrTx[0]).catch(function (err) {\n                      Toast.responseHandler(err, false);\n                    });\n                  } else {\n                    web3.mew.sendBatchTransactions(_toConsumableArray(setAddrTx).filter(Boolean));\n                  }\n                } else {\n                  setResolverTx = {\n                    from: address,\n                    to: this.network.type.ens.registry,\n                    data: this.ensRegistryContract.methods.setResolver(this.nameHash, publicResolverAddress).encodeABI(),\n                    value: 0,\n                    gasPrice: new BigNumber(unit.toWei(this.gasPrice, 'gwei')).toFixed()\n                  };\n                  migrateEthAddress = null;\n\n                  if (coin.id !== this.supportedCoins.ETH.id && this.supportedCoins.ETH.value) {\n                    migrateEthAddress = {\n                      from: address,\n                      to: publicResolverAddress,\n                      data: publicResolverContract.methods.setAddr(this.nameHash, this.supportedCoins.ETH.id, getDecodedAddress(this.supportedCoins.ETH)).encodeABI(),\n                      value: 0,\n                      gasPrice: new BigNumber(unit.toWei(this.gasPrice, 'gwei')).toFixed()\n                    };\n                  }\n\n                  web3.mew.sendBatchTransactions([setResolverTx].concat(_toConsumableArray(setAddrTx), [migrateEthAddress]).filter(Boolean));\n                }\n\n              case 11:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function setMultiCoin(_x2) {\n        return _setMultiCoin.apply(this, arguments);\n      }\n\n      return setMultiCoin;\n    }(),\n    registerFifsName: function () {\n      var _registerFifsName = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee5() {\n        var address, web3, data, raw;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                address = this.account.address;\n                web3 = this.web3;\n                _context5.next = 4;\n                return this.registrarContract.methods.register(this.labelHash, address).encodeABI();\n\n              case 4:\n                data = _context5.sent;\n                raw = {\n                  from: address,\n                  value: 0,\n                  to: this.registrarAddress,\n                  data: data\n                };\n                web3.eth.sendTransaction(raw).catch(function (err) {\n                  Toast.responseHandler(err, false);\n                });\n\n              case 7:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function registerFifsName() {\n        return _registerFifsName.apply(this, arguments);\n      }\n\n      return registerFifsName;\n    }(),\n    getRegistrarAddress: function () {\n      var _getRegistrarAddress = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee6(tld) {\n        var registrarAddress;\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this.ens.owner(tld);\n\n              case 2:\n                registrarAddress = _context6.sent;\n                return _context6.abrupt(\"return\", registrarAddress);\n\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function getRegistrarAddress(_x3) {\n        return _getRegistrarAddress.apply(this, arguments);\n      }\n\n      return getRegistrarAddress;\n    }(),\n    checkDomain: function () {\n      var _checkDomain = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee7() {\n        var _this3 = this;\n\n        var supportedTlds, isSupported, web3, expiryTime, isAvailable, oldRegistrarAddress, domainStatus, deedContract, _isAvailable, owner, registrarAddr, _owner;\n\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                supportedTlds = this.network.type.ens.supportedTld;\n                isSupported = supportedTlds.find(function (item) {\n                  return item === _this3.parsedTld;\n                });\n                this.loading = true;\n                web3 = this.web3;\n                this.labelHash = web3.utils.sha3(this.parsedHostName);\n\n                if (!(this.parsedTld !== '' && isSupported === undefined)) {\n                  _context7.next = 10;\n                  break;\n                }\n\n                Toast.responseHandler(\"Domain TLD \".concat(this.parsedTld, \" is not supported in this node!\"), Toast.ERROR);\n                this.loading = false;\n                _context7.next = 77;\n                break;\n\n              case 10:\n                if (!(this.parsedTld === this.registrarTLD)) {\n                  _context7.next = 59;\n                  break;\n                }\n\n                _context7.prev = 11;\n\n                if (!(this.registrarType === REGISTRAR_TYPES.FIFS && !this.isSubDomain)) {\n                  _context7.next = 20;\n                  break;\n                }\n\n                _context7.next = 15;\n                return this.registrarContract.methods.expiryTimes(this.labelHash).call();\n\n              case 15:\n                expiryTime = _context7.sent;\n                isAvailable = expiryTime * 1000 < new Date().getTime();\n\n                if (isAvailable) {\n                  this.$router.push({\n                    path: 'manage-ens/fifs'\n                  });\n                  this.loading = false;\n                } else {\n                  this.getMoreInfo();\n                  this.loading = false;\n                }\n\n                _context7.next = 51;\n                break;\n\n              case 20:\n                if (!(this.registrarType === REGISTRAR_TYPES.PERMANENT && !this.isSubDomain)) {\n                  _context7.next = 46;\n                  break;\n                }\n\n                if (this.isPermanentLive) {\n                  _context7.next = 24;\n                  break;\n                }\n\n                Toast.responseHandler('ENS Permanent registrar is not available yet, please try again later', Toast.ERROR);\n                return _context7.abrupt(\"return\");\n\n              case 24:\n                _context7.next = 26;\n                return this.ens.resolver(this.registrarTLD, ResolverAbi).interfaceImplementer(permanentRegistrar.INTERFACE_LEGACY_REGISTRAR);\n\n              case 26:\n                oldRegistrarAddress = _context7.sent;\n                this.legacyRegistrar = new this.web3.eth.Contract(RegistrarAbi, oldRegistrarAddress);\n                _context7.next = 30;\n                return this.legacyRegistrar.methods.entries(this.labelHash).call();\n\n              case 30:\n                domainStatus = _context7.sent;\n\n                if (!(domainStatus[0] === '2')) {\n                  _context7.next = 40;\n                  break;\n                }\n\n                deedContract = new this.web3.eth.Contract(DeedContractAbi, domainStatus[1]);\n                _context7.next = 35;\n                return deedContract.methods.owner().call();\n\n              case 35:\n                this.deedOwner = _context7.sent;\n                this.loading = false;\n                this.$router.push({\n                  path: 'manage-ens/transfer-registrar'\n                });\n                _context7.next = 44;\n                break;\n\n              case 40:\n                _context7.next = 42;\n                return this.registrarControllerContract.methods.available(this.parsedHostName).call();\n\n              case 42:\n                _isAvailable = _context7.sent;\n                if (!_isAvailable) this.getMoreInfo();else {\n                  this.generateKeyPhrase();\n                  this.$router.push({\n                    path: 'manage-ens/create-commitment'\n                  });\n                  this.loading = false;\n                }\n\n              case 44:\n                _context7.next = 51;\n                break;\n\n              case 46:\n                if (!this.isSubDomain) {\n                  _context7.next = 51;\n                  break;\n                }\n\n                _context7.next = 49;\n                return this.ens.owner(this.parsedDomainName);\n\n              case 49:\n                owner = _context7.sent;\n\n                if (owner === '0x0000000000000000000000000000000000000000') {\n                  Toast.responseHandler('This subdomain is not owned', Toast.WARN);\n                } else {\n                  this.getMoreInfo();\n                }\n\n              case 51:\n                _context7.next = 57;\n                break;\n\n              case 53:\n                _context7.prev = 53;\n                _context7.t0 = _context7[\"catch\"](11);\n                Toast.responseHandler(_context7.t0, false);\n                this.loading = false;\n\n              case 57:\n                _context7.next = 77;\n                break;\n\n              case 59:\n                _context7.prev = 59;\n                _context7.next = 62;\n                return this.ens.owner(this.parsedTld);\n\n              case 62:\n                registrarAddr = _context7.sent;\n                this.dnsRegistrar = new DNSRegistrar(this.web3.currentProvider, registrarAddr);\n                _context7.next = 66;\n                return this.dnsRegistrar.claim(this.parsedDomainName);\n\n              case 66:\n                this.dnsClaim = _context7.sent;\n                _context7.next = 69;\n                return this.ens.owner(this.parsedDomainName);\n\n              case 69:\n                _owner = _context7.sent;\n\n                if (this.dnsClaim.result.found && this.dnsClaim.getOwner().toLowerCase() === _owner.toLowerCase()) {\n                  this.getMoreInfo();\n                } else if (this.dnsClaim.result.found) {\n                  this.dnsOwner = this.dnsClaim.getOwner();\n                  this.processDNSresult('dnsClaimable'); // Claimable\n                } else if (this.dnsClaim.result.nsec) {\n                  this.owner = _owner;\n                  this.processDNSresult('dnsMissingTXT'); // TXT missing/unclaim\n                } else {\n                  this.processDNSresult('dnsNotSetup'); // DNSEC not setup properly\n                }\n\n                _context7.next = 77;\n                break;\n\n              case 73:\n                _context7.prev = 73;\n                _context7.t1 = _context7[\"catch\"](59);\n                this.loading = false;\n                Toast.responseHandler('Something went wrong! Please try again.', Toast.ERROR);\n\n              case 77:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[11, 53], [59, 73]]);\n      }));\n\n      function checkDomain() {\n        return _checkDomain.apply(this, arguments);\n      }\n\n      return checkDomain;\n    }(),\n    createCommitment: function () {\n      var _createCommitment = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee8() {\n        var _this4 = this;\n\n        var utils, commitment;\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                utils = this.web3.utils;\n                _context8.prev = 1;\n                _context8.next = 4;\n                return this.registrarControllerContract.methods.makeCommitment(this.parsedHostName, this.account.address, utils.sha3(this.secretPhrase)).call();\n\n              case 4:\n                commitment = _context8.sent;\n                _context8.next = 7;\n                return this.registrarControllerContract.methods.minCommitmentAge().call();\n\n              case 7:\n                this.minimumAge = _context8.sent;\n                this.minimumAge = \"\".concat(parseInt(this.minimumAge) + 30);\n                _context8.next = 11;\n                return this.registrarControllerContract.methods.commit(commitment).send({\n                  from: this.account.address\n                }).once('transactionHash', function () {\n                  _this4.$router.push({\n                    path: 'permanent-registration'\n                  });\n                }).on('receipt', function () {\n                  _this4.loading = false;\n                  _this4.commitmentCreated = true;\n                });\n\n              case 11:\n                _context8.next = 17;\n                break;\n\n              case 13:\n                _context8.prev = 13;\n                _context8.t0 = _context8[\"catch\"](1);\n                this.loading = false;\n                Toast.responseHandler(_context8.t0, Toast.ERROR);\n\n              case 17:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this, [[1, 13]]);\n      }));\n\n      function createCommitment() {\n        return _createCommitment.apply(this, arguments);\n      }\n\n      return createCommitment;\n    }(),\n    registerWithDuration: function () {\n      var _registerWithDuration = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee9() {\n        var _this5 = this;\n\n        var utils, SECONDS_YEAR, duration, rentPrice;\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                utils = this.web3.utils;\n                this.loading = true;\n                SECONDS_YEAR = 60 * 60 * 24 * 365.25;\n                duration = Math.ceil(SECONDS_YEAR * this.duration);\n                _context9.prev = 4;\n                _context9.next = 7;\n                return this.registrarControllerContract.methods.rentPrice(this.parsedHostName, duration).call();\n\n              case 7:\n                rentPrice = _context9.sent;\n                this.registrarControllerContract.methods.register(this.parsedHostName, this.account.address, duration, utils.sha3(this.secretPhrase)).send({\n                  from: this.account.address,\n                  value: rentPrice\n                }).once('transactionHash', function () {\n                  _this5.$router.push({\n                    path: 'registration-in-progress'\n                  });\n                }).once('receipt', function () {\n                  _this5.getMoreInfo();\n\n                  Toast.responseHandler('Successfully Registered!', Toast.SUCCESS);\n                });\n                _context9.next = 15;\n                break;\n\n              case 11:\n                _context9.prev = 11;\n                _context9.t0 = _context9[\"catch\"](4);\n                this.loading = false;\n                Toast.responseHandler('Something went wrong! Please try again.', Toast.ERROR);\n\n              case 15:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this, [[4, 11]]);\n      }));\n\n      function registerWithDuration() {\n        return _registerWithDuration.apply(this, arguments);\n      }\n\n      return registerWithDuration;\n    }(),\n    transferFunc: function transferFunc() {\n      var _this6 = this;\n\n      this.loading = true;\n\n      try {\n        this.legacyRegistrar.methods.transferRegistrars(this.labelHash).send({\n          from: this.account.address\n        }).once('receipt', function () {\n          _this6.getMoreInfo();\n\n          Toast.responseHandler('Successfully Transferred!', Toast.SUCCESS);\n        });\n      } catch (e) {\n        this.loading = false;\n        Toast.responseHandler('Something went wrong! Please try again.', Toast.ERROR);\n      }\n    },\n    claimFunc: function () {\n      var _claimFunc = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee10() {\n        return regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                this.loading = true;\n                _context10.prev = 1;\n                _context10.next = 4;\n                return this.dnsClaim.submit({\n                  from: this.account.address\n                });\n\n              case 4:\n                this.loading = false;\n                _context10.next = 11;\n                break;\n\n              case 7:\n                _context10.prev = 7;\n                _context10.t0 = _context10[\"catch\"](1);\n                this.loading = false;\n                Toast.responseHandler('Something went wrong! Please try again.', Toast.ERROR);\n\n              case 11:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this, [[1, 7]]);\n      }));\n\n      function claimFunc() {\n        return _claimFunc.apply(this, arguments);\n      }\n\n      return claimFunc;\n    }(),\n    updateStep: function updateStep(val) {\n      this.step = val;\n    },\n    processDNSresult: function processDNSresult(type) {\n      this.loading = false;\n\n      switch (type) {\n        case 'dnsOwned':\n          this.$router.push({\n            path: 'manage-ens/dns-owned'\n          });\n          break;\n\n        case 'dnsClaimable':\n          this.$router.push({\n            path: 'manage-ens/claim'\n          });\n          break;\n\n        case 'dnsNotSetup':\n          this.$router.push({\n            path: 'manage-ens/dns-error'\n          });\n          break;\n\n        case 'dnsMissingTXT':\n          this.$router.push({\n            path: 'manage-ens/no-txt-setup'\n          });\n          break;\n      }\n    },\n    updateDomainName: function updateDomainName(value) {\n      try {\n        this.domainName = normalise(value);\n      } catch (e) {\n        Toast.responseHandler(e, Toast.WARN);\n        this.domainNameErr = true;\n        return;\n      }\n\n      if (this.parsedTld === this.registrarTLD) {\n        this.domainNameErr = value.substr(0, 2) === '0x' || this.parsedHostName.length < 7;\n      } else {\n        this.domainNameErr = false;\n      }\n    },\n    getMoreInfo: function () {\n      var _getMoreInfo = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee11() {\n        var _this7 = this;\n\n        var owner, resolver, publicResolverContract, currentResolverAddress, resolverContract, supportMultiCoin, type, _loop, _type;\n\n        return regeneratorRuntime.wrap(function _callee11$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                _context12.next = 2;\n                return this.ens.resolver('resolver.eth');\n\n              case 2:\n                resolver = _context12.sent;\n                _context12.next = 5;\n                return resolver.addr();\n\n              case 5:\n                this.publicResolverAddress = _context12.sent;\n                this.nameHash = nameHashPckg.hash(this.parsedDomainName);\n                _context12.prev = 7;\n\n                if (!(this.registrarType === REGISTRAR_TYPES.PERMANENT && this.parsedTld === this.registrarTLD && !this.isSubDomain)) {\n                  _context12.next = 14;\n                  break;\n                }\n\n                _context12.next = 11;\n                return this.registrarContract.methods.ownerOf(this.labelHash).call();\n\n              case 11:\n                owner = _context12.sent;\n                _context12.next = 17;\n                break;\n\n              case 14:\n                _context12.next = 16;\n                return this.ens.owner(this.parsedDomainName);\n\n              case 16:\n                owner = _context12.sent;\n\n              case 17:\n                _context12.next = 23;\n                break;\n\n              case 19:\n                _context12.prev = 19;\n                _context12.t0 = _context12[\"catch\"](7);\n                owner = '0x';\n                Toast.responseHandler(_context12.t0, false);\n\n              case 23:\n                _context12.prev = 23;\n                publicResolverContract = new this.web3.eth.Contract(ResolverAbi, this.publicResolverAddress);\n                _context12.next = 27;\n                return publicResolverContract.methods.supportsInterface(MULTICOIN_SUPPORT_INTERFACE).call();\n\n              case 27:\n                this.resolverMultiCoinSupport = _context12.sent;\n                _context12.next = 33;\n                break;\n\n              case 30:\n                _context12.prev = 30;\n                _context12.t1 = _context12[\"catch\"](23);\n                this.resolverMultiCoinSupport = false;\n\n              case 33:\n                _context12.prev = 33;\n                _context12.next = 36;\n                return this.ensRegistryContract.methods.resolver(this.nameHash).call();\n\n              case 36:\n                currentResolverAddress = _context12.sent;\n                resolverContract = new this.web3.eth.Contract(ResolverAbi, currentResolverAddress);\n                this.fetchTxtRecords(resolverContract);\n                _context12.next = 41;\n                return resolverContract.methods.supportsInterface(MULTICOIN_SUPPORT_INTERFACE).call();\n\n              case 41:\n                supportMultiCoin = _context12.sent;\n\n                for (type in this.supportedCoins) {\n                  this.supportedCoins[type].value = '';\n                }\n\n                if (!supportMultiCoin) {\n                  _context12.next = 53;\n                  break;\n                }\n\n                _loop =\n                /*#__PURE__*/\n                regeneratorRuntime.mark(function _loop(_type) {\n                  return regeneratorRuntime.wrap(function _loop$(_context11) {\n                    while (1) {\n                      switch (_context11.prev = _context11.next) {\n                        case 0:\n                          _context11.next = 2;\n                          return _this7.ens.resolver(_this7.parsedDomainName, ResolverAbi).addr(_this7.supportedCoins[_type].id).then(function (address) {\n                            if (address) {\n                              _this7.supportedCoins[_type].value = _this7.supportedCoins[_type].encode(new Buffer(address.replace('0x', ''), 'hex'));\n                            }\n                          });\n\n                        case 2:\n                        case \"end\":\n                          return _context11.stop();\n                      }\n                    }\n                  }, _loop);\n                });\n                _context12.t2 = regeneratorRuntime.keys(this.supportedCoins);\n\n              case 46:\n                if ((_context12.t3 = _context12.t2()).done) {\n                  _context12.next = 51;\n                  break;\n                }\n\n                _type = _context12.t3.value;\n                return _context12.delegateYield(_loop(_type), \"t4\", 49);\n\n              case 49:\n                _context12.next = 46;\n                break;\n\n              case 51:\n                _context12.next = 56;\n                break;\n\n              case 53:\n                _context12.next = 55;\n                return this.ens.resolver(this.parsedDomainName).addr();\n\n              case 55:\n                this.supportedCoins['ETH'].value = _context12.sent;\n\n              case 56:\n                _context12.next = 61;\n                break;\n\n              case 58:\n                _context12.prev = 58;\n                _context12.t5 = _context12[\"catch\"](33);\n                this.supportedCoins['ETH'].value = '0x';\n\n              case 61:\n                this.owner = owner;\n\n                if (this.$route.fullPath === '/interface/dapps/manage-ens') {\n                  this.$router.push({\n                    path: 'manage-ens/owned'\n                  });\n                } else {\n                  this.$router.push({\n                    path: 'owned'\n                  });\n                }\n\n                this.loading = false;\n\n              case 64:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee11, this, [[7, 19], [23, 30], [33, 58]]);\n      }));\n\n      function getMoreInfo() {\n        return _getMoreInfo.apply(this, arguments);\n      }\n\n      return getMoreInfo;\n    }(),\n    fetchTxtRecords: function () {\n      var _fetchTxtRecords = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee12(resolver) {\n        var supportsTxt, newObj, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, el;\n\n        return regeneratorRuntime.wrap(function _callee12$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.prev = 0;\n                _context13.next = 3;\n                return resolver.methods.supportsInterface(TEXT_RECORD_SUPPORT_INTERFACE).call();\n\n              case 3:\n                supportsTxt = _context13.sent;\n                this.resolverTxtSupport = supportsTxt;\n\n                if (!supportsTxt) {\n                  _context13.next = 38;\n                  break;\n                }\n\n                this.recordContract = resolver;\n                newObj = {};\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _iteratorError = undefined;\n                _context13.prev = 11;\n                _iterator = this.supportedTxt[Symbol.iterator]();\n\n              case 13:\n                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {\n                  _context13.next = 21;\n                  break;\n                }\n\n                el = _step.value;\n                _context13.next = 17;\n                return resolver.methods.text(this.nameHash, el.name).call();\n\n              case 17:\n                newObj[el.name] = _context13.sent;\n\n              case 18:\n                _iteratorNormalCompletion = true;\n                _context13.next = 13;\n                break;\n\n              case 21:\n                _context13.next = 27;\n                break;\n\n              case 23:\n                _context13.prev = 23;\n                _context13.t0 = _context13[\"catch\"](11);\n                _didIteratorError = true;\n                _iteratorError = _context13.t0;\n\n              case 27:\n                _context13.prev = 27;\n                _context13.prev = 28;\n\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                  _iterator.return();\n                }\n\n              case 30:\n                _context13.prev = 30;\n\n                if (!_didIteratorError) {\n                  _context13.next = 33;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 33:\n                return _context13.finish(30);\n\n              case 34:\n                return _context13.finish(27);\n\n              case 35:\n                this.txtRecords = Object.assign({}, newObj);\n                _context13.next = 41;\n                break;\n\n              case 38:\n                this.recordContract = {};\n                this.txtRecords = {};\n                this.resolverTxtSupport = false;\n\n              case 41:\n                _context13.next = 48;\n                break;\n\n              case 43:\n                _context13.prev = 43;\n                _context13.t1 = _context13[\"catch\"](0);\n                this.recordContract = {};\n                this.txtRecords = {};\n                this.resolverTxtSupport = false;\n\n              case 48:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee12, this, [[0, 43], [11, 23, 27, 35], [28,, 30, 34]]);\n      }));\n\n      function fetchTxtRecords(_x4) {\n        return _fetchTxtRecords.apply(this, arguments);\n      }\n\n      return fetchTxtRecords;\n    }(),\n    setRecord: function () {\n      var _setRecord = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee13(obj) {\n        var address, resolverAddr, contract, txs, i;\n        return regeneratorRuntime.wrap(function _callee13$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                address = this.account.address;\n                resolverAddr = this.publicResolverAddress;\n                contract = this.recordContract;\n                txs = [];\n\n                for (i in obj) {\n                  txs.push({\n                    from: address,\n                    to: resolverAddr,\n                    data: contract.methods.setText(this.nameHash, i, obj[i]).encodeABI(),\n                    gasPrice: new BigNumber(unit.toWei(this.gasPrice, 'gwei')).toFixed(),\n                    value: 0\n                  });\n                }\n\n                if (txs.length > 1) {\n                  this.web3.mew.sendBatchTransactions([].concat(txs).filter(Boolean));\n                } else {\n                  this.web3.eth.sendTransaction(txs[0]);\n                }\n\n              case 6:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function setRecord(_x5) {\n        return _setRecord.apply(this, arguments);\n      }\n\n      return setRecord;\n    }(),\n    updateSecretPhrase: function updateSecretPhrase(e) {\n      this.secretPhrase = e;\n    },\n    updateDuration: function updateDuration(e) {\n      this.duration = e;\n    },\n    generateKeyPhrase: function generateKeyPhrase() {\n      var wordsArray = [];\n      var min = 0;\n      var max = bip39.wordlists.EN.length;\n\n      for (var i = 0; i < 3; i++) {\n        wordsArray.push(bip39.wordlists.EN[Math.floor(Math.random() * (max - min + 1)) + min]);\n      }\n\n      this.secretPhrase = wordsArray.join(' ');\n    }\n  }\n};",{"version":3,"sources":["ManageENS.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"manage-ens-container\">\n    <back-button />\n    <router-view\n      :contract-initiated=\"contractInitiated\"\n      :check-domain=\"checkDomain\"\n      :secret-phrase=\"secretPhrase\"\n      :host-name=\"parsedHostName\"\n      :domain-name=\"parsedDomainName\"\n      :loading=\"loading\"\n      :name-hash=\"nameHash\"\n      :label-hash=\"labelHash\"\n      :owner=\"owner\"\n      :deed-owner=\"deedOwner\"\n      :raw=\"raw\"\n      :step=\"step\"\n      :domain-name-err=\"domainNameErr\"\n      :generate-key-phrase=\"generateKeyPhrase\"\n      :set-multi-coin=\"setMultiCoin\"\n      :transfer-domain=\"transferDomain\"\n      :tld=\"parsedTld === '' ? network.type.ens.registrarTLD : parsedTld\"\n      :network-name=\"network.type.name\"\n      :register-fifs-name=\"registerFifsName\"\n      :multi-tld=\"multiTld\"\n      :claim-func=\"claimFunc\"\n      :dns-owner=\"dnsOwner\"\n      :dns-claim=\"dnsClaim\"\n      :transfer-func=\"transferFunc\"\n      :create-commitment=\"createCommitment\"\n      :register-with-duration=\"registerWithDuration\"\n      :minimum-age=\"minimumAge\"\n      :commitment-created=\"commitmentCreated\"\n      :resolver-multi-coin-support=\"resolverMultiCoinSupport\"\n      :resolver-txt-support=\"resolverTxtSupport\"\n      :supported-coins=\"supportedCoins\"\n      :txt-records=\"txtRecords\"\n      :set-record=\"setRecord\"\n      @updateSecretPhrase=\"updateSecretPhrase\"\n      @domainNameChange=\"updateDomainName\"\n      @updateStep=\"updateStep\"\n      @updateDuration=\"updateDuration\"\n    />\n  </div>\n</template>\n\n<script>\nimport BackButton from '@/layouts/InterfaceLayout/components/BackButton';\nimport RegistrarAbi from './ABI/registrarAbi';\nimport PermanentRegistrarControllerAbi from './ABI/permanentRegistrarController';\nimport baseRegistrarAbi from './ABI/baseRegistrarAbi';\nimport DeedContractAbi from './ABI/deedContractAbi';\nimport RegistryAbi from './ABI/registryAbi.js';\nimport FifsRegistrarAbi from './ABI/fifsRegistrarAbi.js';\nimport ResolverAbi from './ABI/resolverAbi.js';\nimport * as unit from 'ethjs-unit';\nimport * as nameHashPckg from 'eth-ens-namehash';\nimport normalise from '@/helpers/normalise';\nimport { mapState } from 'vuex';\nimport { Toast } from '@/helpers';\nimport DNSRegistrar from '@ensdomains/dnsregistrar';\nimport BigNumber from 'bignumber.js';\nimport supportedCoins from './supportedCoins';\nimport supportedTxt from './supportedTxt';\n\nconst bip39 = require('bip39');\n\nconst permanentRegistrar = {\n  INTERFACE_CONTROLLER: '0x018fac06',\n  INTERFACE_LEGACY_REGISTRAR: '0x7ba18ba1'\n};\nconst MULTICOIN_SUPPORT_INTERFACE = '0xf1cb7e06';\nconst TEXT_RECORD_SUPPORT_INTERFACE = '0x59d1d43c';\nconst REGISTRAR_TYPES = {\n  FIFS: 'fifs',\n  PERMANENT: 'permanent'\n};\nexport default {\n  components: {\n    'back-button': BackButton\n  },\n  data() {\n    return {\n      domainName: '',\n      loading: false,\n      nameHash: '',\n      labelHash: '',\n      owner: '',\n      deedOwner: '',\n      secretPhrase: '',\n      registrarAddress: '',\n      raw: {},\n      contractInitiated: false,\n      step: 1,\n      domainNameErr: false,\n      ensRegistryContract: {},\n      dnsRegistrar: {},\n      dnsClaim: {},\n      dnsOwner: '',\n      legacyRegistrar: {},\n      minimumAge: 0,\n      duration: 1,\n      commitmentCreated: false,\n      publicResolverAddress: '',\n      resolverMultiCoinSupport: false,\n      supportedCoins,\n      txtRecords: {},\n      supportedTxt,\n      recordContract: {},\n      resolverTxtSupport: false\n    };\n  },\n  computed: {\n    ...mapState(['web3', 'network', 'account', 'gasPrice', 'ens']),\n    registrarTLD() {\n      return this.network.type.ens.registrarTLD;\n    },\n    registrarType() {\n      return this.network.type.ens.registrarType;\n    },\n    multiTld() {\n      return (\n        this.network.type.ens.hasOwnProperty('supportedTld') &&\n        this.network.type.ens.supportedTld.length > 1\n      );\n    },\n    parsedTld() {\n      if (this.parsedHostName.length) {\n        const hasTld = this.domainName.lastIndexOf('.');\n        return hasTld > -1\n          ? this.domainName.substr(hasTld + 1, this.domainName.length)\n          : this.registrarTLD;\n      }\n      return '';\n    },\n    parsedHostName() {\n      return this.domainName.substr(\n        0,\n        this.domainName.lastIndexOf('.') > -1\n          ? this.domainName.lastIndexOf('.')\n          : this.domainName.length\n      );\n    },\n    parsedDomainName() {\n      return this.parsedHostName + '.' + this.parsedTld;\n    },\n    isSubDomain() {\n      return this.domainName.split('.').length - 1 > 1;\n    }\n  },\n  watch: {\n    ens(newVal) {\n      if (newVal) {\n        this.setRegistrar();\n      }\n    }\n  },\n  mounted() {\n    this.$nextTick(() => {\n      this.setup();\n    });\n  },\n  methods: {\n    async setup() {\n      this.isPermanentLive = true;\n      this.domainName = '';\n      this.loading = false;\n      this.nameHash = '';\n      this.labelHash = '';\n      this.owner = '';\n      this.deedOwner = '';\n      this.secretPhrase = '';\n      this.registrarAddress = '';\n      this.raw = {};\n      this.contractInitiated = false;\n      this.step = 1;\n      this.contractInitiated = false;\n      this.contractInitiated = true;\n      this.domainNameErr = false;\n      this.dnsRegistrar = {};\n      this.dnsClaim = {};\n      this.legacyRegistrar = {};\n      this.minimumAge = 0;\n      this.duration = 1;\n      this.commitmentCreated = false;\n      this.publicResolverAddress = '';\n      this.resolverMultiCoinSupport = false;\n      this.resolverTxtSupport = false;\n      this.supportedCoins = supportedCoins;\n      this.txtRecords = {};\n      this.recordContract = {};\n\n      if (this.ens) {\n        this.setRegistrar();\n      }\n      for (const type in this.supportedCoins)\n        this.supportedCoins[type].value = '';\n    },\n    async setRegistrar() {\n      const web3 = this.web3;\n      const tld = this.registrarTLD;\n      this.registrarAddress = await this.getRegistrarAddress(tld);\n      this.ensRegistryContract = new web3.eth.Contract(\n        RegistryAbi,\n        this.network.type.ens.registry\n      );\n      if (this.registrarType === REGISTRAR_TYPES.FIFS) {\n        this.registrarContract = new web3.eth.Contract(\n          FifsRegistrarAbi,\n          this.registrarAddress\n        );\n      } else if (this.registrarType === REGISTRAR_TYPES.PERMANENT) {\n        try {\n          const controllerAddress = await this.ens\n            .resolver(this.registrarTLD, ResolverAbi)\n            .interfaceImplementer(permanentRegistrar.INTERFACE_CONTROLLER);\n          this.registrarControllerContract = new this.web3.eth.Contract(\n            PermanentRegistrarControllerAbi,\n            controllerAddress\n          );\n          this.registrarContract = new this.web3.eth.Contract(\n            baseRegistrarAbi,\n            this.registrarAddress\n          );\n        } catch (e) {\n          this.isPermanentLive = false;\n          Toast.responseHandler(\n            'ENS Permanent registrar is not available yet, please try again later',\n            Toast.ERROR\n          );\n        }\n      }\n    },\n    async transferDomain(toAddress) {\n      let to, data;\n      if (this.registrarType === REGISTRAR_TYPES.FIFS) {\n        data = this.ensRegistryContract.methods\n          .setOwner(this.nameHash, toAddress)\n          .encodeABI();\n        to = this.network.type.ens.registry;\n      } else if (this.registrarType === REGISTRAR_TYPES.PERMANENT) {\n        data = this.registrarContract.methods\n          .safeTransferFrom(this.account.address, toAddress, this.labelHash)\n          .encodeABI();\n        to = this.registrarAddress;\n      }\n      const transferTx = {\n        from: this.account.address,\n        to,\n        data,\n        value: 0\n      };\n      this.web3.eth.sendTransaction(transferTx).catch(err => {\n        Toast.responseHandler(err, false);\n      });\n    },\n    async setMultiCoin(coin) {\n      const web3 = this.web3;\n      const address = this.account.address;\n      const publicResolverAddress = this.publicResolverAddress;\n      const currentResolverAddress = await this.ensRegistryContract.methods\n        .resolver(this.nameHash)\n        .call();\n      const publicResolverContract = new web3.eth.Contract(\n        ResolverAbi,\n        publicResolverAddress\n      );\n      const getDecodedAddress = _coinItem => {\n        let decodedAddress = '0x';\n        if (_coinItem.value !== '' && _coinItem.value) {\n          decodedAddress = _coinItem.decode(_coinItem.value);\n        }\n        return decodedAddress;\n      };\n      const setAddrTx = coin.map(item => {\n        return {\n          from: address,\n          to: publicResolverAddress,\n          data: publicResolverContract.methods\n            .setAddr(this.nameHash, item.id, getDecodedAddress(item))\n            .encodeABI(),\n          value: 0,\n          gasPrice: new BigNumber(unit.toWei(this.gasPrice, 'gwei')).toFixed()\n        };\n      });\n\n      if (!this.resolverMultiCoinSupport) {\n        setAddrTx.data = publicResolverContract.methods\n          .setAddr(this.nameHash, getDecodedAddress(coin[0]))\n          .encodeABI();\n      }\n      if (\n        currentResolverAddress.toLowerCase() ===\n        publicResolverAddress.toLowerCase()\n      ) {\n        if (coin.length === 1) {\n          web3.eth.sendTransaction(setAddrTx[0]).catch(err => {\n            Toast.responseHandler(err, false);\n          });\n        } else {\n          web3.mew.sendBatchTransactions([...setAddrTx].filter(Boolean));\n        }\n      } else {\n        const setResolverTx = {\n          from: address,\n          to: this.network.type.ens.registry,\n          data: this.ensRegistryContract.methods\n            .setResolver(this.nameHash, publicResolverAddress)\n            .encodeABI(),\n          value: 0,\n          gasPrice: new BigNumber(unit.toWei(this.gasPrice, 'gwei')).toFixed()\n        };\n        let migrateEthAddress = null;\n        if (\n          coin.id !== this.supportedCoins.ETH.id &&\n          this.supportedCoins.ETH.value\n        ) {\n          migrateEthAddress = {\n            from: address,\n            to: publicResolverAddress,\n            data: publicResolverContract.methods\n              .setAddr(\n                this.nameHash,\n                this.supportedCoins.ETH.id,\n                getDecodedAddress(this.supportedCoins.ETH)\n              )\n              .encodeABI(),\n            value: 0,\n            gasPrice: new BigNumber(unit.toWei(this.gasPrice, 'gwei')).toFixed()\n          };\n        }\n        web3.mew.sendBatchTransactions(\n          [setResolverTx, ...setAddrTx, migrateEthAddress].filter(Boolean)\n        );\n      }\n    },\n    async registerFifsName() {\n      const address = this.account.address;\n      const web3 = this.web3;\n      const data = await this.registrarContract.methods\n        .register(this.labelHash, address)\n        .encodeABI();\n      const raw = {\n        from: address,\n        value: 0,\n        to: this.registrarAddress,\n        data: data\n      };\n      web3.eth.sendTransaction(raw).catch(err => {\n        Toast.responseHandler(err, false);\n      });\n    },\n    async getRegistrarAddress(tld) {\n      const registrarAddress = await this.ens.owner(tld);\n      return registrarAddress;\n    },\n    async checkDomain() {\n      const supportedTlds = this.network.type.ens.supportedTld;\n      const isSupported = supportedTlds.find(item => {\n        return item === this.parsedTld;\n      });\n\n      this.loading = true;\n      const web3 = this.web3;\n\n      this.labelHash = web3.utils.sha3(this.parsedHostName);\n      if (this.parsedTld !== '' && isSupported === undefined) {\n        Toast.responseHandler(\n          `Domain TLD ${this.parsedTld} is not supported in this node!`,\n          Toast.ERROR\n        );\n        this.loading = false;\n      } else if (this.parsedTld === this.registrarTLD) {\n        try {\n          if (\n            this.registrarType === REGISTRAR_TYPES.FIFS &&\n            !this.isSubDomain\n          ) {\n            const expiryTime = await this.registrarContract.methods\n              .expiryTimes(this.labelHash)\n              .call();\n            const isAvailable = expiryTime * 1000 < new Date().getTime();\n            if (isAvailable) {\n              this.$router.push({ path: 'manage-ens/fifs' });\n              this.loading = false;\n            } else {\n              this.getMoreInfo();\n              this.loading = false;\n            }\n          } else if (\n            this.registrarType === REGISTRAR_TYPES.PERMANENT &&\n            !this.isSubDomain\n          ) {\n            if (!this.isPermanentLive) {\n              Toast.responseHandler(\n                'ENS Permanent registrar is not available yet, please try again later',\n                Toast.ERROR\n              );\n              return;\n            }\n            const oldRegistrarAddress = await this.ens\n              .resolver(this.registrarTLD, ResolverAbi)\n              .interfaceImplementer(\n                permanentRegistrar.INTERFACE_LEGACY_REGISTRAR\n              );\n            this.legacyRegistrar = new this.web3.eth.Contract(\n              RegistrarAbi,\n              oldRegistrarAddress\n            );\n            const domainStatus = await this.legacyRegistrar.methods\n              .entries(this.labelHash)\n              .call();\n            if (domainStatus[0] === '2') {\n              const deedContract = new this.web3.eth.Contract(\n                DeedContractAbi,\n                domainStatus[1]\n              );\n              this.deedOwner = await deedContract.methods.owner().call();\n              this.loading = false;\n              this.$router.push({ path: 'manage-ens/transfer-registrar' });\n            } else {\n              const isAvailable = await this.registrarControllerContract.methods\n                .available(this.parsedHostName)\n                .call();\n              if (!isAvailable) this.getMoreInfo();\n              else {\n                this.generateKeyPhrase();\n                this.$router.push({ path: 'manage-ens/create-commitment' });\n                this.loading = false;\n              }\n            }\n          } else if (this.isSubDomain) {\n            const owner = await this.ens.owner(this.parsedDomainName);\n            if (owner === '0x0000000000000000000000000000000000000000') {\n              Toast.responseHandler('This subdomain is not owned', Toast.WARN);\n            } else {\n              this.getMoreInfo();\n            }\n          }\n        } catch (e) {\n          Toast.responseHandler(e, false);\n          this.loading = false;\n        }\n      } else {\n        try {\n          const registrarAddr = await this.ens.owner(this.parsedTld);\n          this.dnsRegistrar = new DNSRegistrar(\n            this.web3.currentProvider,\n            registrarAddr\n          );\n          this.dnsClaim = await this.dnsRegistrar.claim(this.parsedDomainName);\n          const _owner = await this.ens.owner(this.parsedDomainName);\n          if (\n            this.dnsClaim.result.found &&\n            this.dnsClaim.getOwner().toLowerCase() === _owner.toLowerCase()\n          ) {\n            this.getMoreInfo();\n          } else if (this.dnsClaim.result.found) {\n            this.dnsOwner = this.dnsClaim.getOwner();\n            this.processDNSresult('dnsClaimable'); // Claimable\n          } else if (this.dnsClaim.result.nsec) {\n            this.owner = _owner;\n            this.processDNSresult('dnsMissingTXT'); // TXT missing/unclaim\n          } else {\n            this.processDNSresult('dnsNotSetup'); // DNSEC not setup properly\n          }\n        } catch (e) {\n          this.loading = false;\n          Toast.responseHandler(\n            'Something went wrong! Please try again.',\n            Toast.ERROR\n          );\n        }\n      }\n    },\n    async createCommitment() {\n      const utils = this.web3.utils;\n      try {\n        const commitment = await this.registrarControllerContract.methods\n          .makeCommitment(\n            this.parsedHostName,\n            this.account.address,\n            utils.sha3(this.secretPhrase)\n          )\n          .call();\n        this.minimumAge = await this.registrarControllerContract.methods\n          .minCommitmentAge()\n          .call();\n        this.minimumAge = `${parseInt(this.minimumAge) + 30}`;\n        await this.registrarControllerContract.methods\n          .commit(commitment)\n          .send({ from: this.account.address })\n          .once('transactionHash', () => {\n            this.$router.push({ path: 'permanent-registration' });\n          })\n          .on('receipt', () => {\n            this.loading = false;\n            this.commitmentCreated = true;\n          });\n      } catch (e) {\n        this.loading = false;\n        Toast.responseHandler(e, Toast.ERROR);\n      }\n    },\n    async registerWithDuration() {\n      const utils = this.web3.utils;\n      this.loading = true;\n      const SECONDS_YEAR = 60 * 60 * 24 * 365.25;\n      const duration = Math.ceil(SECONDS_YEAR * this.duration);\n      try {\n        const rentPrice = await this.registrarControllerContract.methods\n          .rentPrice(this.parsedHostName, duration)\n          .call();\n        this.registrarControllerContract.methods\n          .register(\n            this.parsedHostName,\n            this.account.address,\n            duration,\n            utils.sha3(this.secretPhrase)\n          )\n          .send({ from: this.account.address, value: rentPrice })\n          .once('transactionHash', () => {\n            this.$router.push({ path: 'registration-in-progress' });\n          })\n          .once('receipt', () => {\n            this.getMoreInfo();\n            Toast.responseHandler('Successfully Registered!', Toast.SUCCESS);\n          });\n      } catch (e) {\n        this.loading = false;\n        Toast.responseHandler(\n          'Something went wrong! Please try again.',\n          Toast.ERROR\n        );\n      }\n    },\n    transferFunc() {\n      this.loading = true;\n      try {\n        this.legacyRegistrar.methods\n          .transferRegistrars(this.labelHash)\n          .send({ from: this.account.address })\n          .once('receipt', () => {\n            this.getMoreInfo();\n            Toast.responseHandler('Successfully Transferred!', Toast.SUCCESS);\n          });\n      } catch (e) {\n        this.loading = false;\n        Toast.responseHandler(\n          'Something went wrong! Please try again.',\n          Toast.ERROR\n        );\n      }\n    },\n    async claimFunc() {\n      this.loading = true;\n      try {\n        await this.dnsClaim.submit({\n          from: this.account.address\n        });\n        this.loading = false;\n      } catch (e) {\n        this.loading = false;\n        Toast.responseHandler(\n          'Something went wrong! Please try again.',\n          Toast.ERROR\n        );\n      }\n    },\n    updateStep(val) {\n      this.step = val;\n    },\n    processDNSresult(type) {\n      this.loading = false;\n      switch (type) {\n        case 'dnsOwned':\n          this.$router.push({ path: 'manage-ens/dns-owned' });\n          break;\n        case 'dnsClaimable':\n          this.$router.push({ path: 'manage-ens/claim' });\n          break;\n        case 'dnsNotSetup':\n          this.$router.push({ path: 'manage-ens/dns-error' });\n          break;\n        case 'dnsMissingTXT':\n          this.$router.push({ path: 'manage-ens/no-txt-setup' });\n          break;\n      }\n    },\n    updateDomainName(value) {\n      try {\n        this.domainName = normalise(value);\n      } catch (e) {\n        Toast.responseHandler(e, Toast.WARN);\n        this.domainNameErr = true;\n        return;\n      }\n      if (this.parsedTld === this.registrarTLD) {\n        this.domainNameErr =\n          value.substr(0, 2) === '0x' || this.parsedHostName.length < 7;\n      } else {\n        this.domainNameErr = false;\n      }\n    },\n    async getMoreInfo() {\n      let owner;\n      const resolver = await this.ens.resolver('resolver.eth');\n      this.publicResolverAddress = await resolver.addr();\n      this.nameHash = nameHashPckg.hash(this.parsedDomainName);\n      try {\n        if (\n          this.registrarType === REGISTRAR_TYPES.PERMANENT &&\n          this.parsedTld === this.registrarTLD &&\n          !this.isSubDomain\n        ) {\n          owner = await this.registrarContract.methods\n            .ownerOf(this.labelHash)\n            .call();\n        } else {\n          owner = await this.ens.owner(this.parsedDomainName);\n        }\n      } catch (e) {\n        owner = '0x';\n        Toast.responseHandler(e, false);\n      }\n      try {\n        const publicResolverContract = new this.web3.eth.Contract(\n          ResolverAbi,\n          this.publicResolverAddress\n        );\n        this.resolverMultiCoinSupport = await publicResolverContract.methods\n          .supportsInterface(MULTICOIN_SUPPORT_INTERFACE)\n          .call();\n      } catch (e) {\n        this.resolverMultiCoinSupport = false;\n      }\n      try {\n        const currentResolverAddress = await this.ensRegistryContract.methods\n          .resolver(this.nameHash)\n          .call();\n        const resolverContract = new this.web3.eth.Contract(\n          ResolverAbi,\n          currentResolverAddress\n        );\n        this.fetchTxtRecords(resolverContract);\n        const supportMultiCoin = await resolverContract.methods\n          .supportsInterface(MULTICOIN_SUPPORT_INTERFACE)\n          .call();\n        for (const type in this.supportedCoins)\n          this.supportedCoins[type].value = '';\n        if (supportMultiCoin) {\n          for (const type in this.supportedCoins) {\n            await this.ens\n              .resolver(this.parsedDomainName, ResolverAbi)\n              .addr(this.supportedCoins[type].id)\n              .then(address => {\n                if (address) {\n                  this.supportedCoins[type].value = this.supportedCoins[\n                    type\n                  ].encode(new Buffer(address.replace('0x', ''), 'hex'));\n                }\n              });\n          }\n        } else {\n          this.supportedCoins['ETH'].value = await this.ens\n            .resolver(this.parsedDomainName)\n            .addr();\n        }\n      } catch (e) {\n        this.supportedCoins['ETH'].value = '0x';\n      }\n      this.owner = owner;\n      if (this.$route.fullPath === '/interface/dapps/manage-ens') {\n        this.$router.push({ path: 'manage-ens/owned' });\n      } else {\n        this.$router.push({ path: 'owned' });\n      }\n      this.loading = false;\n    },\n    async fetchTxtRecords(resolver) {\n      try {\n        const supportsTxt = await resolver.methods\n          .supportsInterface(TEXT_RECORD_SUPPORT_INTERFACE)\n          .call();\n        this.resolverTxtSupport = supportsTxt;\n        if (supportsTxt) {\n          this.recordContract = resolver;\n          const newObj = {};\n          for (const el of this.supportedTxt) {\n            newObj[el.name] = await resolver.methods\n              .text(this.nameHash, el.name)\n              .call();\n          }\n          this.txtRecords = Object.assign({}, newObj);\n        } else {\n          this.recordContract = {};\n          this.txtRecords = {};\n          this.resolverTxtSupport = false;\n        }\n      } catch (e) {\n        this.recordContract = {};\n        this.txtRecords = {};\n        this.resolverTxtSupport = false;\n      }\n    },\n    async setRecord(obj) {\n      const address = this.account.address;\n      const resolverAddr = this.publicResolverAddress;\n      const contract = this.recordContract;\n      const txs = [];\n      for (const i in obj) {\n        txs.push({\n          from: address,\n          to: resolverAddr,\n          data: contract.methods.setText(this.nameHash, i, obj[i]).encodeABI(),\n          gasPrice: new BigNumber(unit.toWei(this.gasPrice, 'gwei')).toFixed(),\n          value: 0\n        });\n      }\n      if (txs.length > 1) {\n        this.web3.mew.sendBatchTransactions([...txs].filter(Boolean));\n      } else {\n        this.web3.eth.sendTransaction(txs[0]);\n      }\n    },\n    updateSecretPhrase(e) {\n      this.secretPhrase = e;\n    },\n    updateDuration(e) {\n      this.duration = e;\n    },\n    generateKeyPhrase() {\n      const wordsArray = [];\n      const min = 0;\n      const max = bip39.wordlists.EN.length;\n\n      for (let i = 0; i < 3; i++) {\n        wordsArray.push(\n          bip39.wordlists.EN[Math.floor(Math.random() * (max - min + 1)) + min]\n        );\n      }\n\n      this.secretPhrase = wordsArray.join(' ');\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'ManageENS.scss';\n</style>\n"],"sourceRoot":"src/dapps/ManageENS"}]}