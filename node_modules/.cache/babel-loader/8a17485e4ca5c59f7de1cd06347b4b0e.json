{"remainingRequest":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/eslint-loader/index.js??ref--13-0!/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/dapps/Ambrpay/AmbrpayModified.js","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/dapps/Ambrpay/AmbrpayModified.js","mtime":1573477611644},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.regexp.to-string\";\n\n/* eslint-disable */\n\n/*!\n * ambrpay JavaScript Library v0.2.2\n * https://ambrpay.io/\n */\nexport default function Ambrpay(account, web3) {\n  if (!apiEndpoint) {\n    var apiEndpoint = 'https://ambrpay.io/api';\n  }\n\n  var _web3 = web3;\n  var ethAddress = account.address;\n  var ambrpay = {\n    apiKey: false,\n    testMode: false,\n    contractAddress: false,\n    contractAddresses: false,\n    network: \"auto\",\n    setApiKey: function setApiKey(apiKey) {\n      ambrpay.apiKey = apiKey;\n\n      if (ambrpay.apiKey.indexOf(\"test_public\") != -1) {\n        ambrpay.testMode = true;\n      } else if (ambrpay.apiKey.indexOf(\"api_public\") != -1) {\n        ambrpay.testMode = false;\n      } else {\n        throw \"invalid public api key\";\n      }\n    },\n    getContractAddresses: function getContractAddresses() {\n      return new Promise(function (resolve, reject) {\n        if (ambrpay.contractAddress) {\n          return resolve(ambrpay.contractAddress);\n        }\n\n        if (!_web3) {\n          reject(\"MetaMask is not installed. Download it at https://metamask.io/\");\n        }\n\n        if (!ambrpay.contractAddresses) {\n          var url = apiEndpoint + '/smartContractAddresses';\n          return ambrpay.getRequest(url, ambrpay.apiKey).then(function (contractAddresses) {\n            ambrpay.contractAddresses = JSON.parse(contractAddresses);\n            return resolve(ambrpay.contractAddresses);\n          });\n        } else {\n          return resolve(ambrpay.contractAddresses);\n        }\n      }).then(function () {\n        var networkName;\n\n        switch (account.netId) {\n          case \"1\":\n            // throw \"mainnet is currently not available\";\n            if (ambrpay.network == 'mainnet' || ambrpay.network == 'auto') {\n              networkName = \"Mainnet\";\n              ambrpay.contractAddress = ambrpay.contractAddresses.mainnet.smartContractAddress;\n              ambrpay.ABI = {\n                \"abi\": JSON.parse(ambrpay.contractAddresses.mainnet.abi)\n              };\n            } else {\n              throw \"your wallets network (mainnet) does not match the selected network for the transaction (\" + ambrpay.network + \")\";\n            }\n\n            break;\n\n          case \"2\":\n            throw \"Morden testnet is not available. Try ropsten testnet.\";\n            networkName = \"Morden Testnet\";\n            break;\n\n          case \"3\":\n            if (ambrpay.network == 'ropsten' || ambrpay.network == 'auto') {\n              networkName = \"Ropsten Testnet\";\n              ambrpay.contractAddress = ambrpay.contractAddresses.ropsten.smartContractAddress;\n              ambrpay.ABI = {\n                \"abi\": JSON.parse(ambrpay.contractAddresses.ropsten.abi)\n              };\n            } else {\n              throw \"your wallets network (ropsten) does not match the selected network for the transaction (\" + ambrpay.network + \")\";\n            }\n\n            break;\n\n          case \"4\":\n            throw \"Rinkeby testnet is not available. Try ropsten testnet.\";\n            networkName = \"Rinkeby Testnet\";\n            break;\n\n          case \"42\":\n            throw \"Kovan testnet is not available. Try ropsten testnet.\";\n            networkName = \"Kovan Testnet\";\n            break;\n\n          default:\n            throw \"Uknown testnet. Try ropsten testnet.\";\n            networkName = \"Unknown\";\n        }\n\n        return ambrpay.contractAddress;\n      });\n    },\n    getSubscriptionPlan: function getSubscriptionPlan(id) {\n      var url = apiEndpoint + '/plan/' + id;\n      return ambrpay.getRequest(url).then(function (o) {\n        return JSON.parse(o);\n      });\n    },\n    subscribe: function subscribe(data) {\n      var senderWallet;\n      var receiverWallet;\n      var subscriptionPlan;\n      var subscriptionAmount;\n      var customPrice;\n      var priceLimitPercentage = 1.50;\n      var transferOut = false;\n      var subscriptionFeeAmount;\n\n      if (data.network) {\n        ambrpay.network = data.network;\n      }\n\n      return ambrpay.getContractAddresses().then(function () {\n        return ambrpay.metaMaskLoaded();\n      }).then(function () {\n        return ambrpay.getMetaMaskAccount();\n      }).then(function (account) {\n        senderWallet = account;\n        return ambrpay.getSubscriptionPlan(data.subscriptionPlan);\n      }).then(function (plan) {\n        subscriptionPlan = plan;\n\n        if (!subscriptionPlan.wallet && !data.receiverWallet) {\n          // cant continue without a wallet to subscribe to\n          throw \"Subscription plan has no wallet assigned to it, therefore param 'receiverWallet' is required when calling ambrpay.subscribe()\";\n        } else if (!subscriptionPlan.wallet) {\n          // subscription plan has no receiver wallet, overwrite it with the one from ambrpay.subscribe()\n          receiverWallet = data.receiverWallet;\n        } else {\n          receiverWallet = subscriptionPlan.wallet;\n        }\n\n        if (!_web3.utils.isAddress(receiverWallet)) {\n          throw \"receiverAddress is not a valid address\";\n        }\n\n        if (subscriptionPlan.daysInterval == -1 && !data.interval) {\n          throw \"Subscription plan has interval set to custom, therefore param 'interval' is required when calling ambrpay.subscribe()\";\n        }\n\n        if (subscriptionPlan.daysInterval == -1 && !ambrpay.isInt(data.interval)) {\n          throw \"interval must be an integer\";\n        } // todo: only for CRYPTO plans?\n\n\n        if (subscriptionPlan.daysInterval == -1 && data.interval && parseInt(data.interval) >= 1 && parseInt(data.interval) <= 365) {\n          subscriptionPlan.daysInterval = parseInt(data.interval);\n        } else if (subscriptionPlan.daysInterval == -1 && data.interval) {\n          throw \"interval must be between 1 and 365\";\n        }\n\n        if (typeof data.transferOut !== 'undefined' && typeof data.transferOut !== \"boolean\") {\n          throw \"transferOut must be a boolean\";\n        }\n\n        if (data.transferOut && subscriptionPlan.transferOut == 1) {\n          transferOut = true;\n        } else {\n          transferOut = false;\n        }\n\n        if (subscriptionPlan.acceptedCryptoCurrencies.Ethereum.price > 0) {\n          return subscriptionPlan.acceptedCryptoCurrencies.Ethereum.price;\n        } else {\n          if (data.amount) {\n            if (!ambrpay.isInt(data.amount) && !ambrpay.isFloat(data.amount)) {\n              throw \"amount must be an integer or a float\";\n            }\n\n            customPrice = data.amount;\n\n            if (subscriptionPlan.currencyCode == 'ETH') {\n              if (data.amount < 0.01) {\n                throw \"the minimum amount is 0.01 ETH\";\n              }\n            } else {\n              if (customPrice < 1) {\n                throw \"the minimum amount is \" + subscriptionPlan.currencyCode + \" 1.00 \";\n              }\n\n              return ambrpay.getExchangePrice(subscriptionPlan.currencyCode, 'ETH', customPrice).then(function (price) {\n                return price;\n              });\n            }\n\n            return data.amount;\n          }\n        }\n      }).then(function (amount) {\n        subscriptionAmount = amount;\n        subscriptionFeeAmount = amount / 100 * subscriptionPlan.fee;\n        subscriptionFeeAmount = subscriptionFeeAmount * 1000000000000000000 / 1000000000000000000;\n\n        if (_web3.utils.isAddress(subscriptionPlan.wallet)) {\n          var subscriptionTotalAmount = parseFloat(subscriptionAmount);\n        } else {\n          var subscriptionTotalAmount = parseFloat(subscriptionAmount) + parseFloat(subscriptionFeeAmount);\n        }\n\n        var subscriptionPriceLimit = subscriptionTotalAmount * (1 + subscriptionPlan.priceLimitPercentage / 100);\n        return new Promise(function (resolve, reject) {\n          var instance = new _web3.eth.Contract(ambrpay.ABI.abi, ambrpay.contractAddress);\n          return instance.methods.createSubscriptionWithTransfer(receiverWallet, subscriptionPlan.daysInterval, _web3.utils.toWei(subscriptionPriceLimit.toString(), 'ether'), transferOut, _web3.utils.toWei(subscriptionFeeAmount.toString(), 'ether')).send({\n            value: _web3.utils.toWei(subscriptionTotalAmount.toString(), 'ether'),\n            gas: 500000,\n            gasPrice: 1000000000,\n            from: senderWallet\n          }).then(function (res) {\n            return resolve(res);\n          }).catch(function (e) {\n            return reject(e);\n          });\n        });\n      }).then(function (txHash) {\n        var customer = {\n          subscriptionPlanId: subscriptionPlan.id,\n          senderWallet: senderWallet,\n          receiverWallet: receiverWallet,\n          customerId: data.customerId,\n          customerEmail: data.customerEmail,\n          customerDescription: data.customerDescription,\n          transactionHash: txHash.transactionHash,\n          subscriptionCurrency: \"ETH\",\n          subscriptionPrice: subscriptionAmount,\n          customPrice: customPrice,\n          interval: data.interval,\n          transferOut: transferOut,\n          smartContractAddress: ambrpay.contractAddress\n        };\n        return ambrpay.createSubscription(customer).then(function () {\n          return txHash.transactionHash;\n        });\n      });\n    },\n    createSubscription: function createSubscription(data) {\n      var url = apiEndpoint + '/subscription';\n      return ambrpay.postRequest(url, data).then(function (o) {\n        return JSON.parse(o);\n      });\n    },\n    getExchangePrice: function getExchangePrice(from, to, amount) {\n      var url = apiEndpoint + '/price/' + from + '/' + to + '/' + amount;\n      return ambrpay.getRequest(url);\n    },\n    getRequest: function getRequest(url) {\n      if (!ambrpay.apiKey) {\n        throw \"ambrpay api key not set\";\n      }\n\n      return new Promise(function (resolve, reject) {\n        var http = new XMLHttpRequest();\n        http.open('GET', url, true);\n        http.setRequestHeader('Authorization', 'Bearer ' + ambrpay.apiKey);\n\n        http.onreadystatechange = function () {\n          if (http.readyState == 4 && http.status == 200) {\n            return resolve(http.responseText);\n          } else if (http.readyState == 4 && http.status != 200) {\n            reject(http.responseText);\n          }\n        };\n\n        http.send();\n      });\n    },\n    postRequest: function postRequest(url, params) {\n      if (!ambrpay.apiKey) {\n        throw \"ambrpay api key not set\";\n      }\n\n      return new Promise(function (resolve, reject) {\n        var http = new XMLHttpRequest();\n        http.open('POST', url, true);\n        http.setRequestHeader('Authorization', 'Bearer ' + ambrpay.apiKey);\n\n        http.onreadystatechange = function () {\n          if (http.readyState == 4 && http.status == 200) {\n            resolve(http.responseText);\n          } else if (http.readyState == 4 && http.status != 200) {\n            reject(http.responseText);\n          }\n        };\n\n        http.send(JSON.stringify(params));\n      });\n    },\n    metaMaskLoaded: function metaMaskLoaded() {\n      return new Promise(function (resolve, reject) {\n        if (_web3 == 'undefined') {\n          reject(\"MetaMask is missing. Please download the MetaMask browser extension.\");\n        }\n\n        return resolve(true);\n      });\n    },\n    getMetaMaskAccount: function getMetaMaskAccount() {\n      return new Promise(function (resolve, reject) {\n        return resolve(ethAddress);\n      });\n    },\n    getSubscriptionFunds: function getSubscriptionFunds() {\n      return ambrpay.getContractAddresses().then(function () {\n        return ambrpay.getMetaMaskAccount();\n      }).then(function (address) {\n        if (!address) {\n          throw \"Error retrieving your metamask wallet address. Make sure metamask is unlocked\";\n        }\n\n        return new Promise(function (resolve, reject) {\n          var instance = new _web3.eth.Contract(ambrpay.ABI.abi, ambrpay.contractAddress);\n          var balance = instance.methods.getBalances(address).call();\n          return resolve(balance);\n        });\n      });\n    },\n    getSubscriptions: function getSubscriptions(address) {\n      return new Promise(function (resolve, reject) {\n        if (!address) {\n          return ambrpay.getMetaMaskAccount().then(function (metamaskAddress) {\n            var url = apiEndpoint + '/subscriptions/' + metamaskAddress;\n            return ambrpay.getRequest(url, ambrpay.apiKey).then(function (subscriptions) {\n              ambrpay.subscriptions = JSON.parse(subscriptions);\n              return resolve(ambrpay.subscriptions);\n            });\n          });\n        } else {\n          var url = apiEndpoint + '/subscriptions/' + address;\n          return ambrpay.getRequest(url, ambrpay.apiKey).then(function (subscriptions) {\n            ambrpay.subscriptions = JSON.parse(subscriptions);\n            return resolve(ambrpay.subscriptions);\n          });\n        }\n      });\n    },\n    getMetaMaskBalance: function getMetaMaskBalance() {\n      return new Promise(function (resolve, reject) {\n        return ambrpay.getMetaMaskAccount().then(function (address) {\n          return _web3.eth.getBalance(address, function (e, o) {\n            if (e) return reject(e);\n\n            var value = _web3.utils.fromWei(o, 'ether');\n\n            value = web3.utils.toDecimal(value);\n            return resolve(value);\n          });\n        });\n      });\n    },\n    unsubscribe: function unsubscribe(pos, contractAddress) {\n      return new Promise(function (resolve, reject) {\n        var instance = new _web3.eth.Contract(ambrpay.ABI.abi, contractAddress);\n        return ambrpay.getMetaMaskAccount().then(function (address) {\n          return instance.methods.deactivateSubscription(pos).send({\n            gas: 500000,\n            from: address\n          }).then(function (res) {\n            resolve(res);\n          }).catch(function (err) {\n            reject(err);\n          });\n        });\n      });\n    },\n    addFunds: function addFunds(amount) {\n      return new Promise(function (resolve, reject) {\n        return ambrpay.getMetaMaskAccount().then(function (address) {\n          var instance = new _web3.eth.Contract(ambrpay.ABI.abi, ambrpay.contractAddress);\n          return instance.methods.addFunds(address).send({\n            value: _web3.utils.toWei(amount),\n            gas: 500000,\n            from: address\n          }).then(function (res) {\n            return resolve(res);\n          }).catch(function (err) {\n            return reject(err);\n          });\n        });\n      });\n    },\n    withdrawFunds: function withdrawFunds(amount) {\n      return new Promise(function (resolve, reject) {\n        return ambrpay.getMetaMaskAccount().then(function (address) {\n          var instance = new _web3.eth.Contract(ambrpay.ABI.abi, ambrpay.contractAddress);\n          return instance.methods.withdrawFunds(_web3.utils.toWei(amount)).send({\n            gas: 500000,\n            from: address\n          }).then(function (res) {\n            return resolve(res);\n          }).catch(function (err) {\n            return reject(err);\n          });\n        });\n      });\n    },\n    isInt: function isInt(n) {\n      return Number(n) === n && n % 1 === 0;\n    },\n    isFloat: function isFloat(n) {\n      return Number(n) === n && n % 1 !== 0;\n    }\n  };\n  ambrpay.setApiKey(account.publicApiKey);\n  return ambrpay;\n}\n;",{"version":3,"sources":["/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/dapps/Ambrpay/AmbrpayModified.js"],"names":["Ambrpay","account","web3","apiEndpoint","_web3","ethAddress","address","ambrpay","apiKey","testMode","contractAddress","contractAddresses","network","setApiKey","indexOf","getContractAddresses","Promise","resolve","reject","url","getRequest","then","JSON","parse","networkName","netId","mainnet","smartContractAddress","ABI","abi","ropsten","getSubscriptionPlan","id","o","subscribe","data","senderWallet","receiverWallet","subscriptionPlan","subscriptionAmount","customPrice","priceLimitPercentage","transferOut","subscriptionFeeAmount","metaMaskLoaded","getMetaMaskAccount","plan","wallet","utils","isAddress","daysInterval","interval","isInt","parseInt","acceptedCryptoCurrencies","Ethereum","price","amount","isFloat","currencyCode","getExchangePrice","fee","subscriptionTotalAmount","parseFloat","subscriptionPriceLimit","instance","eth","Contract","methods","createSubscriptionWithTransfer","toWei","toString","send","value","gas","gasPrice","from","res","catch","e","txHash","customer","subscriptionPlanId","customerId","customerEmail","customerDescription","transactionHash","subscriptionCurrency","subscriptionPrice","createSubscription","postRequest","to","http","XMLHttpRequest","open","setRequestHeader","onreadystatechange","readyState","status","responseText","params","stringify","getSubscriptionFunds","balance","getBalances","call","getSubscriptions","metamaskAddress","subscriptions","getMetaMaskBalance","getBalance","fromWei","toDecimal","unsubscribe","pos","deactivateSubscription","err","addFunds","withdrawFunds","n","Number","publicApiKey"],"mappings":";;;AAAA;;AACA;;;;AAKA,eAAe,SAASA,OAAT,CAAiBC,OAAjB,EAA0BC,IAA1B,EAAgC;AAC7C,MAAG,CAACC,WAAJ,EAAiB;AACf,QAAIA,WAAW,GAAG,wBAAlB;AACD;;AAED,MAAIC,KAAK,GAAGF,IAAZ;AACA,MAAIG,UAAU,GAAGJ,OAAO,CAACK,OAAzB;AACA,MAAIC,OAAO,GAAG;AACZC,IAAAA,MAAM,EAAE,KADI;AAEZC,IAAAA,QAAQ,EAAE,KAFE;AAGZC,IAAAA,eAAe,EAAE,KAHL;AAIZC,IAAAA,iBAAiB,EAAE,KAJP;AAKZC,IAAAA,OAAO,EAAE,MALG;AAMZC,IAAAA,SAAS,EAAE,mBAASL,MAAT,EAAiB;AAE1BD,MAAAA,OAAO,CAACC,MAAR,GAAiBA,MAAjB;;AAEA,UAAGD,OAAO,CAACC,MAAR,CAAeM,OAAf,CAAuB,aAAvB,KAAyC,CAAC,CAA7C,EAAgD;AAC9CP,QAAAA,OAAO,CAACE,QAAR,GAAmB,IAAnB;AACD,OAFD,MAEO,IAAGF,OAAO,CAACC,MAAR,CAAeM,OAAf,CAAuB,YAAvB,KAAwC,CAAC,CAA5C,EAA+C;AACpDP,QAAAA,OAAO,CAACE,QAAR,GAAmB,KAAnB;AACD,OAFM,MAEA;AACL,cAAM,wBAAN;AACD;AACF,KAjBW;AAkBZM,IAAAA,oBAAoB,EAAE,gCAAW;AAE/B,aAAO,IAAIC,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAE3C,YAAGX,OAAO,CAACG,eAAX,EAA4B;AAC1B,iBAAOO,OAAO,CAACV,OAAO,CAACG,eAAT,CAAd;AACD;;AAED,YAAG,CAACN,KAAJ,EAAW;AACTc,UAAAA,MAAM,CAAE,gEAAF,CAAN;AACD;;AAED,YAAG,CAACX,OAAO,CAACI,iBAAZ,EAA+B;AAC7B,cAAIQ,GAAG,GAAGhB,WAAW,GAAG,yBAAxB;AAEA,iBAAOI,OAAO,CAACa,UAAR,CAAmBD,GAAnB,EAAwBZ,OAAO,CAACC,MAAhC,EACJa,IADI,CACC,UAASV,iBAAT,EAA4B;AAEhCJ,YAAAA,OAAO,CAACI,iBAAR,GAA4BW,IAAI,CAACC,KAAL,CAAWZ,iBAAX,CAA5B;AAEA,mBAAOM,OAAO,CAACV,OAAO,CAACI,iBAAT,CAAd;AACD,WANI,CAAP;AAOD,SAVD,MAUO;AACL,iBAAOM,OAAO,CAACV,OAAO,CAACI,iBAAT,CAAd;AACD;AACF,OAvBM,EAwBJU,IAxBI,CAwBC,YAAM;AACV,YAAIG,WAAJ;;AAEA,gBAAQvB,OAAO,CAACwB,KAAhB;AACE,eAAK,GAAL;AACE;AAEA,gBAAGlB,OAAO,CAACK,OAAR,IAAmB,SAAnB,IAAgCL,OAAO,CAACK,OAAR,IAAmB,MAAtD,EAA8D;AAE5DY,cAAAA,WAAW,GAAG,SAAd;AACAjB,cAAAA,OAAO,CAACG,eAAR,GAA0BH,OAAO,CAACI,iBAAR,CAA0Be,OAA1B,CAAkCC,oBAA5D;AACApB,cAAAA,OAAO,CAACqB,GAAR,GAAc;AACZ,uBAAON,IAAI,CAACC,KAAL,CAAWhB,OAAO,CAACI,iBAAR,CAA0Be,OAA1B,CAAkCG,GAA7C;AADK,eAAd;AAGD,aAPD,MAOO;AACL,oBAAM,6FAA6FtB,OAAO,CAACK,OAArG,GAA+G,GAArH;AACD;;AACD;;AACF,eAAK,GAAL;AACE,kBAAM,uDAAN;AACAY,YAAAA,WAAW,GAAG,gBAAd;AACA;;AACF,eAAK,GAAL;AACE,gBAAGjB,OAAO,CAACK,OAAR,IAAmB,SAAnB,IAAgCL,OAAO,CAACK,OAAR,IAAmB,MAAtD,EAA8D;AAC5DY,cAAAA,WAAW,GAAG,iBAAd;AACAjB,cAAAA,OAAO,CAACG,eAAR,GAA0BH,OAAO,CAACI,iBAAR,CAA0BmB,OAA1B,CAAkCH,oBAA5D;AACApB,cAAAA,OAAO,CAACqB,GAAR,GAAc;AACZ,uBAAON,IAAI,CAACC,KAAL,CAAWhB,OAAO,CAACI,iBAAR,CAA0BmB,OAA1B,CAAkCD,GAA7C;AADK,eAAd;AAGD,aAND,MAMO;AACL,oBAAM,6FAA6FtB,OAAO,CAACK,OAArG,GAA+G,GAArH;AACD;;AACD;;AACF,eAAK,GAAL;AACE,kBAAM,wDAAN;AACAY,YAAAA,WAAW,GAAG,iBAAd;AACA;;AACF,eAAK,IAAL;AACE,kBAAM,sDAAN;AACAA,YAAAA,WAAW,GAAG,eAAd;AACA;;AACF;AACE,kBAAM,sCAAN;AACAA,YAAAA,WAAW,GAAG,SAAd;AAxCJ;;AA2CA,eAAOjB,OAAO,CAACG,eAAf;AACD,OAvEI,CAAP;AAwED,KA5FW;AA6FZqB,IAAAA,mBAAmB,EAAE,6BAASC,EAAT,EAAa;AAEhC,UAAIb,GAAG,GAAGhB,WAAW,GAAG,QAAd,GAAyB6B,EAAnC;AAEA,aAAOzB,OAAO,CAACa,UAAR,CAAmBD,GAAnB,EACJE,IADI,CACC,UAASY,CAAT,EAAY;AAChB,eAAOX,IAAI,CAACC,KAAL,CAAWU,CAAX,CAAP;AACD,OAHI,CAAP;AAID,KArGW;AAsGZC,IAAAA,SAAS,EAAE,mBAASC,IAAT,EAAe;AAExB,UAAIC,YAAJ;AACA,UAAIC,cAAJ;AACA,UAAIC,gBAAJ;AACA,UAAIC,kBAAJ;AACA,UAAIC,WAAJ;AACA,UAAIC,oBAAoB,GAAG,IAA3B;AACA,UAAIC,WAAW,GAAG,KAAlB;AACA,UAAIC,qBAAJ;;AAEA,UAAGR,IAAI,CAACvB,OAAR,EAAiB;AACfL,QAAAA,OAAO,CAACK,OAAR,GAAkBuB,IAAI,CAACvB,OAAvB;AACD;;AAED,aAAOL,OAAO,CAACQ,oBAAR,GACJM,IADI,CACC,YAAM;AACV,eAAOd,OAAO,CAACqC,cAAR,EAAP;AACD,OAHI,EAIJvB,IAJI,CAIC,YAAM;AACV,eAAOd,OAAO,CAACsC,kBAAR,EAAP;AACD,OANI,EAOJxB,IAPI,CAOC,UAACpB,OAAD,EAAa;AAEjBmC,QAAAA,YAAY,GAAGnC,OAAf;AAEA,eAAOM,OAAO,CAACwB,mBAAR,CAA4BI,IAAI,CAACG,gBAAjC,CAAP;AACD,OAZI,EAaJjB,IAbI,CAaC,UAACyB,IAAD,EAAU;AAEdR,QAAAA,gBAAgB,GAAGQ,IAAnB;;AAEA,YAAG,CAACR,gBAAgB,CAACS,MAAlB,IAA4B,CAACZ,IAAI,CAACE,cAArC,EAAqD;AAEnD;AACA,gBAAM,+HAAN;AAED,SALD,MAKO,IAAG,CAACC,gBAAgB,CAACS,MAArB,EAA6B;AAElC;AACAV,UAAAA,cAAc,GAAGF,IAAI,CAACE,cAAtB;AAED,SALM,MAKA;AAELA,UAAAA,cAAc,GAAGC,gBAAgB,CAACS,MAAlC;AACD;;AAED,YAAG,CAAC3C,KAAK,CAAC4C,KAAN,CAAYC,SAAZ,CAAsBZ,cAAtB,CAAJ,EAA2C;AAEzC,gBAAM,wCAAN;AACD;;AAED,YAAGC,gBAAgB,CAACY,YAAjB,IAAiC,CAAC,CAAlC,IAAuC,CAACf,IAAI,CAACgB,QAAhD,EAA0D;AACxD,gBAAM,uHAAN;AACD;;AAED,YAAGb,gBAAgB,CAACY,YAAjB,IAAiC,CAAC,CAAlC,IAAuC,CAAC3C,OAAO,CAAC6C,KAAR,CAAcjB,IAAI,CAACgB,QAAnB,CAA3C,EAAyE;AACvE,gBAAM,6BAAN;AACD,SA9Ba,CAgCd;;;AACA,YAAGb,gBAAgB,CAACY,YAAjB,IAAiC,CAAC,CAAlC,IAAuCf,IAAI,CAACgB,QAA5C,IAAwDE,QAAQ,CAAClB,IAAI,CAACgB,QAAN,CAAR,IAA2B,CAAnF,IAAwFE,QAAQ,CAAClB,IAAI,CAACgB,QAAN,CAAR,IAA2B,GAAtH,EAA2H;AAEzHb,UAAAA,gBAAgB,CAACY,YAAjB,GAAgCG,QAAQ,CAAClB,IAAI,CAACgB,QAAN,CAAxC;AAED,SAJD,MAIO,IAAGb,gBAAgB,CAACY,YAAjB,IAAiC,CAAC,CAAlC,IAAuCf,IAAI,CAACgB,QAA/C,EAAyD;AAE9D,gBAAM,oCAAN;AACD;;AAED,YAAI,OAAOhB,IAAI,CAACO,WAAZ,KAA4B,WAA5B,IAA2C,OAAOP,IAAI,CAACO,WAAZ,KAA4B,SAA3E,EAAsF;AACpF,gBAAM,+BAAN;AACD;;AAED,YAAGP,IAAI,CAACO,WAAL,IAAoBJ,gBAAgB,CAACI,WAAjB,IAAgC,CAAvD,EAA0D;AAExDA,UAAAA,WAAW,GAAG,IAAd;AAED,SAJD,MAIO;AAELA,UAAAA,WAAW,GAAG,KAAd;AACD;;AAED,YAAGJ,gBAAgB,CAACgB,wBAAjB,CAA0CC,QAA1C,CAAmDC,KAAnD,GAA2D,CAA9D,EAAiE;AAE/D,iBAAOlB,gBAAgB,CAACgB,wBAAjB,CAA0CC,QAA1C,CAAmDC,KAA1D;AAED,SAJD,MAIO;AAEL,cAAGrB,IAAI,CAACsB,MAAR,EAAgB;AAEd,gBAAG,CAAClD,OAAO,CAAC6C,KAAR,CAAcjB,IAAI,CAACsB,MAAnB,CAAD,IAA+B,CAAClD,OAAO,CAACmD,OAAR,CAAgBvB,IAAI,CAACsB,MAArB,CAAnC,EAAiE;AAC/D,oBAAM,sCAAN;AACD;;AAEDjB,YAAAA,WAAW,GAAGL,IAAI,CAACsB,MAAnB;;AAEA,gBAAGnB,gBAAgB,CAACqB,YAAjB,IAAiC,KAApC,EAA2C;AAEzC,kBAAGxB,IAAI,CAACsB,MAAL,GAAc,IAAjB,EAAuB;AACrB,sBAAM,gCAAN;AACD;AACF,aALD,MAKO;AAEL,kBAAGjB,WAAW,GAAG,CAAjB,EAAoB;AAClB,sBAAM,2BAA2BF,gBAAgB,CAACqB,YAA5C,GAA2D,QAAjE;AACD;;AAED,qBAAOpD,OAAO,CAACqD,gBAAR,CAAyBtB,gBAAgB,CAACqB,YAA1C,EAAwD,KAAxD,EAA+DnB,WAA/D,EACJnB,IADI,CACC,UAACmC,KAAD,EAAW;AACf,uBAAOA,KAAP;AACD,eAHI,CAAP;AAID;;AAED,mBAAOrB,IAAI,CAACsB,MAAZ;AACD;AACF;AACF,OAtGI,EAuGJpC,IAvGI,CAuGC,UAACoC,MAAD,EAAY;AAEhBlB,QAAAA,kBAAkB,GAAGkB,MAArB;AAEAd,QAAAA,qBAAqB,GAAGc,MAAM,GAAG,GAAT,GAAenB,gBAAgB,CAACuB,GAAxD;AACAlB,QAAAA,qBAAqB,GAAGA,qBAAqB,GAAG,mBAAxB,GAA8C,mBAAtE;;AAEA,YAAGvC,KAAK,CAAC4C,KAAN,CAAYC,SAAZ,CAAsBX,gBAAgB,CAACS,MAAvC,CAAH,EAAmD;AAEjD,cAAIe,uBAAuB,GAAGC,UAAU,CAACxB,kBAAD,CAAxC;AAED,SAJD,MAIO;AAEL,cAAIuB,uBAAuB,GAAGC,UAAU,CAACxB,kBAAD,CAAV,GAAiCwB,UAAU,CAACpB,qBAAD,CAAzE;AACD;;AAED,YAAIqB,sBAAsB,GAAGF,uBAAuB,IAAI,IAAKxB,gBAAgB,CAACG,oBAAjB,GAAsC,GAA/C,CAApD;AAEA,eAAO,IAAIzB,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAE3C,cAAI+C,QAAQ,GAAG,IAAI7D,KAAK,CAAC8D,GAAN,CAAUC,QAAd,CAAuB5D,OAAO,CAACqB,GAAR,CAAYC,GAAnC,EAAwCtB,OAAO,CAACG,eAAhD,CAAf;AACA,iBAAOuD,QAAQ,CAACG,OAAT,CAAiBC,8BAAjB,CACLhC,cADK,EAELC,gBAAgB,CAACY,YAFZ,EAGL9C,KAAK,CAAC4C,KAAN,CAAYsB,KAAZ,CAAkBN,sBAAsB,CAACO,QAAvB,EAAlB,EAAqD,OAArD,CAHK,EAIL7B,WAJK,EAKLtC,KAAK,CAAC4C,KAAN,CAAYsB,KAAZ,CAAkB3B,qBAAqB,CAAC4B,QAAtB,EAAlB,EAAoD,OAApD,CALK,EAMJC,IANI,CAMC;AACJC,YAAAA,KAAK,EAAErE,KAAK,CAAC4C,KAAN,CAAYsB,KAAZ,CAAkBR,uBAAuB,CAACS,QAAxB,EAAlB,EAAsD,OAAtD,CADH;AAEJG,YAAAA,GAAG,EAAE,MAFD;AAGJC,YAAAA,QAAQ,EAAE,UAHN;AAIJC,YAAAA,IAAI,EAAExC;AAJF,WAND,EAYJf,IAZI,CAYC,UAACwD,GAAD,EAAQ;AACZ,mBAAO5D,OAAO,CAAC4D,GAAD,CAAd;AACD,WAdI,EAeJC,KAfI,CAeE,UAACC,CAAD,EAAO;AACZ,mBAAO7D,MAAM,CAAC6D,CAAD,CAAb;AACD,WAjBI,CAAP;AAkBD,SArBM,CAAP;AAsBD,OA/II,EAgJJ1D,IAhJI,CAgJC,UAAC2D,MAAD,EAAY;AAChB,YAAIC,QAAQ,GAAG;AACbC,UAAAA,kBAAkB,EAAE5C,gBAAgB,CAACN,EADxB;AAEbI,UAAAA,YAAY,EAAEA,YAFD;AAGbC,UAAAA,cAAc,EAAEA,cAHH;AAIb8C,UAAAA,UAAU,EAAEhD,IAAI,CAACgD,UAJJ;AAKbC,UAAAA,aAAa,EAAEjD,IAAI,CAACiD,aALP;AAMbC,UAAAA,mBAAmB,EAAElD,IAAI,CAACkD,mBANb;AAObC,UAAAA,eAAe,EAAEN,MAAM,CAACM,eAPX;AAQbC,UAAAA,oBAAoB,EAAE,KART;AASbC,UAAAA,iBAAiB,EAAEjD,kBATN;AAUbC,UAAAA,WAAW,EAAEA,WAVA;AAWbW,UAAAA,QAAQ,EAAEhB,IAAI,CAACgB,QAXF;AAYbT,UAAAA,WAAW,EAAEA,WAZA;AAabf,UAAAA,oBAAoB,EAAEpB,OAAO,CAACG;AAbjB,SAAf;AAeA,eAAOH,OAAO,CAACkF,kBAAR,CAA2BR,QAA3B,EACJ5D,IADI,CACC,YAAM;AACV,iBAAO2D,MAAM,CAACM,eAAd;AACD,SAHI,CAAP;AAID,OApKI,CAAP;AAqKD,KA1RW;AA2RZG,IAAAA,kBAAkB,EAAE,4BAAStD,IAAT,EAAe;AACjC,UAAIhB,GAAG,GAAGhB,WAAW,GAAG,eAAxB;AAEA,aAAOI,OAAO,CAACmF,WAAR,CAAoBvE,GAApB,EAAyBgB,IAAzB,EACJd,IADI,CACC,UAASY,CAAT,EAAY;AAChB,eAAOX,IAAI,CAACC,KAAL,CAAWU,CAAX,CAAP;AACD,OAHI,CAAP;AAID,KAlSW;AAmSZ2B,IAAAA,gBAAgB,EAAE,0BAASgB,IAAT,EAAee,EAAf,EAAmBlC,MAAnB,EAA2B;AAE3C,UAAItC,GAAG,GAAGhB,WAAW,GAAG,SAAd,GAA0ByE,IAA1B,GAAiC,GAAjC,GAAuCe,EAAvC,GAA4C,GAA5C,GAAkDlC,MAA5D;AAEA,aAAOlD,OAAO,CAACa,UAAR,CAAmBD,GAAnB,CAAP;AACD,KAxSW;AAySZC,IAAAA,UAAU,EAAE,oBAASD,GAAT,EAAc;AAExB,UAAI,CAACZ,OAAO,CAACC,MAAb,EAAqB;AACnB,cAAM,yBAAN;AACD;;AAED,aAAO,IAAIQ,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAE3C,YAAI0E,IAAI,GAAG,IAAIC,cAAJ,EAAX;AAEAD,QAAAA,IAAI,CAACE,IAAL,CAAU,KAAV,EAAiB3E,GAAjB,EAAsB,IAAtB;AACAyE,QAAAA,IAAI,CAACG,gBAAL,CAAsB,eAAtB,EAAuC,YAAYxF,OAAO,CAACC,MAA3D;;AAEAoF,QAAAA,IAAI,CAACI,kBAAL,GAA0B,YAAW;AACnC,cAAIJ,IAAI,CAACK,UAAL,IAAmB,CAAnB,IAAwBL,IAAI,CAACM,MAAL,IAAe,GAA3C,EAAgD;AAC9C,mBAAOjF,OAAO,CAAC2E,IAAI,CAACO,YAAN,CAAd;AACD,WAFD,MAEO,IAAIP,IAAI,CAACK,UAAL,IAAmB,CAAnB,IAAwBL,IAAI,CAACM,MAAL,IAAe,GAA3C,EAAgD;AACrDhF,YAAAA,MAAM,CAAC0E,IAAI,CAACO,YAAN,CAAN;AACD;AACF,SAND;;AAQAP,QAAAA,IAAI,CAACpB,IAAL;AACD,OAhBM,CAAP;AAiBD,KAhUW;AAiUZkB,IAAAA,WAAW,EAAE,qBAASvE,GAAT,EAAciF,MAAd,EAAsB;AACjC,UAAI,CAAC7F,OAAO,CAACC,MAAb,EAAqB;AACnB,cAAM,yBAAN;AACD;;AAED,aAAO,IAAIQ,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAE3C,YAAI0E,IAAI,GAAG,IAAIC,cAAJ,EAAX;AAEAD,QAAAA,IAAI,CAACE,IAAL,CAAU,MAAV,EAAkB3E,GAAlB,EAAuB,IAAvB;AACAyE,QAAAA,IAAI,CAACG,gBAAL,CAAsB,eAAtB,EAAuC,YAAYxF,OAAO,CAACC,MAA3D;;AAEAoF,QAAAA,IAAI,CAACI,kBAAL,GAA0B,YAAW;AAEnC,cAAIJ,IAAI,CAACK,UAAL,IAAmB,CAAnB,IAAwBL,IAAI,CAACM,MAAL,IAAe,GAA3C,EAAgD;AAC9CjF,YAAAA,OAAO,CAAC2E,IAAI,CAACO,YAAN,CAAP;AACD,WAFD,MAEO,IAAIP,IAAI,CAACK,UAAL,IAAmB,CAAnB,IAAwBL,IAAI,CAACM,MAAL,IAAe,GAA3C,EAAgD;AACrDhF,YAAAA,MAAM,CAAC0E,IAAI,CAACO,YAAN,CAAN;AACD;AACF,SAPD;;AAQAP,QAAAA,IAAI,CAACpB,IAAL,CAAUlD,IAAI,CAAC+E,SAAL,CAAeD,MAAf,CAAV;AACD,OAhBM,CAAP;AAiBD,KAvVW;AAwVZxD,IAAAA,cAAc,EAAE,0BAAW;AACzB,aAAO,IAAI5B,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAE3C,YAAGd,KAAK,IAAI,WAAZ,EAAyB;AACvBc,UAAAA,MAAM,CAAC,sEAAD,CAAN;AACD;;AACD,eAAOD,OAAO,CAAC,IAAD,CAAd;AACD,OANM,CAAP;AAOD,KAhWW;AAiWZ4B,IAAAA,kBAAkB,EAAE,8BAAW;AAC7B,aAAO,IAAI7B,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAC3C,eAAOD,OAAO,CAACZ,UAAD,CAAd;AACD,OAFM,CAAP;AAGD,KArWW;AAsWZiG,IAAAA,oBAAoB,EAAE,gCAAW;AAC/B,aAAO/F,OAAO,CAACQ,oBAAR,GACJM,IADI,CACC,YAAM;AACV,eAAOd,OAAO,CAACsC,kBAAR,EAAP;AACD,OAHI,EAIJxB,IAJI,CAIC,UAACf,OAAD,EAAa;AACjB,YAAG,CAACA,OAAJ,EAAa;AACX,gBAAM,+EAAN;AACD;;AACD,eAAO,IAAIU,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAE3C,cAAI+C,QAAQ,GAAG,IAAI7D,KAAK,CAAC8D,GAAN,CAAUC,QAAd,CAAuB5D,OAAO,CAACqB,GAAR,CAAYC,GAAnC,EAAwCtB,OAAO,CAACG,eAAhD,CAAf;AACA,cAAI6F,OAAO,GAAGtC,QAAQ,CAACG,OAAT,CAAiBoC,WAAjB,CAA6BlG,OAA7B,EAAsCmG,IAAtC,EAAd;AAEA,iBAAOxF,OAAO,CAACsF,OAAD,CAAd;AACD,SANM,CAAP;AAOD,OAfI,CAAP;AAgBD,KAvXW;AAwXZG,IAAAA,gBAAgB,EAAE,0BAASpG,OAAT,EAAkB;AAElC,aAAO,IAAIU,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAE3C,YAAG,CAACZ,OAAJ,EAAa;AAEX,iBAAOC,OAAO,CAACsC,kBAAR,GACJxB,IADI,CACC,UAACsF,eAAD,EAAqB;AAEzB,gBAAIxF,GAAG,GAAGhB,WAAW,GAAG,iBAAd,GAAkCwG,eAA5C;AAEA,mBAAOpG,OAAO,CAACa,UAAR,CAAmBD,GAAnB,EAAwBZ,OAAO,CAACC,MAAhC,EACJa,IADI,CACC,UAASuF,aAAT,EAAwB;AAE5BrG,cAAAA,OAAO,CAACqG,aAAR,GAAwBtF,IAAI,CAACC,KAAL,CAAWqF,aAAX,CAAxB;AAEA,qBAAO3F,OAAO,CAACV,OAAO,CAACqG,aAAT,CAAd;AACD,aANI,CAAP;AAOD,WAZI,CAAP;AAaD,SAfD,MAeO;AAEL,cAAIzF,GAAG,GAAGhB,WAAW,GAAG,iBAAd,GAAkCG,OAA5C;AAEA,iBAAOC,OAAO,CAACa,UAAR,CAAmBD,GAAnB,EAAwBZ,OAAO,CAACC,MAAhC,EACJa,IADI,CACC,UAASuF,aAAT,EAAwB;AAE5BrG,YAAAA,OAAO,CAACqG,aAAR,GAAwBtF,IAAI,CAACC,KAAL,CAAWqF,aAAX,CAAxB;AAEA,mBAAO3F,OAAO,CAACV,OAAO,CAACqG,aAAT,CAAd;AACD,WANI,CAAP;AAOD;AACF,OA7BM,CAAP;AA8BD,KAxZW;AAyZZC,IAAAA,kBAAkB,EAAE,8BAAW;AAE7B,aAAO,IAAI7F,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAE3C,eAAOX,OAAO,CAACsC,kBAAR,GACJxB,IADI,CACC,UAACf,OAAD,EAAa;AACjB,iBAAOF,KAAK,CAAC8D,GAAN,CAAU4C,UAAV,CAAqBxG,OAArB,EAA8B,UAASyE,CAAT,EAAY9C,CAAZ,EAAe;AAClD,gBAAI8C,CAAJ,EAAO,OAAO7D,MAAM,CAAC6D,CAAD,CAAb;;AACP,gBAAIN,KAAK,GAAGrE,KAAK,CAAC4C,KAAN,CAAY+D,OAAZ,CAAoB9E,CAApB,EAAuB,OAAvB,CAAZ;;AACAwC,YAAAA,KAAK,GAAGvE,IAAI,CAAC8C,KAAL,CAAWgE,SAAX,CAAqBvC,KAArB,CAAR;AACA,mBAAOxD,OAAO,CAACwD,KAAD,CAAd;AACD,WALM,CAAP;AAMD,SARI,CAAP;AASD,OAXM,CAAP;AAYD,KAvaW;AAwaZwC,IAAAA,WAAW,EAAE,qBAASC,GAAT,EAAcxG,eAAd,EAA+B;AAE1C,aAAO,IAAIM,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAC3C,YAAI+C,QAAQ,GAAG,IAAI7D,KAAK,CAAC8D,GAAN,CAAUC,QAAd,CAAuB5D,OAAO,CAACqB,GAAR,CAAYC,GAAnC,EAAwCnB,eAAxC,CAAf;AAEA,eAAOH,OAAO,CAACsC,kBAAR,GACJxB,IADI,CACC,UAACf,OAAD,EAAa;AAEjB,iBAAO2D,QAAQ,CAACG,OAAT,CAAiB+C,sBAAjB,CAAwCD,GAAxC,EACJ1C,IADI,CACC;AAAEE,YAAAA,GAAG,EAAE,MAAP;AAAeE,YAAAA,IAAI,EAAEtE;AAArB,WADD,EAEJe,IAFI,CAEC,UAACwD,GAAD,EAAS;AACb5D,YAAAA,OAAO,CAAC4D,GAAD,CAAP;AACD,WAJI,EAKJC,KALI,CAKE,UAACsC,GAAD,EAAS;AACdlG,YAAAA,MAAM,CAACkG,GAAD,CAAN;AACD,WAPI,CAAP;AAQD,SAXI,CAAP;AAYD,OAfM,CAAP;AAgBD,KA1bW;AA2bZC,IAAAA,QAAQ,EAAE,kBAAS5D,MAAT,EAAiB;AAEzB,aAAO,IAAIzC,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAE3C,eAAOX,OAAO,CAACsC,kBAAR,GACJxB,IADI,CACC,UAACf,OAAD,EAAa;AACjB,cAAI2D,QAAQ,GAAG,IAAI7D,KAAK,CAAC8D,GAAN,CAAUC,QAAd,CAAuB5D,OAAO,CAACqB,GAAR,CAAYC,GAAnC,EAAwCtB,OAAO,CAACG,eAAhD,CAAf;AAEA,iBAAOuD,QAAQ,CAACG,OAAT,CAAiBiD,QAAjB,CAA0B/G,OAA1B,EACEkE,IADF,CACO;AAAEC,YAAAA,KAAK,EAAErE,KAAK,CAAC4C,KAAN,CAAYsB,KAAZ,CAAkBb,MAAlB,CAAT;AAAoCiB,YAAAA,GAAG,EAAE,MAAzC;AAAiDE,YAAAA,IAAI,EAAEtE;AAAvD,WADP,EAEEe,IAFF,CAEO,UAACwD,GAAD,EAAS;AACb,mBAAO5D,OAAO,CAAC4D,GAAD,CAAd;AACD,WAJF,EAKEC,KALF,CAKQ,UAACsC,GAAD,EAAS;AACd,mBAAOlG,MAAM,CAACkG,GAAD,CAAb;AACD,WAPF,CAAP;AAQD,SAZI,CAAP;AAaD,OAfM,CAAP;AAgBD,KA7cW;AA8cZE,IAAAA,aAAa,EAAE,uBAAS7D,MAAT,EAAiB;AAE9B,aAAO,IAAIzC,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAE3C,eAAOX,OAAO,CAACsC,kBAAR,GACJxB,IADI,CACC,UAACf,OAAD,EAAa;AACjB,cAAI2D,QAAQ,GAAG,IAAI7D,KAAK,CAAC8D,GAAN,CAAUC,QAAd,CAAuB5D,OAAO,CAACqB,GAAR,CAAYC,GAAnC,EAAwCtB,OAAO,CAACG,eAAhD,CAAf;AAEA,iBAAOuD,QAAQ,CAACG,OAAT,CAAiBkD,aAAjB,CAA+BlH,KAAK,CAAC4C,KAAN,CAAYsB,KAAZ,CAAkBb,MAAlB,CAA/B,EACIe,IADJ,CACS;AAACE,YAAAA,GAAG,EAAE,MAAN;AAAcE,YAAAA,IAAI,EAAEtE;AAApB,WADT,EAEIe,IAFJ,CAES,UAACwD,GAAD,EAAS;AACb,mBAAO5D,OAAO,CAAC4D,GAAD,CAAd;AACD,WAJJ,EAKIC,KALJ,CAKU,UAACsC,GAAD,EAAS;AACd,mBAAOlG,MAAM,CAACkG,GAAD,CAAb;AACD,WAPJ,CAAP;AAQD,SAZI,CAAP;AAaD,OAfM,CAAP;AAgBD,KAheW;AAieZhE,IAAAA,KAAK,EAAE,SAASA,KAAT,CAAemE,CAAf,EAAiB;AACtB,aAAOC,MAAM,CAACD,CAAD,CAAN,KAAcA,CAAd,IAAmBA,CAAC,GAAG,CAAJ,KAAU,CAApC;AACD,KAneW;AAoeZ7D,IAAAA,OAAO,EAAE,SAASA,OAAT,CAAiB6D,CAAjB,EAAmB;AAC1B,aAAOC,MAAM,CAACD,CAAD,CAAN,KAAcA,CAAd,IAAmBA,CAAC,GAAG,CAAJ,KAAU,CAApC;AACD;AAteW,GAAd;AAyeAhH,EAAAA,OAAO,CAACM,SAAR,CAAkBZ,OAAO,CAACwH,YAA1B;AAEA,SAAOlH,OAAP;AACD;AAAA","sourcesContent":["/* eslint-disable */\n/*!\n * ambrpay JavaScript Library v0.2.2\n * https://ambrpay.io/\n */\n\nexport default function Ambrpay(account, web3) {\n  if(!apiEndpoint) {\n    var apiEndpoint = 'https://ambrpay.io/api';\n  }\n  \n  var _web3 = web3;\n  var ethAddress = account.address;\n  var ambrpay = {\n    apiKey: false,\n    testMode: false,\n    contractAddress: false,\n    contractAddresses: false,\n    network: \"auto\",\n    setApiKey: function(apiKey) {\n\n      ambrpay.apiKey = apiKey;\n\n      if(ambrpay.apiKey.indexOf(\"test_public\") != -1) {\n        ambrpay.testMode = true;\n      } else if(ambrpay.apiKey.indexOf(\"api_public\") != -1) {\n        ambrpay.testMode = false;\n      } else {\n        throw \"invalid public api key\";\n      }\n    },\n    getContractAddresses: function() {\n\n      return new Promise(function(resolve, reject) {\n\n        if(ambrpay.contractAddress) {\n          return resolve(ambrpay.contractAddress);\n        }\n\n        if(!_web3) {\n          reject( \"MetaMask is not installed. Download it at https://metamask.io/\" );\n        }\n\n        if(!ambrpay.contractAddresses) {\n          var url = apiEndpoint + '/smartContractAddresses';\n\n          return ambrpay.getRequest(url, ambrpay.apiKey)\n            .then(function(contractAddresses) {\n\n              ambrpay.contractAddresses = JSON.parse(contractAddresses);\n\n              return resolve(ambrpay.contractAddresses);\n            });\n        } else {\n          return resolve(ambrpay.contractAddresses);\n        }\n      })\n        .then(() => {\n          var networkName;\n\n          switch (account.netId) {\n            case \"1\":\n              // throw \"mainnet is currently not available\";\n\n              if(ambrpay.network == 'mainnet' || ambrpay.network == 'auto') {\n\n                networkName = \"Mainnet\";\n                ambrpay.contractAddress = ambrpay.contractAddresses.mainnet.smartContractAddress;\n                ambrpay.ABI = {\n                  \"abi\": JSON.parse(ambrpay.contractAddresses.mainnet.abi)\n                }\n              } else {\n                throw \"your wallets network (mainnet) does not match the selected network for the transaction (\" + ambrpay.network + \")\";\n              }\n              break;\n            case \"2\":\n              throw \"Morden testnet is not available. Try ropsten testnet.\";\n              networkName = \"Morden Testnet\";\n              break;\n            case \"3\":\n              if(ambrpay.network == 'ropsten' || ambrpay.network == 'auto') {\n                networkName = \"Ropsten Testnet\";\n                ambrpay.contractAddress = ambrpay.contractAddresses.ropsten.smartContractAddress;\n                ambrpay.ABI = {\n                  \"abi\": JSON.parse(ambrpay.contractAddresses.ropsten.abi)\n                }\n              } else {\n                throw \"your wallets network (ropsten) does not match the selected network for the transaction (\" + ambrpay.network + \")\";\n              }\n              break;\n            case \"4\":\n              throw \"Rinkeby testnet is not available. Try ropsten testnet.\";\n              networkName = \"Rinkeby Testnet\";\n              break;\n            case \"42\":\n              throw \"Kovan testnet is not available. Try ropsten testnet.\";\n              networkName = \"Kovan Testnet\";\n              break;\n            default:\n              throw \"Uknown testnet. Try ropsten testnet.\";\n              networkName = \"Unknown\";\n          }\n\n          return ambrpay.contractAddress;\n        });\n    },\n    getSubscriptionPlan: function(id) {\n\n      var url = apiEndpoint + '/plan/' + id;\n\n      return ambrpay.getRequest(url)\n        .then(function(o) {\n          return JSON.parse(o);\n        });\n    },\n    subscribe: function(data) {\n\n      var senderWallet;\n      var receiverWallet;\n      var subscriptionPlan;\n      var subscriptionAmount;\n      var customPrice;\n      var priceLimitPercentage = 1.50;\n      var transferOut = false;\n      var subscriptionFeeAmount;\n\n      if(data.network) {\n        ambrpay.network = data.network;\n      }\n\n      return ambrpay.getContractAddresses()\n        .then(() => {\n          return ambrpay.metaMaskLoaded()\n        })\n        .then(() => {\n          return ambrpay.getMetaMaskAccount()\n        })\n        .then((account) => {\n\n          senderWallet = account;\n\n          return ambrpay.getSubscriptionPlan(data.subscriptionPlan);\n        })\n        .then((plan) => {\n\n          subscriptionPlan = plan;\n\n          if(!subscriptionPlan.wallet && !data.receiverWallet) {\n\n            // cant continue without a wallet to subscribe to\n            throw \"Subscription plan has no wallet assigned to it, therefore param 'receiverWallet' is required when calling ambrpay.subscribe()\";\n\n          } else if(!subscriptionPlan.wallet) {\n\n            // subscription plan has no receiver wallet, overwrite it with the one from ambrpay.subscribe()\n            receiverWallet = data.receiverWallet;\n\n          } else {\n\n            receiverWallet = subscriptionPlan.wallet;\n          }\n\n          if(!_web3.utils.isAddress(receiverWallet)) {\n\n            throw \"receiverAddress is not a valid address\";\n          }\n\n          if(subscriptionPlan.daysInterval == -1 && !data.interval) {\n            throw \"Subscription plan has interval set to custom, therefore param 'interval' is required when calling ambrpay.subscribe()\";\n          }\n\n          if(subscriptionPlan.daysInterval == -1 && !ambrpay.isInt(data.interval)) {\n            throw \"interval must be an integer\";\n          }\n\n          // todo: only for CRYPTO plans?\n          if(subscriptionPlan.daysInterval == -1 && data.interval && parseInt(data.interval) >= 1 && parseInt(data.interval) <= 365) {\n\n            subscriptionPlan.daysInterval = parseInt(data.interval);\n\n          } else if(subscriptionPlan.daysInterval == -1 && data.interval) {\n\n            throw \"interval must be between 1 and 365\";\n          }\n\n          if (typeof data.transferOut !== 'undefined' && typeof data.transferOut !== \"boolean\") {\n            throw \"transferOut must be a boolean\"\n          }\n\n          if(data.transferOut && subscriptionPlan.transferOut == 1) {\n\n            transferOut = true;\n\n          } else {\n\n            transferOut = false;\n          }\n\n          if(subscriptionPlan.acceptedCryptoCurrencies.Ethereum.price > 0) {\n\n            return subscriptionPlan.acceptedCryptoCurrencies.Ethereum.price;\n\n          } else {\n\n            if(data.amount) {\n\n              if(!ambrpay.isInt(data.amount) && !ambrpay.isFloat(data.amount)) {\n                throw \"amount must be an integer or a float\";\n              }\n\n              customPrice = data.amount;\n\n              if(subscriptionPlan.currencyCode == 'ETH') {\n\n                if(data.amount < 0.01) {\n                  throw \"the minimum amount is 0.01 ETH\";\n                }\n              } else {\n\n                if(customPrice < 1) {\n                  throw \"the minimum amount is \" + subscriptionPlan.currencyCode + \" 1.00 \";\n                }\n\n                return ambrpay.getExchangePrice(subscriptionPlan.currencyCode, 'ETH', customPrice)\n                  .then((price) => {\n                    return price;\n                  });\n              }\n\n              return data.amount;\n            }\n          }\n        })\n        .then((amount) => {\n\n          subscriptionAmount = amount;\n\n          subscriptionFeeAmount = amount / 100 * subscriptionPlan.fee;\n          subscriptionFeeAmount = subscriptionFeeAmount * 1000000000000000000 / 1000000000000000000;\n\n          if(_web3.utils.isAddress(subscriptionPlan.wallet)) {\n\n            var subscriptionTotalAmount = parseFloat(subscriptionAmount);\n\n          } else {\n\n            var subscriptionTotalAmount = parseFloat(subscriptionAmount) + parseFloat(subscriptionFeeAmount);\n          }\n\n          var subscriptionPriceLimit = subscriptionTotalAmount * (1 + (subscriptionPlan.priceLimitPercentage/100));\n\n          return new Promise(function(resolve, reject) {\n\n            var instance = new _web3.eth.Contract(ambrpay.ABI.abi, ambrpay.contractAddress);\n            return instance.methods.createSubscriptionWithTransfer(\n              receiverWallet,\n              subscriptionPlan.daysInterval,\n              _web3.utils.toWei(subscriptionPriceLimit.toString(), 'ether'),\n              transferOut,\n              _web3.utils.toWei(subscriptionFeeAmount.toString(), 'ether'))\n              .send({\n                value: _web3.utils.toWei(subscriptionTotalAmount.toString(), 'ether'),\n                gas: 500000,\n                gasPrice: 1000000000,\n                from: senderWallet\n              })\n              .then((res) =>{\n                return resolve(res);\n              })\n              .catch((e) => {\n                return reject(e);\n              });\n          });\n        })\n        .then((txHash) => {\n          var customer = {\n            subscriptionPlanId: subscriptionPlan.id,\n            senderWallet: senderWallet,\n            receiverWallet: receiverWallet,\n            customerId: data.customerId,\n            customerEmail: data.customerEmail,\n            customerDescription: data.customerDescription,\n            transactionHash: txHash.transactionHash,\n            subscriptionCurrency: \"ETH\",\n            subscriptionPrice: subscriptionAmount,\n            customPrice: customPrice,\n            interval: data.interval,\n            transferOut: transferOut,\n            smartContractAddress: ambrpay.contractAddress,\n          };\n          return ambrpay.createSubscription(customer)\n            .then(() => {\n              return txHash.transactionHash;\n            });\n        });\n    },\n    createSubscription: function(data) {\n      var url = apiEndpoint + '/subscription';\n\n      return ambrpay.postRequest(url, data)\n        .then(function(o) {\n          return JSON.parse(o);\n        });\n    },\n    getExchangePrice: function(from, to, amount) {\n\n      var url = apiEndpoint + '/price/' + from + '/' + to + '/' + amount;\n\n      return ambrpay.getRequest(url);\n    },\n    getRequest: function(url) {\n\n      if (!ambrpay.apiKey) {\n        throw \"ambrpay api key not set\";\n      }\n\n      return new Promise(function(resolve, reject) {\n\n        var http = new XMLHttpRequest();\n\n        http.open('GET', url, true);\n        http.setRequestHeader('Authorization', 'Bearer ' + ambrpay.apiKey);\n\n        http.onreadystatechange = function() {\n          if (http.readyState == 4 && http.status == 200) {\n            return resolve(http.responseText);\n          } else if (http.readyState == 4 && http.status != 200) {\n            reject(http.responseText);\n          }\n        }\n\n        http.send();\n      });\n    },\n    postRequest: function(url, params) {\n      if (!ambrpay.apiKey) {\n        throw \"ambrpay api key not set\";\n      }\n\n      return new Promise(function(resolve, reject) {\n\n        var http = new XMLHttpRequest();\n\n        http.open('POST', url, true);\n        http.setRequestHeader('Authorization', 'Bearer ' + ambrpay.apiKey);\n\n        http.onreadystatechange = function() {\n\n          if (http.readyState == 4 && http.status == 200) {\n            resolve(http.responseText);\n          } else if (http.readyState == 4 && http.status != 200) {\n            reject(http.responseText);\n          }\n        }\n        http.send(JSON.stringify(params));\n      });\n    },\n    metaMaskLoaded: function() {\n      return new Promise(function(resolve, reject) {\n\n        if(_web3 == 'undefined') {\n          reject(\"MetaMask is missing. Please download the MetaMask browser extension.\");\n        }\n        return resolve(true);\n      });\n    },\n    getMetaMaskAccount: function() {\n      return new Promise(function(resolve, reject) {\n        return resolve(ethAddress);\n      });\n    },\n    getSubscriptionFunds: function() {\n      return ambrpay.getContractAddresses()\n        .then(() => {\n          return ambrpay.getMetaMaskAccount();\n        })\n        .then((address) => {\n          if(!address) {\n            throw \"Error retrieving your metamask wallet address. Make sure metamask is unlocked\";\n          }\n          return new Promise(function(resolve, reject) {\n\n            var instance = new _web3.eth.Contract(ambrpay.ABI.abi, ambrpay.contractAddress);\n            var balance = instance.methods.getBalances(address).call();\n\n            return resolve(balance);\n          });\n        });\n    },\n    getSubscriptions: function(address) {\n\n      return new Promise(function(resolve, reject) {\n\n        if(!address) {\n\n          return ambrpay.getMetaMaskAccount()\n            .then((metamaskAddress) => {\n\n              var url = apiEndpoint + '/subscriptions/' + metamaskAddress;\n\n              return ambrpay.getRequest(url, ambrpay.apiKey)\n                .then(function(subscriptions) {\n\n                  ambrpay.subscriptions = JSON.parse(subscriptions);\n\n                  return resolve(ambrpay.subscriptions);\n                });\n            });\n        } else {\n\n          var url = apiEndpoint + '/subscriptions/' + address;\n\n          return ambrpay.getRequest(url, ambrpay.apiKey)\n            .then(function(subscriptions) {\n\n              ambrpay.subscriptions = JSON.parse(subscriptions);\n\n              return resolve(ambrpay.subscriptions);\n            });\n        }\n      });\n    },\n    getMetaMaskBalance: function() {\n\n      return new Promise(function(resolve, reject) {\n\n        return ambrpay.getMetaMaskAccount()\n          .then((address) => {\n            return _web3.eth.getBalance(address, function(e, o) {\n              if (e) return reject(e);\n              var value = _web3.utils.fromWei(o, 'ether');\n              value = web3.utils.toDecimal(value);\n              return resolve(value);\n            });\n          });\n      });\n    },\n    unsubscribe: function(pos, contractAddress) {\n\n      return new Promise(function(resolve, reject) {\n        var instance = new _web3.eth.Contract(ambrpay.ABI.abi, contractAddress);\n\n        return ambrpay.getMetaMaskAccount()\n          .then((address) => {\n\n            return instance.methods.deactivateSubscription(pos)\n              .send({ gas: 500000, from: address })\n              .then((res) => {\n                resolve(res);\n              })\n              .catch((err) => {\n                reject(err);\n              });\n          })\n      });\n    },\n    addFunds: function(amount) {\n\n      return new Promise(function(resolve, reject) {\n\n        return ambrpay.getMetaMaskAccount()\n          .then((address) => {\n            var instance = new _web3.eth.Contract(ambrpay.ABI.abi, ambrpay.contractAddress);\n\n            return instance.methods.addFunds(address)\n                    .send({ value: _web3.utils.toWei(amount), gas: 500000, from: address })\n                    .then((res) => {\n                      return resolve(res);\n                    })\n                    .catch((err) => {\n                      return reject(err);\n                    });\n          });\n      });\n    },\n    withdrawFunds: function(amount) {\n\n      return new Promise(function(resolve, reject) {\n\n        return ambrpay.getMetaMaskAccount()\n          .then((address) => {\n            var instance = new _web3.eth.Contract(ambrpay.ABI.abi, ambrpay.contractAddress);\n\n            return instance.methods.withdrawFunds(_web3.utils.toWei(amount))\n                      .send({gas: 500000, from: address})\n                      .then((res) => {\n                        return resolve(res);\n                      })\n                      .catch((err) => {\n                        return reject(err);\n                      })\n          });\n      });\n    },\n    isInt: function isInt(n){\n      return Number(n) === n && n % 1 === 0;\n    },\n    isFloat: function isFloat(n){\n      return Number(n) === n && n % 1 !== 0;\n    }\n  }\n\n  ambrpay.setApiKey(account.publicApiKey);\n\n  return ambrpay;\n};"]}]}