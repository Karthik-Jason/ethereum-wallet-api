{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/thread-loader/dist/cjs.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/dapps/ScheduleTransaction/containers/ScheduleView.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/dapps/ScheduleTransaction/containers/ScheduleView.vue","mtime":1573477611660},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.function.name\";\nimport _defineProperty from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState } from 'vuex';\nimport { EAC, Util } from '@ethereum-alarm-clock/lib';\nimport BigNumber from 'bignumber.js';\nimport { Datetime } from 'vue-datetime';\nimport 'vue-datetime/dist/vue-datetime.css';\nimport moment from 'moment';\nimport 'moment-timezone';\nimport * as unit from 'ethjs-unit';\nimport { Toast } from '@/helpers';\nimport BackButton from '@/layouts/InterfaceLayout/components/BackButton';\nimport CurrencyPicker from \"../../../layouts/InterfaceLayout/components/CurrencyPicker\";\nimport StandardInput from '@/components/StandardInput';\nimport StandardDropdown from '@/components/StandardDropdown';\nimport Blockie from '@/components/Blockie';\nimport { ERC20 } from '@/partners';\nimport { calcSchedulingTotalCost, canBeConvertedToWei, EAC_SCHEDULING_CONFIG, estimateBountyForGasPrice } from \"../ScheduleHelpers\";\nexport default {\n  name: 'ScheduleView',\n  components: {\n    'back-button': BackButton,\n    'currency-picker': CurrencyPicker,\n    'standard-input': StandardInput,\n    'standard-dropdown': StandardDropdown,\n    'datetime-picker': Datetime,\n    blockie: Blockie\n  },\n  props: {\n    tokensWithBalance: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    }\n  },\n  data: function data() {\n    return {\n      eac: null,\n      advancedExpand: false,\n      advancedTimeBounty: false,\n      hexAddress: '',\n      address: '',\n      isValidAddress: false,\n      amount: '0',\n      gasLimit: EAC_SCHEDULING_CONFIG.FUTURE_GAS_LIMIT,\n      futureGasLimit: EAC_SCHEDULING_CONFIG.FUTURE_GAS_LIMIT,\n      minGasLimit: 0,\n      futureGasPrice: '1',\n      minGasPrice: 0.1,\n      data: '',\n      datetime: '',\n      currentBlockNumber: '',\n      selectedBlockNumber: '',\n      timeBountyPresets: EAC_SCHEDULING_CONFIG.TIME_BOUNTY_DEFAULTS,\n      timeBounty: EAC_SCHEDULING_CONFIG.TIME_BOUNTY_DEFAULTS[0],\n      windowSize: 10,\n      supportedModes: EAC_SCHEDULING_CONFIG.SUPPORTED_MODES,\n      selectedMode: EAC_SCHEDULING_CONFIG.SUPPORTED_MODES[0],\n      deposit: EAC_SCHEDULING_CONFIG.TIME_BOUNTY_DEFAULTS[0] * EAC_SCHEDULING_CONFIG.BOUNTY_TO_DEPOSIT_MULTIPLIER,\n      ethPrice: new BigNumber(0),\n      selectedTimeZone: moment.tz.guess(),\n      selectedCurrency: '',\n      showTokenTransferNotification: true,\n      amountInputOptions: function amountInputOptions() {\n        return {\n          title: 'Amount',\n          value: this.amount,\n          type: 'number'\n        };\n      },\n      customTimeBountyInputOptions: function customTimeBountyInputOptions() {\n        return {\n          title: 'Time Bounty',\n          placeHolder: 'ETH',\n          value: this.timeBounty,\n          type: 'number'\n        };\n      },\n      bountyUsdDisplayOptions: function bountyUsdDisplayOptions() {\n        return {\n          value: this.timeBountyUsd,\n          inputDisabled: true\n        };\n      },\n      blockNumberInputOptions: function blockNumberInputOptions() {\n        return {\n          title: 'Block Number',\n          value: this.selectedBlockNumber,\n          placeHolder: \"Current block number: \".concat(this.currentBlockNumber),\n          type: 'number'\n        };\n      },\n      dataInputOptions: function dataInputOptions() {\n        return {\n          title: 'Add Data',\n          placeHolder: 'Add Data (e.g. 0x7834f874g298hf298h234f)',\n          value: this.data\n        };\n      },\n      gasLimitInputOptions: function gasLimitInputOptions() {\n        return {\n          title: 'Gas Limit',\n          value: this.gasLimit,\n          type: 'number'\n        };\n      },\n      futureGasPriceInputOptions: function futureGasPriceInputOptions() {\n        return {\n          title: 'Future Gas Price (gwei)',\n          value: this.futureGasPrice,\n          type: 'number'\n        };\n      },\n      futureGasLimitInputOptions: function futureGasLimitInputOptions() {\n        return {\n          title: 'Future Gas Limit',\n          value: this.futureGasLimit,\n          type: 'number'\n        };\n      },\n      requireDepositInputOptions: function requireDepositInputOptions() {\n        return {\n          title: 'Require a deposit',\n          value: this.deposit,\n          placeHolder: 'ETH',\n          type: 'number'\n        };\n      },\n      executionWindowInputOptions: function executionWindowInputOptions() {\n        return {\n          title: 'Execution Window',\n          value: this.windowSize,\n          placeHolder: this.selectedMode.unit,\n          type: 'number'\n        };\n      }\n    };\n  },\n  computed: _objectSpread({}, mapState(['web3', 'network', 'gasPrice', 'notifications', 'account', 'online']), {\n    isTokenTransfer: function isTokenTransfer() {\n      return this.selectedCurrency.symbol !== this.network.type.name;\n    },\n    timeBountyUsd: function timeBountyUsd() {\n      var formatter = new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: 'USD',\n        minimumFractionDigits: 2\n      });\n      return formatter.format(this.ethPrice.times(new BigNumber(this.timeBounty)));\n    },\n    estimatedMaximumExecutionGasPrice: function estimatedMaximumExecutionGasPrice() {\n      if (!this.isValidFutureGasPrice || !this.isValidFutureGasLimit || !this.isValidTimeBounty) return 0;\n      var estimated = Util.estimateMaximumExecutionGasPrice(new BigNumber(unit.toWei(this.timeBounty, 'ether')), new BigNumber(unit.toWei(this.futureGasPrice, 'gwei')), new BigNumber(this.futureGasLimit));\n      return Math.round(unit.fromWei(estimated.toString(), 'gwei'));\n    },\n    now: function now() {\n      return moment();\n    },\n    minBounty: function minBounty() {\n      if (!this.isValidFutureGasPrice) return 0;\n      var wei = unit.toWei(this.futureGasPrice, 'gwei');\n      return unit.fromWei(wei, 'ether');\n    },\n    timezoneOptions: function timezoneOptions() {\n      return moment.tz.names();\n    },\n    schedulingCost: function schedulingCost() {\n      if (!this.isValidFutureGasPrice || !this.isValidGasLimit || !this.isValidFutureGasLimit || !this.isValidTimeBounty) {\n        // Make the scheduling cost ridiculously big to throw an error\n        return new BigNumber(1e32 * 1e18);\n      }\n\n      return calcSchedulingTotalCost({\n        gasPrice: new BigNumber(unit.toWei(this.gasPrice.toString(), 'gwei')),\n        gasLimit: new BigNumber(this.gasLimit),\n        futureGasLimit: new BigNumber(this.futureGasLimit),\n        futureGasPrice: new BigNumber(unit.toWei(this.futureGasPrice.toString(), 'gwei')),\n        timeBounty: new BigNumber(unit.toWei(this.timeBounty.toString(), 'ether'))\n      });\n    },\n    maxEthToSend: function maxEthToSend() {\n      var accountBalance = new BigNumber(this.account.balance);\n      var sendableEth = accountBalance.minus(this.schedulingCost);\n      return sendableEth.gt(0) ? sendableEth : new BigNumber(0);\n    },\n    validInputs: function validInputs() {\n      return this.hasEnoughEthToSchedule && this.isValidAmount && this.isValidAddress && this.isValidExecutionWindow && this.isValidFutureGasPrice && this.isValidFutureGasLimit && this.isValidGasLimit && this.isValidTimeBounty && this.isValidWindowStart && this.isValidData;\n    },\n    isValidAmount: function isValidAmount() {\n      if (!canBeConvertedToWei(this.web3, this.amount.toString())) return false;\n      var enteredAmount = new BigNumber(this.isTokenTransfer ? this.amount : unit.toWei(this.amount.toString(), 'ether'));\n      var max = new BigNumber(this.isTokenTransfer ? this.selectedCurrency.balance : this.maxEthToSend.toString());\n      return enteredAmount.lte(max);\n    },\n    isValidDateTime: function isValidDateTime() {\n      return moment(this.datetime) > moment().add(this.supportedModes[0].executionWindow.min, 'minutes');\n    },\n    isValidBlockNumber: function isValidBlockNumber() {\n      var selectedBlockNumber = this.selectedBlockNumber,\n          supportedModes = this.supportedModes,\n          currentBlockNumber = this.currentBlockNumber;\n      return parseInt(selectedBlockNumber) > currentBlockNumber + supportedModes[1].executionWindow.min;\n    },\n    isValidWindowStart: function isValidWindowStart() {\n      var selectedMode = this.selectedMode,\n          supportedModes = this.supportedModes,\n          isValidBlockNumber = this.isValidBlockNumber,\n          isValidDateTime = this.isValidDateTime;\n      return selectedMode === supportedModes[0] ? isValidDateTime : isValidBlockNumber;\n    },\n    isValidTimeBounty: function isValidTimeBounty() {\n      var convertibleToWei = canBeConvertedToWei(this.web3, this.timeBounty);\n      var invalidFutureGasPrice = canBeConvertedToWei(this.web3, this.futureGasPrice, 'gwei');\n      if (!invalidFutureGasPrice || !convertibleToWei) return false;\n      var higherThanGasPrice = new BigNumber(unit.toWei(this.timeBounty, 'ether')).gte(unit.toWei(this.futureGasPrice, 'gwei'));\n      return higherThanGasPrice;\n    },\n    isValidExecutionWindow: function isValidExecutionWindow() {\n      return this.windowSize >= this.selectedMode.executionWindow.min;\n    },\n    isValidFutureGasPrice: function isValidFutureGasPrice() {\n      var isHigherThanMin = parseFloat(this.futureGasPrice) >= this.minGasPrice;\n      var convertibleToWei = canBeConvertedToWei(this.web3, this.futureGasPrice, 'gwei');\n      return isHigherThanMin && convertibleToWei;\n    },\n    isValidGasLimit: function isValidGasLimit() {\n      return new BigNumber(this.gasLimit).gte(this.minGasLimit);\n    },\n    isValidFutureGasLimit: function isValidFutureGasLimit() {\n      return new BigNumber(this.futureGasLimit).gte(this.minGasLimit);\n    },\n    isValidDeposit: function isValidDeposit() {\n      return canBeConvertedToWei(this.web3, this.deposit);\n    },\n    isValidData: function isValidData() {\n      return this.web3.utils.isHexStrict(this.data) || this.data === '';\n    },\n    hasEnoughEthToSchedule: function hasEnoughEthToSchedule() {\n      var accountBalance = new BigNumber(this.account.balance);\n      return accountBalance.gt(this.schedulingCost);\n    }\n  }),\n  watch: {\n    selectedMode: function selectedMode() {\n      this.windowSize = this.selectedMode.executionWindow.default;\n    },\n    notifications: function () {\n      var _notifications = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var notifications, latestNotification, transaction, isTokenTransfer;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                notifications = this.notifications[this.account.address];\n                latestNotification = notifications[0];\n\n                if (!latestNotification.hash) {\n                  _context.next = 18;\n                  break;\n                }\n\n                if (!(latestNotification.status === 'pending')) {\n                  _context.next = 18;\n                  break;\n                }\n\n                _context.next = 6;\n                return this.web3.eth.getTransaction(latestNotification.hash);\n\n              case 6:\n                transaction = _context.sent;\n                _context.prev = 7;\n\n                if (!(transaction === null)) {\n                  _context.next = 11;\n                  break;\n                }\n\n                Toast.responseHandler(new Error('Non-existing transaction detected'), Toast.ERROR);\n                return _context.abrupt(\"return\");\n\n              case 11:\n                isTokenTransfer = transaction.input.includes(EAC_SCHEDULING_CONFIG.TOKEN_TRANSFER_METHOD_ID);\n                this.$router.push({\n                  name: 'Scheduled success',\n                  params: {\n                    txHash: latestNotification.hash,\n                    isTokenTransfer: isTokenTransfer,\n                    selectedCurrency: isTokenTransfer ? this.selectedCurrency : null,\n                    toAddress: transaction.to,\n                    amount: this.amount\n                  }\n                });\n                _context.next = 18;\n                break;\n\n              case 15:\n                _context.prev = 15;\n                _context.t0 = _context[\"catch\"](7);\n                Toast.responseHandler(_context.t0, Toast.ERROR);\n\n              case 18:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[7, 15]]);\n      }));\n\n      function notifications() {\n        return _notifications.apply(this, arguments);\n      }\n\n      return notifications;\n    }(),\n    selectedCurrency: function () {\n      var _selectedCurrency = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.estimateGas();\n\n              case 2:\n                this.futureGasLimit = _context2.sent;\n                this.gasLimit = this.isTokenTransfer ? EAC_SCHEDULING_CONFIG.TOKEN_SCHEDULING_GAS_LIMIT : EAC_SCHEDULING_CONFIG.FUTURE_GAS_LIMIT;\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function selectedCurrency() {\n        return _selectedCurrency.apply(this, arguments);\n      }\n\n      return selectedCurrency;\n    }(),\n    hexAddress: function () {\n      var _hexAddress = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3() {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.estimateGas();\n\n              case 2:\n                this.futureGasLimit = _context3.sent;\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function hexAddress() {\n        return _hexAddress.apply(this, arguments);\n      }\n\n      return hexAddress;\n    }()\n  },\n  beforeMount: function beforeMount() {\n    var _this = this;\n\n    this.selectedCurrency = {\n      name: this.network.type.name_long,\n      symbol: this.network.type.name\n    };\n    this.web3.eth.getBlockNumber().then(function (res) {\n      _this.currentBlockNumber = res;\n      _this.selectedBlockNumber = res + 100;\n    }).catch(function (err) {\n      Toast.responseHandler(err, Toast.ERROR);\n    });\n    this.datetime = moment().add(1, 'days').toISOString();\n    this.futureGasPrice = (this.gasPrice >= this.minGasPrice ? this.gasPrice : this.minGasPrice).toString();\n    this.timeBountyPresets = [estimateBountyForGasPrice(this.futureGasPrice * 5, this.futureGasLimit), estimateBountyForGasPrice(this.futureGasPrice * 8, this.futureGasLimit), estimateBountyForGasPrice(this.futureGasPrice * 13, this.futureGasLimit)];\n    this.timeBounty = this.timeBountyPresets[0];\n    this.deposit = this.timeBountyPresets[0] * 2;\n  },\n  mounted: function () {\n    var _mounted = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee4() {\n      var url, fetchValues, values;\n      return regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!this.online) {\n                _context4.next = 13;\n                break;\n              }\n\n              this.eac = new EAC(this.web3);\n              url = 'https://cryptorates.mewapi.io/convert/ETH';\n              _context4.next = 5;\n              return fetch(url);\n\n            case 5:\n              fetchValues = _context4.sent;\n              _context4.next = 8;\n              return fetchValues.json();\n\n            case 8:\n              values = _context4.sent;\n\n              if (values['USDT']) {\n                _context4.next = 12;\n                break;\n              }\n\n              Toast.responseHandler(new Error('USDT conversion no longer available. Please provide an alternative USD conversion method'), Toast.ERROR);\n              return _context4.abrupt(\"return\");\n\n            case 12:\n              this.ethPrice = new BigNumber(values['USDT']);\n\n            case 13:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function mounted() {\n      return _mounted.apply(this, arguments);\n    }\n\n    return mounted;\n  }(),\n  methods: {\n    estimateGas: function () {\n      var _estimateGas = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee5() {\n        var coinbase, tokenTransferData, inputData, tokenSchedulingTransaction, estimatedGasLimit, totalEstimatedGasLimit;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.web3.eth.getCoinbase();\n\n              case 2:\n                coinbase = _context5.sent;\n\n                if (!(this.isValidAmount && this.isValidAddress)) {\n                  _context5.next = 21;\n                  break;\n                }\n\n                _context5.next = 6;\n                return this.getTokenTransferData();\n\n              case 6:\n                tokenTransferData = _context5.sent;\n                inputData = this.data === '' ? '0x00' : this.data;\n                tokenSchedulingTransaction = {\n                  from: coinbase,\n                  value: this.isTokenTransfer ? 0 : unit.toWei(this.amount.toString(), 'ether'),\n                  to: this.isTokenTransfer ? this.selectedCurrency.address : this.hexAddress,\n                  data: this.isTokenTransfer ? tokenTransferData : inputData\n                };\n                _context5.prev = 9;\n                _context5.next = 12;\n                return this.web3.eth.estimateGas(tokenSchedulingTransaction);\n\n              case 12:\n                estimatedGasLimit = _context5.sent;\n                _context5.next = 19;\n                break;\n\n              case 15:\n                _context5.prev = 15;\n                _context5.t0 = _context5[\"catch\"](9);\n                Toast.responseHandler(_context5.t0, Toast.ERROR);\n                return _context5.abrupt(\"return\", EAC_SCHEDULING_CONFIG.FUTURE_GAS_LIMIT.toString());\n\n              case 19:\n                totalEstimatedGasLimit = new BigNumber(estimatedGasLimit).plus(EAC_SCHEDULING_CONFIG.TOKEN_TRANSFER_ADDITIONAL_GAS);\n                return _context5.abrupt(\"return\", totalEstimatedGasLimit.toString());\n\n              case 21:\n                return _context5.abrupt(\"return\", EAC_SCHEDULING_CONFIG.FUTURE_GAS_LIMIT.toString());\n\n              case 22:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[9, 15]]);\n      }));\n\n      function estimateGas() {\n        return _estimateGas.apply(this, arguments);\n      }\n\n      return estimateGas;\n    }(),\n    getTokenTransferData: function () {\n      var _getTokenTransferData = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee6() {\n        var tokenContract, coinbase, tokenAmount;\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (!(this.isTokenTransfer && this.isValidAmount && this.isValidAddress)) {\n                  _context6.next = 9;\n                  break;\n                }\n\n                _context6.next = 3;\n                return new this.web3.eth.Contract(ERC20, this.selectedCurrency.address);\n\n              case 3:\n                tokenContract = _context6.sent;\n                _context6.next = 6;\n                return this.web3.eth.getCoinbase();\n\n              case 6:\n                coinbase = _context6.sent;\n                tokenAmount = new BigNumber(this.amount * Math.pow(10, this.selectedCurrency.decimals));\n                return _context6.abrupt(\"return\", tokenContract.methods.transferFrom(coinbase, this.hexAddress, tokenAmount.toString()).encodeABI());\n\n              case 9:\n                return _context6.abrupt(\"return\", '0x00');\n\n              case 10:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function getTokenTransferData() {\n        return _getTokenTransferData.apply(this, arguments);\n      }\n\n      return getTokenTransferData;\n    }(),\n    scheduleTx: function () {\n      var _scheduleTx = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee7() {\n        var amount, hexAddress, futureGasPrice, futureGasLimit, gasLimit, selectedBlockNumber, deposit, windowSize, timeBounty, selectedMode, datetime, isTokenTransfer, selectedCurrency, data, timestampScheduling, timestamp, ethToWeiBN, schedulingOptions, endowment;\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                amount = this.amount, hexAddress = this.hexAddress, futureGasPrice = this.futureGasPrice, futureGasLimit = this.futureGasLimit, gasLimit = this.gasLimit, selectedBlockNumber = this.selectedBlockNumber, deposit = this.deposit, windowSize = this.windowSize, timeBounty = this.timeBounty, selectedMode = this.selectedMode, datetime = this.datetime, isTokenTransfer = this.isTokenTransfer, selectedCurrency = this.selectedCurrency;\n                data = this.data;\n\n                if (data === '') {\n                  data = '0x00';\n                }\n\n                timestampScheduling = selectedMode === EAC_SCHEDULING_CONFIG.SUPPORTED_MODES[0];\n                timestamp = moment(datetime).unix();\n\n                ethToWeiBN = function ethToWeiBN(value) {\n                  value = value === '' ? 0 : value;\n                  return new BigNumber(unit.toWei(value.toString(), 'ether'));\n                };\n\n                _context7.t0 = isTokenTransfer ? selectedCurrency.address : hexAddress;\n                _context7.t1 = new BigNumber(timestampScheduling ? timestamp : selectedBlockNumber);\n                _context7.t2 = timestampScheduling;\n                _context7.t3 = new BigNumber(futureGasLimit);\n\n                if (!isTokenTransfer) {\n                  _context7.next = 16;\n                  break;\n                }\n\n                _context7.next = 13;\n                return this.getTokenTransferData();\n\n              case 13:\n                _context7.t4 = _context7.sent;\n                _context7.next = 17;\n                break;\n\n              case 16:\n                _context7.t4 = data;\n\n              case 17:\n                _context7.t5 = _context7.t4;\n                _context7.t6 = isTokenTransfer ? new BigNumber(0) : ethToWeiBN(amount);\n                _context7.t7 = new BigNumber(timestampScheduling ? windowSize * 60 : windowSize);\n                _context7.t8 = ethToWeiBN(timeBounty);\n                _context7.t9 = ethToWeiBN(deposit);\n                _context7.t10 = new BigNumber(unit.toWei(futureGasPrice.toString(), 'gwei'));\n                _context7.t11 = new BigNumber(0);\n                _context7.t12 = new BigNumber(gasLimit);\n                schedulingOptions = {\n                  toAddress: _context7.t0,\n                  windowStart: _context7.t1,\n                  timestampScheduling: _context7.t2,\n                  callGas: _context7.t3,\n                  callData: _context7.t5,\n                  callValue: _context7.t6,\n                  windowSize: _context7.t7,\n                  bounty: _context7.t8,\n                  requiredDeposit: _context7.t9,\n                  gasPrice: _context7.t10,\n                  fee: _context7.t11,\n                  scheduleGas: _context7.t12\n                };\n                _context7.next = 28;\n                return this.eac.computeEndowment(schedulingOptions);\n\n              case 28:\n                endowment = _context7.sent;\n                _context7.prev = 29;\n                _context7.next = 32;\n                return this.eac.validateScheduleOptions(schedulingOptions, endowment);\n\n              case 32:\n                _context7.next = 38;\n                break;\n\n              case 34:\n                _context7.prev = 34;\n                _context7.t13 = _context7[\"catch\"](29);\n                Toast.responseHandler(_context7.t13, Toast.ERROR);\n                return _context7.abrupt(\"return\");\n\n              case 38:\n                this.eac.schedule(schedulingOptions);\n\n              case 39:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[29, 34]]);\n      }));\n\n      function scheduleTx() {\n        return _scheduleTx.apply(this, arguments);\n      }\n\n      return scheduleTx;\n    }(),\n    copyToClipboard: function copyToClipboard(ref) {\n      this.$refs[ref].select();\n      document.execCommand('copy');\n    }\n  }\n};",{"version":3,"sources":["ScheduleView.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"schedule-view-container\">\n    <h3 class=\"page-title\">Schedule a transaction</h3>\n\n    <div class=\"schedule-view-content\">\n      <div class=\"schedule-view-form-container\">\n        <b-container>\n          <b-row>\n            <b-col cols=\"12\" md=\"4\">\n              <div class=\"scheduling-currency-picker\">\n                <div class=\"input-title\">{{ $t('interface.sendTxType') }}</div>\n                <currency-picker\n                  :currency=\"tokensWithBalance\"\n                  :page=\"'sendEgasAmountthAndTokens'\"\n                  :token=\"true\"\n                  @selectedCurrency=\"selectedCurrency = $event\"\n                />\n              </div>\n            </b-col>\n            <b-col cols=\"12\" md=\"8\">\n              <standard-input\n                :options=\"amountInputOptions()\"\n                @changedValue=\"amount = $event\"\n              />\n              <div v-show=\"!isValidAmount\" class=\"text-danger\">\n                Amount higher than balance\n              </div>\n              <div v-show=\"!hasEnoughEthToSchedule\" class=\"text-danger\">\n                Not enough ETH on account to schedule\n              </div>\n            </b-col>\n          </b-row>\n\n          <div class=\"to-address\">\n            <div class=\"title input-title\">\n              <h4>\n                To Address\n                <blockie\n                  v-show=\"isValidAddress\"\n                  :address=\"hexAddress\"\n                  :size=\"8\"\n                  :scale=\"16\"\n                  width=\"32px\"\n                  height=\"32px\"\n                  class=\"blockie-image\"\n                />\n              </h4>\n\n              <p\n                class=\"copy-button prevent-user-select\"\n                @click=\"copyToClipboard('address')\"\n              >\n                {{ $t('common.copy') }}\n              </p>\n            </div>\n            <div class=\"the-form address-block\">\n              <input\n                v-ens-resolver=\"'address'\"\n                ref=\"address\"\n                v-model=\"address\"\n                type=\"text\"\n                name=\"name\"\n                autocomplete=\"off\"\n              />\n              <i\n                :class=\"[\n                  isValidAddress && hexAddress.length !== 0 ? '' : 'not-good',\n                  'fa fa-check-circle good-button'\n                ]\"\n                aria-hidden=\"true\"\n              />\n            </div>\n          </div>\n\n          <hr />\n\n          <div v-show=\"selectedMode === supportedModes[1]\">\n            <standard-input\n              :options=\"blockNumberInputOptions()\"\n              @changedValue=\"selectedBlockNumber = $event\"\n            />\n            <div v-show=\"!isValidBlockNumber\" class=\"text-danger\">\n              Should be at least\n              {{ supportedModes[1].executionWindow.min }} blocks in the future\n            </div>\n          </div>\n\n          <b-row v-show=\"selectedMode === supportedModes[0]\">\n            <b-col cols=\"12\" md=\"6\">\n              <div class=\"datetime-picker-container\">\n                <div class=\"input-title\">Date & Time</div>\n                <datetime-picker\n                  v-model=\"datetime\"\n                  :min-datetime=\"now.toISOString()\"\n                  :value-zone=\"selectedTimeZone\"\n                  :zone=\"selectedTimeZone\"\n                  class=\"theme-mew\"\n                  type=\"datetime\"\n                />\n                <div v-show=\"!isValidDateTime\" class=\"text-danger\">\n                  Make sure that the time is at least\n                  {{ supportedModes[0].executionWindow.min }} minutes in the\n                  future\n                </div>\n              </div>\n            </b-col>\n\n            <b-col cols=\"12\" md=\"6\">\n              <div class=\"timezone-selector\">\n                <div class=\"input-title\">Timezone</div>\n                <standard-dropdown\n                  :options=\"timezoneOptions\"\n                  :placeholder=\"selectedTimeZone\"\n                  @selection=\"selectedTimeZone = $event\"\n                />\n              </div>\n            </b-col>\n          </b-row>\n\n          <hr />\n\n          <b-row>\n            <b-col cols=\"12\" sm=\"6\" md=\"6\">\n              <div v-show=\"!advancedExpand\" class=\"time-bounty-selector\">\n                <div\n                  v-b-tooltip.hover\n                  title=\"The amount of ETH you wish to offer to TimeNodes in exchange for execution. The higher the Time Bounty, the likelier your transaction will get executed.\"\n                  class=\"input-title\"\n                >\n                  Time Bounty\n                </div>\n                <b-button-group>\n                  <b-button\n                    v-for=\"(bounty, index) in timeBountyPresets\"\n                    :key=\"index\"\n                    :class=\"['btn-group', bounty === timeBounty && 'selected']\"\n                    @click=\"timeBounty = bounty\"\n                  >\n                    {{ bounty }}\n                  </b-button>\n                </b-button-group>\n                <div class=\"timebounty-gasprice-coverage\">\n                  Covers up to\n                  <span>{{ estimatedMaximumExecutionGasPrice }}</span> gwei gas\n                  price on future execution\n                </div>\n              </div>\n\n              <div v-show=\"advancedExpand\">\n                <standard-input\n                  :options=\"customTimeBountyInputOptions()\"\n                  @changedValue=\"timeBounty = $event\"\n                />\n                <div v-show=\"!isValidTimeBounty\" class=\"text-danger\">\n                  Please set a bounty of {{ minBounty }} or higher\n                </div>\n              </div>\n            </b-col>\n\n            <b-col cols=\"12\" sm=\"6\" md=\"3\">\n              <standard-input\n                :options=\"bountyUsdDisplayOptions()\"\n                class=\"bounty-usd-display\"\n              />\n            </b-col>\n\n            <b-col cols=\"12\" sm=\"12\" md=\"3\" class=\"toggle-button-col\">\n              <hr class=\"d-block d-md-none\" />\n              <div class=\"toggle-button-container float-md-right\">\n                <h4>Advanced</h4>\n                <div class=\"toggle-button\">\n                  <!-- Rounded switch -->\n                  <div class=\"sliding-switch-white\">\n                    <label class=\"switch\">\n                      <input\n                        type=\"checkbox\"\n                        @click=\"advancedExpand = !advancedExpand\"\n                      />\n                      <span class=\"slider round\" />\n                    </label>\n                  </div>\n                </div>\n              </div>\n            </b-col>\n          </b-row>\n\n          <div v-show=\"advancedExpand\">\n            <b-row>\n              <b-col cols=\"12\" md=\"6\">\n                <div class=\"mode-container\">\n                  <div class=\"input-title\">Scheduling mode</div>\n                  <b-button-group>\n                    <b-button\n                      v-for=\"(mode, index) in supportedModes\"\n                      :key=\"index\"\n                      :class=\"['mode-btn', mode === selectedMode && 'selected']\"\n                      @click=\"selectedMode = mode\"\n                    >\n                      {{ mode.name }}\n                    </b-button>\n                  </b-button-group>\n                </div>\n              </b-col>\n\n              <b-col cols=\"12\" md=\"6\">\n                <standard-input\n                  :options=\"executionWindowInputOptions()\"\n                  @changedValue=\"windowSize = $event\"\n                />\n                <div v-show=\"!isValidExecutionWindow\" class=\"text-danger\">\n                  Please set an execution window of\n                  {{ selectedMode.executionWindow.min }} or higher\n                </div>\n              </b-col>\n            </b-row>\n\n            <standard-input\n              :options=\"requireDepositInputOptions()\"\n              @changedValue=\"deposit = $event\"\n            />\n            <div v-show=\"!isValidDeposit\" class=\"text-danger\">\n              Invalid deposit number\n            </div>\n\n            <b-row>\n              <b-col cols=\"12\" md=\"4\">\n                <standard-input\n                  :options=\"futureGasPriceInputOptions()\"\n                  @changedValue=\"futureGasPrice = $event\"\n                />\n                <div v-show=\"!isValidFutureGasPrice\" class=\"text-danger\">\n                  Please set a gas price of {{ minGasPrice }} or higher\n                </div>\n              </b-col>\n              <b-col cols=\"12\" md=\"4\">\n                <standard-input\n                  :options=\"gasLimitInputOptions()\"\n                  @changedValue=\"gasLimit = $event\"\n                />\n                <div v-show=\"!isValidGasLimit\" class=\"text-danger\">\n                  Please set a gas limit of 0 or higher\n                </div>\n              </b-col>\n              <b-col cols=\"12\" md=\"4\">\n                <standard-input\n                  :options=\"futureGasLimitInputOptions()\"\n                  @changedValue=\"futureGasLimit = $event\"\n                />\n                <div v-show=\"!isValidFutureGasLimit\" class=\"text-danger\">\n                  Please set a future gas limit of 0 or higher\n                </div>\n              </b-col>\n            </b-row>\n\n            <standard-input\n              v-if=\"!isTokenTransfer\"\n              :options=\"dataInputOptions()\"\n              @changedValue=\"data = $event\"\n            />\n            <div v-show=\"!isValidData\" class=\"text-danger\">\n              Please provide the data in a hexadecimal format.\n            </div>\n          </div>\n        </b-container>\n      </div>\n\n      <div class=\"submit-button-container\">\n        <b-alert\n          :show=\"isTokenTransfer && showTokenTransferNotification\"\n          variant=\"info\"\n          dismissible\n          class=\"mx-5\"\n          @dismissed=\"showTokenTransferNotification = false\"\n        >\n          <strong>Note:</strong> You are scheduling a token transfer. Token\n          transfers require 2 separate transactions. One for token scheduling\n          and another one for token transfer approval.\n        </b-alert>\n\n        <div\n          :class=\"[\n            validInputs ? '' : 'disabled',\n            'submit-button large-round-button-green-filled'\n          ]\"\n          @click=\"scheduleTx\"\n        >\n          Schedule Transaction\n        </div>\n      </div>\n    </div>\n    <a\n      href=\"https://blog.chronologic.network/announcing-the-ethereum-alarm-clock-chronologic-partnership-b3d7545bea3b\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n      class=\"eac-logo\"\n    />\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport { EAC, Util } from '@ethereum-alarm-clock/lib';\nimport BigNumber from 'bignumber.js';\nimport { Datetime } from 'vue-datetime';\nimport 'vue-datetime/dist/vue-datetime.css';\nimport moment from 'moment';\nimport 'moment-timezone';\nimport * as unit from 'ethjs-unit';\nimport { Toast } from '@/helpers';\n\nimport BackButton from '@/layouts/InterfaceLayout/components/BackButton';\nimport CurrencyPicker from '../../../layouts/InterfaceLayout/components/CurrencyPicker';\nimport StandardInput from '@/components/StandardInput';\nimport StandardDropdown from '@/components/StandardDropdown';\nimport Blockie from '@/components/Blockie';\nimport { ERC20 } from '@/partners';\nimport {\n  calcSchedulingTotalCost,\n  canBeConvertedToWei,\n  EAC_SCHEDULING_CONFIG,\n  estimateBountyForGasPrice\n} from '../ScheduleHelpers';\n\nexport default {\n  name: 'ScheduleView',\n  components: {\n    'back-button': BackButton,\n    'currency-picker': CurrencyPicker,\n    'standard-input': StandardInput,\n    'standard-dropdown': StandardDropdown,\n    'datetime-picker': Datetime,\n    blockie: Blockie\n  },\n  props: {\n    tokensWithBalance: {\n      type: Array,\n      default: function() {\n        return [];\n      }\n    }\n  },\n  data() {\n    return {\n      eac: null,\n      advancedExpand: false,\n      advancedTimeBounty: false,\n      hexAddress: '',\n      address: '',\n      isValidAddress: false,\n      amount: '0',\n      gasLimit: EAC_SCHEDULING_CONFIG.FUTURE_GAS_LIMIT,\n      futureGasLimit: EAC_SCHEDULING_CONFIG.FUTURE_GAS_LIMIT,\n      minGasLimit: 0,\n      futureGasPrice: '1',\n      minGasPrice: 0.1,\n      data: '',\n      datetime: '',\n      currentBlockNumber: '',\n      selectedBlockNumber: '',\n      timeBountyPresets: EAC_SCHEDULING_CONFIG.TIME_BOUNTY_DEFAULTS,\n      timeBounty: EAC_SCHEDULING_CONFIG.TIME_BOUNTY_DEFAULTS[0],\n      windowSize: 10,\n      supportedModes: EAC_SCHEDULING_CONFIG.SUPPORTED_MODES,\n      selectedMode: EAC_SCHEDULING_CONFIG.SUPPORTED_MODES[0],\n      deposit:\n        EAC_SCHEDULING_CONFIG.TIME_BOUNTY_DEFAULTS[0] *\n        EAC_SCHEDULING_CONFIG.BOUNTY_TO_DEPOSIT_MULTIPLIER,\n      ethPrice: new BigNumber(0),\n      selectedTimeZone: moment.tz.guess(),\n      selectedCurrency: '',\n      showTokenTransferNotification: true,\n      amountInputOptions() {\n        return {\n          title: 'Amount',\n          value: this.amount,\n          type: 'number'\n        };\n      },\n      customTimeBountyInputOptions() {\n        return {\n          title: 'Time Bounty',\n          placeHolder: 'ETH',\n          value: this.timeBounty,\n          type: 'number'\n        };\n      },\n      bountyUsdDisplayOptions() {\n        return {\n          value: this.timeBountyUsd,\n          inputDisabled: true\n        };\n      },\n      blockNumberInputOptions() {\n        return {\n          title: 'Block Number',\n          value: this.selectedBlockNumber,\n          placeHolder: `Current block number: ${this.currentBlockNumber}`,\n          type: 'number'\n        };\n      },\n      dataInputOptions() {\n        return {\n          title: 'Add Data',\n          placeHolder: 'Add Data (e.g. 0x7834f874g298hf298h234f)',\n          value: this.data\n        };\n      },\n      gasLimitInputOptions() {\n        return {\n          title: 'Gas Limit',\n          value: this.gasLimit,\n          type: 'number'\n        };\n      },\n      futureGasPriceInputOptions() {\n        return {\n          title: 'Future Gas Price (gwei)',\n          value: this.futureGasPrice,\n          type: 'number'\n        };\n      },\n      futureGasLimitInputOptions() {\n        return {\n          title: 'Future Gas Limit',\n          value: this.futureGasLimit,\n          type: 'number'\n        };\n      },\n      requireDepositInputOptions() {\n        return {\n          title: 'Require a deposit',\n          value: this.deposit,\n          placeHolder: 'ETH',\n          type: 'number'\n        };\n      },\n      executionWindowInputOptions() {\n        return {\n          title: 'Execution Window',\n          value: this.windowSize,\n          placeHolder: this.selectedMode.unit,\n          type: 'number'\n        };\n      }\n    };\n  },\n  computed: {\n    ...mapState([\n      'web3',\n      'network',\n      'gasPrice',\n      'notifications',\n      'account',\n      'online'\n    ]),\n    isTokenTransfer() {\n      return this.selectedCurrency.symbol !== this.network.type.name;\n    },\n    timeBountyUsd() {\n      const formatter = new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: 'USD',\n        minimumFractionDigits: 2\n      });\n\n      return formatter.format(\n        this.ethPrice.times(new BigNumber(this.timeBounty))\n      );\n    },\n    estimatedMaximumExecutionGasPrice() {\n      if (\n        !this.isValidFutureGasPrice ||\n        !this.isValidFutureGasLimit ||\n        !this.isValidTimeBounty\n      )\n        return 0;\n\n      const estimated = Util.estimateMaximumExecutionGasPrice(\n        new BigNumber(unit.toWei(this.timeBounty, 'ether')),\n        new BigNumber(unit.toWei(this.futureGasPrice, 'gwei')),\n        new BigNumber(this.futureGasLimit)\n      );\n\n      return Math.round(unit.fromWei(estimated.toString(), 'gwei'));\n    },\n    now() {\n      return moment();\n    },\n    minBounty() {\n      if (!this.isValidFutureGasPrice) return 0;\n      const wei = unit.toWei(this.futureGasPrice, 'gwei');\n      return unit.fromWei(wei, 'ether');\n    },\n    timezoneOptions() {\n      return moment.tz.names();\n    },\n    schedulingCost() {\n      if (\n        !this.isValidFutureGasPrice ||\n        !this.isValidGasLimit ||\n        !this.isValidFutureGasLimit ||\n        !this.isValidTimeBounty\n      ) {\n        // Make the scheduling cost ridiculously big to throw an error\n        return new BigNumber(1e32 * 1e18);\n      }\n\n      return calcSchedulingTotalCost({\n        gasPrice: new BigNumber(unit.toWei(this.gasPrice.toString(), 'gwei')),\n        gasLimit: new BigNumber(this.gasLimit),\n        futureGasLimit: new BigNumber(this.futureGasLimit),\n        futureGasPrice: new BigNumber(\n          unit.toWei(this.futureGasPrice.toString(), 'gwei')\n        ),\n        timeBounty: new BigNumber(\n          unit.toWei(this.timeBounty.toString(), 'ether')\n        )\n      });\n    },\n    maxEthToSend() {\n      const accountBalance = new BigNumber(this.account.balance);\n      const sendableEth = accountBalance.minus(this.schedulingCost);\n      return sendableEth.gt(0) ? sendableEth : new BigNumber(0);\n    },\n    validInputs() {\n      return (\n        this.hasEnoughEthToSchedule &&\n        this.isValidAmount &&\n        this.isValidAddress &&\n        this.isValidExecutionWindow &&\n        this.isValidFutureGasPrice &&\n        this.isValidFutureGasLimit &&\n        this.isValidGasLimit &&\n        this.isValidTimeBounty &&\n        this.isValidWindowStart &&\n        this.isValidData\n      );\n    },\n    isValidAmount() {\n      if (!canBeConvertedToWei(this.web3, this.amount.toString())) return false;\n\n      const enteredAmount = new BigNumber(\n        this.isTokenTransfer\n          ? this.amount\n          : unit.toWei(this.amount.toString(), 'ether')\n      );\n      const max = new BigNumber(\n        this.isTokenTransfer\n          ? this.selectedCurrency.balance\n          : this.maxEthToSend.toString()\n      );\n\n      return enteredAmount.lte(max);\n    },\n    isValidDateTime() {\n      return (\n        moment(this.datetime) >\n        moment().add(this.supportedModes[0].executionWindow.min, 'minutes')\n      );\n    },\n    isValidBlockNumber() {\n      const { selectedBlockNumber, supportedModes, currentBlockNumber } = this;\n      return (\n        parseInt(selectedBlockNumber) >\n        currentBlockNumber + supportedModes[1].executionWindow.min\n      );\n    },\n    isValidWindowStart() {\n      const {\n        selectedMode,\n        supportedModes,\n        isValidBlockNumber,\n        isValidDateTime\n      } = this;\n      return selectedMode === supportedModes[0]\n        ? isValidDateTime\n        : isValidBlockNumber;\n    },\n    isValidTimeBounty() {\n      const convertibleToWei = canBeConvertedToWei(this.web3, this.timeBounty);\n      const invalidFutureGasPrice = canBeConvertedToWei(\n        this.web3,\n        this.futureGasPrice,\n        'gwei'\n      );\n      if (!invalidFutureGasPrice || !convertibleToWei) return false;\n\n      const higherThanGasPrice = new BigNumber(\n        unit.toWei(this.timeBounty, 'ether')\n      ).gte(unit.toWei(this.futureGasPrice, 'gwei'));\n      return higherThanGasPrice;\n    },\n    isValidExecutionWindow() {\n      return this.windowSize >= this.selectedMode.executionWindow.min;\n    },\n    isValidFutureGasPrice() {\n      const isHigherThanMin =\n        parseFloat(this.futureGasPrice) >= this.minGasPrice;\n      const convertibleToWei = canBeConvertedToWei(\n        this.web3,\n        this.futureGasPrice,\n        'gwei'\n      );\n      return isHigherThanMin && convertibleToWei;\n    },\n    isValidGasLimit() {\n      return new BigNumber(this.gasLimit).gte(this.minGasLimit);\n    },\n    isValidFutureGasLimit() {\n      return new BigNumber(this.futureGasLimit).gte(this.minGasLimit);\n    },\n    isValidDeposit() {\n      return canBeConvertedToWei(this.web3, this.deposit);\n    },\n    isValidData() {\n      return this.web3.utils.isHexStrict(this.data) || this.data === '';\n    },\n    hasEnoughEthToSchedule() {\n      const accountBalance = new BigNumber(this.account.balance);\n      return accountBalance.gt(this.schedulingCost);\n    }\n  },\n  watch: {\n    selectedMode() {\n      this.windowSize = this.selectedMode.executionWindow.default;\n    },\n    async notifications() {\n      const notifications = this.notifications[this.account.address];\n      const latestNotification = notifications[0];\n\n      if (latestNotification.hash) {\n        if (latestNotification.status === 'pending') {\n          const transaction = await this.web3.eth.getTransaction(\n            latestNotification.hash\n          );\n\n          try {\n            if (transaction === null) {\n              Toast.responseHandler(\n                new Error('Non-existing transaction detected'),\n                Toast.ERROR\n              );\n              return;\n            }\n\n            const isTokenTransfer = transaction.input.includes(\n              EAC_SCHEDULING_CONFIG.TOKEN_TRANSFER_METHOD_ID\n            );\n            this.$router.push({\n              name: 'Scheduled success',\n              params: {\n                txHash: latestNotification.hash,\n                isTokenTransfer,\n                selectedCurrency: isTokenTransfer\n                  ? this.selectedCurrency\n                  : null,\n                toAddress: transaction.to,\n                amount: this.amount\n              }\n            });\n          } catch (e) {\n            Toast.responseHandler(e, Toast.ERROR);\n          }\n        }\n      }\n    },\n    async selectedCurrency() {\n      this.futureGasLimit = await this.estimateGas();\n      this.gasLimit = this.isTokenTransfer\n        ? EAC_SCHEDULING_CONFIG.TOKEN_SCHEDULING_GAS_LIMIT\n        : EAC_SCHEDULING_CONFIG.FUTURE_GAS_LIMIT;\n    },\n    async hexAddress() {\n      this.futureGasLimit = await this.estimateGas();\n    }\n  },\n  beforeMount() {\n    this.selectedCurrency = {\n      name: this.network.type.name_long,\n      symbol: this.network.type.name\n    };\n\n    this.web3.eth\n      .getBlockNumber()\n      .then(res => {\n        this.currentBlockNumber = res;\n        this.selectedBlockNumber = res + 100;\n      })\n      .catch(err => {\n        Toast.responseHandler(err, Toast.ERROR);\n      });\n\n    this.datetime = moment()\n      .add(1, 'days')\n      .toISOString();\n    this.futureGasPrice = (this.gasPrice >= this.minGasPrice\n      ? this.gasPrice\n      : this.minGasPrice\n    ).toString();\n\n    this.timeBountyPresets = [\n      estimateBountyForGasPrice(this.futureGasPrice * 5, this.futureGasLimit),\n      estimateBountyForGasPrice(this.futureGasPrice * 8, this.futureGasLimit),\n      estimateBountyForGasPrice(this.futureGasPrice * 13, this.futureGasLimit)\n    ];\n\n    this.timeBounty = this.timeBountyPresets[0];\n    this.deposit = this.timeBountyPresets[0] * 2;\n  },\n  mounted: async function() {\n    if (this.online) {\n      this.eac = new EAC(this.web3);\n\n      const url = 'https://cryptorates.mewapi.io/convert/ETH';\n      const fetchValues = await fetch(url);\n      const values = await fetchValues.json();\n\n      if (!values['USDT']) {\n        Toast.responseHandler(\n          new Error(\n            'USDT conversion no longer available. Please provide an alternative USD conversion method'\n          ),\n          Toast.ERROR\n        );\n        return;\n      }\n      this.ethPrice = new BigNumber(values['USDT']);\n    }\n  },\n  methods: {\n    async estimateGas() {\n      const coinbase = await this.web3.eth.getCoinbase();\n\n      if (this.isValidAmount && this.isValidAddress) {\n        const tokenTransferData = await this.getTokenTransferData();\n        const inputData = this.data === '' ? '0x00' : this.data;\n\n        const tokenSchedulingTransaction = {\n          from: coinbase,\n          value: this.isTokenTransfer\n            ? 0\n            : unit.toWei(this.amount.toString(), 'ether'),\n          to: this.isTokenTransfer\n            ? this.selectedCurrency.address\n            : this.hexAddress,\n          data: this.isTokenTransfer ? tokenTransferData : inputData\n        };\n\n        let estimatedGasLimit;\n        try {\n          estimatedGasLimit = await this.web3.eth.estimateGas(\n            tokenSchedulingTransaction\n          );\n        } catch (e) {\n          Toast.responseHandler(e, Toast.ERROR);\n          return EAC_SCHEDULING_CONFIG.FUTURE_GAS_LIMIT.toString();\n        }\n\n        const totalEstimatedGasLimit = new BigNumber(estimatedGasLimit).plus(\n          EAC_SCHEDULING_CONFIG.TOKEN_TRANSFER_ADDITIONAL_GAS\n        );\n        return totalEstimatedGasLimit.toString();\n      }\n\n      return EAC_SCHEDULING_CONFIG.FUTURE_GAS_LIMIT.toString();\n    },\n    async getTokenTransferData() {\n      if (this.isTokenTransfer && this.isValidAmount && this.isValidAddress) {\n        const tokenContract = await new this.web3.eth.Contract(\n          ERC20,\n          this.selectedCurrency.address\n        );\n\n        const coinbase = await this.web3.eth.getCoinbase();\n        const tokenAmount = new BigNumber(\n          this.amount * Math.pow(10, this.selectedCurrency.decimals)\n        );\n\n        return tokenContract.methods\n          .transferFrom(coinbase, this.hexAddress, tokenAmount.toString())\n          .encodeABI();\n      }\n\n      return '0x00';\n    },\n    async scheduleTx() {\n      const {\n        amount,\n        hexAddress,\n        futureGasPrice,\n        futureGasLimit,\n        gasLimit,\n        selectedBlockNumber,\n        deposit,\n        windowSize,\n        timeBounty,\n        selectedMode,\n        datetime,\n        isTokenTransfer,\n        selectedCurrency\n      } = this;\n\n      let { data } = this;\n\n      if (data === '') {\n        data = '0x00';\n      }\n\n      const timestampScheduling =\n        selectedMode === EAC_SCHEDULING_CONFIG.SUPPORTED_MODES[0];\n\n      const timestamp = moment(datetime).unix();\n\n      const ethToWeiBN = value => {\n        value = value === '' ? 0 : value;\n        return new BigNumber(unit.toWei(value.toString(), 'ether'));\n      };\n\n      const schedulingOptions = {\n        toAddress: isTokenTransfer ? selectedCurrency.address : hexAddress,\n        windowStart: new BigNumber(\n          timestampScheduling ? timestamp : selectedBlockNumber\n        ),\n        timestampScheduling,\n        callGas: new BigNumber(futureGasLimit),\n        callData: isTokenTransfer ? await this.getTokenTransferData() : data,\n        callValue: isTokenTransfer ? new BigNumber(0) : ethToWeiBN(amount),\n        windowSize: new BigNumber(\n          timestampScheduling ? windowSize * 60 : windowSize\n        ),\n        bounty: ethToWeiBN(timeBounty),\n        requiredDeposit: ethToWeiBN(deposit),\n        gasPrice: new BigNumber(unit.toWei(futureGasPrice.toString(), 'gwei')),\n        fee: new BigNumber(0),\n        scheduleGas: new BigNumber(gasLimit)\n      };\n\n      const endowment = await this.eac.computeEndowment(schedulingOptions);\n\n      try {\n        await this.eac.validateScheduleOptions(schedulingOptions, endowment);\n      } catch (e) {\n        Toast.responseHandler(e, Toast.ERROR);\n        return;\n      }\n\n      this.eac.schedule(schedulingOptions);\n    },\n    copyToClipboard(ref) {\n      this.$refs[ref].select();\n      document.execCommand('copy');\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'ScheduleView.scss';\n</style>\n\n<style lang=\"scss\">\n@import 'ScheduleViewUnscoped.scss';\n</style>\n"],"sourceRoot":"src/dapps/ScheduleTransaction/containers"}]}