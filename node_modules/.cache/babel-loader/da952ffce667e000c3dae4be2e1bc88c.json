{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/layouts/CreateWalletLayout/containers/ByMnemonicContainer/components/VerificationModal/VerificationModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/layouts/CreateWalletLayout/containers/ByMnemonicContainer/components/VerificationModal/VerificationModal.vue","mtime":1574664278290},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js","mtime":1574664275010},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js","mtime":1574664277774}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _toConsumableArray from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  props: {\n    mnemonicValues: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    }\n  },\n  data: function data() {\n    return {\n      inputs: {},\n      loading: false,\n      errorMsg: ''\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    this.$refs.verification.$on('shown', function () {\n      // Generate random numbers to choose which blocks to hide\n      var newArr = _toConsumableArray(_this.mnemonicValues.keys());\n\n      var ranNums = _this.shuffle(newArr);\n\n      document.querySelectorAll('.phrases .word').forEach(function (el) {\n        el.classList.remove('verification');\n        el.querySelector('span').classList.remove('hidden');\n        el.querySelector('input').classList.add('hidden');\n      }); // Hide 5 random mnemonic blocks\n\n      for (var c = 0; c < 5; c++) {\n        _this.inputs[ranNums[c]] = '';\n        document.querySelector('.phrases .word[data-index=\"' + ranNums[c] + '\"]').classList.add('verification');\n        document.querySelector('.phrases .word[data-index=\"' + ranNums[c] + '\"]').querySelector('span').classList.add('hidden');\n        document.querySelector('.phrases .word[data-index=\"' + ranNums[c] + '\"]').querySelector('input').classList.remove('hidden');\n      }\n    });\n    this.$refs.verification.$on('hidden', function () {\n      _this.inputs = {};\n      _this.loading = false;\n      _this.errorMsg = '';\n    });\n  },\n  methods: {\n    hasEmpty: function hasEmpty() {\n      var _this2 = this;\n\n      var emptyInputs = 0;\n      var inputs = Object.keys(this.inputs);\n      inputs.forEach(function (input) {\n        if (_this2.inputs[input] === '') {\n          emptyInputs++;\n        }\n      });\n      return emptyInputs === 0;\n    },\n    shuffle: function shuffle(arr) {\n      for (var i = arr.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var _ref = [arr[j], arr[i]];\n        arr[i] = _ref[0];\n        arr[j] = _ref[1];\n      }\n\n      return arr;\n    },\n    verifyMnemonic: function verifyMnemonic() {\n      var _this3 = this;\n\n      this.loading = true;\n      this.errorMsg = '';\n\n      var updatedArray = _toConsumableArray(this.mnemonicValues);\n\n      Object.keys(this.inputs).forEach(function (item) {\n        updatedArray.splice(item, 1, _this3.inputs[item]);\n      });\n\n      if (!this.hasEmpty()) {\n        this.errorMsg = \"Some fields are still missing!\";\n      } else if (updatedArray.join() === this.mnemonicValues.join()) {\n        this.$emit('verifiedMnemonic');\n      } else {\n        this.errorMsg = \"Mnemonic doesn't match! Please write it down correctly!\";\n      }\n\n      this.loading = false;\n    }\n  }\n};",{"version":3,"sources":["VerificationModal.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <b-modal\n    ref=\"verification\"\n    hide-footer\n    centered\n    class=\"bootstrap-modal-wide verification nopadding\"\n    title=\"Verification\"\n    static\n    lazy\n  >\n    <div class=\"content-block\">\n      <p class=\"block-title\">\n        Please enter and fill out the empty boxes below to verify your mnemonic\n        phrase key.\n      </p>\n      <div class=\"phrases\">\n        <ul>\n          <li\n            v-for=\"(value, index) in mnemonicValues\"\n            :key=\"index\"\n            :data-index=\"index\"\n            class=\"word\"\n          >\n            {{ index + 1 }}.<span>{{ value }}</span>\n            <input\n              v-model=\"inputs[index]\"\n              class=\"hidden\"\n              type=\"text\"\n              name=\"\"\n              autocomplete=\"off\"\n            />\n          </li>\n        </ul>\n      </div>\n      <div v-show=\"errorMsg.length > 0\" class=\"error-msg-container\">\n        {{ errorMsg }}\n      </div>\n      <div class=\"button-container\">\n        <div\n          :class=\"[\n            loading ? 'disabled' : '',\n            'verify-button large-round-button-green-filled'\n          ]\"\n          @click=\"verifyMnemonic\"\n        >\n          <span v-show=\"!loading\"> Verify </span>\n          <i v-show=\"loading\" class=\"fa fa-lg fa-spin fa-spinner\" />\n        </div>\n      </div>\n    </div>\n  </b-modal>\n</template>\n\n<script>\nexport default {\n  props: {\n    mnemonicValues: {\n      type: Array,\n      default: function() {\n        return [];\n      }\n    }\n  },\n  data() {\n    return {\n      inputs: {},\n      loading: false,\n      errorMsg: ''\n    };\n  },\n  mounted() {\n    this.$refs.verification.$on('shown', () => {\n      // Generate random numbers to choose which blocks to hide\n      const newArr = [...this.mnemonicValues.keys()];\n      const ranNums = this.shuffle(newArr);\n\n      document.querySelectorAll('.phrases .word').forEach(function(el) {\n        el.classList.remove('verification');\n        el.querySelector('span').classList.remove('hidden');\n        el.querySelector('input').classList.add('hidden');\n      });\n\n      // Hide 5 random mnemonic blocks\n      for (let c = 0; c < 5; c++) {\n        this.inputs[ranNums[c]] = '';\n        document\n          .querySelector('.phrases .word[data-index=\"' + ranNums[c] + '\"]')\n          .classList.add('verification');\n        document\n          .querySelector('.phrases .word[data-index=\"' + ranNums[c] + '\"]')\n          .querySelector('span')\n          .classList.add('hidden');\n        document\n          .querySelector('.phrases .word[data-index=\"' + ranNums[c] + '\"]')\n          .querySelector('input')\n          .classList.remove('hidden');\n      }\n    });\n    this.$refs.verification.$on('hidden', () => {\n      this.inputs = {};\n      this.loading = false;\n      this.errorMsg = '';\n    });\n  },\n  methods: {\n    hasEmpty() {\n      let emptyInputs = 0;\n      const inputs = Object.keys(this.inputs);\n      inputs.forEach(input => {\n        if (this.inputs[input] === '') {\n          emptyInputs++;\n        }\n      });\n      return emptyInputs === 0;\n    },\n    shuffle(arr) {\n      for (let i = arr.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [arr[i], arr[j]] = [arr[j], arr[i]];\n      }\n      return arr;\n    },\n    verifyMnemonic() {\n      this.loading = true;\n      this.errorMsg = '';\n      const updatedArray = [...this.mnemonicValues];\n      Object.keys(this.inputs).forEach(item => {\n        updatedArray.splice(item, 1, this.inputs[item]);\n      });\n      if (!this.hasEmpty()) {\n        this.errorMsg = `Some fields are still missing!`;\n      } else if (updatedArray.join() === this.mnemonicValues.join()) {\n        this.$emit('verifiedMnemonic');\n      } else {\n        this.errorMsg = `Mnemonic doesn't match! Please write it down correctly!`;\n      }\n      this.loading = false;\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'VerificationModal.scss';\n</style>\n"],"sourceRoot":"src/layouts/CreateWalletLayout/containers/ByMnemonicContainer/components/VerificationModal"}]}