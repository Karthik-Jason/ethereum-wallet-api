{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/eslint-loader/index.js??ref--13-0!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/wallets/web3-provider/providers/http-provider.js","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/wallets/web3-provider/providers/http-provider.js","mtime":1573477612144},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _classCallCheck from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport HttpRequestManger from \"./http-request-manager\";\nimport MiddleWare from \"../middleware\";\nimport { ethSendTransaction, ethSignTransaction, ethSign, ethAccounts, ethCoinbase, ethGetTransactionCount, ethGetTransactionReceipt, ethGetBlockByNumber, ethGetBlockNumber, netVersion } from \"../methods\";\n\nvar HttpProvider = function HttpProvider(host, options, store, eventHub) {\n  _classCallCheck(this, HttpProvider);\n\n  var requestManager = new HttpRequestManger(host, options);\n  this.httpProvider = {\n    send: function send(payload, callback) {\n      var req = {\n        payload: payload,\n        store: store,\n        requestManager: requestManager,\n        eventHub: eventHub\n      };\n      var middleware = new MiddleWare();\n      middleware.use(ethSendTransaction);\n      middleware.use(ethSignTransaction);\n      middleware.use(ethGetTransactionCount);\n      middleware.use(ethGetTransactionReceipt);\n      middleware.use(ethSign);\n      middleware.use(ethAccounts);\n      middleware.use(ethCoinbase);\n      middleware.use(ethGetBlockByNumber);\n      middleware.use(ethGetBlockNumber);\n      middleware.use(netVersion);\n      middleware.run(req, callback).then(function () {\n        requestManager.provider.send(payload, callback);\n      });\n    }\n  };\n  return this.httpProvider;\n};\n\nexport default HttpProvider;",{"version":3,"sources":["/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/wallets/web3-provider/providers/http-provider.js"],"names":["HttpRequestManger","MiddleWare","ethSendTransaction","ethSignTransaction","ethSign","ethAccounts","ethCoinbase","ethGetTransactionCount","ethGetTransactionReceipt","ethGetBlockByNumber","ethGetBlockNumber","netVersion","HttpProvider","host","options","store","eventHub","requestManager","httpProvider","send","payload","callback","req","middleware","use","run","then","provider"],"mappings":";AAAA,OAAOA,iBAAP;AACA,OAAOC,UAAP;AACA,SACEC,kBADF,EAEEC,kBAFF,EAGEC,OAHF,EAIEC,WAJF,EAKEC,WALF,EAMEC,sBANF,EAOEC,wBAPF,EAQEC,mBARF,EASEC,iBATF,EAUEC,UAVF;;IAYMC,Y,GACJ,sBAAYC,IAAZ,EAAkBC,OAAlB,EAA2BC,KAA3B,EAAkCC,QAAlC,EAA4C;AAAA;;AAC1C,MAAMC,cAAc,GAAG,IAAIjB,iBAAJ,CAAsBa,IAAtB,EAA4BC,OAA5B,CAAvB;AACA,OAAKI,YAAL,GAAoB;AAClBC,IAAAA,IAAI,EAAE,cAACC,OAAD,EAAUC,QAAV,EAAuB;AAC3B,UAAMC,GAAG,GAAG;AACVF,QAAAA,OAAO,EAAPA,OADU;AAEVL,QAAAA,KAAK,EAALA,KAFU;AAGVE,QAAAA,cAAc,EAAdA,cAHU;AAIVD,QAAAA,QAAQ,EAARA;AAJU,OAAZ;AAMA,UAAMO,UAAU,GAAG,IAAItB,UAAJ,EAAnB;AACAsB,MAAAA,UAAU,CAACC,GAAX,CAAetB,kBAAf;AACAqB,MAAAA,UAAU,CAACC,GAAX,CAAerB,kBAAf;AACAoB,MAAAA,UAAU,CAACC,GAAX,CAAejB,sBAAf;AACAgB,MAAAA,UAAU,CAACC,GAAX,CAAehB,wBAAf;AACAe,MAAAA,UAAU,CAACC,GAAX,CAAepB,OAAf;AACAmB,MAAAA,UAAU,CAACC,GAAX,CAAenB,WAAf;AACAkB,MAAAA,UAAU,CAACC,GAAX,CAAelB,WAAf;AACAiB,MAAAA,UAAU,CAACC,GAAX,CAAef,mBAAf;AACAc,MAAAA,UAAU,CAACC,GAAX,CAAed,iBAAf;AACAa,MAAAA,UAAU,CAACC,GAAX,CAAeb,UAAf;AACAY,MAAAA,UAAU,CAACE,GAAX,CAAeH,GAAf,EAAoBD,QAApB,EAA8BK,IAA9B,CAAmC,YAAM;AACvCT,QAAAA,cAAc,CAACU,QAAf,CAAwBR,IAAxB,CAA6BC,OAA7B,EAAsCC,QAAtC;AACD,OAFD;AAGD;AAtBiB,GAApB;AAwBA,SAAO,KAAKH,YAAZ;AACD,C;;AAEH,eAAeN,YAAf","sourcesContent":["import HttpRequestManger from './http-request-manager';\nimport MiddleWare from '../middleware';\nimport {\n  ethSendTransaction,\n  ethSignTransaction,\n  ethSign,\n  ethAccounts,\n  ethCoinbase,\n  ethGetTransactionCount,\n  ethGetTransactionReceipt,\n  ethGetBlockByNumber,\n  ethGetBlockNumber,\n  netVersion\n} from '../methods';\nclass HttpProvider {\n  constructor(host, options, store, eventHub) {\n    const requestManager = new HttpRequestManger(host, options);\n    this.httpProvider = {\n      send: (payload, callback) => {\n        const req = {\n          payload,\n          store,\n          requestManager,\n          eventHub\n        };\n        const middleware = new MiddleWare();\n        middleware.use(ethSendTransaction);\n        middleware.use(ethSignTransaction);\n        middleware.use(ethGetTransactionCount);\n        middleware.use(ethGetTransactionReceipt);\n        middleware.use(ethSign);\n        middleware.use(ethAccounts);\n        middleware.use(ethCoinbase);\n        middleware.use(ethGetBlockByNumber);\n        middleware.use(ethGetBlockNumber);\n        middleware.use(netVersion);\n        middleware.run(req, callback).then(() => {\n          requestManager.provider.send(payload, callback);\n        });\n      }\n    };\n    return this.httpProvider;\n  }\n}\nexport default HttpProvider;\n"]}]}