{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/thread-loader/dist/cjs.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/dapps/ManageENS/containers/TransferRegistrarsContainer/TransferRegistrarsContainer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/dapps/ManageENS/containers/TransferRegistrarsContainer/TransferRegistrarsContainer.vue","mtime":1574677232696},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/thread-loader/dist/cjs.js","mtime":1574664277654},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js","mtime":1574664275010},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js","mtime":1574664277774}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState } from 'vuex';\nimport InterfaceBottomText from '@/components/InterfaceBottomText';\nexport default {\n  components: {\n    'interface-bottom-text': InterfaceBottomText\n  },\n  props: {\n    hostName: {\n      type: String,\n      default: ''\n    },\n    deedOwner: {\n      type: String,\n      default: ''\n    },\n    transferFunc: {\n      type: Function,\n      default: function _default() {}\n    },\n    loading: {\n      type: Boolean,\n      default: false\n    },\n    tld: {\n      type: String,\n      default: ''\n    }\n  },\n  computed: _objectSpread({}, mapState({\n    account: 'account'\n  }), {\n    fullDomainName: function fullDomainName() {\n      return \"\".concat(this.hostName, \".\").concat(this.tld);\n    },\n    isOwner: function isOwner() {\n      return this.account.address.toLowerCase() === this.deedOwner.toLowerCase();\n    }\n  }),\n  mounted: function mounted() {\n    if (this.hostName === '') {\n      this.$router.push('/interface/dapps/manage-ens');\n    }\n  }\n};",{"version":3,"sources":["TransferRegistrarsContainer.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,SAAA,QAAA,QAAA,MAAA;AACA,OAAA,mBAAA,MAAA,kCAAA;AAEA,eAAA;AACA,EAAA,UAAA,EAAA;AACA,6BAAA;AADA,GADA;AAIA,EAAA,KAAA,EAAA;AACA,IAAA,QAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KADA;AAKA,IAAA,SAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KALA;AASA,IAAA,YAAA,EAAA;AACA,MAAA,IAAA,EAAA,QADA;AAEA,MAAA,OAAA,EAAA,oBAAA,CAAA;AAFA,KATA;AAaA,IAAA,OAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA,KAbA;AAiBA,IAAA,GAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA;AAjBA,GAJA;AA0BA,EAAA,QAAA,oBACA,QAAA,CAAA;AACA,IAAA,OAAA,EAAA;AADA,GAAA,CADA;AAIA,IAAA,cAJA,4BAIA;AACA,uBAAA,KAAA,QAAA,cAAA,KAAA,GAAA;AACA,KANA;AAOA,IAAA,OAPA,qBAOA;AACA,aACA,KAAA,OAAA,CAAA,OAAA,CAAA,WAAA,OAAA,KAAA,SAAA,CAAA,WAAA,EADA;AAGA;AAXA,IA1BA;AAuCA,EAAA,OAvCA,qBAuCA;AACA,QAAA,KAAA,QAAA,KAAA,EAAA,EAAA;AACA,WAAA,OAAA,CAAA,IAAA,CAAA,6BAAA;AACA;AACA;AA3CA,CAAA","sourcesContent":["<template lang=\"html\">\n  <div class=\"transfer-registrar-container\">\n    <div class=\"transfer-registrar-content\">\n      <h3>{{ fullDomainName }} is still in the old registrar!</h3>\n      <p v-show=\"isOwner\">\n        Since you are are the owner of {{ fullDomainName }} you can transfer the\n        name to the new registrar using transfer button\n      </p>\n      <div class=\"transfer-registrar-button\">\n        <button\n          v-show=\"isOwner\"\n          :class=\"[\n            'large-round-button-green-filled',\n            loading ? 'disabled' : ''\n          ]\"\n          @click=\"transferFunc\"\n        >\n          <span v-show=\"!loading\">\n            Transfer\n          </span>\n          <i v-show=\"loading\" class=\"fa fa-spinner fa-spin\" />\n        </button>\n      </div>\n    </div>\n    <!-- <interface-bottom-text\n      :link-text=\"$t('interface.helpCenter')\"\n      :question=\"$t('interface.haveIssues')\"\n      link=\"https://kb.myetherwallet.com\"\n    /> -->\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport InterfaceBottomText from '@/components/InterfaceBottomText';\n\nexport default {\n  components: {\n    'interface-bottom-text': InterfaceBottomText\n  },\n  props: {\n    hostName: {\n      type: String,\n      default: ''\n    },\n    deedOwner: {\n      type: String,\n      default: ''\n    },\n    transferFunc: {\n      type: Function,\n      default: function() {}\n    },\n    loading: {\n      type: Boolean,\n      default: false\n    },\n    tld: {\n      type: String,\n      default: ''\n    }\n  },\n  computed: {\n    ...mapState({\n      account: 'account'\n    }),\n    fullDomainName() {\n      return `${this.hostName}.${this.tld}`;\n    },\n    isOwner() {\n      return (\n        this.account.address.toLowerCase() === this.deedOwner.toLowerCase()\n      );\n    }\n  },\n  mounted() {\n    if (this.hostName === '') {\n      this.$router.push('/interface/dapps/manage-ens');\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'TransferRegistrarsContainer.scss';\n</style>\n"],"sourceRoot":"src/dapps/ManageENS/containers/TransferRegistrarsContainer"}]}