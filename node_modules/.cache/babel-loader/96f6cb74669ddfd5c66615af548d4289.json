{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/thread-loader/dist/cjs.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/eslint-loader/index.js??ref--13-0!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/wallets/web3-provider/methods/eth_blockNumber.js","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/wallets/web3-provider/methods/eth_blockNumber.js","mtime":1574664278326},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/thread-loader/dist/cjs.js","mtime":1574664277654},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js","mtime":1574664275010},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/eslint-loader/index.js","mtime":1574664275986}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport { toPayload } from \"../jsonrpc\";\nimport EthCalls from \"../web3Calls\";\nvar WAIT_TIME = 10 * 1000; //10 seconds\n\nvar memcache = {\n  timestamp: 0,\n  blockNumber: 0\n};\nexport default\n/*#__PURE__*/\n(function () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee(_ref, res, next) {\n    var payload, requestManager, ethCalls, blockNumber;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            payload = _ref.payload, requestManager = _ref.requestManager;\n\n            if (!(payload.method !== 'eth_blockNumber')) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt(\"return\", next());\n\n          case 3:\n            ethCalls = new EthCalls(requestManager);\n\n            if (!(memcache.timestamp < new Date().getTime() - WAIT_TIME)) {\n              _context.next = 19;\n              break;\n            }\n\n            _context.prev = 5;\n            _context.next = 8;\n            return ethCalls.getBlockNumber();\n\n          case 8:\n            blockNumber = _context.sent;\n            memcache.blockNumber = blockNumber;\n            memcache.timestamp = new Date().getTime();\n            res(null, toPayload(payload.id, blockNumber));\n            _context.next = 17;\n            break;\n\n          case 14:\n            _context.prev = 14;\n            _context.t0 = _context[\"catch\"](5);\n            res(null, toPayload(payload.id, null));\n\n          case 17:\n            _context.next = 20;\n            break;\n\n          case 19:\n            res(null, toPayload(payload.id, memcache.blockNumber || null));\n\n          case 20:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[5, 14]]);\n  }));\n\n  return function (_x, _x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n})();",{"version":3,"sources":["/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/wallets/web3-provider/methods/eth_blockNumber.js"],"names":["toPayload","EthCalls","WAIT_TIME","memcache","timestamp","blockNumber","res","next","payload","requestManager","method","ethCalls","Date","getTime","getBlockNumber","id"],"mappings":";;AAAA,SAASA,SAAT;AACA,OAAOC,QAAP;AACA,IAAMC,SAAS,GAAG,KAAK,IAAvB,C,CAA6B;;AAC7B,IAAMC,QAAQ,GAAG;AAAEC,EAAAA,SAAS,EAAE,CAAb;AAAgBC,EAAAA,WAAW,EAAE;AAA7B,CAAjB;AACA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAe,uBAAoCC,GAApC,EAAyCC,IAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,YAAAA,OAAT,QAASA,OAAT,EAAkBC,cAAlB,QAAkBA,cAAlB;;AAAA,kBACTD,OAAO,CAACE,MAAR,KAAmB,iBADV;AAAA;AAAA;AAAA;;AAAA,6CACoCH,IAAI,EADxC;;AAAA;AAEPI,YAAAA,QAFO,GAEI,IAAIV,QAAJ,CAAaQ,cAAb,CAFJ;;AAAA,kBAGTN,QAAQ,CAACC,SAAT,GAAqB,IAAIQ,IAAJ,GAAWC,OAAX,KAAuBX,SAHnC;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAKiBS,QAAQ,CAACG,cAAT,EALjB;;AAAA;AAKHT,YAAAA,WALG;AAMTF,YAAAA,QAAQ,CAACE,WAAT,GAAuBA,WAAvB;AACAF,YAAAA,QAAQ,CAACC,SAAT,GAAqB,IAAIQ,IAAJ,GAAWC,OAAX,EAArB;AACAP,YAAAA,GAAG,CAAC,IAAD,EAAON,SAAS,CAACQ,OAAO,CAACO,EAAT,EAAaV,WAAb,CAAhB,CAAH;AARS;AAAA;;AAAA;AAAA;AAAA;AAUTC,YAAAA,GAAG,CAAC,IAAD,EAAON,SAAS,CAACQ,OAAO,CAACO,EAAT,EAAa,IAAb,CAAhB,CAAH;;AAVS;AAAA;AAAA;;AAAA;AAaXT,YAAAA,GAAG,CAAC,IAAD,EAAON,SAAS,CAACQ,OAAO,CAACO,EAAT,EAAaZ,QAAQ,CAACE,WAAT,IAAwB,IAArC,CAAhB,CAAH;;AAbW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { toPayload } from '../jsonrpc';\nimport EthCalls from '../web3Calls';\nconst WAIT_TIME = 10 * 1000; //10 seconds\nconst memcache = { timestamp: 0, blockNumber: 0 };\nexport default async ({ payload, requestManager }, res, next) => {\n  if (payload.method !== 'eth_blockNumber') return next();\n  const ethCalls = new EthCalls(requestManager);\n  if (memcache.timestamp < new Date().getTime() - WAIT_TIME) {\n    try {\n      const blockNumber = await ethCalls.getBlockNumber();\n      memcache.blockNumber = blockNumber;\n      memcache.timestamp = new Date().getTime();\n      res(null, toPayload(payload.id, blockNumber));\n    } catch (e) {\n      res(null, toPayload(payload.id, null));\n    }\n  } else {\n    res(null, toPayload(payload.id, memcache.blockNumber || null));\n  }\n};\n"]}]}