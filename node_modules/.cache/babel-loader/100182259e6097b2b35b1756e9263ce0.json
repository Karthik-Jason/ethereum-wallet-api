{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/dapps/ManageENS/containers/InitialENSStateContainer/InitialENSStateContainer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/dapps/ManageENS/containers/InitialENSStateContainer/InitialENSStateContainer.vue","mtime":1574677205565},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js","mtime":1574664275010},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js","mtime":1574664277774}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport _defineProperty from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport InterfaceBottomText from '@/components/InterfaceBottomText';\nimport { mapState } from 'vuex';\nexport default {\n  components: {\n    'interface-bottom-text': InterfaceBottomText\n  },\n  props: {\n    checkDomain: {\n      type: Function,\n      default: function _default() {}\n    },\n    loading: {\n      type: Boolean,\n      default: false\n    },\n    contractInitiated: {\n      type: Boolean,\n      default: false\n    },\n    hostName: {\n      type: String,\n      default: ''\n    },\n    tld: {\n      type: String,\n      default: ''\n    },\n    domainNameErr: {\n      type: Boolean,\n      default: false\n    },\n    multiTld: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      localDomainName: this.hostName\n    };\n  },\n  computed: _objectSpread({}, mapState(['network']), {\n    isValidLength: function isValidLength() {\n      return this.localDomainName.replace('.' + this.network.type.ens.registrarTLD, '').length > 6;\n    }\n  }),\n  watch: {\n    localDomainName: function localDomainName(newVal) {\n      this.$emit('domainNameChange', newVal);\n    },\n    domainName: function domainName(newVal) {\n      this.localDomainName = newVal;\n    }\n  },\n  methods: {\n    expendDomainCheckForm: function expendDomainCheckForm() {\n      this.$refs['checkForm'].classList.toggle('hidden');\n      this.$refs['domainList'].classList.add('hidden');\n    },\n    domainAvailabilityCheck: function domainAvailabilityCheck() {\n      this.$refs['domainList'].classList.add('hidden');\n    }\n  }\n};",{"version":3,"sources":["InitialENSStateContainer.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0DA,OAAA,mBAAA,MAAA,kCAAA;AACA,SAAA,QAAA,QAAA,MAAA;AACA,eAAA;AACA,EAAA,UAAA,EAAA;AACA,6BAAA;AADA,GADA;AAIA,EAAA,KAAA,EAAA;AACA,IAAA,WAAA,EAAA;AACA,MAAA,IAAA,EAAA,QADA;AAEA,MAAA,OAAA,EAAA,oBAAA,CAAA;AAFA,KADA;AAKA,IAAA,OAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA,KALA;AASA,IAAA,iBAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA,KATA;AAaA,IAAA,QAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KAbA;AAiBA,IAAA,GAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KAjBA;AAqBA,IAAA,aAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA,KArBA;AAyBA,IAAA,QAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA;AAzBA,GAJA;AAkCA,EAAA,IAlCA,kBAkCA;AACA,WAAA;AACA,MAAA,eAAA,EAAA,KAAA;AADA,KAAA;AAGA,GAtCA;AAuCA,EAAA,QAAA,oBACA,QAAA,CAAA,CAAA,SAAA,CAAA,CADA;AAEA,IAAA,aAFA,2BAEA;AACA,aACA,KAAA,eAAA,CAAA,OAAA,CACA,MAAA,KAAA,OAAA,CAAA,IAAA,CAAA,GAAA,CAAA,YADA,EAEA,EAFA,EAGA,MAHA,GAGA,CAJA;AAMA;AATA,IAvCA;AAkDA,EAAA,KAAA,EAAA;AACA,IAAA,eADA,2BACA,MADA,EACA;AACA,WAAA,KAAA,CAAA,kBAAA,EAAA,MAAA;AACA,KAHA;AAIA,IAAA,UAJA,sBAIA,MAJA,EAIA;AACA,WAAA,eAAA,GAAA,MAAA;AACA;AANA,GAlDA;AA0DA,EAAA,OAAA,EAAA;AACA,IAAA,qBADA,mCACA;AACA,WAAA,KAAA,CAAA,WAAA,EAAA,SAAA,CAAA,MAAA,CAAA,QAAA;AACA,WAAA,KAAA,CAAA,YAAA,EAAA,SAAA,CAAA,GAAA,CAAA,QAAA;AACA,KAJA;AAKA,IAAA,uBALA,qCAKA;AACA,WAAA,KAAA,CAAA,YAAA,EAAA,SAAA,CAAA,GAAA,CAAA,QAAA;AACA;AAPA;AA1DA,CAAA","sourcesContent":["<template lang=\"html\">\n  <div class=\"initial-state-ens\">\n    <form class=\"send-form\">\n      <div class=\"title-container\">\n        <div class=\"title\">\n          <h4>\n            {{ $t('interface.ensManager') }}\n          </h4>\n          <p>{{ $t('interface.registerEnsDesc') }}</p>\n        </div>\n      </div>\n      <div class=\"the-form domain-name\">\n        <input\n          v-model=\"localDomainName\"\n          :class=\"[domainNameErr ? 'errored' : '']\"\n          :placeholder=\"$t('dapps.registerEnsPlaceholder')\"\n          type=\"text\"\n          name=\"\"\n        />\n        <span v-show=\"!multiTld\">.{{ tld }}</span>\n      </div>\n      <div class=\"error-message-container\">\n        <p\n          v-show=\"contractInitiated === false\"\n          class=\"contract-loading-warning\"\n        >\n          {{ $t('dapps.registerEnsContractNotReady') }}\n        </p>\n        <p v-show=\"domainNameErr\" class=\"erroredMsg\">\n          <span v-if=\"!isValidLength && localDomainName !== ''\">\n            {{ $t('dapps.registerEnsWarn1') }}\n          </span>\n          <span v-else> {{ $t('dapps.registerEnsWarn2') }} </span>\n        </p>\n      </div>\n      <div class=\"submit-button-container\">\n        <button\n          :class=\"[\n            domainNameErr || localDomainName === '' ? 'disabled' : '',\n            'submit-button large-round-button-green-filled clickable'\n          ]\"\n          @click.prevent=\"checkDomain\"\n        >\n          <span v-show=\"!loading\"> {{ $t('interface.checkDomain') }} </span>\n          <i v-show=\"loading\" class=\"fa fa-spinner fa-spin\" />\n        </button>\n      </div>\n    </form>\n\n    <!-- <interface-bottom-text\n      :link-text=\"$t('interface.helpCenter')\"\n      :question=\"$t('interface.haveIssues')\"\n      link=\"https://kb.myetherwallet.com\"\n    /> -->\n  </div>\n</template>\n\n<script>\nimport InterfaceBottomText from '@/components/InterfaceBottomText';\nimport { mapState } from 'vuex';\nexport default {\n  components: {\n    'interface-bottom-text': InterfaceBottomText\n  },\n  props: {\n    checkDomain: {\n      type: Function,\n      default: function() {}\n    },\n    loading: {\n      type: Boolean,\n      default: false\n    },\n    contractInitiated: {\n      type: Boolean,\n      default: false\n    },\n    hostName: {\n      type: String,\n      default: ''\n    },\n    tld: {\n      type: String,\n      default: ''\n    },\n    domainNameErr: {\n      type: Boolean,\n      default: false\n    },\n    multiTld: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      localDomainName: this.hostName\n    };\n  },\n  computed: {\n    ...mapState(['network']),\n    isValidLength() {\n      return (\n        this.localDomainName.replace(\n          '.' + this.network.type.ens.registrarTLD,\n          ''\n        ).length > 6\n      );\n    }\n  },\n  watch: {\n    localDomainName(newVal) {\n      this.$emit('domainNameChange', newVal);\n    },\n    domainName(newVal) {\n      this.localDomainName = newVal;\n    }\n  },\n  methods: {\n    expendDomainCheckForm() {\n      this.$refs['checkForm'].classList.toggle('hidden');\n      this.$refs['domainList'].classList.add('hidden');\n    },\n    domainAvailabilityCheck() {\n      this.$refs['domainList'].classList.add('hidden');\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'InitialENSStateContainer.scss';\n</style>\n"],"sourceRoot":"src/dapps/ManageENS/containers/InitialENSStateContainer"}]}