{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/eslint-loader/index.js??ref--13-0!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/wallets/web3-provider/providers/etherscan-provider.js","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/wallets/web3-provider/providers/etherscan-provider.js","mtime":1574664278326},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js","mtime":1574664275010},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/eslint-loader/index.js","mtime":1574664275986}],"contextDependencies":[],"result":["import _typeof from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/@babel/runtime-corejs2/helpers/esm/typeof\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport EtherScanRequestManger from \"./etherscan-request-manager\";\nimport MiddleWare from \"../middleware\";\nimport { ethSendTransaction, ethSignTransaction, ethGetTransactionCount, ethSign, ethAccounts, ethCoinbase, netVersion, ethGetBlockByNumber, ethGetTransactionReceipt, ethGetBlockNumber } from \"../methods\";\nimport EtherscanProxy from \"../etherscan-proxy\";\n\nvar EtherscanProvider =\n/*#__PURE__*/\nfunction () {\n  function EtherscanProvider(host, options, store, eventHub) {\n    var _this = this;\n\n    _classCallCheck(this, EtherscanProvider);\n\n    this.host = host;\n    this.apikey = options.apikey || 'DSH5B24BQYKD1AD8KUCDY3SAQSS6ZAU175';\n    this.store = store;\n    this.eventHub = eventHub;\n    this.proxy = new EtherscanProxy(this.host, this.apikey);\n    this.requestManager_ = new EtherScanRequestManger(host, options);\n    this.requestThrottler = {\n      requests: [],\n      remaining: 5,\n      timer: setInterval(function () {\n        if (_this.requestThrottler.requests.length && _this.requestThrottler.remaining) {\n          for (var i = 0; i < _this.requestThrottler.remaining; i++) {\n            if (_this.requestThrottler.requests.length) {\n              var req = _this.requestThrottler.requests.shift();\n\n              _this.requestThrottler.remaining--;\n\n              _this.send_(req.payload, req.callback);\n            }\n          }\n        }\n      }, 400),\n      reset: setInterval(function () {\n        _this.requestThrottler.remaining = 5;\n      }, 5500)\n    };\n  }\n\n  _createClass(EtherscanProvider, [{\n    key: \"send\",\n    value: function send(payload, callback) {\n      this.requestThrottler.requests.push({\n        payload: payload,\n        callback: callback\n      });\n    }\n  }, {\n    key: \"send_\",\n    value: function send_(payload, callback) {\n      var _this2 = this;\n\n      var req = {\n        payload: payload,\n        store: this.store,\n        requestManager: this.requestManager_,\n        eventHub: this.eventHub\n      };\n      var middleware = new MiddleWare();\n      middleware.use(ethSendTransaction);\n      middleware.use(ethSignTransaction);\n      middleware.use(ethGetTransactionReceipt);\n      middleware.use(ethSign);\n      middleware.use(ethAccounts);\n      middleware.use(ethGetTransactionCount);\n      middleware.use(ethCoinbase);\n      middleware.use(ethGetBlockByNumber);\n      middleware.use(ethGetBlockNumber);\n      middleware.use(netVersion);\n      middleware.use(\n      /*#__PURE__*/\n      function () {\n        var _ref2 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee(_ref, res) {\n          var payload;\n          return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  payload = _ref.payload;\n\n                  _this2.proxy.request(payload).then(function (body) {\n                    res(null, body);\n                  }).catch(function (err) {\n                    if (_typeof(err) !== Error && err.error) err = new Error(err.error.message);\n                    res(err);\n                  });\n\n                case 2:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x, _x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n      middleware.run(req, callback).then(function () {\n        callback(new Error('Etherscan doesnt support this function'));\n      });\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {}\n  }]);\n\n  return EtherscanProvider;\n}();\n\nexport default EtherscanProvider;",{"version":3,"sources":["/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/wallets/web3-provider/providers/etherscan-provider.js"],"names":["EtherScanRequestManger","MiddleWare","ethSendTransaction","ethSignTransaction","ethGetTransactionCount","ethSign","ethAccounts","ethCoinbase","netVersion","ethGetBlockByNumber","ethGetTransactionReceipt","ethGetBlockNumber","EtherscanProxy","EtherscanProvider","host","options","store","eventHub","apikey","proxy","requestManager_","requestThrottler","requests","remaining","timer","setInterval","length","i","req","shift","send_","payload","callback","reset","push","requestManager","middleware","use","res","request","then","body","catch","err","Error","error","message","run"],"mappings":"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","sourcesContent":["import EtherScanRequestManger from './etherscan-request-manager';\nimport MiddleWare from '../middleware';\nimport {\n  ethSendTransaction,\n  ethSignTransaction,\n  ethGetTransactionCount,\n  ethSign,\n  ethAccounts,\n  ethCoinbase,\n  netVersion,\n  ethGetBlockByNumber,\n  ethGetTransactionReceipt,\n  ethGetBlockNumber\n} from '../methods';\nimport EtherscanProxy from '../etherscan-proxy';\nclass EtherscanProvider {\n  constructor(host, options, store, eventHub) {\n    this.host = host;\n    this.apikey = options.apikey || 'DSH5B24BQYKD1AD8KUCDY3SAQSS6ZAU175';\n    this.store = store;\n    this.eventHub = eventHub;\n    this.proxy = new EtherscanProxy(this.host, this.apikey);\n    this.requestManager_ = new EtherScanRequestManger(host, options);\n    this.requestThrottler = {\n      requests: [],\n      remaining: 5,\n      timer: setInterval(() => {\n        if (\n          this.requestThrottler.requests.length &&\n          this.requestThrottler.remaining\n        ) {\n          for (let i = 0; i < this.requestThrottler.remaining; i++) {\n            if (this.requestThrottler.requests.length) {\n              const req = this.requestThrottler.requests.shift();\n              this.requestThrottler.remaining--;\n              this.send_(req.payload, req.callback);\n            }\n          }\n        }\n      }, 400),\n      reset: setInterval(() => {\n        this.requestThrottler.remaining = 5;\n      }, 5500)\n    };\n  }\n  send(payload, callback) {\n    this.requestThrottler.requests.push({ payload, callback });\n  }\n  send_(payload, callback) {\n    const req = {\n      payload,\n      store: this.store,\n      requestManager: this.requestManager_,\n      eventHub: this.eventHub\n    };\n    const middleware = new MiddleWare();\n    middleware.use(ethSendTransaction);\n    middleware.use(ethSignTransaction);\n    middleware.use(ethGetTransactionReceipt);\n    middleware.use(ethSign);\n    middleware.use(ethAccounts);\n    middleware.use(ethGetTransactionCount);\n    middleware.use(ethCoinbase);\n    middleware.use(ethGetBlockByNumber);\n    middleware.use(ethGetBlockNumber);\n    middleware.use(netVersion);\n    middleware.use(async ({ payload }, res) => {\n      this.proxy\n        .request(payload)\n        .then(body => {\n          res(null, body);\n        })\n        .catch(err => {\n          if (typeof err !== Error && err.error)\n            err = new Error(err.error.message);\n          res(err);\n        });\n    });\n    middleware.run(req, callback).then(() => {\n      callback(new Error('Etherscan doesnt support this function'));\n    });\n  }\n  disconnect() {}\n}\nexport default EtherscanProvider;\n"]}]}