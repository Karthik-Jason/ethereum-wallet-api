{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/thread-loader/dist/cjs.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/eslint-loader/index.js??ref--13-0!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/partners/simplex/simplex.js","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/partners/simplex/simplex.js","mtime":1574664278314},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/thread-loader/dist/cjs.js","mtime":1574664277654},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js","mtime":1574664275010},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/eslint-loader/index.js","mtime":1574664275986}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport BigNumber from 'bignumber.js';\nimport { networkSymbols } from \"../partnersConfig\";\nimport { statuses, notificationStatuses, TIME_SWAP_VALID, MIN_FIAT, MAX_FIAT, SimplexCurrencies, PROVIDER_NAME } from \"./config.js\";\nimport { getQuote, getOrder, getStatus } from \"./simplex-api\";\n\nvar Simplex =\n/*#__PURE__*/\nfunction () {\n  function Simplex() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Simplex);\n\n    this.name = Simplex.getName();\n    this.network = props.network || networkSymbols.ETH;\n    this.minFiat = props.minFiat || MIN_FIAT;\n    this.maxFiat = props.maxFiat || MAX_FIAT;\n    this.currencyDetails = props.currencies || SimplexCurrencies;\n    this.hasRates = 1;\n    this.status = {\n      invalidFiatAmount: true,\n      invalidDigitalAmount: true,\n      invalidAddress: true\n    };\n    this.internalEstimateRate = 0;\n    this.currentOrder = {};\n  }\n\n  _createClass(Simplex, [{\n    key: \"setNetwork\",\n    value: function setNetwork(network) {\n      this.network = network;\n    }\n  }, {\n    key: \"validSwap\",\n    value: function validSwap(fromCurrency, toCurrency) {\n      if (this.isValidNetwork) {\n        return this.currencies.fiat[fromCurrency] && this.currencies.digital[toCurrency];\n      }\n\n      return false;\n    }\n  }, {\n    key: \"isFiat\",\n    value: function isFiat(currency) {\n      return !!this.currencies.fiat[currency];\n    }\n  }, {\n    key: \"canQuote\",\n    value: function canQuote(fiatAmount, cryptoAmount) {\n      if (!cryptoAmount) {\n        return this.withinBounds(fiatAmount);\n      }\n\n      var cryptoEst = cryptoAmount * (this.internalEstimateRate > 0 ? this.internalEstimateRate : 60);\n      return this.withinBounds(cryptoEst) || this.withinBounds(fiatAmount);\n    }\n  }, {\n    key: \"withinBounds\",\n    value: function withinBounds(amount) {\n      return new BigNumber(amount).gt(new BigNumber(this.minFiat)) && new BigNumber(amount).lt(new BigNumber(this.maxFiat));\n    }\n  }, {\n    key: \"calculateRate\",\n    value: function calculateRate(inVal, outVal) {\n      return new BigNumber(outVal).div(new BigNumber(inVal));\n    }\n  }, {\n    key: \"getRate\",\n    value: function () {\n      var _getRate = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(fromCurrency, toCurrency, fromValue, toValue, isFiat) {\n        var simplexRateDetails, updateType;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this.canQuote(fromValue, toValue)) {\n                  _context.next = 7;\n                  break;\n                }\n\n                if (this.isFiat(fromCurrency) && isFiat) {\n                  updateType = 'updateFiat';\n                } else {\n                  updateType = 'updateDigital';\n                }\n\n                _context.next = 4;\n                return this[updateType](fromCurrency, toCurrency, fromValue, toValue);\n\n              case 4:\n                simplexRateDetails = _context.sent;\n                this.internalEstimateRate = simplexRateDetails.rate;\n                return _context.abrupt(\"return\", {\n                  fromCurrency: fromCurrency,\n                  toCurrency: toCurrency,\n                  provider: this.name,\n                  rate: simplexRateDetails.rate,\n                  minValue: this.minFiat,\n                  maxValue: this.maxFiat\n                });\n\n              case 7:\n                this.invalidFrom = 'simplexMin';\n                _context.next = 10;\n                return this.updateFiat(fromCurrency, toCurrency, 51);\n\n              case 10:\n                simplexRateDetails = _context.sent;\n                this.internalEstimateRate = simplexRateDetails.rate;\n                return _context.abrupt(\"return\", {\n                  fromCurrency: fromCurrency,\n                  toCurrency: toCurrency,\n                  provider: this.name,\n                  rate: simplexRateDetails.rate,\n                  minValue: this.minFiat,\n                  maxValue: this.maxFiat\n                });\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getRate(_x, _x2, _x3, _x4, _x5) {\n        return _getRate.apply(this, arguments);\n      }\n\n      return getRate;\n    }()\n  }, {\n    key: \"getRateUpdate\",\n    value: function () {\n      var _getRateUpdate = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2(fromCurrency, toCurrency, fromValue, toValue, isFiat) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", this.getRate(fromCurrency, toCurrency, fromValue, toValue, isFiat));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getRateUpdate(_x6, _x7, _x8, _x9, _x10) {\n        return _getRateUpdate.apply(this, arguments);\n      }\n\n      return getRateUpdate;\n    }()\n  }, {\n    key: \"updateFiat\",\n    value: function () {\n      var _updateFiat = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3(fromCurrency, toCurrency, fromValue) {\n        var result;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (fromValue <= 0) fromValue = 51;\n                _context3.next = 3;\n                return getQuote({\n                  digital_currency: toCurrency,\n                  fiat_currency: fromCurrency,\n                  requested_currency: fromCurrency,\n                  requested_amount: +fromValue\n                });\n\n              case 3:\n                result = _context3.sent;\n\n                if (!result.error) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", {\n                  error: result.result,\n                  fromValue: fromValue,\n                  toValue: 0\n                });\n\n              case 6:\n                this.currentOrder = result.result;\n                return _context3.abrupt(\"return\", {\n                  fromValue: result.result.fiat_money.total_amount,\n                  toValue: result.result.digital_money.amount,\n                  rate: this.calculateRate(result.result.fiat_money.total_amount, result.result.digital_money.amount)\n                });\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function updateFiat(_x11, _x12, _x13) {\n        return _updateFiat.apply(this, arguments);\n      }\n\n      return updateFiat;\n    }()\n  }, {\n    key: \"updateDigital\",\n    value: function () {\n      var _updateDigital = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4(fromCurrency, toCurrency, fromValue, toValue) {\n        var result;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (toValue <= 0) toValue = 1;\n                _context4.next = 3;\n                return getQuote({\n                  digital_currency: toCurrency,\n                  fiat_currency: fromCurrency,\n                  requested_currency: toCurrency,\n                  requested_amount: +toValue\n                });\n\n              case 3:\n                result = _context4.sent;\n\n                if (!result.error) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", {\n                  error: result.result,\n                  fromValue: 0,\n                  toValue: toValue\n                });\n\n              case 6:\n                this.currentOrder = result.result;\n                return _context4.abrupt(\"return\", {\n                  fromValue: result.result.fiat_money.total_amount,\n                  toValue: toValue,\n                  rate: this.calculateRate(result.result.fiat_money.total_amount, result.result.digital_money.amount)\n                });\n\n              case 8:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function updateDigital(_x14, _x15, _x16, _x17) {\n        return _updateDigital.apply(this, arguments);\n      }\n\n      return updateDigital;\n    }()\n  }, {\n    key: \"getInitialCurrencyEntries\",\n    value: function getInitialCurrencyEntries(collectMapFrom, collectMapTo) {\n      for (var prop in this.currencies.fiat) {\n        if (this.currencies.fiat[prop]) collectMapFrom.set(prop, {\n          symbol: prop,\n          name: this.currencies.fiat[prop].name\n        });\n      }\n\n      for (var _prop in this.currencies.digital) {\n        if (this.currencies.digital[_prop]) collectMapTo.set(_prop, {\n          symbol: _prop,\n          name: this.currencies.digital[_prop].name\n        });\n      }\n    }\n  }, {\n    key: \"getUpdatedFromCurrencyEntries\",\n    value: function getUpdatedFromCurrencyEntries(value, collectMap) {\n      if (this.currencies.digital[value.symbol]) {\n        for (var prop in this.currencies.fiat) {\n          if (this.currencies.fiat[prop]) collectMap.set(prop, {\n            symbol: prop,\n            name: this.currencies.fiat[prop].name\n          });\n        }\n      }\n    }\n  }, {\n    key: \"getUpdatedToCurrencyEntries\",\n    value: function getUpdatedToCurrencyEntries(value, collectMap) {\n      if (this.currencies.fiat[value.symbol]) {\n        for (var prop in this.currencies.digital) {\n          if (this.currencies.digital[prop]) collectMap.set(prop, {\n            symbol: prop,\n            name: this.currencies.digital[prop].name\n          });\n        }\n      }\n    }\n  }, {\n    key: \"canOrder\",\n    value: function canOrder(fiatAmount, digitalAmount) {\n      return new BigNumber(fiatAmount).gte(new BigNumber(this.minFiat)) && new BigNumber(new BigNumber(fiatAmount)).lte(new BigNumber(this.maxFiat)) && new BigNumber(digitalAmount).gt(0);\n    }\n  }, {\n    key: \"startSwap\",\n    value: function () {\n      var _startSwap = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee5(swapDetails) {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.updateFiat(swapDetails.fromCurrency, swapDetails.toCurrency, swapDetails.fromValue);\n\n              case 2:\n                _context5.next = 4;\n                return this.createSwap(swapDetails);\n\n              case 4:\n                swapDetails.dataForInitialization = _context5.sent;\n\n                if (swapDetails.dataForInitialization) {\n                  _context5.next = 7;\n                  break;\n                }\n\n                throw Error('abort');\n\n              case 7:\n                swapDetails.timestamp = new Date().toISOString();\n                swapDetails.providerReceives = this.currentOrder.fiat_money.total_amount;\n                swapDetails.providerSends = this.currentOrder.digital_money.amount;\n                swapDetails.parsed = Simplex.parseOrder(swapDetails.dataForInitialization);\n                swapDetails.providerAddress = undefined;\n                swapDetails.isDex = Simplex.isDex();\n                return _context5.abrupt(\"return\", swapDetails);\n\n              case 14:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function startSwap(_x18) {\n        return _startSwap.apply(this, arguments);\n      }\n\n      return startSwap;\n    }()\n  }, {\n    key: \"createSwap\",\n    value: function createSwap(swapDetails) {\n      if (this.canOrder(swapDetails.fromValue, swapDetails.toValue)) {\n        return getOrder({\n          'g-recaptcha-response': '',\n          account_details: {\n            app_end_user_id: this.currentOrder.user_id\n          },\n          transaction_details: {\n            payment_details: {\n              fiat_total_amount: {\n                currency: this.currentOrder.fiat_money.currency,\n                amount: this.currentOrder.fiat_money.total_amount\n              },\n              requested_digital_amount: {\n                currency: this.currentOrder.digital_money.currency,\n                amount: this.currentOrder.digital_money.amount\n              },\n              destination_wallet: {\n                currency: this.currentOrder.digital_money.currency,\n                address: swapDetails.toAddress\n              }\n            }\n          }\n        }).then(function (_result) {\n          return _result.result;\n        });\n      }\n    }\n  }, {\n    key: \"isValidNetwork\",\n    get: function get() {\n      return this.network === networkSymbols.ETH;\n    }\n  }, {\n    key: \"ratesRetrieved\",\n    get: function get() {\n      return this.hasRates > 0;\n    }\n  }, {\n    key: \"currencies\",\n    get: function get() {\n      if (this.isValidNetwork) {\n        return this.currencyDetails;\n      }\n\n      return {\n        fiat: {},\n        digital: {}\n      };\n    }\n  }], [{\n    key: \"getName\",\n    value: function getName() {\n      return PROVIDER_NAME;\n    }\n  }, {\n    key: \"isDex\",\n    value: function isDex() {\n      return false;\n    }\n  }, {\n    key: \"parseOrder\",\n    value: function parseOrder(order) {\n      return {\n        orderId: order.quote_id,\n        statusId: order.user_id,\n        sendToAddress: 'None',\n        recValue: order.digital_total_amount_amount,\n        sendValue: order.fiat_total_amount_amount,\n        status: 'new',\n        timestamp: order.timestamp || new Date().toISOString(),\n        userAddress: order.destination_wallet_address,\n        validFor: TIME_SWAP_VALID\n      };\n    }\n  }, {\n    key: \"getOrderStatus\",\n    value: function () {\n      var _getOrderStatus = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee6(noticeDetails) {\n        var result;\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return getStatus(noticeDetails.statusId);\n\n              case 2:\n                result = _context6.sent;\n\n                if (!result.error) {\n                  _context6.next = 5;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\", 'error');\n\n              case 5:\n                return _context6.abrupt(\"return\", Simplex.parseSimplexStatus(result.result.status));\n\n              case 6:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      function getOrderStatus(_x19) {\n        return _getOrderStatus.apply(this, arguments);\n      }\n\n      return getOrderStatus;\n    }()\n  }, {\n    key: \"parseSimplexStatus\",\n    value: function parseSimplexStatus(status) {\n      switch (status) {\n        case statuses.new:\n        case statuses.initiated:\n        case statuses.sent:\n          return notificationStatuses.NEW;\n\n        case statuses.pending:\n          return notificationStatuses.PENDING;\n\n        case statuses.payment:\n          return notificationStatuses.COMPLETE;\n\n        case statuses.declined:\n        case statuses.cancelled:\n          return notificationStatuses.CANCELLED;\n      }\n    }\n  }]);\n\n  return Simplex;\n}();\n\nexport { Simplex as default };",{"version":3,"sources":["/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/partners/simplex/simplex.js"],"names":["BigNumber","networkSymbols","statuses","notificationStatuses","TIME_SWAP_VALID","MIN_FIAT","MAX_FIAT","SimplexCurrencies","PROVIDER_NAME","getQuote","getOrder","getStatus","Simplex","props","name","getName","network","ETH","minFiat","maxFiat","currencyDetails","currencies","hasRates","status","invalidFiatAmount","invalidDigitalAmount","invalidAddress","internalEstimateRate","currentOrder","fromCurrency","toCurrency","isValidNetwork","fiat","digital","currency","fiatAmount","cryptoAmount","withinBounds","cryptoEst","amount","gt","lt","inVal","outVal","div","fromValue","toValue","isFiat","canQuote","updateType","simplexRateDetails","rate","provider","minValue","maxValue","invalidFrom","updateFiat","getRate","digital_currency","fiat_currency","requested_currency","requested_amount","result","error","fiat_money","total_amount","digital_money","calculateRate","collectMapFrom","collectMapTo","prop","set","symbol","value","collectMap","digitalAmount","gte","lte","swapDetails","createSwap","dataForInitialization","Error","timestamp","Date","toISOString","providerReceives","providerSends","parsed","parseOrder","providerAddress","undefined","isDex","canOrder","account_details","app_end_user_id","user_id","transaction_details","payment_details","fiat_total_amount","requested_digital_amount","destination_wallet","address","toAddress","then","_result","order","orderId","quote_id","statusId","sendToAddress","recValue","digital_total_amount_amount","sendValue","fiat_total_amount_amount","userAddress","destination_wallet_address","validFor","noticeDetails","parseSimplexStatus","new","initiated","sent","NEW","pending","PENDING","payment","COMPLETE","declined","cancelled","CANCELLED"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js';\nimport { networkSymbols } from '../partnersConfig';\nimport {\n  statuses,\n  notificationStatuses,\n  TIME_SWAP_VALID,\n  MIN_FIAT,\n  MAX_FIAT,\n  SimplexCurrencies,\n  PROVIDER_NAME\n} from './config.js';\nimport { getQuote, getOrder, getStatus } from './simplex-api';\n\nexport default class Simplex {\n  constructor(props = {}) {\n    this.name = Simplex.getName();\n    this.network = props.network || networkSymbols.ETH;\n    this.minFiat = props.minFiat || MIN_FIAT;\n    this.maxFiat = props.maxFiat || MAX_FIAT;\n    this.currencyDetails = props.currencies || SimplexCurrencies;\n    this.hasRates = 1;\n    this.status = {\n      invalidFiatAmount: true,\n      invalidDigitalAmount: true,\n      invalidAddress: true\n    };\n    this.internalEstimateRate = 0;\n\n    this.currentOrder = {};\n  }\n\n  static getName() {\n    return PROVIDER_NAME;\n  }\n\n  static isDex() {\n    return false;\n  }\n\n  get isValidNetwork() {\n    return this.network === networkSymbols.ETH;\n  }\n\n  get ratesRetrieved() {\n    return this.hasRates > 0;\n  }\n\n  get currencies() {\n    if (this.isValidNetwork) {\n      return this.currencyDetails;\n    }\n    return { fiat: {}, digital: {} };\n  }\n\n  setNetwork(network) {\n    this.network = network;\n  }\n\n  validSwap(fromCurrency, toCurrency) {\n    if (this.isValidNetwork) {\n      return (\n        this.currencies.fiat[fromCurrency] &&\n        this.currencies.digital[toCurrency]\n      );\n    }\n    return false;\n  }\n\n  isFiat(currency) {\n    return !!this.currencies.fiat[currency];\n  }\n\n  canQuote(fiatAmount, cryptoAmount) {\n    if (!cryptoAmount) {\n      return this.withinBounds(fiatAmount);\n    }\n    const cryptoEst =\n      cryptoAmount *\n      (this.internalEstimateRate > 0 ? this.internalEstimateRate : 60);\n    return this.withinBounds(cryptoEst) || this.withinBounds(fiatAmount);\n  }\n\n  withinBounds(amount) {\n    return (\n      new BigNumber(amount).gt(new BigNumber(this.minFiat)) &&\n      new BigNumber(amount).lt(new BigNumber(this.maxFiat))\n    );\n  }\n\n  calculateRate(inVal, outVal) {\n    return new BigNumber(outVal).div(new BigNumber(inVal));\n  }\n\n  async getRate(fromCurrency, toCurrency, fromValue, toValue, isFiat) {\n    let simplexRateDetails, updateType;\n\n    if (this.canQuote(fromValue, toValue)) {\n      if (this.isFiat(fromCurrency) && isFiat) {\n        updateType = 'updateFiat';\n      } else {\n        updateType = 'updateDigital';\n      }\n\n      simplexRateDetails = await this[updateType](\n        fromCurrency,\n        toCurrency,\n        fromValue,\n        toValue\n      );\n\n      this.internalEstimateRate = simplexRateDetails.rate;\n\n      return {\n        fromCurrency: fromCurrency,\n        toCurrency: toCurrency,\n        provider: this.name,\n        rate: simplexRateDetails.rate,\n        minValue: this.minFiat,\n        maxValue: this.maxFiat\n      };\n    }\n\n    this.invalidFrom = 'simplexMin';\n    simplexRateDetails = await this.updateFiat(fromCurrency, toCurrency, 51);\n\n    this.internalEstimateRate = simplexRateDetails.rate;\n\n    return {\n      fromCurrency: fromCurrency,\n      toCurrency: toCurrency,\n      provider: this.name,\n      rate: simplexRateDetails.rate,\n      minValue: this.minFiat,\n      maxValue: this.maxFiat\n    };\n  }\n\n  async getRateUpdate(fromCurrency, toCurrency, fromValue, toValue, isFiat) {\n    return this.getRate(fromCurrency, toCurrency, fromValue, toValue, isFiat);\n  }\n\n  async updateFiat(fromCurrency, toCurrency, fromValue) {\n    if (fromValue <= 0) fromValue = 51;\n    const result = await getQuote({\n      digital_currency: toCurrency,\n      fiat_currency: fromCurrency,\n      requested_currency: fromCurrency,\n      requested_amount: +fromValue\n    });\n\n    if (result.error) {\n      return { error: result.result, fromValue: fromValue, toValue: 0 };\n    }\n\n    this.currentOrder = result.result;\n\n    return {\n      fromValue: result.result.fiat_money.total_amount,\n      toValue: result.result.digital_money.amount,\n      rate: this.calculateRate(\n        result.result.fiat_money.total_amount,\n        result.result.digital_money.amount\n      )\n    };\n  }\n\n  async updateDigital(fromCurrency, toCurrency, fromValue, toValue) {\n    if (toValue <= 0) toValue = 1;\n    const result = await getQuote({\n      digital_currency: toCurrency,\n      fiat_currency: fromCurrency,\n      requested_currency: toCurrency,\n      requested_amount: +toValue\n    });\n    if (result.error) {\n      return { error: result.result, fromValue: 0, toValue: toValue };\n    }\n    this.currentOrder = result.result;\n\n    return {\n      fromValue: result.result.fiat_money.total_amount,\n      toValue: toValue,\n      rate: this.calculateRate(\n        result.result.fiat_money.total_amount,\n        result.result.digital_money.amount\n      )\n    };\n  }\n\n  getInitialCurrencyEntries(collectMapFrom, collectMapTo) {\n    for (const prop in this.currencies.fiat) {\n      if (this.currencies.fiat[prop])\n        collectMapFrom.set(prop, {\n          symbol: prop,\n          name: this.currencies.fiat[prop].name\n        });\n    }\n    for (const prop in this.currencies.digital) {\n      if (this.currencies.digital[prop])\n        collectMapTo.set(prop, {\n          symbol: prop,\n          name: this.currencies.digital[prop].name\n        });\n    }\n  }\n\n  getUpdatedFromCurrencyEntries(value, collectMap) {\n    if (this.currencies.digital[value.symbol]) {\n      for (const prop in this.currencies.fiat) {\n        if (this.currencies.fiat[prop])\n          collectMap.set(prop, {\n            symbol: prop,\n            name: this.currencies.fiat[prop].name\n          });\n      }\n    }\n  }\n\n  getUpdatedToCurrencyEntries(value, collectMap) {\n    if (this.currencies.fiat[value.symbol]) {\n      for (const prop in this.currencies.digital) {\n        if (this.currencies.digital[prop])\n          collectMap.set(prop, {\n            symbol: prop,\n            name: this.currencies.digital[prop].name\n          });\n      }\n    }\n  }\n\n  canOrder(fiatAmount, digitalAmount) {\n    return (\n      new BigNumber(fiatAmount).gte(new BigNumber(this.minFiat)) &&\n      new BigNumber(new BigNumber(fiatAmount)).lte(\n        new BigNumber(this.maxFiat)\n      ) &&\n      new BigNumber(digitalAmount).gt(0)\n    );\n  }\n\n  static parseOrder(order) {\n    return {\n      orderId: order.quote_id,\n      statusId: order.user_id,\n      sendToAddress: 'None',\n      recValue: order.digital_total_amount_amount,\n      sendValue: order.fiat_total_amount_amount,\n      status: 'new',\n      timestamp: order.timestamp || new Date().toISOString(),\n      userAddress: order.destination_wallet_address,\n      validFor: TIME_SWAP_VALID\n    };\n  }\n\n  async startSwap(swapDetails) {\n    await this.updateFiat(\n      swapDetails.fromCurrency,\n      swapDetails.toCurrency,\n      swapDetails.fromValue\n    );\n    swapDetails.dataForInitialization = await this.createSwap(swapDetails);\n    if (!swapDetails.dataForInitialization) throw Error('abort');\n    swapDetails.timestamp = new Date().toISOString();\n    swapDetails.providerReceives = this.currentOrder.fiat_money.total_amount;\n    swapDetails.providerSends = this.currentOrder.digital_money.amount;\n    swapDetails.parsed = Simplex.parseOrder(swapDetails.dataForInitialization);\n    swapDetails.providerAddress = undefined;\n    swapDetails.isDex = Simplex.isDex();\n    return swapDetails;\n  }\n\n  createSwap(swapDetails) {\n    if (this.canOrder(swapDetails.fromValue, swapDetails.toValue)) {\n      return getOrder({\n        'g-recaptcha-response': '',\n        account_details: {\n          app_end_user_id: this.currentOrder.user_id\n        },\n        transaction_details: {\n          payment_details: {\n            fiat_total_amount: {\n              currency: this.currentOrder.fiat_money.currency,\n              amount: this.currentOrder.fiat_money.total_amount\n            },\n            requested_digital_amount: {\n              currency: this.currentOrder.digital_money.currency,\n              amount: this.currentOrder.digital_money.amount\n            },\n            destination_wallet: {\n              currency: this.currentOrder.digital_money.currency,\n              address: swapDetails.toAddress\n            }\n          }\n        }\n      }).then(_result => {\n        return _result.result;\n      });\n    }\n  }\n\n  static async getOrderStatus(noticeDetails) {\n    const result = await getStatus(noticeDetails.statusId);\n    if (result.error) {\n      return 'error';\n    }\n    return Simplex.parseSimplexStatus(result.result.status);\n  }\n\n  static parseSimplexStatus(status) {\n    switch (status) {\n      case statuses.new:\n      case statuses.initiated:\n      case statuses.sent:\n        return notificationStatuses.NEW;\n      case statuses.pending:\n        return notificationStatuses.PENDING;\n      case statuses.payment:\n        return notificationStatuses.COMPLETE;\n      case statuses.declined:\n      case statuses.cancelled:\n        return notificationStatuses.CANCELLED;\n    }\n  }\n}\n"]}]}