{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/layouts/InterfaceLayout/containers/SendOfflineContainer/SendOfflineContainer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/layouts/InterfaceLayout/containers/SendOfflineContainer/SendOfflineContainer.vue","mtime":1573477612032},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.function.name\";\nimport _defineProperty from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.number.constructor\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport InterfaceContainerTitle from \"../../components/InterfaceContainerTitle\";\nimport InterfaceBottomText from '@/components/InterfaceBottomText';\nimport CurrencyPicker from '@/layouts/InterfaceLayout/components/CurrencyPicker';\nimport SignedTxModal from \"./components/SignedTxModal\";\nimport Blockie from '@/components/Blockie';\nimport BigNumber from 'bignumber.js';\nimport * as unit from 'ethjs-unit';\nimport { mapState } from 'vuex';\nimport { isAddress } from '@/helpers/addressUtils';\nimport store from 'store';\nimport { Misc, Toast } from '@/helpers';\nimport utils from 'web3-utils';\nexport default {\n  components: {\n    'interface-bottom-text': InterfaceBottomText,\n    blockie: Blockie,\n    'signed-tx-modal': SignedTxModal,\n    'currency-picker': CurrencyPicker,\n    'interface-container-title': InterfaceContainerTitle\n  },\n  props: {\n    checkPrefilled: {\n      type: Function,\n      default: function _default() {}\n    },\n    clearPrefilled: {\n      type: Function,\n      default: function _default() {}\n    },\n    isPrefilled: {\n      type: Boolean,\n      default: false\n    },\n    value: {\n      type: String,\n      default: '0'\n    },\n    data: {\n      type: String,\n      default: ''\n    },\n    to: {\n      type: String,\n      default: ''\n    },\n    gaslimit: {\n      type: String,\n      default: ''\n    },\n    gas: {\n      type: Number,\n      default: 0\n    },\n    tokensymbol: {\n      type: String,\n      default: ''\n    },\n    tokens: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    nonce: {\n      type: String,\n      default: '0'\n    },\n    highestGas: {\n      type: String,\n      default: '0'\n    }\n  },\n  data: function data() {\n    return {\n      toAmt: 0,\n      address: '',\n      toData: '0x',\n      gasLimit: 21000,\n      selectedCoinType: {},\n      raw: {},\n      signed: '{}',\n      localNonce: this.nonce,\n      file: '',\n      localGasPrice: this.highestGas\n    };\n  },\n  computed: _objectSpread({}, mapState(['wallet', 'network', 'web3', 'linkQuery']), {\n    txSpeedMsg: function txSpeedMsg() {\n      var net = this.network.type.name; // eslint-disable-next-line\n\n      var msg = \"\".concat(this.$t('popover.txSpeedPt1').replace('{0}', net), \" \").concat(this.$t('popover.txSpeedPt2').replace('{0}', net));\n      return msg;\n    },\n    validAddress: function validAddress() {\n      return isAddress(this.address);\n    },\n    allTokens: function allTokens() {\n      var customToken = store.get('customTokens');\n      var allTokens = this.tokens.concat(customToken[this.network.type.name]);\n      var sortedBySymbol = allTokens.sort(function (a, b) {\n        if (a.symbol.toUpperCase() < b.symbol.toUpperCase()) {\n          return -1;\n        } else if (a.symbol.toUpperCase() > b.symbol.toUpperCase()) {\n          return 1;\n        }\n\n        return 0;\n      });\n      return sortedBySymbol;\n    },\n    isAllInputValid: function isAllInputValid() {\n      return this.toData.length >= 2 && this.address.length > 0 && this.validAddress && this.toAmt >= 0 && this.gasLimit > 0 && this.localNonce >= 0 && this.localGasPrice;\n    }\n  }),\n  watch: {\n    highestGas: function highestGas(newVal) {\n      this.localGasPrice = newVal;\n    },\n    nonce: function nonce(newVal) {\n      this.localNonce = newVal;\n    },\n    toData: function toData(newVal) {\n      if (Misc.validateHexString(newVal)) {\n        this.toData = newVal;\n      } else {\n        this.toData = '0x';\n      }\n    },\n    toAmt: function toAmt(newVal) {\n      this.createDataHex(newVal, null, null);\n    },\n    address: function address(newVal) {\n      if (this.validAddress) {\n        this.createDataHex(null, newVal, null);\n      }\n    },\n    selectedCoinType: function selectedCoinType(newVal) {\n      this.createDataHex(null, null, newVal);\n    },\n    isPrefilled: function isPrefilled() {\n      this.prefillForm();\n    }\n  },\n  mounted: function mounted() {\n    this.checkPrefilled();\n  },\n  methods: {\n    prefillForm: function prefillForm() {\n      var _this = this;\n\n      if (this.tokens.length > 0 && this.isPrefilled) {\n        var foundToken = this.tokensymbol ? this.tokens.find(function (item) {\n          return item.symbol.toLowerCase() === _this.tokensymbol.toLowerCase();\n        }) : undefined;\n        this.toAmt = new BigNumber(this.value).toFixed();\n        this.toData = Misc.validateHexString(this.data) ? this.data : '';\n        this.address = this.to;\n        this.gasLimit = this.gaslimit ? new BigNumber(this.gaslimit).toString() : '21000';\n        this.localGasPrice = new BigNumber(this.gas).toFixed();\n        this.selectedCoinType = foundToken ? foundToken : this.selectedCoinType;\n        Toast.responseHandler('Form has been prefilled. Please proceed with caution!', Toast.WARN);\n        this.clearPrefilled();\n      }\n    },\n    debouncedAmount: utils._.debounce(function (e) {\n      var symbol = this.network.type.currencyName;\n      var decimals = this.selectedCoinType.symbol === symbol ? 18 : parseInt(this.selectedCoinType.decimals);\n      this.toAmt = e.target.valueAsNumber < 0 || isNaN(e.target.valueAsNumber) ? 0 : new BigNumber(e.target.valueAsNumber).decimalPlaces(decimals).toFixed();\n    }, 300),\n    createDataHex: function () {\n      var _createDataHex = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(amount, address, currency) {\n        var locAmount, locAddress, locCurrency, abi, symbol, locVal, contract, convertedAmount;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                locAmount = amount !== null ? amount : this.toAmt;\n                locAddress = address !== null ? address : this.address;\n                locCurrency = currency !== null ? currency : this.selectedCoinType;\n                abi = [{\n                  constant: false,\n                  inputs: [{\n                    name: '_to',\n                    type: 'address'\n                  }, {\n                    name: '_value',\n                    type: 'uint256'\n                  }],\n                  name: 'transfer',\n                  outputs: [{\n                    name: '',\n                    type: 'bool'\n                  }],\n                  payable: false,\n                  stateMutability: 'nonpayable',\n                  type: 'function'\n                }];\n                symbol = this.network.type.currencyName;\n\n                if (locCurrency.symbol !== symbol && locAddress !== '') {\n                  locVal = locAmount === '' || locAmount === null ? '0' : locAmount;\n                  contract = new this.web3.eth.Contract(abi, locCurrency.address);\n                  convertedAmount = new BigNumber(locVal).times(new BigNumber(10).pow(locCurrency.decimals));\n                  this.toData = contract.methods.transfer(locAddress, convertedAmount.toFixed()).encodeABI();\n                }\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function createDataHex(_x, _x2, _x3) {\n        return _createDataHex.apply(this, arguments);\n      }\n\n      return createDataHex;\n    }(),\n    copyToAddress: function copyToAddress() {\n      var el = this.$refs.toaddress;\n      el.select();\n      document.execCommand('copy');\n      window.getSelection().removeAllRanges();\n    },\n    uploadClick: function uploadClick() {\n      var jsonInput = this.$refs.jsonInput;\n      jsonInput.value = '';\n      jsonInput.click();\n    },\n    uploadFile: function uploadFile(e) {\n      var self = this;\n      var reader = new FileReader();\n\n      reader.onloadend = function (evt) {\n        try {\n          var file = JSON.parse(evt.target.result);\n          self.localGasPrice = unit.fromWei(file.gasPrice, 'gwei');\n          self.localNonce = file.nonce;\n        } catch (e) {\n          Toast.responseHandler(e, Toast.WARN);\n        }\n      };\n\n      reader.readAsBinaryString(e.target.files[0]);\n    },\n    generateTx: function () {\n      var _generateTx = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var symbol, isToken, amtWei, raw, signed;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                symbol = this.network.type.currencyName;\n                isToken = this.selectedCoinType.symbol !== symbol;\n                amtWei = unit.toWei(this.toAmt, 'ether');\n                raw = {\n                  nonce: Misc.sanitizeHex(new BigNumber(this.localNonce).toString(16)),\n                  gasLimit: Misc.sanitizeHex(new BigNumber(this.gasLimit).toString(16)),\n                  gasPrice: Misc.sanitizeHex(new BigNumber(unit.toWei(this.localGasPrice, 'gwei')).toString(16)),\n                  to: isToken ? this.selectedCoinType.address : this.address.toLowerCase().trim(),\n                  value: isToken ? 0 : amtWei,\n                  data: this.toData,\n                  chainId: this.network.type.chainID\n                };\n                this.raw = raw;\n                _context2.next = 7;\n                return this.wallet.signTransaction(this.raw);\n\n              case 7:\n                signed = _context2.sent;\n                this.signed = JSON.stringify(signed);\n                this.$refs.signedTxModal.$refs.signedTx.show();\n                window.scrollTo(0, 0);\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function generateTx() {\n        return _generateTx.apply(this, arguments);\n      }\n\n      return generateTx;\n    }(),\n    setSelectedCurrency: function setSelectedCurrency(e) {\n      var symbol = this.network.type.currencyName;\n      this.selectedCoinType = e;\n\n      if (e.symbol === symbol) {\n        this.toData = '0x';\n      }\n    }\n  }\n};",{"version":3,"sources":["SendOfflineContainer.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"send-offline-container\">\n    <interface-container-title :title=\"$t('common.offline')\" />\n    <div class=\"generate-tx\">\n      <div class=\"wrap\">\n        <div class=\"send-form\">\n          <div class=\"form-block amount-to-address\">\n            <ul class=\"type-amount\">\n              <li class=\"type\">\n                <div class=\"title\">\n                  <h4>{{ $t('interface.sendTxType') }}</h4>\n                </div>\n                <currency-picker\n                  :currency=\"allTokens\"\n                  :token=\"true\"\n                  :default=\"\n                    selectedCoinType.hasOwnProperty('symbol')\n                      ? selectedCoinType\n                      : {}\n                  \"\n                  page=\"sendOfflineGenTx\"\n                  @selectedCurrency=\"setSelectedCurrency\"\n                />\n              </li>\n              <li class=\"amount\">\n                <div class=\"title\">\n                  <h4>{{ $t('interface.sendTxAmount') }}</h4>\n                </div>\n                <div class=\"the-form amount-number\">\n                  <input\n                    :value=\"toAmt\"\n                    :placeholder=\"$t('interface.depAmount')\"\n                    type=\"number\"\n                    step=\"any\"\n                    name\n                    @input=\"debouncedAmount\"\n                  />\n                </div>\n              </li>\n            </ul>\n            <div class=\"to-address\">\n              <div class=\"title\">\n                <h4>{{ $t('interface.sendTxToAddr') }} &nbsp;</h4>\n                <blockie\n                  v-show=\"address !== '' && validAddress\"\n                  :address=\"address\"\n                  class=\"blockie-image-icon\"\n                  width=\"32px\"\n                  height=\"32px\"\n                />\n                <button\n                  class=\"title-button copy-button prevent-user-select\"\n                  @click=\"copyToAddress\"\n                >\n                  {{ $t('common.copy') }}\n                </button>\n              </div>\n              <div class=\"the-form address-block\">\n                <textarea\n                  ref=\"toaddress\"\n                  v-model=\"address\"\n                  name=\"name\"\n                  placeholder=\"Please Enter The Address\"\n                />\n                <i\n                  :class=\"[\n                    validAddress ? '' : 'not-good',\n                    'fa fa-check-circle good-button'\n                  ]\"\n                  aria-hidden=\"true\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"send-form\">\n          <div class=\"title-container\">\n            <div class=\"title\">\n              <div class=\"title-helper\">\n                <h4>{{ $t('common.data') }}</h4>\n              </div>\n            </div>\n          </div>\n          <div class=\"the-form gas-amount\">\n            <input\n              v-model=\"toData\"\n              :disabled=\"selectedCoinType.symbol !== 'ETH'\"\n              type=\"string\"\n              placeholder=\"e.g. 0x65746865726d696e652d657531\"\n            />\n            <div class=\"good-button-container\">\n              <i\n                :class=\"[\n                  toData !== '' ? '' : 'not-good',\n                  'fa fa-check-circle good-button'\n                ]\"\n                aria-hidden=\"true\"\n              />\n            </div>\n          </div>\n        </div>\n        <div class=\"send-form\">\n          <div class=\"title-container\">\n            <div class=\"title\">\n              <div class=\"title-helper\">\n                <h4>{{ $t('common.gasLimit') }}</h4>\n                <popover :popcontent=\"$t('popover.gasLimit')\" />\n              </div>\n            </div>\n          </div>\n          <div class=\"the-form gas-amount\">\n            <input\n              v-model=\"gasLimit\"\n              :placeholder=\"$t('common.gasLimit')\"\n              type=\"number\"\n            />\n            <div class=\"good-button-container\">\n              <i\n                :class=\"[\n                  'fa fa-check-circle good-button',\n                  gasLimit > 0 ? '' : 'not-good'\n                ]\"\n                aria-hidden=\"true\"\n              />\n            </div>\n          </div>\n        </div>\n        <div class=\"send-form\">\n          <div class=\"title-container\">\n            <div class=\"title\">\n              <div class=\"title-helper\">\n                <h4>{{ $t('common.nonce') }}</h4>\n                <popover :popcontent=\"$t('popover.nonce')\" />\n              </div>\n            </div>\n          </div>\n          <div class=\"the-form gas-amount\">\n            <input\n              v-model=\"localNonce\"\n              :placeholder=\"$t('common.nonce')\"\n              type=\"number\"\n            />\n            <div class=\"good-button-container\">\n              <i\n                :class=\"[\n                  'fa fa-check-circle good-button',\n                  localNonce >= 0 ? '' : 'not-good'\n                ]\"\n                aria-hidden=\"true\"\n              />\n            </div>\n          </div>\n        </div>\n        <div class=\"send-form\">\n          <div class=\"title-container\">\n            <div class=\"title\">\n              <div class=\"title-helper\">\n                <h4>{{ $t('common.gasPrice') }}</h4>\n                <popover :popcontent=\"txSpeedMsg\" />\n              </div>\n            </div>\n          </div>\n          <div class=\"the-form gas-amount\">\n            <input\n              v-model=\"localGasPrice\"\n              :placeholder=\"$t('common.gasPrice')\"\n              type=\"number\"\n            />\n            <div class=\"good-button-container\">\n              <i\n                :class=\"[\n                  'fa fa-check-circle good-button',\n                  localGasPrice > 0 ? '' : 'not-good'\n                ]\"\n                aria-hidden=\"true\"\n              />\n            </div>\n          </div>\n        </div>\n        <div class=\"submit-button-container\">\n          <input\n            ref=\"jsonInput\"\n            type=\"file\"\n            name=\"file\"\n            style=\"display: none\"\n            @change=\"uploadFile\"\n          />\n          <div\n            class=\"submit-button large-round-button-green-border\"\n            @click=\"uploadClick\"\n          >\n            Import JSON\n          </div>\n          <div\n            :class=\"[\n              isAllInputValid ? '' : 'disabled',\n              'submit-button large-round-button-green-filled'\n            ]\"\n            @click=\"generateTx\"\n          >\n            {{ $t('interface.generateTx') }}\n          </div>\n          <interface-bottom-text\n            link=\"https://kb.myetherwallet.com\"\n            question=\"Have issues?\"\n            link-text=\"Help Center\"\n          />\n        </div>\n      </div>\n      <signed-tx-modal ref=\"signedTxModal\" :signed-tx=\"signed\" :raw-tx=\"raw\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport InterfaceContainerTitle from '../../components/InterfaceContainerTitle';\nimport InterfaceBottomText from '@/components/InterfaceBottomText';\nimport CurrencyPicker from '@/layouts/InterfaceLayout/components/CurrencyPicker';\nimport SignedTxModal from './components/SignedTxModal';\nimport Blockie from '@/components/Blockie';\nimport BigNumber from 'bignumber.js';\nimport * as unit from 'ethjs-unit';\nimport { mapState } from 'vuex';\nimport { isAddress } from '@/helpers/addressUtils';\nimport store from 'store';\nimport { Misc, Toast } from '@/helpers';\nimport utils from 'web3-utils';\n\nexport default {\n  components: {\n    'interface-bottom-text': InterfaceBottomText,\n    blockie: Blockie,\n    'signed-tx-modal': SignedTxModal,\n    'currency-picker': CurrencyPicker,\n    'interface-container-title': InterfaceContainerTitle\n  },\n  props: {\n    checkPrefilled: {\n      type: Function,\n      default: () => {}\n    },\n    clearPrefilled: {\n      type: Function,\n      default: () => {}\n    },\n    isPrefilled: {\n      type: Boolean,\n      default: false\n    },\n    value: {\n      type: String,\n      default: '0'\n    },\n    data: {\n      type: String,\n      default: ''\n    },\n    to: {\n      type: String,\n      default: ''\n    },\n    gaslimit: {\n      type: String,\n      default: ''\n    },\n    gas: {\n      type: Number,\n      default: 0\n    },\n    tokensymbol: {\n      type: String,\n      default: ''\n    },\n    tokens: {\n      type: Array,\n      default: function() {\n        return [];\n      }\n    },\n    nonce: {\n      type: String,\n      default: '0'\n    },\n    highestGas: {\n      type: String,\n      default: '0'\n    }\n  },\n  data() {\n    return {\n      toAmt: 0,\n      address: '',\n      toData: '0x',\n      gasLimit: 21000,\n      selectedCoinType: {},\n      raw: {},\n      signed: '{}',\n      localNonce: this.nonce,\n      file: '',\n      localGasPrice: this.highestGas\n    };\n  },\n  computed: {\n    ...mapState(['wallet', 'network', 'web3', 'linkQuery']),\n    txSpeedMsg() {\n      const net = this.network.type.name;\n      // eslint-disable-next-line\n      const msg = `${this.$t('popover.txSpeedPt1').replace(\n        '{0}',\n        net\n      )} ${this.$t('popover.txSpeedPt2').replace('{0}', net)}`;\n      return msg;\n    },\n    validAddress() {\n      return isAddress(this.address);\n    },\n    allTokens() {\n      const customToken = store.get('customTokens');\n      const allTokens = this.tokens.concat(customToken[this.network.type.name]);\n      const sortedBySymbol = allTokens.sort((a, b) => {\n        if (a.symbol.toUpperCase() < b.symbol.toUpperCase()) {\n          return -1;\n        } else if (a.symbol.toUpperCase() > b.symbol.toUpperCase()) {\n          return 1;\n        }\n        return 0;\n      });\n      return sortedBySymbol;\n    },\n    isAllInputValid() {\n      return (\n        this.toData.length >= 2 &&\n        this.address.length > 0 &&\n        this.validAddress &&\n        this.toAmt >= 0 &&\n        this.gasLimit > 0 &&\n        this.localNonce >= 0 &&\n        this.localGasPrice\n      );\n    }\n  },\n  watch: {\n    highestGas(newVal) {\n      this.localGasPrice = newVal;\n    },\n    nonce(newVal) {\n      this.localNonce = newVal;\n    },\n    toData(newVal) {\n      if (Misc.validateHexString(newVal)) {\n        this.toData = newVal;\n      } else {\n        this.toData = '0x';\n      }\n    },\n    toAmt(newVal) {\n      this.createDataHex(newVal, null, null);\n    },\n    address(newVal) {\n      if (this.validAddress) {\n        this.createDataHex(null, newVal, null);\n      }\n    },\n    selectedCoinType(newVal) {\n      this.createDataHex(null, null, newVal);\n    },\n    isPrefilled() {\n      this.prefillForm();\n    }\n  },\n  mounted() {\n    this.checkPrefilled();\n  },\n  methods: {\n    prefillForm() {\n      if (this.tokens.length > 0 && this.isPrefilled) {\n        const foundToken = this.tokensymbol\n          ? this.tokens.find(item => {\n              return (\n                item.symbol.toLowerCase() === this.tokensymbol.toLowerCase()\n              );\n            })\n          : undefined;\n        this.toAmt = new BigNumber(this.value).toFixed();\n        this.toData = Misc.validateHexString(this.data) ? this.data : '';\n        this.address = this.to;\n        this.gasLimit = this.gaslimit\n          ? new BigNumber(this.gaslimit).toString()\n          : '21000';\n        this.localGasPrice = new BigNumber(this.gas).toFixed();\n        this.selectedCoinType = foundToken ? foundToken : this.selectedCoinType;\n        Toast.responseHandler(\n          'Form has been prefilled. Please proceed with caution!',\n          Toast.WARN\n        );\n        this.clearPrefilled();\n      }\n    },\n    debouncedAmount: utils._.debounce(function(e) {\n      const symbol = this.network.type.currencyName;\n      const decimals =\n        this.selectedCoinType.symbol === symbol\n          ? 18\n          : parseInt(this.selectedCoinType.decimals);\n      this.toAmt =\n        e.target.valueAsNumber < 0 || isNaN(e.target.valueAsNumber)\n          ? 0\n          : new BigNumber(e.target.valueAsNumber)\n              .decimalPlaces(decimals)\n              .toFixed();\n    }, 300),\n    async createDataHex(amount, address, currency) {\n      const locAmount = amount !== null ? amount : this.toAmt;\n      const locAddress = address !== null ? address : this.address;\n      const locCurrency = currency !== null ? currency : this.selectedCoinType;\n      const abi = [\n        {\n          constant: false,\n          inputs: [\n            {\n              name: '_to',\n              type: 'address'\n            },\n            {\n              name: '_value',\n              type: 'uint256'\n            }\n          ],\n          name: 'transfer',\n          outputs: [\n            {\n              name: '',\n              type: 'bool'\n            }\n          ],\n          payable: false,\n          stateMutability: 'nonpayable',\n          type: 'function'\n        }\n      ];\n      const symbol = this.network.type.currencyName;\n      if (locCurrency.symbol !== symbol && locAddress !== '') {\n        const locVal = locAmount === '' || locAmount === null ? '0' : locAmount;\n        const contract = new this.web3.eth.Contract(abi, locCurrency.address);\n        const convertedAmount = new BigNumber(locVal).times(\n          new BigNumber(10).pow(locCurrency.decimals)\n        );\n        this.toData = contract.methods\n          .transfer(locAddress, convertedAmount.toFixed())\n          .encodeABI();\n      }\n    },\n    copyToAddress() {\n      const el = this.$refs.toaddress;\n      el.select();\n      document.execCommand('copy');\n      window.getSelection().removeAllRanges();\n    },\n    uploadClick() {\n      const jsonInput = this.$refs.jsonInput;\n      jsonInput.value = '';\n      jsonInput.click();\n    },\n    uploadFile(e) {\n      const self = this;\n      const reader = new FileReader();\n      reader.onloadend = function(evt) {\n        try {\n          const file = JSON.parse(evt.target.result);\n          self.localGasPrice = unit.fromWei(file.gasPrice, 'gwei');\n          self.localNonce = file.nonce;\n        } catch (e) {\n          Toast.responseHandler(e, Toast.WARN);\n        }\n      };\n      reader.readAsBinaryString(e.target.files[0]);\n    },\n    async generateTx() {\n      const symbol = this.network.type.currencyName;\n      const isToken = this.selectedCoinType.symbol !== symbol;\n      const amtWei = unit.toWei(this.toAmt, 'ether');\n      const raw = {\n        nonce: Misc.sanitizeHex(new BigNumber(this.localNonce).toString(16)),\n        gasLimit: Misc.sanitizeHex(new BigNumber(this.gasLimit).toString(16)),\n        gasPrice: Misc.sanitizeHex(\n          new BigNumber(unit.toWei(this.localGasPrice, 'gwei')).toString(16)\n        ),\n        to: isToken\n          ? this.selectedCoinType.address\n          : this.address.toLowerCase().trim(),\n        value: isToken ? 0 : amtWei,\n        data: this.toData,\n        chainId: this.network.type.chainID\n      };\n      this.raw = raw;\n      const signed = await this.wallet.signTransaction(this.raw);\n      this.signed = JSON.stringify(signed);\n      this.$refs.signedTxModal.$refs.signedTx.show();\n      window.scrollTo(0, 0);\n    },\n    setSelectedCurrency(e) {\n      const symbol = this.network.type.currencyName;\n      this.selectedCoinType = e;\n      if (e.symbol === symbol) {\n        this.toData = '0x';\n      }\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped file=\"SendOfflineContainer.scss\">\n@import 'SendOfflineContainer.scss';\n</style>\n"],"sourceRoot":"src/layouts/InterfaceLayout/containers/SendOfflineContainer"}]}