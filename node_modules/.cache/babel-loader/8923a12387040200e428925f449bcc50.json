{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/thread-loader/dist/cjs.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/eslint-loader/index.js??ref--13-0!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/store/mutations.js","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/store/mutations.js","mtime":1574664278314},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/thread-loader/dist/cjs.js","mtime":1574664277654},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js","mtime":1574664275010},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/eslint-loader/index.js","mtime":1574664275986}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport store from 'store';\nimport { Toast } from '@/helpers';\n\nvar ADD_NOTIFICATION = function ADD_NOTIFICATION(state, newNotif) {\n  state.notifications = newNotif;\n  store.set('notifications', newNotif);\n};\n\nvar ADD_SWAP_TRANSACTION = function ADD_SWAP_TRANSACTION(state, newTx) {\n  state.transactions = newTx;\n  store.set('transactions', newTx);\n};\n\nvar ADD_CUSTOM_PATH = function ADD_CUSTOM_PATH(state, paths) {\n  state.customPaths = paths;\n  store.set('customPaths', paths);\n};\n\nvar GETTING_STARTED_DONE = function GETTING_STARTED_DONE(state) {\n  state.gettingStartedDone = true;\n};\n\nvar UPDATE_BLOCK_NUMBER = function UPDATE_BLOCK_NUMBER(state, blockNumber) {\n  state.blockNumber = blockNumber;\n};\n\nvar CHECK_IF_ONLINE =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee(state, status) {\n    var darkList;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            state.online = status;\n\n            if (!state.online) {\n              _context.next = 6;\n              break;\n            }\n\n            _context.next = 4;\n            return fetch('https://raw.githubusercontent.com/MyEtherWallet/ethereum-lists/master/src/addresses/addresses-darklist.json').then(function (res) {\n              return res.json();\n            }).catch(function (e) {\n              Toast.responseHandler(e, Toast.ERROR);\n            });\n\n          case 4:\n            darkList = _context.sent;\n            state.darklist = {\n              data: darkList,\n              timestamp: Date.now()\n            };\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function CHECK_IF_ONLINE(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar CLEAR_WALLET = function CLEAR_WALLET(state) {\n  state.wallet = null;\n  state.account = {\n    balance: 0,\n    address: null,\n    isHardWare: null,\n    identifier: ''\n  };\n};\n\nvar DECRYPT_WALLET = function DECRYPT_WALLET(state, wallet) {\n  state.wallet = wallet;\n  state.account['address'] = wallet.getAddressString();\n  state.account['isHardware'] = wallet.isHardware;\n  state.account['identifier'] = wallet.identifier;\n\n  if (!wallet.hasOwnProperty('isHardWare')) {\n    state.account['nickname'] = wallet.getNickname();\n    state.account['keystore'] = wallet.getKeystore();\n  }\n};\n\nvar INIT_STATES = function INIT_STATES(state, stateObj) {\n  Object.keys(state).forEach(function (key) {\n    state[key] = stateObj[key];\n  });\n};\n\nvar SET_ACCOUNT_BALANCE = function SET_ACCOUNT_BALANCE(state, balance) {\n  state.account.balance = balance;\n};\n\nvar SET_ENS = function SET_ENS(state, ens) {\n  state.ens = ens;\n};\n\nvar SET_GAS_PRICE = function SET_GAS_PRICE(state, val) {\n  state.gasPrice = val;\n  store.set('gasPrice', val);\n};\n\nvar SET_LAST_PATH = function SET_LAST_PATH(state, val) {\n  state.path = val;\n};\n\nvar SET_WEB3_INSTANCE = function SET_WEB3_INSTANCE(state, web3) {\n  state.web3 = web3;\n};\n\nvar SWITCH_NETWORK = function SWITCH_NETWORK(state, networkObj) {\n  state.network = networkObj;\n\n  var _netObj = Object.assign({}, networkObj);\n\n  if (_netObj.type.name !== 'CUS') {\n    _netObj.type = {\n      name: networkObj.type.name\n    };\n  }\n\n  store.set('network', _netObj);\n};\n\nvar UPDATE_NOTIFICATION = function UPDATE_NOTIFICATION(state, newNotif) {\n  state.notifications = newNotif;\n  store.set('notifications', newNotif);\n};\n\nvar UPDATE_SWAP_TRANSACTION = function UPDATE_SWAP_TRANSACTION(state, newTx) {\n  state.transactions = newTx;\n  store.set('transactions', newTx);\n};\n\nvar TOGGLE_SIDEMENU = function TOGGLE_SIDEMENU(state) {\n  state.sidemenuOpen = !state.sidemenuOpen;\n};\n\nvar SAVE_QUERY_VAL = function SAVE_QUERY_VAL(state, newQuery) {\n  state.linkQuery = newQuery;\n};\n\nexport default {\n  ADD_NOTIFICATION: ADD_NOTIFICATION,\n  ADD_SWAP_TRANSACTION: ADD_SWAP_TRANSACTION,\n  ADD_CUSTOM_PATH: ADD_CUSTOM_PATH,\n  CHECK_IF_ONLINE: CHECK_IF_ONLINE,\n  CLEAR_WALLET: CLEAR_WALLET,\n  DECRYPT_WALLET: DECRYPT_WALLET,\n  INIT_STATES: INIT_STATES,\n  SET_ACCOUNT_BALANCE: SET_ACCOUNT_BALANCE,\n  SET_LAST_PATH: SET_LAST_PATH,\n  SET_GAS_PRICE: SET_GAS_PRICE,\n  SET_ENS: SET_ENS,\n  SET_WEB3_INSTANCE: SET_WEB3_INSTANCE,\n  SWITCH_NETWORK: SWITCH_NETWORK,\n  UPDATE_NOTIFICATION: UPDATE_NOTIFICATION,\n  UPDATE_SWAP_TRANSACTION: UPDATE_SWAP_TRANSACTION,\n  TOGGLE_SIDEMENU: TOGGLE_SIDEMENU,\n  GETTING_STARTED_DONE: GETTING_STARTED_DONE,\n  UPDATE_BLOCK_NUMBER: UPDATE_BLOCK_NUMBER,\n  SAVE_QUERY_VAL: SAVE_QUERY_VAL\n};",{"version":3,"sources":["/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/store/mutations.js"],"names":["store","Toast","ADD_NOTIFICATION","state","newNotif","notifications","set","ADD_SWAP_TRANSACTION","newTx","transactions","ADD_CUSTOM_PATH","paths","customPaths","GETTING_STARTED_DONE","gettingStartedDone","UPDATE_BLOCK_NUMBER","blockNumber","CHECK_IF_ONLINE","status","online","fetch","then","res","json","catch","e","responseHandler","ERROR","darkList","darklist","data","timestamp","Date","now","CLEAR_WALLET","wallet","account","balance","address","isHardWare","identifier","DECRYPT_WALLET","getAddressString","isHardware","hasOwnProperty","getNickname","getKeystore","INIT_STATES","stateObj","Object","keys","forEach","key","SET_ACCOUNT_BALANCE","SET_ENS","ens","SET_GAS_PRICE","val","gasPrice","SET_LAST_PATH","path","SET_WEB3_INSTANCE","web3","SWITCH_NETWORK","networkObj","network","_netObj","assign","type","name","UPDATE_NOTIFICATION","UPDATE_SWAP_TRANSACTION","TOGGLE_SIDEMENU","sidemenuOpen","SAVE_QUERY_VAL","newQuery","linkQuery"],"mappings":"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","sourcesContent":["import store from 'store';\nimport { Toast } from '@/helpers';\n\nconst ADD_NOTIFICATION = function(state, newNotif) {\n  state.notifications = newNotif;\n  store.set('notifications', newNotif);\n};\n\nconst ADD_SWAP_TRANSACTION = function(state, newTx) {\n  state.transactions = newTx;\n  store.set('transactions', newTx);\n};\n\nconst ADD_CUSTOM_PATH = function(state, paths) {\n  state.customPaths = paths;\n  store.set('customPaths', paths);\n};\n\nconst GETTING_STARTED_DONE = function(state) {\n  state.gettingStartedDone = true;\n};\n\nconst UPDATE_BLOCK_NUMBER = function(state, blockNumber) {\n  state.blockNumber = blockNumber;\n};\n\nconst CHECK_IF_ONLINE = async function(state, status) {\n  state.online = status;\n  if (state.online) {\n    const darkList = await fetch(\n      'https://raw.githubusercontent.com/MyEtherWallet/ethereum-lists/master/src/addresses/addresses-darklist.json'\n    )\n      .then(res => res.json())\n      .catch(e => {\n        Toast.responseHandler(e, Toast.ERROR);\n      });\n    state.darklist = {\n      data: darkList,\n      timestamp: Date.now()\n    };\n  }\n};\n\nconst CLEAR_WALLET = function(state) {\n  state.wallet = null;\n  state.account = {\n    balance: 0,\n    address: null,\n    isHardWare: null,\n    identifier: ''\n  };\n};\n\nconst DECRYPT_WALLET = function(state, wallet) {\n  state.wallet = wallet;\n  state.account['address'] = wallet.getAddressString();\n  state.account['isHardware'] = wallet.isHardware;\n  state.account['identifier'] = wallet.identifier;\n  if (!wallet.hasOwnProperty('isHardWare')) {\n    state.account['nickname'] = wallet.getNickname();\n    state.account['keystore'] = wallet.getKeystore();\n  }\n};\n\nconst INIT_STATES = function(state, stateObj) {\n  Object.keys(state).forEach(key => {\n    state[key] = stateObj[key];\n  });\n};\n\nconst SET_ACCOUNT_BALANCE = function(state, balance) {\n  state.account.balance = balance;\n};\n\nconst SET_ENS = function(state, ens) {\n  state.ens = ens;\n};\n\nconst SET_GAS_PRICE = function(state, val) {\n  state.gasPrice = val;\n  store.set('gasPrice', val);\n};\n\nconst SET_LAST_PATH = function(state, val) {\n  state.path = val;\n};\n\nconst SET_WEB3_INSTANCE = function(state, web3) {\n  state.web3 = web3;\n};\n\nconst SWITCH_NETWORK = function(state, networkObj) {\n  state.network = networkObj;\n  const _netObj = Object.assign({}, networkObj);\n  if (_netObj.type.name !== 'CUS') {\n    _netObj.type = {\n      name: networkObj.type.name\n    };\n  }\n  store.set('network', _netObj);\n};\n\nconst UPDATE_NOTIFICATION = function(state, newNotif) {\n  state.notifications = newNotif;\n  store.set('notifications', newNotif);\n};\n\nconst UPDATE_SWAP_TRANSACTION = function(state, newTx) {\n  state.transactions = newTx;\n  store.set('transactions', newTx);\n};\n\nconst TOGGLE_SIDEMENU = function(state) {\n  state.sidemenuOpen = !state.sidemenuOpen;\n};\n\nconst SAVE_QUERY_VAL = function(state, newQuery) {\n  state.linkQuery = newQuery;\n};\n\nexport default {\n  ADD_NOTIFICATION,\n  ADD_SWAP_TRANSACTION,\n  ADD_CUSTOM_PATH,\n  CHECK_IF_ONLINE,\n  CLEAR_WALLET,\n  DECRYPT_WALLET,\n  INIT_STATES,\n  SET_ACCOUNT_BALANCE,\n  SET_LAST_PATH,\n  SET_GAS_PRICE,\n  SET_ENS,\n  SET_WEB3_INSTANCE,\n  SWITCH_NETWORK,\n  UPDATE_NOTIFICATION,\n  UPDATE_SWAP_TRANSACTION,\n  TOGGLE_SIDEMENU,\n  GETTING_STARTED_DONE,\n  UPDATE_BLOCK_NUMBER,\n  SAVE_QUERY_VAL\n};\n"]}]}