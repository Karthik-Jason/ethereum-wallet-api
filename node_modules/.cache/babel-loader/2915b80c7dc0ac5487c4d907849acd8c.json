{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/layouts/InterfaceLayout/containers/NFTManagerContainer/NFTManagerContainer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/layouts/InterfaceLayout/containers/NFTManagerContainer/NFTManagerContainer.vue","mtime":1574664278306},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js","mtime":1574664275010},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js","mtime":1574664277774}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.number.is-nan\";\nimport _toConsumableArray from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.array.find-index\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es7.object.values\";\nimport _defineProperty from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport store from 'store';\nimport LoadingSign from '@/components/LoadingSign';\nimport InterfaceContainerTitle from '@/layouts/InterfaceLayout/components/InterfaceContainerTitle';\nimport ContentBlockTitle from '@/layouts/InterfaceLayout/components/ContentBlockTitle';\nimport NFTSideMenu from '@/layouts/InterfaceLayout/containers/NFTManagerContainer/components/NFTSideMenu';\nimport NftDetails from \"./components/NftDetails\";\nimport NftCustomAddModal from \"./components/NftCustomAddModal\";\nimport NftCustomConfirmRemove from \"./components/NftCustomConfirmRemove\";\nimport { mapState } from 'vuex';\nimport hexDecoder from \"./binaryDecoderNFT\";\nimport { nftABI } from \"./abis\";\nimport StandardButton from '@/components/Buttons/StandardButton';\nimport placeholderImage from '@/assets/images/icons/defaultToken.png';\nimport utils from 'web3-utils';\nvar URL_BASE = 'https://nft.mewapi.io/nft';\nexport default {\n  components: {\n    'nft-custom-add-modal': NftCustomAddModal,\n    'nft-custom-confirm-remove-modal': NftCustomConfirmRemove,\n    'loading-sign': LoadingSign,\n    'content-block-title': ContentBlockTitle,\n    'nft-side-menu': NFTSideMenu,\n    'interface-container-title': InterfaceContainerTitle,\n    'nft-details': NftDetails,\n    'standard-button': StandardButton\n  },\n  filters: {\n    ConcatToken: function ConcatToken(value) {\n      if (!value) return '';\n      if (value.length > 20) return \"\".concat(value.substr(0, 15), \"...\").concat(value.substr(value.length - 6));\n      return value;\n    }\n  },\n  data: function data() {\n    return {\n      nftABI: nftABI,\n      countPerPage: 9,\n      nftConfig: [],\n      tokenHelper: {},\n      mayHaveTokens: [true, true],\n      countsRetrieved: false,\n      showDetails: false,\n      reLoading: false,\n      selectedContract: '0x06012c8cf97bead5deae237070f9587f8e7a266d',\n      detailsFor: {},\n      nftTokens: {},\n      nftData: {},\n      ownedTokens: [],\n      tokenContractAddress: '0xeA3352C1a3480Ac5a32Fcd1F2854529BA7193F14',\n      sentUpdate: 0,\n      customNFTs: [],\n      forRemoval: {},\n      collectionLoading: false,\n      onlyCustom: {\n        title: this.$t('dapps.addCustomNFT'),\n        buttonStyle: 'green',\n        helpCenter: false,\n        noMinWidth: true,\n        fullWidth: false\n      },\n      nftObjectClone: {}\n    };\n  },\n  computed: _objectSpread({}, mapState(['account', 'web3', 'online', 'network']), {\n    endIndex: function endIndex() {\n      if (this.nftData[this.selectedContract]) {\n        if (!this.nftData[this.selectedContract].details) return 0;\n        var ids_retrieved = this.nftData[this.selectedContract].details.length;\n        var increment = ids_retrieved > this.countPerPage ? this.countPerPage : ids_retrieved;\n        return this.nftData[this.selectedContract].currentIndex + increment;\n      }\n    },\n    nftTitle: function nftTitle() {\n      if (this.nftData[this.selectedContract]) {\n        return this.nftData[this.selectedContract].title;\n      }\n\n      return 'Loading';\n    },\n    nftToShow: function nftToShow() {\n      if (this.nftData[this.selectedContract]) {\n        if (!this.nftData[this.selectedContract].details) return [];\n        return this.nftData[this.selectedContract].details.length > this.countPerPage ? this.nftData[this.selectedContract].details.slice(this.nftData[this.selectedContract].currentIndex, this.nftData[this.selectedContract].currentIndex + this.countPerPage) : this.nftData[this.selectedContract].details;\n      }\n\n      return [];\n    },\n    ntfCount: function ntfCount() {\n      if (this.nftData[this.selectedContract]) {\n        return this.$t('dapps.nftOwnCount', {\n          perPage: this.countPerPage,\n          count: this.nftData[this.selectedContract].count\n        });\n      }\n\n      return this.$t('dapps.noneOwned');\n    },\n    selectedNtf: function selectedNtf() {\n      if (this.nftData[this.selectedContract]) {\n        return this.nftData[this.selectedContract];\n      }\n\n      return {};\n    },\n    showNextButton: function showNextButton() {\n      if (this.nftData[this.selectedContract]) {\n        var ids_retrieved = this.nftData[this.selectedContract].count;\n        return this.endIndex !== ids_retrieved && this.endIndex <= ids_retrieved;\n      }\n    },\n    sideMenuData: function sideMenuData() {\n      return this.nftData;\n    },\n    startIndex: function startIndex() {\n      if (this.nftData[this.selectedContract]) {\n        return this.nftData[this.selectedContract].currentIndex;\n      }\n\n      return 0;\n    },\n    activeAddress: function activeAddress() {\n      return this.account.address;\n    },\n    hasNfts: function hasNfts() {\n      return Object.values(this.nftData).some(function (entry) {\n        return entry.count > 0;\n      });\n    },\n    isReady: function isReady() {\n      return this.isOnlineAndEth && this.countsRetrieved;\n    },\n    isOnlineAndEth: function isOnlineAndEth() {\n      return this.online && this.network.type.name === 'ETH';\n    }\n  }),\n  watch: {},\n  mounted: function () {\n    var _mounted = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee() {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return this.setup();\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function mounted() {\n      return _mounted.apply(this, arguments);\n    }\n\n    return mounted;\n  }(),\n  methods: {\n    addCustom: function addCustom(address, symbol) {\n      this.reLoading = true;\n      this.customNFTs.push({\n        ERC721Extension: true,\n        contract: address,\n        customNft: true,\n        title: symbol\n      });\n      this.$refs.customModal.$refs.modal.hide();\n      store.set('customNFTs', this.customNFTs);\n      this.sentUpdate += 1;\n      this.setup();\n    },\n    removeCustomNft: function removeCustomNft(item) {\n      this.reLoading = true;\n      var customNFTs = store.get('customNFTs');\n\n      if (customNFTs !== undefined && customNFTs !== null) {\n        var entryIndex = customNFTs.findIndex(function (entry) {\n          return item.contract === entry.contract;\n        });\n        customNFTs.splice(entryIndex, 1);\n        store.set('customNFTs', customNFTs);\n        this.setup();\n        this.sentUpdate += 1;\n      }\n    },\n    openRemovalConfirmModal: function openRemovalConfirmModal(item) {\n      this.forRemoval = item;\n      this.$refs.customRemoveModal.$refs.modal.show();\n    },\n    openCustomModal: function openCustomModal() {\n      this.$refs.customModal.$refs.modal.show();\n    },\n    hasLoaded: function hasLoaded(nft) {\n      this.$set(nft, 'loaded', true);\n    },\n    hasImage: function hasImage(nft) {\n      if (nft.customNft) {\n        return true;\n      }\n\n      if (nft.loaded) {\n        return true;\n      }\n    },\n    removeSentNft: function removeSentNft(nft) {\n      this.nftObjectClone = utils._.clone(this.nftData[nft.contract]);\n      var afterSent = this.nftData[nft.contract].details.filter(function (entry) {\n        return entry.token !== nft.token;\n      });\n      this.$set(this.nftData[nft.contract], 'details', afterSent);\n      this.nftData[nft.contract].count -= 1;\n      if (this.nftData[nft.contract].count === 0) this.sentUpdate += 1;\n      this.showDetails = false;\n    },\n    resetNFT: function resetNFT(nft) {\n      this.nftData[nft.contract] = this.nftObjectClone;\n    },\n    changeSelectedContract: function changeSelectedContract(selectedContract) {\n      this.selectedContract = selectedContract;\n      this.showDetails = false;\n    },\n    comeBack: function comeBack() {\n      this.showDetails = false;\n    },\n    getImage: function getImage(nft) {\n      if (nft.customNft) {\n        return placeholderImage;\n      }\n\n      return nft.image;\n    },\n    setup: function () {\n      var _setup = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var stateItems, customNFTs, configData, nftConfig;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                stateItems = {\n                  count: 0,\n                  selected: false,\n                  startIndex: 0,\n                  priorIndex: 0,\n                  currentIndex: 0,\n                  details: []\n                };\n                customNFTs = store.get('customNFTs');\n\n                if (customNFTs !== undefined && customNFTs !== null) {\n                  this.customNFTs = customNFTs;\n                }\n\n                _context2.next = 5;\n                return this.getTokenConfig();\n\n              case 5:\n                configData = _context2.sent;\n                nftConfig = configData.map(function (entry) {\n                  return _objectSpread({}, entry, {\n                    contract: entry.contractAddress\n                  });\n                }).reduce(function (accumulator, currentValue) {\n                  if (currentValue.active) {\n                    accumulator.push(currentValue);\n                  }\n\n                  return accumulator;\n                }, []);\n                this.nftConfig = [].concat(_toConsumableArray(this.customNFTs), _toConsumableArray(nftConfig));\n                this.nftData = this.nftConfig.reduce(function (accumulator, currentValue) {\n                  accumulator[currentValue.contract] = _objectSpread({}, currentValue, {}, stateItems);\n                  return accumulator;\n                }, {});\n\n                if (this.network.type.name === 'ETH') {\n                  this.getOwnedCounts();\n                  this.getOwned();\n                }\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function setup() {\n        return _setup.apply(this, arguments);\n      }\n\n      return setup;\n    }(),\n    getNftImagePath: function () {\n      var _getNftImagePath = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3(contract, token) {\n        var image;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return fetch(\"\".concat(URL_BASE, \"?contract=\").concat(contract, \"&token=\").concat(token), {\n                  mode: 'cors',\n                  cache: 'no-cache',\n                  method: 'GET'\n                });\n\n              case 2:\n                image = _context3.sent;\n                _context3.next = 5;\n                return image.json();\n\n              case 5:\n                return _context3.abrupt(\"return\", _context3.sent);\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function getNftImagePath(_x, _x2) {\n        return _getNftImagePath.apply(this, arguments);\n      }\n\n      return getNftImagePath;\n    }(),\n    getOwnedCounts: function () {\n      var _getOwnedCounts = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4() {\n        var _this = this;\n\n        var address,\n            supportedNftTokens,\n            tokenContract,\n            res,\n            _args4 = arguments;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                address = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : this.activeAddress;\n                supportedNftTokens = this.nftConfig.filter(function (entry) {\n                  return entry.ERC721Extension;\n                }).map(function (entry) {\n                  return entry.contract;\n                });\n                tokenContract = new this.web3.eth.Contract(nftABI);\n                tokenContract.options.address = this.tokenContractAddress;\n                _context4.next = 6;\n                return tokenContract.methods.getTokenBalances(supportedNftTokens, address.toLowerCase()).call();\n\n              case 6:\n                res = _context4.sent;\n                hexDecoder(res).map(function (val, idx) {\n                  _this.nftData[supportedNftTokens[idx]].count = Number.isNaN(val.toNumber()) ? 0 : val.toNumber();\n                  return val.toString();\n                });\n\n              case 8:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getOwnedCounts() {\n        return _getOwnedCounts.apply(this, arguments);\n      }\n\n      return getOwnedCounts;\n    }(),\n    getOwned: function () {\n      var _getOwned = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee5() {\n        var address,\n            nftData,\n            supportedNftTokens,\n            result,\n            _args5 = arguments;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                address = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : this.activeAddress;\n                nftData = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : this.nftData;\n\n                if (this.processing) {\n                  _context5.next = 11;\n                  break;\n                }\n\n                this.processing = true;\n                supportedNftTokens = Object.keys(nftData);\n                _context5.next = 7;\n                return this.getOwnedTokens(supportedNftTokens, address, nftData);\n\n              case 7:\n                result = _context5.sent;\n                this.ready = true;\n                this.processing = false;\n                return _context5.abrupt(\"return\", result);\n\n              case 11:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getOwned() {\n        return _getOwned.apply(this, arguments);\n      }\n\n      return getOwned;\n    }(),\n    getOwnedNonStandard: function () {\n      var _getOwnedNonStandard = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee6(contract, address) {\n        var _this2 = this;\n\n        var offset,\n            limit,\n            _args6 = arguments;\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                offset = _args6.length > 2 && _args6[2] !== undefined ? _args6[2] : 0;\n                limit = _args6.length > 3 && _args6[3] !== undefined ? _args6[3] : this.countPerPage;\n                fetch(\"\".concat(URL_BASE, \"?nonStandardContract=\").concat(contract, \"&address=\").concat(address, \"&offset=\").concat(offset, \"&limit=\").concat(limit), {\n                  mode: 'cors',\n                  cache: 'no-cache',\n                  method: 'GET'\n                }).then(function (data) {\n                  return data.json();\n                }).then(function (rawJson) {\n                  _this2.nftData[contract].count = rawJson.total;\n                  _this2.countsRetrieved = true;\n\n                  var getNestedObject = function getNestedObject(nestedObj, pathArr, token) {\n                    return pathArr.reduce(function (obj, key) {\n                      if (key === '@tokenvalue@') {\n                        key = token.toString();\n                      }\n\n                      return obj && obj[key] !== 'undefined' ? obj[key] : undefined;\n                    }, nestedObj);\n                  };\n\n                  var metadataKeys = _this2.nftData[contract].metadataKeys || ['kitties'];\n                  var imageKey = _this2.nftData[contract].imageKey || 'image_url_png';\n                  var list = getNestedObject(rawJson, metadataKeys).map(function (val) {\n                    return {\n                      contract: contract,\n                      token: val.id,\n                      image: val[imageKey] ? \"\".concat(URL_BASE, \"/image?path=\").concat(val[imageKey]) : ''\n                    };\n                  });\n                  _this2.nftData[contract].details = list.slice(0, 9);\n\n                  _this2.$set(_this2.nftData[contract], 'details', list.slice(0, 9));\n\n                  return _this2.nftData[contract].details;\n                }).then(function (list) {\n                  if (!list) return;\n\n                  if (list.length > 0) {\n                    var retrieveCount = list.length > _this2.countPerPage ? _this2.countPerPage : list.length;\n\n                    var _loop = function _loop(j) {\n                      if (!Number.isNaN(list[j].token) && list[j].image === '') {\n                        _this2.getNftImagePath(contract, list[j].token).then(function (image) {\n                          _this2.nftData[contract].details[j].image = \"\".concat(URL_BASE, \"/image?path=\").concat(image.image);\n                        }).catch(function () {\n                          if (_this2.nftData[contract].details[j]) {\n                            _this2.nftData[contract].details[j].image = '';\n                          }\n                        });\n                      }\n                    };\n\n                    for (var j = 0; j < retrieveCount; j++) {\n                      _loop(j);\n                    }\n                  }\n\n                  setTimeout(function () {\n                    _this2.reLoading = false;\n                  }, 3000);\n                });\n\n              case 3:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function getOwnedNonStandard(_x3, _x4) {\n        return _getOwnedNonStandard.apply(this, arguments);\n      }\n\n      return getOwnedNonStandard;\n    }(),\n    getOwnedStandard: function () {\n      var _getOwnedStandard = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee7(contract, offset) {\n        var _this3 = this;\n\n        var count,\n            address,\n            tokenContract,\n            custom,\n            _args7 = arguments;\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                count = _args7.length > 2 && _args7[2] !== undefined ? _args7[2] : this.countPerPage;\n                address = _args7.length > 3 && _args7[3] !== undefined ? _args7[3] : this.activeAddress;\n                tokenContract = _args7.length > 4 && _args7[4] !== undefined ? _args7[4] : undefined;\n                custom = _args7.length > 5 && _args7[5] !== undefined ? _args7[5] : false;\n\n                if (!tokenContract) {\n                  tokenContract = new this.web3.eth.Contract(nftABI);\n                  tokenContract.options.address = this.tokenContractAddress;\n                }\n\n                tokenContract.methods.getOwnedTokens(contract, address.toLowerCase(), offset, count).call().then(function (res) {\n                  return hexDecoder(res).map(function (val) {\n                    var content = {\n                      contract: contract,\n                      token: val.toNumber(),\n                      image: ''\n                    };\n\n                    if (custom) {\n                      content.customNft = true;\n                      content.token = val.toFixed(0).toString();\n                    }\n\n                    return content;\n                  });\n                }).then(function (list) {\n                  if (!list) return;\n                  _this3.nftData[contract].details = list;\n\n                  _this3.$set(_this3.nftData[contract], 'details', list);\n\n                  if (list.length > 0) {\n                    var retrieveCount = list.length > _this3.countPerPage ? _this3.countPerPage : list.length;\n\n                    var _loop2 = function _loop2(j) {\n                      if (!Number.isNaN(list[j].token) && !list[j].customNft) {\n                        _this3.getNftImagePath(contract, list[j].token).then(function (image) {\n                          _this3.nftData[contract].details[j].image = \"\".concat(URL_BASE, \"/image?path=\").concat(image.image);\n                        }).catch(function () {\n                          if (_this3.nftData[contract].details[j]) {\n                            _this3.nftData[contract].details[j].image = '';\n                          }\n                        });\n                      } else if (list[j].customNft) {\n                        _this3.nftData[contract].details[j].image = '';\n                      }\n                    };\n\n                    for (var j = 0; j < retrieveCount; j++) {\n                      _loop2(j);\n                    }\n                  }\n\n                  _this3.collectionLoading = false;\n                });\n\n              case 6:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function getOwnedStandard(_x5, _x6) {\n        return _getOwnedStandard.apply(this, arguments);\n      }\n\n      return getOwnedStandard;\n    }(),\n    getOwnedTokens: function () {\n      var _getOwnedTokens = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee8(contracts, address, nftData) {\n        var tokenContract, i;\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                tokenContract = new this.web3.eth.Contract(nftABI);\n                tokenContract.options.address = this.tokenContractAddress;\n                i = 0;\n\n              case 3:\n                if (!(i < contracts.length)) {\n                  _context8.next = 10;\n                  break;\n                }\n\n                _context8.next = 6;\n                return this.loadForContract(contracts[i], nftData, address, tokenContract);\n\n              case 6:\n                nftData = _context8.sent;\n\n              case 7:\n                i++;\n                _context8.next = 3;\n                break;\n\n              case 10:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function getOwnedTokens(_x7, _x8, _x9) {\n        return _getOwnedTokens.apply(this, arguments);\n      }\n\n      return getOwnedTokens;\n    }(),\n    getNext: function getNext() {\n      var address = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.account.address;\n      this.collectionLoading = true;\n      var content = this.nftData[this.selectedContract];\n      var offset = content.currentIndex + this.countPerPage;\n\n      if (offset <= content.count) {\n        // update offsets if not at the end\n        content.priorIndex = content.currentIndex;\n        content.currentIndex = offset;\n      } else {\n        // update offsets if not at the end\n        content.priorIndex = content.currentIndex;\n        content.currentIndex = content.count;\n      }\n\n      if (content.nonStandard) {\n        this.getOwnedNonStandard(content.contract, address, offset, this.countPerPage);\n      } else {\n        if (content.customNft) {\n          this.getOwnedStandard(content.contract, offset, this.countPerPage, undefined, undefined, true);\n        } else {\n          this.getOwnedStandard(content.contract, offset, this.countPerPage);\n        }\n      }\n    },\n    getPrevious: function getPrevious() {\n      var address = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.activeAddress;\n      this.collectionLoading = true;\n      var content = this.nftData[this.selectedContract];\n      var offset = content.currentIndex - content.priorIndex;\n\n      if (content.currentIndex - offset >= 0) {\n        content.currentIndex = content.currentIndex - offset;\n      } else {\n        content.currentIndex = 0;\n      }\n\n      if (content.priorIndex - offset >= 0) {\n        content.priorIndex = content.priorIndex - offset;\n      } else {\n        content.priorIndex = 0;\n      }\n\n      if (content.currentIndex === 0 && content.priorIndex === 0) {\n        offset = 0;\n      } else {\n        offset = content.currentIndex;\n      }\n\n      if (offset >= 0) {\n        if (content.nonStandard) {\n          this.getOwnedNonStandard(content.contract, address, offset, this.countPerPage);\n        } else {\n          if (content.customNft) {\n            this.getOwnedStandard(content.contract, offset, this.countPerPage, undefined, undefined, true);\n          } else {\n            this.getOwnedStandard(content.contract, offset, this.countPerPage);\n          }\n        }\n      }\n    },\n    getTokenConfig: function () {\n      var _getTokenConfig = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee9() {\n        var data;\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return fetch(\"\".concat(URL_BASE, \"?supported=true\"), {\n                  mode: 'cors',\n                  cache: 'no-cache',\n                  method: 'GET',\n                  'Cache-Control': 'no-cache'\n                });\n\n              case 2:\n                data = _context9.sent;\n                _context9.next = 5;\n                return data.json();\n\n              case 5:\n                return _context9.abrupt(\"return\", _context9.sent);\n\n              case 6:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9);\n      }));\n\n      function getTokenConfig() {\n        return _getTokenConfig.apply(this, arguments);\n      }\n\n      return getTokenConfig;\n    }(),\n    loadForContract: function () {\n      var _loadForContract = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee10(contract, nftData) {\n        var _this4 = this;\n\n        var address,\n            tokenContract,\n            _args10 = arguments;\n        return regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                address = _args10.length > 2 && _args10[2] !== undefined ? _args10[2] : this.activeAddress;\n                tokenContract = _args10.length > 3 && _args10[3] !== undefined ? _args10[3] : null;\n\n                if (!nftData[contract].ERC721Extension) {\n                  _context10.next = 7;\n                  break;\n                }\n\n                this.getOwnedStandard(contract, 0, this.countPerPage, address, tokenContract, nftData[contract].customNft).then(function (result) {\n                  _this4.nftData[contract].details = result;\n                });\n                return _context10.abrupt(\"return\", nftData);\n\n              case 7:\n                if (nftData[contract].nonStandard) {\n                  this.getOwnedNonStandard(contract, address);\n                }\n\n              case 8:\n                return _context10.abrupt(\"return\", nftData);\n\n              case 9:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function loadForContract(_x10, _x11) {\n        return _loadForContract.apply(this, arguments);\n      }\n\n      return loadForContract;\n    }(),\n    showNftDetails: function showNftDetails(nft) {\n      this.detailsFor = nft;\n      this.showDetails = true;\n    }\n  }\n};",{"version":3,"sources":["NFTManagerContainer.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"crypto-kitties-manager\">\n    <interface-container-title :title=\"$t('common.ntfManager')\" />\n    <div\n      v-if=\"!isReady && isOnlineAndEth\"\n      class=\"inner-side-menu content-container\"\n    >\n      <nft-side-menu :supported-nft-obj=\"sideMenuData\" :nft-config=\"nftConfig\">\n      </nft-side-menu>\n      <loading-sign :loadingmessage1=\"$t('common.loading')\" />\n    </div>\n    <div v-if=\"isReady && hasNfts\" class=\"inner-side-menu content-container\">\n      <nft-side-menu\n        :supported-nft-obj=\"sideMenuData\"\n        :nft-config=\"nftConfig\"\n        :initial-highlighted=\"selectedContract\"\n        :loading-complete=\"countsRetrieved\"\n        :sent-update=\"sentUpdate\"\n        @selected=\"changeSelectedContract\"\n        @openCustomModal=\"openCustomModal\"\n        @removeCustomNft=\"openRemovalConfirmModal\"\n      >\n      </nft-side-menu>\n      <div v-if=\"showDetails\">\n        <nft-details\n          :nft=\"detailsFor\"\n          :selected-title=\"nftTitle\"\n          @nftTransferred=\"removeSentNft\"\n          @resetNFT=\"resetNFT\"\n          @back=\"comeBack\"\n        ></nft-details>\n      </div>\n      <div v-if=\"!showDetails\">\n        <content-block-title :button-text=\"ntfCount\" :title=\"nftTitle\" />\n        <!-- TODO Clean Up Design and Improve Mobile -->\n        <div class=\"grid-container\">\n          <div v-for=\"nft in nftToShow\" :key=\"nft.key\" class=\"kitty\">\n            <div class=\"kitty-img\" @click=\"showNftDetails(nft)\">\n              <div v-show=\"!hasImage(nft)\" class=\"placeholder\">\n                <div class=\"animated-background\"></div>\n              </div>\n              <div v-show=\"hasImage(nft)\">\n                <img :src=\"getImage(nft)\" alt @load=\"hasLoaded(nft)\" />\n              </div>\n              <p>#{{ nft.token | ConcatToken }}</p>\n            </div>\n          </div>\n          <div v-show=\"selectedNtf.count > 9\" class=\"internal-nav-container\">\n            <span\n              v-show=\"startIndex > 0\"\n              class=\"internal-nav prev\"\n              @click=\"getPrevious()\"\n            >\n              <i class=\"fa fa-chevron-left\"></i>\n            </span>\n            <span v-show=\"!collectionLoading\">{{\n              $t('dapps.showingRange', { first: startIndex, last: endIndex })\n            }}</span>\n            <span v-show=\"collectionLoading\">{{\n              $t('dapps.loadingRange', { first: startIndex, last: endIndex })\n            }}</span>\n            <span\n              v-show=\"showNextButton\"\n              class=\"internal-nav next\"\n              @click=\"getNext()\"\n            >\n              <i class=\"fa fa-chevron-right\"></i>\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div v-if=\"isReady && !hasNfts\" class=\"inner-side-menu content-container\">\n      <div v-show=\"!reLoading\">\n        <h3 class=\"no-nft-notice\">{{ $t('dapps.noNFTs') }}</h3>\n        <standard-button\n          :options=\"onlyCustom\"\n          @click.native=\"openCustomModal\"\n        />\n      </div>\n      <span v-show=\"reLoading\">{{ $t('dapps.reloading') }}</span>\n    </div>\n\n    <div v-if=\"!isOnlineAndEth\">\n      <div v-show=\"!online\">\n        NFTs are\n      </div>\n      <div v-show=\"online\">\n        {{ $t('dapps.removeCustomNFT', { value: network.type.name_long }) }}\n      </div>\n    </div>\n    <div class=\"flex--row--align-start mft-manager-content-container\"></div>\n    <nft-custom-add-modal\n      ref=\"customModal\"\n      :add-token=\"addCustom\"\n      :active-address=\"activeAddress\"\n    ></nft-custom-add-modal>\n    <nft-custom-confirm-remove-modal\n      ref=\"customRemoveModal\"\n      :for-removal=\"forRemoval\"\n      @remove=\"removeCustomNft\"\n    >\n    </nft-custom-confirm-remove-modal>\n  </div>\n</template>\n\n<script>\nimport store from 'store';\nimport LoadingSign from '@/components/LoadingSign';\nimport InterfaceContainerTitle from '@/layouts/InterfaceLayout/components/InterfaceContainerTitle';\nimport ContentBlockTitle from '@/layouts/InterfaceLayout/components/ContentBlockTitle';\nimport NFTSideMenu from '@/layouts/InterfaceLayout/containers/NFTManagerContainer/components/NFTSideMenu';\nimport NftDetails from './components/NftDetails';\nimport NftCustomAddModal from './components/NftCustomAddModal';\nimport NftCustomConfirmRemove from './components/NftCustomConfirmRemove';\nimport { mapState } from 'vuex';\nimport hexDecoder from './binaryDecoderNFT';\nimport { nftABI } from './abis';\nimport StandardButton from '@/components/Buttons/StandardButton';\nimport placeholderImage from '@/assets/images/icons/defaultToken.png';\nimport utils from 'web3-utils';\n\nconst URL_BASE = 'https://nft.mewapi.io/nft';\n\nexport default {\n  components: {\n    'nft-custom-add-modal': NftCustomAddModal,\n    'nft-custom-confirm-remove-modal': NftCustomConfirmRemove,\n    'loading-sign': LoadingSign,\n    'content-block-title': ContentBlockTitle,\n    'nft-side-menu': NFTSideMenu,\n    'interface-container-title': InterfaceContainerTitle,\n    'nft-details': NftDetails,\n    'standard-button': StandardButton\n  },\n  filters: {\n    ConcatToken(value) {\n      if (!value) return '';\n      if (value.length > 20)\n        return `${value.substr(0, 15)}...${value.substr(value.length - 6)}`;\n      return value;\n    }\n  },\n  data() {\n    return {\n      nftABI,\n      countPerPage: 9,\n      nftConfig: [],\n      tokenHelper: {},\n      mayHaveTokens: [true, true],\n      countsRetrieved: false,\n      showDetails: false,\n      reLoading: false,\n      selectedContract: '0x06012c8cf97bead5deae237070f9587f8e7a266d',\n      detailsFor: {},\n      nftTokens: {},\n      nftData: {},\n      ownedTokens: [],\n      tokenContractAddress: '0xeA3352C1a3480Ac5a32Fcd1F2854529BA7193F14',\n      sentUpdate: 0,\n      customNFTs: [],\n      forRemoval: {},\n      collectionLoading: false,\n      onlyCustom: {\n        title: this.$t('dapps.addCustomNFT'),\n        buttonStyle: 'green',\n        helpCenter: false,\n        noMinWidth: true,\n        fullWidth: false\n      },\n      nftObjectClone: {}\n    };\n  },\n  computed: {\n    ...mapState(['account', 'web3', 'online', 'network']),\n    endIndex() {\n      if (this.nftData[this.selectedContract]) {\n        if (!this.nftData[this.selectedContract].details) return 0;\n        const ids_retrieved = this.nftData[this.selectedContract].details\n          .length;\n        const increment =\n          ids_retrieved > this.countPerPage ? this.countPerPage : ids_retrieved;\n        return this.nftData[this.selectedContract].currentIndex + increment;\n      }\n    },\n    nftTitle() {\n      if (this.nftData[this.selectedContract]) {\n        return this.nftData[this.selectedContract].title;\n      }\n      return 'Loading';\n    },\n    nftToShow() {\n      if (this.nftData[this.selectedContract]) {\n        if (!this.nftData[this.selectedContract].details) return [];\n        return this.nftData[this.selectedContract].details.length >\n          this.countPerPage\n          ? this.nftData[this.selectedContract].details.slice(\n              this.nftData[this.selectedContract].currentIndex,\n              this.nftData[this.selectedContract].currentIndex +\n                this.countPerPage\n            )\n          : this.nftData[this.selectedContract].details;\n      }\n      return [];\n    },\n    ntfCount() {\n      if (this.nftData[this.selectedContract]) {\n        return this.$t('dapps.nftOwnCount', {\n          perPage: this.countPerPage,\n          count: this.nftData[this.selectedContract].count\n        });\n      }\n\n      return this.$t('dapps.noneOwned');\n    },\n    selectedNtf() {\n      if (this.nftData[this.selectedContract]) {\n        return this.nftData[this.selectedContract];\n      }\n      return {};\n    },\n    showNextButton() {\n      if (this.nftData[this.selectedContract]) {\n        const ids_retrieved = this.nftData[this.selectedContract].count;\n        return (\n          this.endIndex !== ids_retrieved && this.endIndex <= ids_retrieved\n        );\n      }\n    },\n    sideMenuData() {\n      return this.nftData;\n    },\n    startIndex() {\n      if (this.nftData[this.selectedContract]) {\n        return this.nftData[this.selectedContract].currentIndex;\n      }\n      return 0;\n    },\n    activeAddress() {\n      return this.account.address;\n    },\n    hasNfts() {\n      return Object.values(this.nftData).some(entry => entry.count > 0);\n    },\n    isReady() {\n      return this.isOnlineAndEth && this.countsRetrieved;\n    },\n    isOnlineAndEth() {\n      return this.online && this.network.type.name === 'ETH';\n    }\n  },\n  watch: {},\n  async mounted() {\n    await this.setup();\n  },\n  methods: {\n    addCustom(address, symbol) {\n      this.reLoading = true;\n      this.customNFTs.push({\n        ERC721Extension: true,\n        contract: address,\n        customNft: true,\n        title: symbol\n      });\n      this.$refs.customModal.$refs.modal.hide();\n      store.set('customNFTs', this.customNFTs);\n      this.sentUpdate += 1;\n      this.setup();\n    },\n    removeCustomNft(item) {\n      this.reLoading = true;\n      const customNFTs = store.get('customNFTs');\n      if (customNFTs !== undefined && customNFTs !== null) {\n        const entryIndex = customNFTs.findIndex(\n          entry => item.contract === entry.contract\n        );\n        customNFTs.splice(entryIndex, 1);\n        store.set('customNFTs', customNFTs);\n        this.setup();\n        this.sentUpdate += 1;\n      }\n    },\n    openRemovalConfirmModal(item) {\n      this.forRemoval = item;\n      this.$refs.customRemoveModal.$refs.modal.show();\n    },\n    openCustomModal() {\n      this.$refs.customModal.$refs.modal.show();\n    },\n    hasLoaded(nft) {\n      this.$set(nft, 'loaded', true);\n    },\n    hasImage(nft) {\n      if (nft.customNft) {\n        return true;\n      }\n      if (nft.loaded) {\n        return true;\n      }\n    },\n    removeSentNft(nft) {\n      this.nftObjectClone = utils._.clone(this.nftData[nft.contract]);\n      const afterSent = this.nftData[nft.contract].details.filter(entry => {\n        return entry.token !== nft.token;\n      });\n      this.$set(this.nftData[nft.contract], 'details', afterSent);\n      this.nftData[nft.contract].count -= 1;\n      if (this.nftData[nft.contract].count === 0) this.sentUpdate += 1;\n      this.showDetails = false;\n    },\n    resetNFT(nft) {\n      this.nftData[nft.contract] = this.nftObjectClone;\n    },\n    changeSelectedContract(selectedContract) {\n      this.selectedContract = selectedContract;\n      this.showDetails = false;\n    },\n    comeBack() {\n      this.showDetails = false;\n    },\n    getImage(nft) {\n      if (nft.customNft) {\n        return placeholderImage;\n      }\n      return nft.image;\n    },\n    async setup() {\n      const stateItems = {\n        count: 0,\n        selected: false,\n        startIndex: 0,\n        priorIndex: 0,\n        currentIndex: 0,\n        details: []\n      };\n\n      const customNFTs = store.get('customNFTs');\n\n      if (customNFTs !== undefined && customNFTs !== null) {\n        this.customNFTs = customNFTs;\n      }\n      const configData = await this.getTokenConfig();\n\n      const nftConfig = configData\n        .map(entry => {\n          return {\n            ...entry,\n            contract: entry.contractAddress\n          };\n        })\n        .reduce((accumulator, currentValue) => {\n          if (currentValue.active) {\n            accumulator.push(currentValue);\n          }\n          return accumulator;\n        }, []);\n\n      this.nftConfig = [...this.customNFTs, ...nftConfig];\n      this.nftData = this.nftConfig.reduce((accumulator, currentValue) => {\n        accumulator[currentValue.contract] = {\n          ...currentValue,\n          ...stateItems\n        };\n        return accumulator;\n      }, {});\n\n      if (this.network.type.name === 'ETH') {\n        this.getOwnedCounts();\n        this.getOwned();\n      }\n    },\n    async getNftImagePath(contract, token) {\n      const image = await fetch(\n        `${URL_BASE}?contract=${contract}&token=${token}`,\n        {\n          mode: 'cors',\n          cache: 'no-cache',\n          method: 'GET'\n        }\n      );\n      return await image.json();\n    },\n    async getOwnedCounts(address = this.activeAddress) {\n      const supportedNftTokens = this.nftConfig\n        .filter(entry => entry.ERC721Extension)\n        .map(entry => entry.contract);\n      const tokenContract = new this.web3.eth.Contract(nftABI);\n      tokenContract.options.address = this.tokenContractAddress;\n\n      const res = await tokenContract.methods\n        .getTokenBalances(supportedNftTokens, address.toLowerCase())\n        .call();\n      hexDecoder(res).map((val, idx) => {\n        this.nftData[supportedNftTokens[idx]].count = Number.isNaN(\n          val.toNumber()\n        )\n          ? 0\n          : val.toNumber();\n        return val.toString();\n      });\n    },\n    async getOwned(address = this.activeAddress, nftData = this.nftData) {\n      if (!this.processing) {\n        this.processing = true;\n        const supportedNftTokens = Object.keys(nftData);\n\n        const result = await this.getOwnedTokens(\n          supportedNftTokens,\n          address,\n          nftData\n        );\n        this.ready = true;\n        this.processing = false;\n        return result;\n      }\n    },\n    async getOwnedNonStandard(\n      contract,\n      address,\n      offset = 0,\n      limit = this.countPerPage\n    ) {\n      fetch(\n        `${URL_BASE}?nonStandardContract=${contract}&address=${address}&offset=${offset}&limit=${limit}`,\n        {\n          mode: 'cors',\n          cache: 'no-cache',\n          method: 'GET'\n        }\n      )\n        .then(data => {\n          return data.json();\n        })\n        .then(rawJson => {\n          this.nftData[contract].count = rawJson.total;\n          this.countsRetrieved = true;\n          const getNestedObject = (nestedObj, pathArr, token) => {\n            return pathArr.reduce((obj, key) => {\n              if (key === '@tokenvalue@') {\n                key = token.toString();\n              }\n              return obj && obj[key] !== 'undefined' ? obj[key] : undefined;\n            }, nestedObj);\n          };\n\n          const metadataKeys = this.nftData[contract].metadataKeys || [\n            'kitties'\n          ];\n          const imageKey = this.nftData[contract].imageKey || 'image_url_png';\n\n          const list = getNestedObject(rawJson, metadataKeys).map(val => {\n            return {\n              contract: contract,\n              token: val.id,\n              image: val[imageKey]\n                ? `${URL_BASE}/image?path=${val[imageKey]}`\n                : ''\n            };\n          });\n\n          this.nftData[contract].details = list.slice(0, 9);\n          this.$set(this.nftData[contract], 'details', list.slice(0, 9));\n          return this.nftData[contract].details;\n        })\n        .then(list => {\n          if (!list) return;\n          if (list.length > 0) {\n            const retrieveCount =\n              list.length > this.countPerPage ? this.countPerPage : list.length;\n            for (let j = 0; j < retrieveCount; j++) {\n              if (!Number.isNaN(list[j].token) && list[j].image === '') {\n                this.getNftImagePath(contract, list[j].token)\n                  .then(image => {\n                    this.nftData[contract].details[\n                      j\n                    ].image = `${URL_BASE}/image?path=${image.image}`;\n                  })\n                  .catch(() => {\n                    if (this.nftData[contract].details[j]) {\n                      this.nftData[contract].details[j].image = '';\n                    }\n                  });\n              }\n            }\n          }\n          setTimeout(() => {\n            this.reLoading = false;\n          }, 3000);\n        });\n    },\n    async getOwnedStandard(\n      contract,\n      offset,\n      count = this.countPerPage,\n      address = this.activeAddress,\n      tokenContract = undefined,\n      custom = false\n    ) {\n      if (!tokenContract) {\n        tokenContract = new this.web3.eth.Contract(nftABI);\n        tokenContract.options.address = this.tokenContractAddress;\n      }\n\n      tokenContract.methods\n        .getOwnedTokens(contract, address.toLowerCase(), offset, count)\n        .call()\n        .then(res => {\n          return hexDecoder(res).map(val => {\n            const content = {\n              contract: contract,\n              token: val.toNumber(),\n              image: ''\n            };\n            if (custom) {\n              content.customNft = true;\n              content.token = val.toFixed(0).toString();\n            }\n            return content;\n          });\n        })\n        .then(list => {\n          if (!list) return;\n          this.nftData[contract].details = list;\n          this.$set(this.nftData[contract], 'details', list);\n          if (list.length > 0) {\n            const retrieveCount =\n              list.length > this.countPerPage ? this.countPerPage : list.length;\n            for (let j = 0; j < retrieveCount; j++) {\n              if (!Number.isNaN(list[j].token) && !list[j].customNft) {\n                this.getNftImagePath(contract, list[j].token)\n                  .then(image => {\n                    this.nftData[contract].details[\n                      j\n                    ].image = `${URL_BASE}/image?path=${image.image}`;\n                  })\n                  .catch(() => {\n                    if (this.nftData[contract].details[j]) {\n                      this.nftData[contract].details[j].image = '';\n                    }\n                  });\n              } else if (list[j].customNft) {\n                this.nftData[contract].details[j].image = '';\n              }\n            }\n          }\n          this.collectionLoading = false;\n        });\n    },\n    async getOwnedTokens(contracts, address, nftData) {\n      const tokenContract = new this.web3.eth.Contract(nftABI);\n      tokenContract.options.address = this.tokenContractAddress;\n      for (let i = 0; i < contracts.length; i++) {\n        nftData = await this.loadForContract(\n          contracts[i],\n          nftData,\n          address,\n          tokenContract\n        );\n      }\n    },\n    getNext(address = this.account.address) {\n      this.collectionLoading = true;\n      const content = this.nftData[this.selectedContract];\n      const offset = content.currentIndex + this.countPerPage;\n      if (offset <= content.count) {\n        // update offsets if not at the end\n        content.priorIndex = content.currentIndex;\n        content.currentIndex = offset;\n      } else {\n        // update offsets if not at the end\n        content.priorIndex = content.currentIndex;\n        content.currentIndex = content.count;\n      }\n\n      if (content.nonStandard) {\n        this.getOwnedNonStandard(\n          content.contract,\n          address,\n          offset,\n          this.countPerPage\n        );\n      } else {\n        if (content.customNft) {\n          this.getOwnedStandard(\n            content.contract,\n            offset,\n            this.countPerPage,\n            undefined,\n            undefined,\n            true\n          );\n        } else {\n          this.getOwnedStandard(content.contract, offset, this.countPerPage);\n        }\n      }\n    },\n    getPrevious(address = this.activeAddress) {\n      this.collectionLoading = true;\n      const content = this.nftData[this.selectedContract];\n\n      let offset = content.currentIndex - content.priorIndex;\n\n      if (content.currentIndex - offset >= 0) {\n        content.currentIndex = content.currentIndex - offset;\n      } else {\n        content.currentIndex = 0;\n      }\n\n      if (content.priorIndex - offset >= 0) {\n        content.priorIndex = content.priorIndex - offset;\n      } else {\n        content.priorIndex = 0;\n      }\n\n      if (content.currentIndex === 0 && content.priorIndex === 0) {\n        offset = 0;\n      } else {\n        offset = content.currentIndex;\n      }\n\n      if (offset >= 0) {\n        if (content.nonStandard) {\n          this.getOwnedNonStandard(\n            content.contract,\n            address,\n            offset,\n            this.countPerPage\n          );\n        } else {\n          if (content.customNft) {\n            this.getOwnedStandard(\n              content.contract,\n              offset,\n              this.countPerPage,\n              undefined,\n              undefined,\n              true\n            );\n          } else {\n            this.getOwnedStandard(content.contract, offset, this.countPerPage);\n          }\n        }\n      }\n    },\n    async getTokenConfig() {\n      const data = await fetch(`${URL_BASE}?supported=true`, {\n        mode: 'cors',\n        cache: 'no-cache',\n        method: 'GET',\n        'Cache-Control': 'no-cache'\n      });\n      return await data.json();\n    },\n    async loadForContract(\n      contract,\n      nftData,\n      address = this.activeAddress,\n      tokenContract = null\n    ) {\n      if (nftData[contract].ERC721Extension) {\n        this.getOwnedStandard(\n          contract,\n          0,\n          this.countPerPage,\n          address,\n          tokenContract,\n          nftData[contract].customNft\n        ).then(result => {\n          this.nftData[contract].details = result;\n        });\n\n        return nftData;\n      } else if (nftData[contract].nonStandard) {\n        this.getOwnedNonStandard(contract, address);\n      }\n      return nftData;\n    },\n    showNftDetails(nft) {\n      this.detailsFor = nft;\n      this.showDetails = true;\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'NFTManagerContainer.scss';\n</style>\n"],"sourceRoot":"src/layouts/InterfaceLayout/containers/NFTManagerContainer"}]}