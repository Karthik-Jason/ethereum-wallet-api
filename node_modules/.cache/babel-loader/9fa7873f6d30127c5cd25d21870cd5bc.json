{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/layouts/ExtensionBrowserAction/containers/ExtensionNotification/components/NotificationTypes/SwapNotification/SwapNotification.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/layouts/ExtensionBrowserAction/containers/ExtensionNotification/components/NotificationTypes/SwapNotification/SwapNotification.vue","mtime":1574664278294},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js","mtime":1574664275010},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js","mtime":1574664277774}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.function.name\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport _defineProperty from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.number.constructor\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState } from 'vuex';\nimport '@/assets/images/currency/coins/asFont/cryptocoins.css';\nimport '@/assets/images/currency/coins/asFont/cryptocoins-colors.css';\nimport Arrow from '@/assets/images/etc/single-arrow.svg';\nimport NotificationHeader from \"../../NotificationHeader\";\nimport { providerMap, providerNames } from '@/partners';\nimport { swapOnlyStatuses, notificationStatuses } from '@/helpers/notificationFormatters';\nexport default {\n  components: {\n    'notification-header': NotificationHeader\n  },\n  filters: {\n    concatAddress: function concatAddress(value) {\n      if (!value) return '';\n      return \"\".concat(value.substr(0, 7), \"...\").concat(value.substr(value.length - 7));\n    }\n  },\n  props: {\n    shown: {\n      type: Boolean,\n      default: false\n    },\n    expand: {\n      type: Function,\n      default: function _default() {}\n    },\n    index: {\n      type: Number,\n      default: 0\n    },\n    notice: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    convertToGwei: {\n      type: Function,\n      default: function _default() {}\n    },\n    convertToEth: {\n      type: Function,\n      default: function _default() {}\n    },\n    getFiatValue: {\n      type: Function,\n      default: function _default() {}\n    },\n    dateString: {\n      type: Function,\n      default: function _default() {}\n    },\n    timeString: {\n      type: Function,\n      default: function _default() {}\n    },\n    errorMessageString: {\n      type: Function,\n      default: function _default() {}\n    },\n    hashLink: {\n      type: Function,\n      default: function _default() {}\n    },\n    addressLink: {\n      type: Function,\n      default: function _default() {}\n    },\n    processStatus: {\n      type: Function,\n      default: function _default() {}\n    },\n    childUpdateNotification: {\n      type: Function,\n      default: function _default() {}\n    }\n  },\n  data: function data() {\n    return {\n      arrowImage: Arrow,\n      unreadCount: 0,\n      currentStatus: '',\n      swapStatus: '',\n      timeRemaining: this.notice.body.timeRemaining,\n      providers: providerMap,\n      provider: {},\n      timerInterval: null,\n      statusInterval: null\n    };\n  },\n  computed: _objectSpread({}, mapState(['web3', 'network', 'notifications', 'wallet']), {\n    errorMessage: function errorMessage() {\n      return this.errorMessageString(this.notice);\n    },\n    isError: function isError() {\n      return this.notice.body.error;\n    },\n    txStatus: function txStatus() {\n      return this.processStatus(this.notice.swapStatus);\n    },\n    parseTimeRemaining: function parseTimeRemaining() {\n      var seconds = Math.floor(this.timeRemaining % 60);\n      var minutes = Math.floor(this.timeRemaining / 60 % 60);\n      return seconds >= 10 ? \"\".concat(minutes, \":\").concat(seconds) : \"\".concat(minutes, \":0\").concat(seconds);\n    },\n    timeRemains: function timeRemains() {\n      return this.timeRemaining > 0;\n    }\n  }),\n  watch: {\n    shown: function shown(val) {\n      if (val) {\n        this.startPolling();\n      } else {\n        this.stopPolling();\n      }\n    }\n  },\n  activated: function activated() {\n    if (this.shown) {\n      this.startPolling();\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.stopPolling();\n  },\n  methods: {\n    emitShowDetails: function emitShowDetails() {\n      this.$emit('showDetails', ['swap', this.notice, this.index]);\n    },\n    startPolling: function startPolling() {\n      if (this.notice.body.provider === providerNames.kyber) return;\n      this.provider = providerMap.get(this.notice.body.provider);\n      this.currentStatus = this.notice.swapStatus;\n\n      if (this.timerInterval === null) {\n        this.timeUpdater();\n      }\n\n      if (this.statusInterval === null) {\n        this.statusUpdater();\n      }\n    },\n    stopPolling: function stopPolling() {\n      if (this.timerInterval !== null) {\n        clearInterval(this.timerInterval);\n        this.timerInterval = null;\n      }\n\n      if (this.statusInterval !== null) {\n        clearInterval(this.statusInterval);\n        this.statusInterval = null;\n      }\n    },\n    shouldCheckStatus: function shouldCheckStatus() {\n      return [swapOnlyStatuses.NEW, swapOnlyStatuses.SENT, notificationStatuses.PENDING].includes(this.notice.swapStatus);\n    },\n    statusUpdater: function statusUpdater() {\n      var _this = this;\n\n      var updating = false;\n\n      var getStatus =\n      /*#__PURE__*/\n      function () {\n        var _ref = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee() {\n          var newStatus;\n          return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  if (updating) {\n                    _context.next = 10;\n                    break;\n                  }\n\n                  updating = true;\n                  _context.next = 4;\n                  return _this.provider.getOrderStatus(_this.notice.body, _this.network.type.name);\n\n                case 4:\n                  newStatus = _context.sent;\n\n                  if (!(typeof newStatus === 'undefined')) {\n                    _context.next = 7;\n                    break;\n                  }\n\n                  return _context.abrupt(\"return\");\n\n                case 7:\n                  if (_this.currentStatus !== newStatus) {\n                    _this.currentStatus = newStatus;\n\n                    if (swapOnlyStatuses[newStatus]) {\n                      _this.notice.swapStatus = newStatus;\n                    } else {\n                      _this.notice.swapStatus = newStatus;\n                      _this.notice.status = newStatus;\n                    }\n\n                    _this.childUpdateNotification(_this.notice);\n                  }\n\n                  if (!_this.shouldCheckStatus()) {\n                    clearInterval(_this.statusInterval);\n                  }\n\n                  updating = false;\n\n                case 10:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function getStatus() {\n          return _ref.apply(this, arguments);\n        };\n      }();\n\n      if (this.shouldCheckStatus()) {\n        getStatus();\n        this.statusInterval = setInterval(function () {\n          getStatus();\n\n          if (!_this.shouldCheckStatus()) {\n            clearInterval(_this.statusInterval);\n          }\n        }, 10000);\n      }\n    },\n    timeUpdater: function timeUpdater() {\n      var _this2 = this;\n\n      var updateTime = function updateTime() {\n        _this2.timeRemaining = _this2.notice.body.validFor - parseInt((new Date().getTime() - new Date(_this2.notice.body.createdAt).getTime()) / 1000);\n\n        if ((_this2.notice.swapStatus === swapOnlyStatuses.NEW || _this2.currentStatus === swapOnlyStatuses.NEW) && _this2.timeRemaining <= 0) {\n          _this2.notice.swapStatus = swapOnlyStatuses.CANCELLED;\n          _this2.notice.status = notificationStatuses.FAILED;\n          _this2.notice.body.errorMessage = 'Swap window timeout. Swap Cancelled.';\n          _this2.timeRemaining = -1;\n        }\n\n        _this2.notice.body.timeRemaining = +_this2.timeRemaining;\n\n        _this2.childUpdateNotification(_this2.notice);\n\n        if (+_this2.timeRemaining <= 0) {\n          clearInterval(_this2.timerInterval);\n        }\n      };\n\n      if (this.shouldCheckStatus() && this.notice.body.timeRemaining > 0) {\n        if (this.timeRemaining > 0) {\n          updateTime();\n          this.timerInterval = setInterval(function () {\n            updateTime();\n\n            if (_this2.timeRemaining <= 0) {\n              clearInterval(_this2.timerInterval);\n            }\n          }, 1000);\n        }\n      }\n    }\n  }\n};",{"version":3,"sources":["SwapNotification.vue"],"names":[],"mappings":"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","sourcesContent":["<template lang=\"html\">\n  <div>\n    <notification-header\n      :expand=\"expand\"\n      :notice=\"notice\"\n      :process-status=\"processStatus\"\n      :time-string=\"timeString\"\n      :date-string=\"dateString\"\n    >\n    </notification-header>\n    <div\n      :class=\"[\n        notice.expanded ? '' : 'unexpanded',\n        'notification-body',\n        'notification-content'\n      ]\"\n    >\n      <ul>\n        <li class=\"swap-details\">\n          <ul>\n            <li>\n              <p class=\"icon from-swap-icon\">\n                <i :class=\"['cc', notice.body.fromCurrency, 'cc-icon']\"></i>\n              </p>\n            </li>\n            <li>\n              <p class=\"from-swap-text\">\n                {{ notice.body.fromValue }} {{ notice.body.fromCurrency }}\n              </p>\n              <p class=\"address\">{{ notice.body.from | concatAddress }}</p>\n            </li>\n            <li>\n              <p class=\"swap-right-arrow\"><img :src=\"arrowImage\" /></p>\n            </li>\n            <li>\n              <p class=\"icon to-swap-icon\">\n                <i :class=\"['cc', notice.body.toCurrency, 'cc-icon']\"></i>\n              </p>\n            </li>\n            <li>\n              <p class=\"to-swap-text\">\n                {{ notice.body.toValue }} {{ notice.body.toCurrency }}\n              </p>\n              <p class=\"address\">{{ notice.body.to | concatAddress }}</p>\n            </li>\n          </ul>\n        </li>\n        <li v-if=\"notice.hash\" class=\"tx-hash\">\n          <p>{{ $t('header.transactionHash') }}:</p>\n        </li>\n        <li v-if=\"notice.hash\" class=\"tx-hash\">\n          <a\n            :href=\"hashLink(notice.hash)\"\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            {{ notice.hash }}\n          </a>\n        </li>\n        <li v-if=\"isError\" class=\"tx-info\">\n          <p>{{ $t('header.errorMessage') }}:</p>\n          <p>{{ errorMessage }}</p>\n        </li>\n        <li>\n          <p class=\"show-pointer\" @click=\"emitShowDetails\">\n            {{ $t('header.more') }}\n          </p>\n        </li>\n      </ul>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\n\nimport '@/assets/images/currency/coins/asFont/cryptocoins.css';\nimport '@/assets/images/currency/coins/asFont/cryptocoins-colors.css';\nimport Arrow from '@/assets/images/etc/single-arrow.svg';\n\nimport NotificationHeader from '../../NotificationHeader';\nimport { providerMap, providerNames } from '@/partners';\n\nimport {\n  swapOnlyStatuses,\n  notificationStatuses\n} from '@/helpers/notificationFormatters';\n\nexport default {\n  components: {\n    'notification-header': NotificationHeader\n  },\n  filters: {\n    concatAddress(value) {\n      if (!value) return '';\n      return `${value.substr(0, 7)}...${value.substr(value.length - 7)}`;\n    }\n  },\n  props: {\n    shown: {\n      type: Boolean,\n      default: false\n    },\n    expand: {\n      type: Function,\n      default: function() {}\n    },\n    index: {\n      type: Number,\n      default: 0\n    },\n    notice: {\n      type: Object,\n      default: function() {\n        return {};\n      }\n    },\n    convertToGwei: {\n      type: Function,\n      default: function() {}\n    },\n    convertToEth: {\n      type: Function,\n      default: function() {}\n    },\n    getFiatValue: {\n      type: Function,\n      default: function() {}\n    },\n    dateString: {\n      type: Function,\n      default: function() {}\n    },\n    timeString: {\n      type: Function,\n      default: function() {}\n    },\n    errorMessageString: {\n      type: Function,\n      default: function() {}\n    },\n    hashLink: {\n      type: Function,\n      default: function() {}\n    },\n    addressLink: {\n      type: Function,\n      default: function() {}\n    },\n    processStatus: {\n      type: Function,\n      default: function() {}\n    },\n    childUpdateNotification: {\n      type: Function,\n      default: function() {}\n    }\n  },\n  data() {\n    return {\n      arrowImage: Arrow,\n      unreadCount: 0,\n      currentStatus: '',\n      swapStatus: '',\n      timeRemaining: this.notice.body.timeRemaining,\n      providers: providerMap,\n      provider: {},\n      timerInterval: null,\n      statusInterval: null\n    };\n  },\n  computed: {\n    ...mapState(['web3', 'network', 'notifications', 'wallet']),\n    errorMessage() {\n      return this.errorMessageString(this.notice);\n    },\n    isError() {\n      return this.notice.body.error;\n    },\n    txStatus() {\n      return this.processStatus(this.notice.swapStatus);\n    },\n    parseTimeRemaining() {\n      const seconds = Math.floor(this.timeRemaining % 60);\n      const minutes = Math.floor((this.timeRemaining / 60) % 60);\n      return seconds >= 10 ? `${minutes}:${seconds}` : `${minutes}:0${seconds}`;\n    },\n    timeRemains() {\n      return this.timeRemaining > 0;\n    }\n  },\n  watch: {\n    shown(val) {\n      if (val) {\n        this.startPolling();\n      } else {\n        this.stopPolling();\n      }\n    }\n  },\n  activated() {\n    if (this.shown) {\n      this.startPolling();\n    }\n  },\n  beforeDestroy() {\n    this.stopPolling();\n  },\n  methods: {\n    emitShowDetails() {\n      this.$emit('showDetails', ['swap', this.notice, this.index]);\n    },\n    startPolling() {\n      if (this.notice.body.provider === providerNames.kyber) return;\n\n      this.provider = providerMap.get(this.notice.body.provider);\n      this.currentStatus = this.notice.swapStatus;\n\n      if (this.timerInterval === null) {\n        this.timeUpdater();\n      }\n\n      if (this.statusInterval === null) {\n        this.statusUpdater();\n      }\n    },\n    stopPolling() {\n      if (this.timerInterval !== null) {\n        clearInterval(this.timerInterval);\n        this.timerInterval = null;\n      }\n\n      if (this.statusInterval !== null) {\n        clearInterval(this.statusInterval);\n        this.statusInterval = null;\n      }\n    },\n    shouldCheckStatus() {\n      return [\n        swapOnlyStatuses.NEW,\n        swapOnlyStatuses.SENT,\n        notificationStatuses.PENDING\n      ].includes(this.notice.swapStatus);\n    },\n    statusUpdater() {\n      let updating = false;\n      const getStatus = async () => {\n        if (!updating) {\n          updating = true;\n          const newStatus = await this.provider.getOrderStatus(\n            this.notice.body,\n            this.network.type.name\n          );\n          if (typeof newStatus === 'undefined') return;\n          if (this.currentStatus !== newStatus) {\n            this.currentStatus = newStatus;\n            if (swapOnlyStatuses[newStatus]) {\n              this.notice.swapStatus = newStatus;\n            } else {\n              this.notice.swapStatus = newStatus;\n              this.notice.status = newStatus;\n            }\n            this.childUpdateNotification(this.notice);\n          }\n\n          if (!this.shouldCheckStatus()) {\n            clearInterval(this.statusInterval);\n          }\n          updating = false;\n        }\n      };\n\n      if (this.shouldCheckStatus()) {\n        getStatus();\n        this.statusInterval = setInterval(() => {\n          getStatus();\n          if (!this.shouldCheckStatus()) {\n            clearInterval(this.statusInterval);\n          }\n        }, 10000);\n      }\n    },\n    timeUpdater() {\n      const updateTime = () => {\n        this.timeRemaining =\n          this.notice.body.validFor -\n          parseInt(\n            (new Date().getTime() -\n              new Date(this.notice.body.createdAt).getTime()) /\n              1000\n          );\n        if (\n          (this.notice.swapStatus === swapOnlyStatuses.NEW ||\n            this.currentStatus === swapOnlyStatuses.NEW) &&\n          this.timeRemaining <= 0\n        ) {\n          this.notice.swapStatus = swapOnlyStatuses.CANCELLED;\n          this.notice.status = notificationStatuses.FAILED;\n          this.notice.body.errorMessage =\n            'Swap window timeout. Swap Cancelled.';\n          this.timeRemaining = -1;\n        }\n        this.notice.body.timeRemaining = +this.timeRemaining;\n        this.childUpdateNotification(this.notice);\n        if (+this.timeRemaining <= 0) {\n          clearInterval(this.timerInterval);\n        }\n      };\n\n      if (this.shouldCheckStatus() && this.notice.body.timeRemaining > 0) {\n        if (this.timeRemaining > 0) {\n          updateTime();\n          this.timerInterval = setInterval(() => {\n            updateTime();\n            if (this.timeRemaining <= 0) {\n              clearInterval(this.timerInterval);\n            }\n          }, 1000);\n        }\n      }\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'SwapNotification';\n</style>\n"],"sourceRoot":"src/layouts/ExtensionBrowserAction/containers/ExtensionNotification/components/NotificationTypes/SwapNotification"}]}