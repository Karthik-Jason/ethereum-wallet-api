{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/layouts/SendOfflineHelper/SendOfflineHelper.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/layouts/SendOfflineHelper/SendOfflineHelper.vue","mtime":1573477612088},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport _typeof from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/@babel/runtime-corejs2/helpers/esm/typeof\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.function.name\";\nimport _defineProperty from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es7.object.values\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { Transaction } from 'ethereumjs-tx';\nimport { mapState } from 'vuex';\nimport Misc from '@/helpers/misc';\nimport BigNumber from 'bignumber.js';\nimport web3Utils from 'web3-utils';\nimport * as networkTypes from '@/networks/types';\nimport store from 'store';\nimport TitleTextContentsLayout from '@/layouts/InformationPages/Components/TitleTextContentsLayout';\nimport AccordionMenu from '@/components/AccordionMenu';\nimport DropDownAddressSelector from '@/components/DropDownAddressSelector';\nimport StandardButton from '@/components/Buttons/StandardButton';\nimport StandardInput from '@/components/StandardInput';\nimport ExpandingOption from '@/components/ExpandingOption';\nimport ConfirmationModal from \"./components/ConfirmationModal\";\nexport default {\n  components: {\n    'page-title': TitleTextContentsLayout,\n    'accordion-menu': AccordionMenu,\n    'dropdown-address-selector': DropDownAddressSelector,\n    'standard-button': StandardButton,\n    'standard-input': StandardInput,\n    'expanding-option': ExpandingOption,\n    'confirmation-modal': ConfirmationModal\n  },\n  data: function data() {\n    return {\n      networkTypes: Object.values(networkTypes),\n      selectedNetwork: this.$store.state.network,\n      stage1: false,\n      // Select Network\n      stage2: true,\n      // Generate Information\n      stage3: false,\n      // Enter/Upload Signed Transaction\n      stage4: false,\n      // Review and Send\n      stage5: false,\n      // Show Transaction Hash and Transaction Receipt\n      showAllData: false,\n      informationGenerated: false,\n      downloadable: false,\n      from: '0x',\n      rawSigned: '',\n      minAccountBalance: 0,\n      fee: 0,\n      nonce: 0,\n      gasPrice: 0,\n      gasLimit: 0,\n      to: '0x',\n      value: 0,\n      data: '0x',\n      chainID: 0,\n      ethPrice: 0,\n      genInfo: {\n        address: '0x',\n        gasPrice: 0,\n        nonce: 0,\n        chainID: this.$store.state.network.type.chainID,\n        networkName: this.$store.state.network.type.name_long\n      },\n      generatedJson: {},\n      file: '',\n      exportFileName: 'Generated Information',\n      //Error Flags\n      invalidSignature: false,\n      wrongNetwork: false,\n      correctNetwork: '',\n      txHash: '',\n      txReceipt: {},\n      error: ''\n    };\n  },\n  computed: _objectSpread({}, mapState(['network', 'Networks', 'customPaths', 'path', 'web3', 'wallet', 'online']), {\n    reorderNetworkList: function reorderNetworkList() {\n      var customNetworks = store.get('customNetworks') !== undefined ? store.get('customNetworks') : [];\n      var currentNetworks = Misc.reorderNetworks();\n      var newObj = Object.assign({}, currentNetworks, {\n        'Custom Networks': customNetworks\n      });\n      if (customNetworks.length === 0) delete newObj['Custom Networks'];\n      return newObj;\n    },\n    networkTitle: function networkTitle() {\n      return \"\".concat(this.selectedNetwork.type.name, \" - \").concat(this.selectedNetwork.service, \" \");\n    },\n    rawTx: function rawTx() {\n      return {\n        from: this.from,\n        nonce: this.nonce,\n        gasPrice: this.toGwei(this.gasPrice),\n        gasLimit: this.gasLimit,\n        to: this.to,\n        value: this.toEth(this.value),\n        data: this.data,\n        chainID: this.chainID\n      };\n    },\n    envDetails: function envDetails() {\n      return {\n        network: this.selectedNetwork,\n        ethPrice: this.ethPrice\n      };\n    }\n  }),\n  watch: {\n    rawSigned: function rawSigned(newVal) {\n      this.getTransactionDetails(newVal);\n    }\n  },\n  mounted: function mounted() {\n    this.switchNetwork(this.$store.state.network);\n\n    if (this.online) {\n      this.fetchBalanceData();\n    }\n  },\n  methods: {\n    replaceUrl: function replaceUrl(type, hash) {\n      if (type === 'address') {\n        return this.network.type.blockExplorerAddr.replace('[[address]]', hash);\n      }\n\n      return this.network.type.blockExplorerTX.replace('[[txHash]]', hash);\n    },\n    stage1Btn: function stage1Btn() {\n      this.stage1 = false;\n      this.stage2 = true;\n    },\n    stage2Btn: function stage2Btn() {\n      this.stage2 = false;\n      this.stage3 = true;\n    },\n    stage3Btn: function stage3Btn() {\n      this.stage3 = false;\n      this.stage4 = true;\n    },\n    stage4Btn: function stage4Btn() {\n      var _this = this;\n\n      this.stage4 = false;\n      this.stage5 = true;\n\n      if (this.rawSigned !== '') {\n        this.error = this.txHash = '';\n        this.txReceipt = {};\n        this.web3.eth.sendSignedTransaction(this.rawSigned).once('transactionHash', function (hash) {\n          _this.txHash = hash;\n        }).then(function (receipt) {\n          _this.txReceipt = receipt;\n        }).catch(function (e) {\n          _this.error = e;\n        });\n      }\n    },\n    switchNetwork: function switchNetwork(network) {\n      var _this2 = this;\n\n      this.$store.dispatch('switchNetwork', network).then(function () {\n        _this2.selectedNetwork = network;\n\n        _this2.$store.dispatch('setWeb3Instance');\n\n        _this2.stage1Btn();\n\n        _this2.getTransactionDetails();\n      });\n    },\n    truncateData: function truncateData(data) {\n      if (!data) return '';\n      return \"\".concat(data.slice(0, 20), \"...\").concat(data.slice(-10));\n    },\n    getTransactionDetails: function getTransactionDetails(rawSigned) {\n      var _this3 = this;\n\n      var positions = {\n        nonce: 0,\n        gasPrice: 1,\n        gasLimit: 2,\n        to: 3,\n        value: 4,\n        data: 5,\n        v: 6,\n        r: 7,\n        s: 8\n      };\n      if (rawSigned) this.rawSigned = rawSigned;\n\n      if (this.rawSigned !== '') {\n        var sanitizedRawSigned = Misc.sanitizeHex(this.rawSigned);\n        var tx = new Transaction(sanitizedRawSigned);\n        this.invalidSignature = !tx.verifySignature();\n        this.chainID = tx.getChainId();\n        this.wrongNetwork = !new BigNumber(this.selectedNetwork.type.chainID).eq(new BigNumber(this.chainID));\n        this.chainID = tx.getChainId();\n\n        if (this.wrongNetwork) {\n          var correctNetwork = this.networkTypes.filter(function (entry) {\n            return entry.chainID === _this3.chainID;\n          });\n          if (correctNetwork) this.correctNetwork = correctNetwork[0].name_long;\n        }\n\n        this.from = Misc.sanitizeHex(tx.getSenderAddress().toString('hex'));\n        var asJson = tx.toJSON();\n        this.to = asJson[positions.to];\n        this.gasLimit = new BigNumber(asJson[positions.gasLimit]).toFixed();\n        this.nonce = new BigNumber(asJson[positions.nonce]).toFixed();\n        this.value = new BigNumber(asJson[positions.value]).toFixed();\n        this.data = asJson[positions.data];\n        this.minAccountBalance = tx.getUpfrontCost().toString();\n        this.gasPrice = new BigNumber(Misc.sanitizeHex(tx.gasPrice.toString('hex'))).toFixed();\n        this.fee = new BigNumber(this.toGwei(this.gasPrice)).times(this.gasLimit).toFixed();\n      }\n    },\n    fetchBalanceData: function () {\n      var _fetchBalanceData = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var url, fetchValues, result, values;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                url = 'https://cryptorates.mewapi.io/ticker';\n                _context.next = 3;\n                return fetch(url);\n\n              case 3:\n                fetchValues = _context.sent;\n                _context.next = 6;\n                return fetchValues.json();\n\n              case 6:\n                result = _context.sent;\n                values = result.data;\n\n                if (values['ETH']) {\n                  _context.next = 10;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", 0);\n\n              case 10:\n                this.ethPrice = new BigNumber(values['ETH'].quotes.USD.price);\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function fetchBalanceData() {\n        return _fetchBalanceData.apply(this, arguments);\n      }\n\n      return fetchBalanceData;\n    }(),\n    toEth: function toEth(val) {\n      if (!val || isNaN(val)) return 0;\n      return web3Utils.fromWei(new BigNumber(val).toFixed(), 'ether');\n    },\n    toWei: function toWei(val) {\n      if (!val) return 0;\n      return web3Utils.toWei(new BigNumber(val).toFixed(), 'gwei');\n    },\n    toGwei: function toGwei(val) {\n      if (!val) return 0;\n      return web3Utils.fromWei(new BigNumber(val).toFixed(), 'gwei');\n    },\n    dateTimeDisplay: function dateTimeDisplay(unixTimeStamp) {\n      return new Date(unixTimeStamp).toString();\n    },\n    calculateCost: function calculateCost(inGwei) {\n      var fromGweiToWei = this.toWei(inGwei);\n      return new BigNumber(this.ethPrice).times(this.toEth(fromGweiToWei)).precision(2, BigNumber.ROUND_UP).toNumber();\n    },\n    generateInformation: function () {\n      var _generateInformation = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2(address) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(address === '')) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 2:\n                this.genInfo.address = address;\n                _context2.next = 5;\n                return this.web3.eth.getGasPrice();\n\n              case 5:\n                this.genInfo.gasPrice = _context2.sent;\n                _context2.next = 8;\n                return this.web3.eth.getTransactionCount(address);\n\n              case 8:\n                this.genInfo.nonce = _context2.sent;\n                _context2.next = 11;\n                return this.web3.eth.getBlockNumber();\n\n              case 11:\n                this.genInfo.blockNumber = _context2.sent;\n                this.genInfo.chainID = this.selectedNetwork.type.chainID;\n                this.genInfo.timestamp = Date.now(); //;\n\n                this.exportGeneratedInfo();\n                this.informationGenerated = true;\n\n              case 16:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function generateInformation(_x) {\n        return _generateInformation.apply(this, arguments);\n      }\n\n      return generateInformation;\n    }(),\n    exportGeneratedInfo: function exportGeneratedInfo() {\n      var _this4 = this;\n\n      var createBlob = function createBlob(mime, str) {\n        var string = _typeof(str) === 'object' ? JSON.stringify(str) : str;\n        if (string === null) return '';\n        var blob = new Blob([string], {\n          type: mime\n        });\n        _this4.downloadable = true;\n        return window.URL.createObjectURL(blob);\n      };\n\n      this.generatedJson = createBlob(this.genInfo, 'mime');\n      this.exportFileName = \"generated-offline-tx-\".concat(Date.now(), \".json\");\n    },\n    uploadClick: function uploadClick() {\n      var jsonInput = this.$refs.jsonInput;\n      jsonInput.value = '';\n      jsonInput.click();\n    },\n    uploadFile: function uploadFile(e) {\n      var self = this;\n      var reader = new FileReader();\n\n      reader.onloadend = function (evt) {\n        self.file = JSON.parse(evt.target.result);\n        self.getTransactionDetails(self.file.rawTransaction);\n      };\n\n      reader.readAsBinaryString(e.target.files[0]);\n    }\n  }\n};",{"version":3,"sources":["SendOfflineHelper.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"send-offline-helper\">\n    <div class=\"page-container\">\n      <div class=\"wrap\">\n        <div class=\"page-title\">\n          <page-title\n            :options=\"{\n              title: 'Send Offline Helper',\n              boldSubTitle: '',\n              textContent: [\n                'Customize actions, debug reveals, and more with this set of advance tools. Please be mindful of the capabilities and limitations of these tools before using.'\n              ]\n            }\"\n          />\n        </div>\n        <div class=\"page-content-container\">\n          <!-- Select Network-->\n          <div class=\"collapse-container\">\n            <accordion-menu\n              :greytitle=\"false\"\n              :isopen=\"stage1\"\n              :title=\"$t('withoutWallet.selectNetwork')\"\n              :right-text=\"networkTitle\"\n              number=\"1\"\n              @titleClicked=\"stage1 = !stage1\"\n            >\n              <ul class=\"networks\">\n                <li\n                  v-for=\"(key, index) in Object.keys(reorderNetworkList)\"\n                  :key=\"$router.path + key + index\"\n                >\n                  <div class=\"network-title\">\n                    <div class=\"network-icon\">\n                      <img\n                        v-if=\"\n                          key !== 'Custom Networks' &&\n                            Networks[key][0].type.icon\n                        \"\n                        :src=\"Networks[key][0].type.icon\"\n                        alt\n                      />\n                      <div\n                        v-if=\"\n                          key !== 'Custom Networks' &&\n                            !Networks[key][0].type.icon\n                        \"\n                        class=\"no-icon\"\n                      >\n                        <p>No</p>\n                        <p>Icon</p>\n                      </div>\n                    </div>\n                    <p>{{ key }}</p>\n                  </div>\n                  <div class=\"network-content\">\n                    <p\n                      v-for=\"net in reorderNetworkList[key]\"\n                      :key=\"net.service\"\n                      :class=\"\n                        net.service === selectedNetwork.service &&\n                        net.type &&\n                        net.type.name === selectedNetwork.type.name\n                          ? 'current-network'\n                          : ''\n                      \"\n                      @click=\"switchNetwork(net)\"\n                    >\n                      {{ net.service }}\n                    </p>\n                  </div>\n                </li>\n              </ul>\n            </accordion-menu>\n          </div>\n\n          <!-- Generate Info -->\n          <accordion-menu\n            :greytitle=\"false\"\n            :editbutton=\"true\"\n            :isopen=\"stage2\"\n            :title=\"$t('withoutWallet.generateInfo')\"\n            number=\"2\"\n            @titleClicked=\"stage2 = !stage2\"\n          >\n            <dropdown-address-selector\n              title=\"From Address\"\n              @toAddress=\"generateInformation($event)\"\n            />\n            <div v-if=\"informationGenerated\">\n              <ul>\n                <li class=\"detail-container\">\n                  <span class=\"detail-name\">Sender:</span>\n                  <span class=\"detail-text\">{{ genInfo.address }}</span>\n                </li>\n                <li class=\"detail-container\">\n                  <span class=\"detail-name\">Nonce:</span>\n                  <span class=\"detail-text\">{{ genInfo.nonce }}</span>\n                </li>\n                <li class=\"detail-container\">\n                  <span class=\"detail-name\">Chain ID:</span>\n                  <span class=\"detail-text\"\n                    >{{ genInfo.chainID }} ({{ genInfo.networkName }})</span\n                  >\n                </li>\n                <li class=\"detail-container with-divider\">\n                  <span class=\"detail-name\">Current Gas Price:</span>\n                  <span class=\"detail-text\"\n                    >{{ toGwei(genInfo.gasPrice) }} Gwei</span\n                  >\n                </li>\n                <li class=\"detail-container\">\n                  <span class=\"detail-name\">Retrieved:</span>\n                  <span class=\"detail-text\">\n                    {{ dateTimeDisplay(genInfo.timestamp) }}\n                  </span>\n                </li>\n                <li class=\"detail-container\">\n                  <span class=\"detail-name\">at block:</span>\n                  <span class=\"detail-text\">{{ genInfo.blockNumber }}</span>\n                </li>\n              </ul>\n            </div>\n            <div v-show=\"informationGenerated\" class=\"button-container\">\n              <a\n                ref=\"generatedDownloadLink\"\n                :href=\"generatedJson\"\n                :download=\"exportFileName\"\n              >\n                <standard-button\n                  :options=\"{\n                    title: 'Export JSON File',\n                    buttonStyle: 'green-border',\n                    noWalletTerms: true,\n                    noMinWidth: true\n                  }\"\n                />\n              </a>\n\n              <standard-button\n                :options=\"{\n                  title: 'Continue',\n                  buttonStyle: 'green',\n                  noWalletTerms: true,\n                  rightArrow: true\n                }\"\n                @click.native=\"stage2Btn\"\n              />\n            </div>\n          </accordion-menu>\n\n          <!-- Paste/Upload Signed Tx-->\n          <accordion-menu\n            :greytitle=\"false\"\n            :isopen=\"stage3\"\n            :title=\"$t('withoutWallet.signedTx')\"\n            number=\"3\"\n            @titleClicked=\"stage3 = !stage3\"\n          >\n            <textarea v-model=\"rawSigned\" class=\"no-margin raw-tx-input\" />\n            <p v-if=\"invalidSignature\">Invalid Signature</p>\n            <p v-if=\"wrongNetwork && correctNetwork === ''\">\n              Signed Chain ID does not match chain id for selected network\n            </p>\n            <p v-if=\"wrongNetwork && correctNetwork !== ''\">\n              Signed Chain ID ({{ correctNetwork }}) does not match chain id for\n              selected network\n            </p>\n            <expanding-option title=\"Raw Transaction\">\n              <textarea\n                :value=\"JSON.stringify(rawTx)\"\n                class=\"no-margin raw-tx-input\"\n                disabled\n              />\n            </expanding-option>\n            <div class=\"button-container\">\n              <input\n                ref=\"jsonInput\"\n                type=\"file\"\n                name=\"file\"\n                style=\"display: none\"\n                @change=\"uploadFile\"\n              />\n              <standard-button\n                :options=\"{\n                  title: 'Upload JSON File',\n                  buttonStyle: 'green-border',\n                  noWalletTerms: true,\n                  noMinWidth: true\n                }\"\n                @click.native=\"uploadClick()\"\n              />\n              <standard-button\n                :options=\"{\n                  title: 'Continue',\n                  buttonStyle: 'green',\n                  noWalletTerms: true\n                }\"\n                @click.native=\"stage3Btn\"\n              />\n            </div>\n          </accordion-menu>\n\n          <!-- Review and Send-->\n          <accordion-menu\n            :greytitle=\"false\"\n            :editbutton=\"false\"\n            :isopen=\"stage4\"\n            :title=\"$t('withoutWallet.txDetails')\"\n            number=\"4\"\n            @titleClicked=\"stage4 = !stage4\"\n          >\n            <ul>\n              <li class=\"detail-container\">\n                <span class=\"detail-name\">Sender:</span>\n                <span class=\"detail-text\">{{ from }}</span>\n              </li>\n              <li class=\"detail-container\">\n                <span class=\"detail-name\">Receiver:</span>\n                <span class=\"detail-text\">{{ to }}</span>\n              </li>\n              <li class=\"detail-container\">\n                <span class=\"detail-name\">Nonce:</span>\n                <span class=\"detail-text\">{{ nonce }}</span>\n              </li>\n              <li class=\"detail-container\">\n                <span class=\"detail-name\">Value:</span>\n                <span class=\"detail-text\">\n                  {{ toEth(value) }}\n                  {{ selectedNetwork.type.currencyName }}\n                </span>\n              </li>\n              <li class=\"detail-container\">\n                <span class=\"detail-name\">Data:</span>\n                <span v-if=\"data !== '0x'\" class=\"detail-text\">\n                  {{ truncateData(data) }}\n                  <span class=\"show-all-btn\" @click=\"showAllData = !showAllData\"\n                    >Show All</span\n                  >\n                </span>\n                <span v-else class=\"data-all\">{{ data }}</span>\n                <span v-if=\"showAllData\" class=\"data-all\">{{ data }}</span>\n              </li>\n\n              <li class=\"detail-container with-divider\">\n                <span class=\"detail-name\">Chain ID:</span>\n                <span class=\"detail-text\"\n                  >{{ chainID }} ({{ selectedNetwork.type.name_long }})</span\n                >\n              </li>\n              <li class=\"detail-container\">\n                <span class=\"detail-name\">Gas Limit:</span>\n                <span class=\"detail-text\">{{ gasLimit }}</span>\n              </li>\n              <li class=\"detail-container\">\n                <span class=\"detail-name\">Gas Price:</span>\n                <span class=\"detail-text\">{{ toGwei(gasPrice) }} Gwei</span>\n              </li>\n              <li class=\"detail-container\">\n                <span class=\"detail-name\">Fee:</span>\n                <span class=\"detail-text\">\n                  {{ toEth(fee) }}\n                  {{ selectedNetwork.type.currencyName }}\n                  ($ {{ calculateCost(fee) }})\n                </span>\n              </li>\n            </ul>\n            <div class=\"button-container\">\n              <standard-button\n                :options=\"{\n                  title: 'Send',\n                  buttonStyle: 'green',\n                  noWalletTerms: true,\n                  rightArrow: true\n                }\"\n                @click.native=\"stage4Btn\"\n              />\n            </div>\n          </accordion-menu>\n\n          <!-- Sent Tx Details & Hash-->\n          <accordion-menu\n            :greytitle=\"false\"\n            :editbutton=\"false\"\n            :isopen=\"stage5\"\n            :title=\"$t('withoutWallet.txStatus')\"\n            number=\"5\"\n            @titleClicked=\"stage5 = !stage5\"\n          >\n            <ul v-if=\"error === ''\">\n              <li class=\"tx-hash-container\">\n                <p>Transaction Hash:</p>\n                <a\n                  :href=\"replaceUrl('', txHash)\"\n                  class=\"detail-text\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  >{{ txHash }}</a\n                >\n              </li>\n              <li class=\"tx-receipt-container\">\n                <p>Transaction Receipt:</p>\n                <div\n                  v-if=\"Object.keys(txReceipt).length > 0\"\n                  class=\"tx-receipt-items\"\n                >\n                  <div\n                    v-for=\"(item, idx) in Object.keys(txReceipt)\"\n                    :key=\"item + idx\"\n                  >\n                    <span>{{ item }}</span>\n                    <a\n                      v-if=\"item === 'transactionHash'\"\n                      :href=\"replaceUrl('', txReceipt[item])\"\n                      target=\"_blank\"\n                      class=\"right-side\"\n                      >{{ txReceipt[item] }}</a\n                    >\n                    <a\n                      v-else-if=\"item === 'contractAddress'\"\n                      :href=\"replaceUrl('address', txReceipt[item])\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      class=\"right-side\"\n                      >{{ txReceipt[item] }}</a\n                    >\n                    <span v-else class=\"right-side\">{{ txReceipt[item] }}</span>\n                  </div>\n                </div>\n                <div v-else class=\"loading\">Loading....</div>\n              </li>\n            </ul>\n            <div v-else>{{ error }}</div>\n          </accordion-menu>\n        </div>\n      </div>\n    </div>\n\n    <confirmation-modal\n      ref=\"offlineConfirm\"\n      :raw-tx=\"rawTx\"\n      :signed-tx=\"rawSigned\"\n      :env-details=\"envDetails\"\n    />\n  </div>\n</template>\n\n<script>\nimport { Transaction } from 'ethereumjs-tx';\nimport { mapState } from 'vuex';\nimport Misc from '@/helpers/misc';\nimport BigNumber from 'bignumber.js';\nimport web3Utils from 'web3-utils';\nimport * as networkTypes from '@/networks/types';\nimport store from 'store';\nimport TitleTextContentsLayout from '@/layouts/InformationPages/Components/TitleTextContentsLayout';\nimport AccordionMenu from '@/components/AccordionMenu';\nimport DropDownAddressSelector from '@/components/DropDownAddressSelector';\nimport StandardButton from '@/components/Buttons/StandardButton';\nimport StandardInput from '@/components/StandardInput';\nimport ExpandingOption from '@/components/ExpandingOption';\nimport ConfirmationModal from './components/ConfirmationModal';\n\nexport default {\n  components: {\n    'page-title': TitleTextContentsLayout,\n    'accordion-menu': AccordionMenu,\n    'dropdown-address-selector': DropDownAddressSelector,\n    'standard-button': StandardButton,\n    'standard-input': StandardInput,\n    'expanding-option': ExpandingOption,\n    'confirmation-modal': ConfirmationModal\n  },\n  data() {\n    return {\n      networkTypes: Object.values(networkTypes),\n      selectedNetwork: this.$store.state.network,\n      stage1: false, // Select Network\n      stage2: true, // Generate Information\n      stage3: false, // Enter/Upload Signed Transaction\n      stage4: false, // Review and Send\n      stage5: false, // Show Transaction Hash and Transaction Receipt\n      showAllData: false,\n      informationGenerated: false,\n      downloadable: false,\n      from: '0x',\n      rawSigned: '',\n      minAccountBalance: 0,\n      fee: 0,\n      nonce: 0,\n      gasPrice: 0,\n      gasLimit: 0,\n      to: '0x',\n      value: 0,\n      data: '0x',\n      chainID: 0,\n      ethPrice: 0,\n      genInfo: {\n        address: '0x',\n        gasPrice: 0,\n        nonce: 0,\n        chainID: this.$store.state.network.type.chainID,\n        networkName: this.$store.state.network.type.name_long\n      },\n      generatedJson: {},\n      file: '',\n      exportFileName: 'Generated Information',\n      //Error Flags\n      invalidSignature: false,\n      wrongNetwork: false,\n      correctNetwork: '',\n      txHash: '',\n      txReceipt: {},\n      error: ''\n    };\n  },\n  computed: {\n    ...mapState([\n      'network',\n      'Networks',\n      'customPaths',\n      'path',\n      'web3',\n      'wallet',\n      'online'\n    ]),\n    reorderNetworkList() {\n      const customNetworks =\n        store.get('customNetworks') !== undefined\n          ? store.get('customNetworks')\n          : [];\n      const currentNetworks = Misc.reorderNetworks();\n      const newObj = Object.assign({}, currentNetworks, {\n        'Custom Networks': customNetworks\n      });\n      if (customNetworks.length === 0) delete newObj['Custom Networks'];\n      return newObj;\n    },\n    networkTitle() {\n      return `${this.selectedNetwork.type.name} - ${this.selectedNetwork.service} `;\n    },\n    rawTx() {\n      return {\n        from: this.from,\n        nonce: this.nonce,\n        gasPrice: this.toGwei(this.gasPrice),\n        gasLimit: this.gasLimit,\n        to: this.to,\n        value: this.toEth(this.value),\n        data: this.data,\n        chainID: this.chainID\n      };\n    },\n    envDetails() {\n      return {\n        network: this.selectedNetwork,\n        ethPrice: this.ethPrice\n      };\n    }\n  },\n  watch: {\n    rawSigned(newVal) {\n      this.getTransactionDetails(newVal);\n    }\n  },\n  mounted() {\n    this.switchNetwork(this.$store.state.network);\n    if (this.online) {\n      this.fetchBalanceData();\n    }\n  },\n  methods: {\n    replaceUrl(type, hash) {\n      if (type === 'address') {\n        return this.network.type.blockExplorerAddr.replace('[[address]]', hash);\n      }\n      return this.network.type.blockExplorerTX.replace('[[txHash]]', hash);\n    },\n    stage1Btn() {\n      this.stage1 = false;\n      this.stage2 = true;\n    },\n    stage2Btn() {\n      this.stage2 = false;\n      this.stage3 = true;\n    },\n    stage3Btn() {\n      this.stage3 = false;\n      this.stage4 = true;\n    },\n    stage4Btn() {\n      this.stage4 = false;\n      this.stage5 = true;\n      if (this.rawSigned !== '') {\n        this.error = this.txHash = '';\n        this.txReceipt = {};\n        this.web3.eth\n          .sendSignedTransaction(this.rawSigned)\n          .once('transactionHash', hash => {\n            this.txHash = hash;\n          })\n          .then(receipt => {\n            this.txReceipt = receipt;\n          })\n          .catch(e => {\n            this.error = e;\n          });\n      }\n    },\n    switchNetwork(network) {\n      this.$store.dispatch('switchNetwork', network).then(() => {\n        this.selectedNetwork = network;\n        this.$store.dispatch('setWeb3Instance');\n        this.stage1Btn();\n        this.getTransactionDetails();\n      });\n    },\n    truncateData(data) {\n      if (!data) return '';\n      return `${data.slice(0, 20)}...${data.slice(-10)}`;\n    },\n    getTransactionDetails(rawSigned) {\n      const positions = {\n        nonce: 0,\n        gasPrice: 1,\n        gasLimit: 2,\n        to: 3,\n        value: 4,\n        data: 5,\n        v: 6,\n        r: 7,\n        s: 8\n      };\n      if (rawSigned) this.rawSigned = rawSigned;\n      if (this.rawSigned !== '') {\n        const sanitizedRawSigned = Misc.sanitizeHex(this.rawSigned);\n        const tx = new Transaction(sanitizedRawSigned);\n        this.invalidSignature = !tx.verifySignature();\n        this.chainID = tx.getChainId();\n        this.wrongNetwork = !new BigNumber(\n          this.selectedNetwork.type.chainID\n        ).eq(new BigNumber(this.chainID));\n        this.chainID = tx.getChainId();\n\n        if (this.wrongNetwork) {\n          const correctNetwork = this.networkTypes.filter(\n            entry => entry.chainID === this.chainID\n          );\n          if (correctNetwork) this.correctNetwork = correctNetwork[0].name_long;\n        }\n        this.from = Misc.sanitizeHex(tx.getSenderAddress().toString('hex'));\n        const asJson = tx.toJSON();\n        this.to = asJson[positions.to];\n        this.gasLimit = new BigNumber(asJson[positions.gasLimit]).toFixed();\n        this.nonce = new BigNumber(asJson[positions.nonce]).toFixed();\n        this.value = new BigNumber(asJson[positions.value]).toFixed();\n\n        this.data = asJson[positions.data];\n        this.minAccountBalance = tx.getUpfrontCost().toString();\n        this.gasPrice = new BigNumber(\n          Misc.sanitizeHex(tx.gasPrice.toString('hex'))\n        ).toFixed();\n        this.fee = new BigNumber(this.toGwei(this.gasPrice))\n          .times(this.gasLimit)\n          .toFixed();\n      }\n    },\n    async fetchBalanceData() {\n      const url = 'https://cryptorates.mewapi.io/ticker';\n      const fetchValues = await fetch(url);\n      const result = await fetchValues.json();\n      const values = result.data;\n      if (!values['ETH']) return 0;\n      this.ethPrice = new BigNumber(values['ETH'].quotes.USD.price);\n    },\n    toEth(val) {\n      if (!val || isNaN(val)) return 0;\n      return web3Utils.fromWei(new BigNumber(val).toFixed(), 'ether');\n    },\n    toWei(val) {\n      if (!val) return 0;\n      return web3Utils.toWei(new BigNumber(val).toFixed(), 'gwei');\n    },\n    toGwei(val) {\n      if (!val) return 0;\n      return web3Utils.fromWei(new BigNumber(val).toFixed(), 'gwei');\n    },\n    dateTimeDisplay(unixTimeStamp) {\n      return new Date(unixTimeStamp).toString();\n    },\n    calculateCost(inGwei) {\n      const fromGweiToWei = this.toWei(inGwei);\n      return new BigNumber(this.ethPrice)\n        .times(this.toEth(fromGweiToWei))\n        .precision(2, BigNumber.ROUND_UP)\n        .toNumber();\n    },\n    async generateInformation(address) {\n      if (address === '') return;\n      this.genInfo.address = address;\n      this.genInfo.gasPrice = await this.web3.eth.getGasPrice();\n      this.genInfo.nonce = await this.web3.eth.getTransactionCount(address);\n      this.genInfo.blockNumber = await this.web3.eth.getBlockNumber();\n      this.genInfo.chainID = this.selectedNetwork.type.chainID;\n      this.genInfo.timestamp = Date.now(); //;\n      this.exportGeneratedInfo();\n      this.informationGenerated = true;\n    },\n    exportGeneratedInfo() {\n      const createBlob = (mime, str) => {\n        const string = typeof str === 'object' ? JSON.stringify(str) : str;\n        if (string === null) return '';\n        const blob = new Blob([string], {\n          type: mime\n        });\n        this.downloadable = true;\n        return window.URL.createObjectURL(blob);\n      };\n      this.generatedJson = createBlob(this.genInfo, 'mime');\n      this.exportFileName = `generated-offline-tx-${Date.now()}.json`;\n    },\n    uploadClick() {\n      const jsonInput = this.$refs.jsonInput;\n      jsonInput.value = '';\n      jsonInput.click();\n    },\n    uploadFile(e) {\n      const self = this;\n      const reader = new FileReader();\n      reader.onloadend = function(evt) {\n        self.file = JSON.parse(evt.target.result);\n        self.getTransactionDetails(self.file.rawTransaction);\n      };\n      reader.readAsBinaryString(e.target.files[0]);\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'SendOfflineHelper.scss';\n</style>\n"],"sourceRoot":"src/layouts/SendOfflineHelper"}]}