{"remainingRequest":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/eslint-loader/index.js??ref--13-0!/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/wallets/web3-provider/methods/eth_getBlockByNumber.js","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/wallets/web3-provider/methods/eth_getBlockByNumber.js","mtime":1573477612132},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport { toPayload } from \"../jsonrpc\";\nimport EthCalls from \"../web3Calls\";\nvar WAIT_TIME = 10 * 1000; //10 seconds\n\nvar memcache = {};\nexport default\n/*#__PURE__*/\n(function () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee(_ref, res, next) {\n    var payload, requestManager, ethCalls, blockNumber, returnTxs, receipt;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            payload = _ref.payload, requestManager = _ref.requestManager;\n\n            if (!(payload.method !== 'eth_getBlockByNumber')) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt(\"return\", next());\n\n          case 3:\n            ethCalls = new EthCalls(requestManager);\n            blockNumber = payload.params[0];\n            returnTxs = payload.params[1] ? payload.params[1] : false;\n\n            if (!(!memcache[blockNumber] || memcache[blockNumber] && memcache[blockNumber].timestamp < new Date().getTime() - WAIT_TIME)) {\n              _context.next = 20;\n              break;\n            }\n\n            _context.prev = 7;\n            _context.next = 10;\n            return ethCalls.getBlockByNumber(blockNumber, returnTxs);\n\n          case 10:\n            receipt = _context.sent;\n            memcache[blockNumber] = {\n              timestamp: new Date().getTime(),\n              receipt: JSON.stringify(receipt)\n            };\n            res(null, toPayload(payload.id, receipt));\n            _context.next = 18;\n            break;\n\n          case 15:\n            _context.prev = 15;\n            _context.t0 = _context[\"catch\"](7);\n            res(null, toPayload(payload.id, null));\n\n          case 18:\n            _context.next = 21;\n            break;\n\n          case 20:\n            res(null, toPayload(payload.id, JSON.parse(memcache[blockNumber].receipt) || null));\n\n          case 21:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[7, 15]]);\n  }));\n\n  return function (_x, _x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n})();",{"version":3,"sources":["/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/wallets/web3-provider/methods/eth_getBlockByNumber.js"],"names":["toPayload","EthCalls","WAIT_TIME","memcache","res","next","payload","requestManager","method","ethCalls","blockNumber","params","returnTxs","timestamp","Date","getTime","getBlockByNumber","receipt","JSON","stringify","id","parse"],"mappings":";;AAAA,SAASA,SAAT;AACA,OAAOC,QAAP;AACA,IAAMC,SAAS,GAAG,KAAK,IAAvB,C,CAA6B;;AAC7B,IAAMC,QAAQ,GAAG,EAAjB;AACA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAe,uBAAoCC,GAApC,EAAyCC,IAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,YAAAA,OAAT,QAASA,OAAT,EAAkBC,cAAlB,QAAkBA,cAAlB;;AAAA,kBACTD,OAAO,CAACE,MAAR,KAAmB,sBADV;AAAA;AAAA;AAAA;;AAAA,6CACyCH,IAAI,EAD7C;;AAAA;AAEPI,YAAAA,QAFO,GAEI,IAAIR,QAAJ,CAAaM,cAAb,CAFJ;AAGPG,YAAAA,WAHO,GAGOJ,OAAO,CAACK,MAAR,CAAe,CAAf,CAHP;AAIPC,YAAAA,SAJO,GAIKN,OAAO,CAACK,MAAR,CAAe,CAAf,IAAoBL,OAAO,CAACK,MAAR,CAAe,CAAf,CAApB,GAAwC,KAJ7C;;AAAA,kBAMX,CAACR,QAAQ,CAACO,WAAD,CAAT,IACCP,QAAQ,CAACO,WAAD,CAAR,IACCP,QAAQ,CAACO,WAAD,CAAR,CAAsBG,SAAtB,GAAkC,IAAIC,IAAJ,GAAWC,OAAX,KAAuBb,SARhD;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAWaO,QAAQ,CAACO,gBAAT,CAA0BN,WAA1B,EAAuCE,SAAvC,CAXb;;AAAA;AAWHK,YAAAA,OAXG;AAYTd,YAAAA,QAAQ,CAACO,WAAD,CAAR,GAAwB;AACtBG,cAAAA,SAAS,EAAE,IAAIC,IAAJ,GAAWC,OAAX,EADW;AAEtBE,cAAAA,OAAO,EAAEC,IAAI,CAACC,SAAL,CAAeF,OAAf;AAFa,aAAxB;AAIAb,YAAAA,GAAG,CAAC,IAAD,EAAOJ,SAAS,CAACM,OAAO,CAACc,EAAT,EAAaH,OAAb,CAAhB,CAAH;AAhBS;AAAA;;AAAA;AAAA;AAAA;AAkBTb,YAAAA,GAAG,CAAC,IAAD,EAAOJ,SAAS,CAACM,OAAO,CAACc,EAAT,EAAa,IAAb,CAAhB,CAAH;;AAlBS;AAAA;AAAA;;AAAA;AAqBXhB,YAAAA,GAAG,CACD,IADC,EAEDJ,SAAS,CAACM,OAAO,CAACc,EAAT,EAAaF,IAAI,CAACG,KAAL,CAAWlB,QAAQ,CAACO,WAAD,CAAR,CAAsBO,OAAjC,KAA6C,IAA1D,CAFR,CAAH;;AArBW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { toPayload } from '../jsonrpc';\nimport EthCalls from '../web3Calls';\nconst WAIT_TIME = 10 * 1000; //10 seconds\nconst memcache = {};\nexport default async ({ payload, requestManager }, res, next) => {\n  if (payload.method !== 'eth_getBlockByNumber') return next();\n  const ethCalls = new EthCalls(requestManager);\n  const blockNumber = payload.params[0];\n  const returnTxs = payload.params[1] ? payload.params[1] : false;\n  if (\n    !memcache[blockNumber] ||\n    (memcache[blockNumber] &&\n      memcache[blockNumber].timestamp < new Date().getTime() - WAIT_TIME)\n  ) {\n    try {\n      const receipt = await ethCalls.getBlockByNumber(blockNumber, returnTxs);\n      memcache[blockNumber] = {\n        timestamp: new Date().getTime(),\n        receipt: JSON.stringify(receipt)\n      };\n      res(null, toPayload(payload.id, receipt));\n    } catch (e) {\n      res(null, toPayload(payload.id, null));\n    }\n  } else {\n    res(\n      null,\n      toPayload(payload.id, JSON.parse(memcache[blockNumber].receipt) || null)\n    );\n  }\n};\n"]}]}