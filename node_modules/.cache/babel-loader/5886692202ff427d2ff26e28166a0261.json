{"remainingRequest":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/eslint-loader/index.js??ref--13-0!/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/wallets/web3-provider/methods/eth_signTransaction.js","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/wallets/web3-provider/methods/eth_signTransaction.js","mtime":1573477612132},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport unit from 'ethjs-unit';\nimport EthCalls from \"../web3Calls\";\nimport { WEB3_WALLET } from \"../../bip44/walletTypes\";\nimport { toPayload } from \"../jsonrpc\";\nimport EventNames from \"../events\";\nimport { getSanitizedTx } from \"./utils\";\nexport default\n/*#__PURE__*/\n(function () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee(_ref, res, next) {\n    var payload, store, requestManager, eventHub, tx, localTx, ethCalls;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            payload = _ref.payload, store = _ref.store, requestManager = _ref.requestManager, eventHub = _ref.eventHub;\n\n            if (!(payload.method !== 'eth_signTransaction')) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt(\"return\", next());\n\n          case 3:\n            tx = payload.params[0];\n            localTx = Object.assign({}, payload);\n            delete localTx['gas'];\n            delete localTx['nonce'];\n            ethCalls = new EthCalls(requestManager);\n\n            if (tx.nonce) {\n              _context.next = 14;\n              break;\n            }\n\n            _context.next = 11;\n            return store.state.web3.eth.getTransactionCount(store.state.wallet.getAddressString());\n\n          case 11:\n            _context.t0 = _context.sent;\n            _context.next = 15;\n            break;\n\n          case 14:\n            _context.t0 = tx.nonce;\n\n          case 15:\n            tx.nonce = _context.t0;\n\n            if (tx.gas) {\n              _context.next = 22;\n              break;\n            }\n\n            _context.next = 19;\n            return ethCalls.estimateGas(localTx);\n\n          case 19:\n            _context.t1 = _context.sent;\n            _context.next = 23;\n            break;\n\n          case 22:\n            _context.t1 = tx.gas;\n\n          case 23:\n            tx.gas = _context.t1;\n            tx.chainId = !tx.chainId ? store.state.network.type.chainID : tx.chainId;\n            tx.gasPrice = !tx.gasPrice ? unit.toWei(store.state.gasPrice, 'gwei').toString() : tx.gasPrice;\n            getSanitizedTx(tx).then(function (_tx) {\n              if (store.state.wallet.identifier === WEB3_WALLET) {\n                res(new Error('web3 wallets doesnt support eth_signTransaction'));\n              } else {\n                if (_tx.hasOwnProperty('generateOnly')) {\n                  eventHub.$emit(EventNames.SHOW_TX_CONFIRM_MODAL, _tx, function (_response) {\n                    res(null, toPayload(payload.id, _response));\n                  });\n                } else {\n                  eventHub.$emit(EventNames.SHOW_TX_CONFIRM_MODAL, _tx, function (_response) {\n                    res(null, _response);\n                  });\n                }\n              }\n            }).catch(function (e) {\n              res(e);\n            });\n\n          case 27:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x, _x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n})();",{"version":3,"sources":["/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/wallets/web3-provider/methods/eth_signTransaction.js"],"names":["unit","EthCalls","WEB3_WALLET","toPayload","EventNames","getSanitizedTx","res","next","payload","store","requestManager","eventHub","method","tx","params","localTx","Object","assign","ethCalls","nonce","state","web3","eth","getTransactionCount","wallet","getAddressString","gas","estimateGas","chainId","network","type","chainID","gasPrice","toWei","toString","then","_tx","identifier","Error","hasOwnProperty","$emit","SHOW_TX_CONFIRM_MODAL","_response","id","catch","e"],"mappings":"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","sourcesContent":["import unit from 'ethjs-unit';\nimport EthCalls from '../web3Calls';\nimport { WEB3_WALLET } from '../../bip44/walletTypes';\nimport { toPayload } from '../jsonrpc';\nimport EventNames from '../events';\nimport { getSanitizedTx } from './utils';\nexport default async (\n  { payload, store, requestManager, eventHub },\n  res,\n  next\n) => {\n  if (payload.method !== 'eth_signTransaction') return next();\n  const tx = payload.params[0];\n  const localTx = Object.assign({}, payload);\n  delete localTx['gas'];\n  delete localTx['nonce'];\n  const ethCalls = new EthCalls(requestManager);\n  tx.nonce = !tx.nonce\n    ? await store.state.web3.eth.getTransactionCount(\n        store.state.wallet.getAddressString()\n      )\n    : tx.nonce;\n  tx.gas = !tx.gas ? await ethCalls.estimateGas(localTx) : tx.gas;\n  tx.chainId = !tx.chainId ? store.state.network.type.chainID : tx.chainId;\n  tx.gasPrice = !tx.gasPrice\n    ? unit.toWei(store.state.gasPrice, 'gwei').toString()\n    : tx.gasPrice;\n  getSanitizedTx(tx)\n    .then(_tx => {\n      if (store.state.wallet.identifier === WEB3_WALLET) {\n        res(new Error('web3 wallets doesnt support eth_signTransaction'));\n      } else {\n        if (_tx.hasOwnProperty('generateOnly')) {\n          eventHub.$emit(EventNames.SHOW_TX_CONFIRM_MODAL, _tx, _response => {\n            res(null, toPayload(payload.id, _response));\n          });\n        } else {\n          eventHub.$emit(EventNames.SHOW_TX_CONFIRM_MODAL, _tx, _response => {\n            res(null, _response);\n          });\n        }\n      }\n    })\n    .catch(e => {\n      res(e);\n    });\n};\n"]}]}