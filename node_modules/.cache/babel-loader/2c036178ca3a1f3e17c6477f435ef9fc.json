{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/containers/ConfirmationContainer/ConfirmationContainer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/containers/ConfirmationContainer/ConfirmationContainer.vue","mtime":1574664278270},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js","mtime":1574664275010},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js","mtime":1574664277774}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.function.name\";\nimport _typeof from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/@babel/runtime-corejs2/helpers/esm/typeof\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es7.object.values\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport * as unit from 'ethjs-unit';\nimport BigNumber from 'bignumber.js';\nimport { Transaction } from 'ethereumjs-tx';\nimport ConfirmModal from \"./components/ConfirmModal\";\nimport ConfirmCollectionModal from \"./components/ConfirmCollectionModal\";\nimport SuccessModal from \"./components/SuccessModal\";\nimport ErrorModal from \"./components/ErrorModal\";\nimport ConfirmSignModal from \"./components/ConfirmSignModal\";\nimport { mapState } from 'vuex';\nimport { type as noticeTypes } from '@/helpers/notificationFormatters';\nimport { WEB3_WALLET, KEEPKEY } from '@/wallets/bip44/walletTypes';\nimport { Toast, Misc } from '@/helpers';\nimport locStore from 'store';\nimport parseTokensData from '@/helpers/parseTokensData.js';\nimport SwapWidget from '@/layouts/InterfaceLayout/containers/SwapContainer/components/SwapWidget';\nvar events = {\n  showSuccessModal: 'showSuccessModal',\n  showErrorModal: 'showErrorModal',\n  showTxConfirmModal: 'showTxConfirmModal',\n  showSendSignedTx: 'showSendSignedTx',\n  showWeb3Wallet: 'showWeb3Wallet',\n  showTxCollectionConfirmModal: 'showTxCollectionConfirmModal',\n  showMessageConfirmModal: 'showMessageConfirmModal'\n};\nexport default {\n  components: {\n    'confirm-modal': ConfirmModal,\n    'confirm-collection-modal': ConfirmCollectionModal,\n    'success-modal': SuccessModal,\n    'error-modal': ErrorModal,\n    'confirm-sign-modal': ConfirmSignModal,\n    'swap-widget': SwapWidget\n  },\n  props: {\n    active: {\n      type: Boolean,\n      default: false\n    },\n    rawTx: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    }\n  },\n  data: function data() {\n    return {\n      isHardwareWallet: false,\n      responseFunction: null,\n      advancedExpand: false,\n      addressValid: true,\n      amount: '',\n      amountValid: true,\n      nonce: '',\n      gasLimit: '21000',\n      data: '0x',\n      gasPrice: 0,\n      parsedBalance: 0,\n      toAddress: '',\n      transactionFee: '',\n      raw: {},\n      lastRaw: {},\n      ens: {},\n      signer: {},\n      signedTxObject: {},\n      signedTx: '',\n      messageToSign: '',\n      signedMessage: '',\n      successMessage: 'Success',\n      linkMessage: 'OK',\n      linkTo: '/',\n      etherscanLink: null,\n      dismissed: true,\n      signedArray: [],\n      txBatch: null,\n      sending: false,\n      unSignedArray: [],\n      signCallback: {},\n      swapWigetData: {\n        destAddress: '',\n        fromCurrency: {\n          symbol: 'ETH',\n          name: ''\n        },\n        toCurrency: {\n          symbol: 'ETH',\n          name: ''\n        },\n        fromValue: undefined,\n        toValue: undefined\n      }\n    };\n  },\n  computed: _objectSpread({}, mapState(['wallet', 'web3', 'account', 'network']), {\n    fromAddress: function fromAddress() {\n      if (this.account) {\n        return this.account.address;\n      }\n    }\n  }),\n  watch: {\n    wallet: function wallet(newVal) {\n      var _this = this;\n\n      if (newVal !== null) {\n        this.$refs.confirmModal.$refs.confirmation.$on('hidden', function () {\n          if (_this.dismissed) {\n            _this.reset();\n          }\n        });\n        this.$refs.signConfirmModal.$refs.signConfirmation.$on('hidden', function () {\n          _this.signedMessage = '';\n        });\n      }\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    var _this2 = this;\n\n    Object.values(events).forEach(function (evt) {\n      _this2.$eventHub.$off(evt);\n    });\n  },\n  created: function created() {\n    var _this3 = this;\n\n    this.$eventHub.$on('showSuccessModal', function (message, linkMessage, etherscanLink) {\n      if (!message) message = null;\n\n      _this3.showSuccessModal(message, linkMessage, etherscanLink);\n    });\n    this.$eventHub.$on('showErrorModal', function (message, linkMessage) {\n      if (!message) message = null;\n\n      _this3.showErrorModal(message, linkMessage);\n    });\n    this.$eventHub.$on('showTxConfirmModal', function (tx, resolve) {\n      _this3.parseRawTx(tx);\n\n      if (tx.hasOwnProperty('ensObj')) {\n        delete tx['ensObj'];\n      }\n\n      _this3.isHardwareWallet = _this3.account.isHardware;\n      _this3.responseFunction = resolve;\n      _this3.successMessage = 'Sending Transaction';\n\n      var signPromise = _this3.wallet.signTransaction(tx);\n\n      signPromise.then(function (_response) {\n        _this3.signedTxObject = _response;\n        _this3.signedTx = _this3.signedTxObject.rawTransaction;\n      }).catch(_this3.wallet.errorHandler);\n\n      if (_this3.account.identifier === KEEPKEY) {\n        signPromise.then(function () {\n          _this3.confirmationModalOpen();\n        });\n      } else {\n        _this3.confirmationModalOpen();\n      }\n    });\n    this.$eventHub.$on('showSendSignedTx', function (tx, resolve) {\n      var newTx = new Transaction(tx);\n      _this3.isHardwareWallet = _this3.account.isHardware;\n      _this3.responseFunction = resolve;\n      _this3.successMessage = 'Sending Transaction';\n      _this3.signedTxObject = {\n        rawTransaction: tx,\n        tx: {\n          to: \"0x\".concat(newTx.to.toString('hex')),\n          from: \"0x\".concat(newTx.from.toString('hex')),\n          value: \"0x\".concat(newTx.value.toString('hex')),\n          gas: \"0x\".concat(newTx.gasPrice.toString('hex')),\n          gasLimit: \"0x\".concat(newTx.gasLimit.toString('hex')),\n          data: \"0x\".concat(newTx.data.toString('hex')),\n          nonce: \"0x\".concat(newTx.nonce.toString('hex')),\n          v: \"0x\".concat(newTx.v.toString('hex')),\n          r: \"0x\".concat(newTx.r.toString('hex')),\n          s: \"0x\".concat(newTx.s.toString('hex'))\n        }\n      };\n\n      _this3.parseRawTx(_this3.signedTxObject.tx);\n\n      _this3.signedTx = _this3.signedTxObject.rawTransaction;\n\n      _this3.confirmationModalOpen();\n    });\n    this.$eventHub.$on('showWeb3Wallet', function (tx, resolve) {\n      _this3.parseRawTx(tx);\n\n      _this3.successMessage = 'Sending Transaction';\n\n      var promiObject = _this3.wallet.signTransaction(tx);\n\n      resolve(promiObject);\n\n      _this3.showSuccessModal('Continue transaction with Web3 Wallet Provider.', 'Close');\n    });\n    this.$eventHub.$on('showTxCollectionConfirmModal',\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(tx, signCallback, isHardware) {\n        var signed, i, _signedTx;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this3.isHardwareWallet = isHardware;\n                _this3.unSignedArray = [];\n                _this3.unSignedArray = tx;\n                signed = [];\n                if (!signCallback) signCallback = function signCallback() {};\n                _this3.signCallback = signCallback;\n\n                _this3.confirmationCollectionModalOpen();\n\n                if (!(_this3.account.identifier !== WEB3_WALLET)) {\n                  _context.next = 20;\n                  break;\n                }\n\n                i = 0;\n\n              case 9:\n                if (!(i < tx.length)) {\n                  _context.next = 17;\n                  break;\n                }\n\n                _context.next = 12;\n                return _this3.wallet.signTransaction(tx[i]);\n\n              case 12:\n                _signedTx = _context.sent;\n                signed.push(_signedTx);\n\n              case 14:\n                i++;\n                _context.next = 9;\n                break;\n\n              case 17:\n                _this3.signedArray = signed;\n                _context.next = 21;\n                break;\n\n              case 20:\n                _this3.signedArray = _this3.unSignedArray.map(function (_tx) {\n                  return {\n                    tx: _tx,\n                    rawTransaction: _tx\n                  };\n                });\n\n              case 21:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2, _x3) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    this.$eventHub.$on('showMessageConfirmModal', function (data, resolve) {\n      _this3.responseFunction = resolve;\n      _this3.messageToSign = data;\n\n      var signPromise = _this3.wallet.signMessage(data).then(function (_response) {\n        _this3.signedMessage = '0x' + _response.toString('hex');\n      });\n\n      if (_this3.account.identifier === KEEPKEY) {\n        signPromise.then(function () {\n          _this3.signConfirmationModalOpen();\n        });\n      } else {\n        _this3.signConfirmationModalOpen();\n      }\n    });\n    this.$eventHub.$on('showSwapWidget', function (destAddress, toCurrency, fromCurrency, fromValue) {\n      _this3.swapWidgetModalOpen(destAddress, toCurrency, fromCurrency, fromValue);\n    });\n    this.$eventHub.$on('showSwapWidgetTo', function (destAddress, toCurrency, fromCurrency, toValue) {\n      _this3.swapWidgetModalOpen(destAddress, toCurrency, fromCurrency, undefined, toValue);\n    });\n  },\n  mounted: function mounted() {\n    var _this4 = this;\n\n    this.$refs.successModal.$refs.success.$on('hide', function () {\n      _this4.successMessage = '';\n      _this4.linkMessage = 'OK';\n    });\n  },\n  methods: {\n    swapWidgetModalOpen: function swapWidgetModalOpen(destAddress, fromCurrency, toCurrency, fromValue, toValue) {\n      var _this5 = this;\n\n      if (typeof toCurrency === 'string') {\n        this.$set(this.swapWigetData.toCurrency, 'symbol', toCurrency);\n      } else if (_typeof(toCurrency) === 'object') {\n        this.$set(this.swapWigetData, 'toCurrency', toCurrency);\n      } else {\n        throw Error('swap widget requires requires toCurrency to be a string or object');\n      }\n\n      if (typeof fromCurrency === 'string') {\n        this.$set(this.swapWigetData.fromCurrency, 'symbol', fromCurrency);\n      } else if (_typeof(toCurrency) === 'object') {\n        this.$set(this.swapWigetData, 'fromCurrency', fromCurrency);\n      } else {\n        throw Error('swap widget requires requires fromCurrency to be a string or object');\n      }\n\n      this.swapWigetData = {\n        destAddress: destAddress,\n        fromCurrency: this.swapWigetData.fromCurrency,\n        toCurrency: this.swapWigetData.toCurrency,\n        fromValue: fromValue,\n        toValue: toValue\n      };\n      this.$nextTick(function () {\n        if (_this5.$refs.swapWidget) {\n          _this5.$refs.swapWidget.$refs.modal.show();\n\n          _this5.$refs.swapWidget.$refs.modal.$on('hidden', function () {\n            _this5.swapWigetData = {\n              destAddress: '',\n              fromCurrency: {\n                symbol: 'ETH',\n                name: ''\n              },\n              toCurrency: {\n                symbol: 'ETH',\n                name: ''\n              },\n              fromValue: 0\n            };\n          });\n        }\n      });\n    },\n    confirmationModalOpen: function confirmationModalOpen() {\n      window.scrollTo(0, 0);\n      this.$refs.confirmModal.$refs.confirmation.show();\n    },\n    confirmationCollectionModalOpen: function confirmationCollectionModalOpen() {\n      window.scrollTo(0, 0);\n      this.$refs.confirmCollectionModal.$refs.confirmCollection.show();\n    },\n    confirmationOfflineGenerateModalOpen: function confirmationOfflineGenerateModalOpen() {\n      window.scrollTo(0, 0);\n      this.$refs.offlineGenerateConfirmModal.$refs.confirmation.show();\n    },\n    signConfirmationModalOpen: function signConfirmationModalOpen() {\n      window.scrollTo(0, 0);\n      this.$refs.signConfirmModal.$refs.signConfirmation.show();\n    },\n    showSuccessModal: function showSuccessModal(message, linkMessage, etherscanLink) {\n      this.reset();\n      if (message !== null) this.successMessage = message;\n      if (linkMessage !== null) this.linkMessage = linkMessage;\n      if (etherscanLink !== null) this.etherscanLink = etherscanLink;\n      this.$refs.successModal.$refs.success.show();\n    },\n    showErrorModal: function showErrorModal(message, linkMessage) {\n      this.reset();\n      if (message !== null) this.successMessage = message;\n      if (linkMessage !== null) this.linkMessage = linkMessage;\n      this.$refs.errorModal.$refs.errorModal.show();\n    },\n    parseRawTx: function parseRawTx(tx) {\n      var tokenData = '';\n\n      if (tx.to && tx.data) {\n        tokenData = parseTokensData(tx.data, tx.to, this.web3, this.network.type.tokens, this.network.type.name);\n        tx.tokenTransferTo = tokenData.tokenTransferTo;\n        tx.tokenTransferVal = tokenData.tokenTransferVal;\n        tx.tokenSymbol = tokenData.tokenSymbol;\n      }\n\n      this.raw = tx;\n      this.nonce = tx.nonce === '0x' ? 0 : new BigNumber(tx.nonce).toFixed();\n      this.data = tx.data;\n      this.gasLimit = new BigNumber(tx.gas).toFixed();\n      this.gasPrice = parseInt(unit.fromWei(new BigNumber(tx.gasPrice).toFixed(), 'gwei'));\n      this.toAddress = tx.to;\n      this.amount = tx.value === '0x' ? '0' : new BigNumber(tx.value).toFixed();\n      this.transactionFee = unit.fromWei(new BigNumber(tx.gas).times(tx.gasPrice).toFixed(), 'ether').toString();\n      this.ens = {};\n\n      if (tx.hasOwnProperty('ensObj')) {\n        this.ens = Object.assign({}, tx.ensObj);\n      }\n\n      this.lastRaw = tx;\n    },\n    messageReturn: function messageReturn() {\n      this.dismissed = false;\n      this.responseFunction(this.signedMessage);\n      this.$refs.signConfirmModal.$refs.signConfirmation.hide();\n    },\n    generateTx: function generateTx() {\n      this.dismissed = false;\n      this.responseFunction(this.signedTxObject);\n      this.$refs.confirmModal.$refs.confirmation.hide();\n    },\n    doBatchTransactions: function () {\n      var _doBatchTransactions = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var _this6 = this;\n\n        var web3, _method, _arr, promises;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                web3 = this.web3;\n                _method = this.account.identifier === WEB3_WALLET ? 'sendTransaction' : 'sendSignedTransaction';\n                _arr = this.account.identifier === WEB3_WALLET ? this.signedArray.reverse() : this.signedArray;\n                promises = _arr.map(function (tx) {\n                  var _tx = tx.tx;\n                  _tx.from = _this6.account.address;\n                  var _rawTx = tx.rawTransaction;\n\n                  var onError = function onError(err) {\n                    _this6.$store.dispatch('addNotification', [noticeTypes.TRANSACTION_ERROR, _tx.from, _this6.unSignedArray.find(function (entry) {\n                      return new BigNumber(_tx.nonce).eq(entry.nonce);\n                    }) || _tx, err]);\n\n                    Toast.responseHandler(err, Toast.ERROR);\n                  };\n\n                  var promiEvent = web3.eth[_method](_rawTx);\n\n                  promiEvent.catch(onError);\n                  promiEvent.on('error', onError);\n                  promiEvent.once('transactionHash', function (hash) {\n                    _this6.showSuccessModal('Transaction sent!', 'Okay', _this6.network.type.blockExplorerTX.replace('[[txHash]]', hash));\n\n                    _this6.$store.dispatch('addNotification', [noticeTypes.TRANSACTION_HASH, _tx.from, _this6.unSignedArray.find(function (entry) {\n                      return new BigNumber(_tx.nonce).eq(entry.nonce);\n                    }), hash]);\n\n                    var localStoredObj = locStore.get(web3.utils.sha3(_this6.account.address));\n                    locStore.set(web3.utils.sha3(_this6.account.address), {\n                      nonce: Misc.sanitizeHex(new BigNumber(localStoredObj.nonce).plus(1).toString(16)),\n                      timestamp: localStoredObj.timestamp\n                    });\n                  });\n                  promiEvent.then(function (receipt) {\n                    _this6.$store.dispatch('addNotification', [noticeTypes.TRANSACTION_RECEIPT, _tx.from, _this6.unSignedArray.find(function (entry) {\n                      return new BigNumber(_tx.nonce).eq(entry.nonce);\n                    }), receipt]);\n                  });\n                  return promiEvent;\n                });\n                this.signCallback(promises);\n                this.sending = true;\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function doBatchTransactions() {\n        return _doBatchTransactions.apply(this, arguments);\n      }\n\n      return doBatchTransactions;\n    }(),\n    sendBatchTransactions: function sendBatchTransactions() {\n      this.$refs.confirmCollectionModal.$refs.confirmCollection.hide();\n      this.doBatchTransactions();\n    },\n    sendTx: function sendTx() {\n      this.dismissed = false;\n      this.responseFunction(this.signedTxObject);\n      this.$refs.confirmModal.$refs.confirmation.hide();\n      if (this.raw.generateOnly) return;\n      this.showSuccessModal('Transaction sent!', 'Okay', this.network.type.blockExplorerTX.replace('[[txHash]]', this.signedTxObject.tx.hash));\n    },\n    reset: function reset() {\n      this.responseFunction = null;\n      this.advancedExpand = false;\n      this.addressValid = true;\n      this.amount = '';\n      this.amountValid = true;\n      this.nonce = '';\n      this.gasLimit = '21000';\n      this.data = '0x';\n      this.gasPrice = 0;\n      this.parsedBalance = 0;\n      this.toAddress = '';\n      this.transactionFee = '';\n      this.raw = {};\n      this.signedTx = '';\n      this.messageToSign = '';\n      this.signedMessage = '';\n      this.messageToSign = '';\n      this.signedArray = [];\n      this.txBatch = null;\n      this.sending = false;\n      this.signCallback = {};\n      this.swapWigetData = {\n        destAddress: '',\n        fromCurrency: {\n          symbol: 'ETH',\n          name: ''\n        },\n        toCurrency: {\n          symbol: 'ETH',\n          name: ''\n        },\n        fromValue: 0\n      };\n    }\n  }\n};",{"version":3,"sources":["ConfirmationContainer.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <confirm-modal\n      v-if=\"wallet !== null\"\n      ref=\"confirmModal\"\n      :confirm-send-tx=\"sendTx\"\n      :signed-tx=\"signedTx\"\n      :fee=\"transactionFee\"\n      :is-hardware-wallet=\"isHardwareWallet\"\n      :gas-price=\"gasPrice\"\n      :from=\"fromAddress\"\n      :to=\"toAddress\"\n      :value=\"amount\"\n      :gas=\"gasLimit\"\n      :data=\"data\"\n      :nonce=\"nonce\"\n    />\n    <confirm-collection-modal\n      v-if=\"wallet !== null\"\n      ref=\"confirmCollectionModal\"\n      :send-batch-transactions=\"sendBatchTransactions\"\n      :is-hardware-wallet=\"isHardwareWallet\"\n      :signed-array=\"signedArray\"\n      :un-signed-array=\"unSignedArray\"\n      :sending=\"sending\"\n    />\n    <confirm-modal\n      v-if=\"wallet !== null\"\n      ref=\"offlineGenerateConfirmModal\"\n      :confirm-send-tx=\"generateTx\"\n      :signed-tx=\"signedTx\"\n      :fee=\"transactionFee\"\n      :is-hardware-wallet=\"isHardwareWallet\"\n      :gas-price=\"gasPrice\"\n      :from=\"fromAddress\"\n      :to=\"toAddress\"\n      :value=\"amount\"\n      :gas=\"gasLimit\"\n      :data=\"data\"\n      :nonce=\"nonce\"\n    />\n    <confirm-sign-modal\n      v-if=\"wallet !== null\"\n      ref=\"signConfirmModal\"\n      :confirm-sign-message=\"messageReturn\"\n      :show-success=\"showSuccessModal\"\n      :message-to-sign=\"messageToSign\"\n      :signed-message=\"signedMessage\"\n      :is-hardware-wallet=\"isHardwareWallet\"\n      :from=\"fromAddress\"\n    />\n    <success-modal\n      ref=\"successModal\"\n      :message=\"successMessage\"\n      :link-message=\"linkMessage\"\n      :link-to=\"linkTo\"\n      :etherscan-link=\"etherscanLink\"\n    />\n    <error-modal\n      ref=\"errorModal\"\n      :message=\"successMessage\"\n      :link-message=\"linkMessage\"\n    />\n    <swap-widget\n      v-if=\"wallet !== null\"\n      ref=\"swapWidget\"\n      :supplied-from=\"swapWigetData['fromCurrency']\"\n      :supplied-to=\"swapWigetData['toCurrency']\"\n      :supplied-from-amount=\"swapWigetData['fromValue']\"\n      :supplied-to-amount=\"swapWigetData['toValue']\"\n      :dest-address=\"swapWigetData['destAddress']\"\n    />\n  </div>\n</template>\n\n<script>\nimport * as unit from 'ethjs-unit';\nimport BigNumber from 'bignumber.js';\nimport { Transaction } from 'ethereumjs-tx';\nimport ConfirmModal from './components/ConfirmModal';\nimport ConfirmCollectionModal from './components/ConfirmCollectionModal';\nimport SuccessModal from './components/SuccessModal';\nimport ErrorModal from './components/ErrorModal';\nimport ConfirmSignModal from './components/ConfirmSignModal';\nimport { mapState } from 'vuex';\nimport { type as noticeTypes } from '@/helpers/notificationFormatters';\nimport { WEB3_WALLET, KEEPKEY } from '@/wallets/bip44/walletTypes';\nimport { Toast, Misc } from '@/helpers';\nimport locStore from 'store';\nimport parseTokensData from '@/helpers/parseTokensData.js';\nimport SwapWidget from '@/layouts/InterfaceLayout/containers/SwapContainer/components/SwapWidget';\n\nconst events = {\n  showSuccessModal: 'showSuccessModal',\n  showErrorModal: 'showErrorModal',\n  showTxConfirmModal: 'showTxConfirmModal',\n  showSendSignedTx: 'showSendSignedTx',\n  showWeb3Wallet: 'showWeb3Wallet',\n  showTxCollectionConfirmModal: 'showTxCollectionConfirmModal',\n  showMessageConfirmModal: 'showMessageConfirmModal'\n};\n\nexport default {\n  components: {\n    'confirm-modal': ConfirmModal,\n    'confirm-collection-modal': ConfirmCollectionModal,\n    'success-modal': SuccessModal,\n    'error-modal': ErrorModal,\n    'confirm-sign-modal': ConfirmSignModal,\n    'swap-widget': SwapWidget\n  },\n  props: {\n    active: {\n      type: Boolean,\n      default: false\n    },\n    rawTx: {\n      type: Object,\n      default: function() {\n        return {};\n      }\n    }\n  },\n  data() {\n    return {\n      isHardwareWallet: false,\n      responseFunction: null,\n      advancedExpand: false,\n      addressValid: true,\n      amount: '',\n      amountValid: true,\n      nonce: '',\n      gasLimit: '21000',\n      data: '0x',\n      gasPrice: 0,\n      parsedBalance: 0,\n      toAddress: '',\n      transactionFee: '',\n      raw: {},\n      lastRaw: {},\n      ens: {},\n      signer: {},\n      signedTxObject: {},\n      signedTx: '',\n      messageToSign: '',\n      signedMessage: '',\n      successMessage: 'Success',\n      linkMessage: 'OK',\n      linkTo: '/',\n      etherscanLink: null,\n      dismissed: true,\n      signedArray: [],\n      txBatch: null,\n      sending: false,\n      unSignedArray: [],\n      signCallback: {},\n      swapWigetData: {\n        destAddress: '',\n        fromCurrency: {\n          symbol: 'ETH',\n          name: ''\n        },\n        toCurrency: {\n          symbol: 'ETH',\n          name: ''\n        },\n        fromValue: undefined,\n        toValue: undefined\n      }\n    };\n  },\n  computed: {\n    ...mapState(['wallet', 'web3', 'account', 'network']),\n    fromAddress() {\n      if (this.account) {\n        return this.account.address;\n      }\n    }\n  },\n  watch: {\n    wallet(newVal) {\n      if (newVal !== null) {\n        this.$refs.confirmModal.$refs.confirmation.$on('hidden', () => {\n          if (this.dismissed) {\n            this.reset();\n          }\n        });\n\n        this.$refs.signConfirmModal.$refs.signConfirmation.$on('hidden', () => {\n          this.signedMessage = '';\n        });\n      }\n    }\n  },\n  beforeDestroy() {\n    Object.values(events).forEach(evt => {\n      this.$eventHub.$off(evt);\n    });\n  },\n  created() {\n    this.$eventHub.$on(\n      'showSuccessModal',\n      (message, linkMessage, etherscanLink) => {\n        if (!message) message = null;\n        this.showSuccessModal(message, linkMessage, etherscanLink);\n      }\n    );\n\n    this.$eventHub.$on('showErrorModal', (message, linkMessage) => {\n      if (!message) message = null;\n      this.showErrorModal(message, linkMessage);\n    });\n\n    this.$eventHub.$on('showTxConfirmModal', (tx, resolve) => {\n      this.parseRawTx(tx);\n      if (tx.hasOwnProperty('ensObj')) {\n        delete tx['ensObj'];\n      }\n      this.isHardwareWallet = this.account.isHardware;\n      this.responseFunction = resolve;\n      this.successMessage = 'Sending Transaction';\n\n      const signPromise = this.wallet.signTransaction(tx);\n\n      signPromise\n        .then(_response => {\n          this.signedTxObject = _response;\n          this.signedTx = this.signedTxObject.rawTransaction;\n        })\n        .catch(this.wallet.errorHandler);\n      if (this.account.identifier === KEEPKEY) {\n        signPromise.then(() => {\n          this.confirmationModalOpen();\n        });\n      } else {\n        this.confirmationModalOpen();\n      }\n    });\n\n    this.$eventHub.$on('showSendSignedTx', (tx, resolve) => {\n      const newTx = new Transaction(tx);\n      this.isHardwareWallet = this.account.isHardware;\n      this.responseFunction = resolve;\n      this.successMessage = 'Sending Transaction';\n      this.signedTxObject = {\n        rawTransaction: tx,\n        tx: {\n          to: `0x${newTx.to.toString('hex')}`,\n          from: `0x${newTx.from.toString('hex')}`,\n          value: `0x${newTx.value.toString('hex')}`,\n          gas: `0x${newTx.gasPrice.toString('hex')}`,\n          gasLimit: `0x${newTx.gasLimit.toString('hex')}`,\n          data: `0x${newTx.data.toString('hex')}`,\n          nonce: `0x${newTx.nonce.toString('hex')}`,\n          v: `0x${newTx.v.toString('hex')}`,\n          r: `0x${newTx.r.toString('hex')}`,\n          s: `0x${newTx.s.toString('hex')}`\n        }\n      };\n      this.parseRawTx(this.signedTxObject.tx);\n      this.signedTx = this.signedTxObject.rawTransaction;\n      this.confirmationModalOpen();\n    });\n\n    this.$eventHub.$on('showWeb3Wallet', (tx, resolve) => {\n      this.parseRawTx(tx);\n      this.successMessage = 'Sending Transaction';\n      const promiObject = this.wallet.signTransaction(tx);\n      resolve(promiObject);\n      this.showSuccessModal(\n        'Continue transaction with Web3 Wallet Provider.',\n        'Close'\n      );\n    });\n\n    this.$eventHub.$on(\n      'showTxCollectionConfirmModal',\n      async (tx, signCallback, isHardware) => {\n        this.isHardwareWallet = isHardware;\n        this.unSignedArray = [];\n        this.unSignedArray = tx;\n        const signed = [];\n        if (!signCallback) signCallback = () => {};\n        this.signCallback = signCallback;\n\n        this.confirmationCollectionModalOpen();\n        if (this.account.identifier !== WEB3_WALLET) {\n          for (let i = 0; i < tx.length; i++) {\n            const _signedTx = await this.wallet.signTransaction(tx[i]);\n            signed.push(_signedTx);\n          }\n          this.signedArray = signed;\n        } else {\n          this.signedArray = this.unSignedArray.map(_tx => {\n            return { tx: _tx, rawTransaction: _tx };\n          });\n        }\n      }\n    );\n\n    this.$eventHub.$on('showMessageConfirmModal', (data, resolve) => {\n      this.responseFunction = resolve;\n      this.messageToSign = data;\n      const signPromise = this.wallet.signMessage(data).then(_response => {\n        this.signedMessage = '0x' + _response.toString('hex');\n      });\n      if (this.account.identifier === KEEPKEY) {\n        signPromise.then(() => {\n          this.signConfirmationModalOpen();\n        });\n      } else {\n        this.signConfirmationModalOpen();\n      }\n    });\n\n    this.$eventHub.$on(\n      'showSwapWidget',\n      (destAddress, toCurrency, fromCurrency, fromValue) => {\n        this.swapWidgetModalOpen(\n          destAddress,\n          toCurrency,\n          fromCurrency,\n          fromValue\n        );\n      }\n    );\n\n    this.$eventHub.$on(\n      'showSwapWidgetTo',\n      (destAddress, toCurrency, fromCurrency, toValue) => {\n        this.swapWidgetModalOpen(\n          destAddress,\n          toCurrency,\n          fromCurrency,\n          undefined,\n          toValue\n        );\n      }\n    );\n  },\n  mounted() {\n    this.$refs.successModal.$refs.success.$on('hide', () => {\n      this.successMessage = '';\n      this.linkMessage = 'OK';\n    });\n  },\n  methods: {\n    swapWidgetModalOpen(\n      destAddress,\n      fromCurrency,\n      toCurrency,\n      fromValue,\n      toValue\n    ) {\n      if (typeof toCurrency === 'string') {\n        this.$set(this.swapWigetData.toCurrency, 'symbol', toCurrency);\n      } else if (typeof toCurrency === 'object') {\n        this.$set(this.swapWigetData, 'toCurrency', toCurrency);\n      } else {\n        throw Error(\n          'swap widget requires requires toCurrency to be a string or object'\n        );\n      }\n\n      if (typeof fromCurrency === 'string') {\n        this.$set(this.swapWigetData.fromCurrency, 'symbol', fromCurrency);\n      } else if (typeof toCurrency === 'object') {\n        this.$set(this.swapWigetData, 'fromCurrency', fromCurrency);\n      } else {\n        throw Error(\n          'swap widget requires requires fromCurrency to be a string or object'\n        );\n      }\n\n      this.swapWigetData = {\n        destAddress: destAddress,\n        fromCurrency: this.swapWigetData.fromCurrency,\n        toCurrency: this.swapWigetData.toCurrency,\n        fromValue: fromValue,\n        toValue: toValue\n      };\n\n      this.$nextTick(() => {\n        if (this.$refs.swapWidget) {\n          this.$refs.swapWidget.$refs.modal.show();\n          this.$refs.swapWidget.$refs.modal.$on('hidden', () => {\n            this.swapWigetData = {\n              destAddress: '',\n              fromCurrency: {\n                symbol: 'ETH',\n                name: ''\n              },\n              toCurrency: {\n                symbol: 'ETH',\n                name: ''\n              },\n              fromValue: 0\n            };\n          });\n        }\n      });\n    },\n    confirmationModalOpen() {\n      window.scrollTo(0, 0);\n      this.$refs.confirmModal.$refs.confirmation.show();\n    },\n    confirmationCollectionModalOpen() {\n      window.scrollTo(0, 0);\n      this.$refs.confirmCollectionModal.$refs.confirmCollection.show();\n    },\n    confirmationOfflineGenerateModalOpen() {\n      window.scrollTo(0, 0);\n      this.$refs.offlineGenerateConfirmModal.$refs.confirmation.show();\n    },\n    signConfirmationModalOpen() {\n      window.scrollTo(0, 0);\n      this.$refs.signConfirmModal.$refs.signConfirmation.show();\n    },\n    showSuccessModal(message, linkMessage, etherscanLink) {\n      this.reset();\n      if (message !== null) this.successMessage = message;\n      if (linkMessage !== null) this.linkMessage = linkMessage;\n      if (etherscanLink !== null) this.etherscanLink = etherscanLink;\n      this.$refs.successModal.$refs.success.show();\n    },\n    showErrorModal(message, linkMessage) {\n      this.reset();\n      if (message !== null) this.successMessage = message;\n      if (linkMessage !== null) this.linkMessage = linkMessage;\n      this.$refs.errorModal.$refs.errorModal.show();\n    },\n    parseRawTx(tx) {\n      let tokenData = '';\n      if (tx.to && tx.data) {\n        tokenData = parseTokensData(\n          tx.data,\n          tx.to,\n          this.web3,\n          this.network.type.tokens,\n          this.network.type.name\n        );\n        tx.tokenTransferTo = tokenData.tokenTransferTo;\n        tx.tokenTransferVal = tokenData.tokenTransferVal;\n        tx.tokenSymbol = tokenData.tokenSymbol;\n      }\n\n      this.raw = tx;\n      this.nonce = tx.nonce === '0x' ? 0 : new BigNumber(tx.nonce).toFixed();\n      this.data = tx.data;\n      this.gasLimit = new BigNumber(tx.gas).toFixed();\n      this.gasPrice = parseInt(\n        unit.fromWei(new BigNumber(tx.gasPrice).toFixed(), 'gwei')\n      );\n      this.toAddress = tx.to;\n      this.amount = tx.value === '0x' ? '0' : new BigNumber(tx.value).toFixed();\n      this.transactionFee = unit\n        .fromWei(new BigNumber(tx.gas).times(tx.gasPrice).toFixed(), 'ether')\n        .toString();\n      this.ens = {};\n      if (tx.hasOwnProperty('ensObj')) {\n        this.ens = Object.assign({}, tx.ensObj);\n      }\n      this.lastRaw = tx;\n    },\n    messageReturn() {\n      this.dismissed = false;\n      this.responseFunction(this.signedMessage);\n      this.$refs.signConfirmModal.$refs.signConfirmation.hide();\n    },\n    generateTx() {\n      this.dismissed = false;\n      this.responseFunction(this.signedTxObject);\n      this.$refs.confirmModal.$refs.confirmation.hide();\n    },\n    async doBatchTransactions() {\n      const web3 = this.web3;\n      const _method =\n        this.account.identifier === WEB3_WALLET\n          ? 'sendTransaction'\n          : 'sendSignedTransaction';\n      const _arr =\n        this.account.identifier === WEB3_WALLET\n          ? this.signedArray.reverse()\n          : this.signedArray;\n      const promises = _arr.map(tx => {\n        const _tx = tx.tx;\n        _tx.from = this.account.address;\n        const _rawTx = tx.rawTransaction;\n        const onError = err => {\n          this.$store.dispatch('addNotification', [\n            noticeTypes.TRANSACTION_ERROR,\n            _tx.from,\n            this.unSignedArray.find(entry =>\n              new BigNumber(_tx.nonce).eq(entry.nonce)\n            ) || _tx,\n            err\n          ]);\n          Toast.responseHandler(err, Toast.ERROR);\n        };\n        const promiEvent = web3.eth[_method](_rawTx);\n        promiEvent.catch(onError);\n        promiEvent.on('error', onError);\n        promiEvent.once('transactionHash', hash => {\n          this.showSuccessModal(\n            'Transaction sent!',\n            'Okay',\n            this.network.type.blockExplorerTX.replace('[[txHash]]', hash)\n          );\n          this.$store.dispatch('addNotification', [\n            noticeTypes.TRANSACTION_HASH,\n            _tx.from,\n            this.unSignedArray.find(entry =>\n              new BigNumber(_tx.nonce).eq(entry.nonce)\n            ),\n            hash\n          ]);\n          const localStoredObj = locStore.get(\n            web3.utils.sha3(this.account.address)\n          );\n          locStore.set(web3.utils.sha3(this.account.address), {\n            nonce: Misc.sanitizeHex(\n              new BigNumber(localStoredObj.nonce).plus(1).toString(16)\n            ),\n            timestamp: localStoredObj.timestamp\n          });\n        });\n        promiEvent.then(receipt => {\n          this.$store.dispatch('addNotification', [\n            noticeTypes.TRANSACTION_RECEIPT,\n            _tx.from,\n            this.unSignedArray.find(entry =>\n              new BigNumber(_tx.nonce).eq(entry.nonce)\n            ),\n            receipt\n          ]);\n        });\n        return promiEvent;\n      });\n      this.signCallback(promises);\n      this.sending = true;\n    },\n    sendBatchTransactions() {\n      this.$refs.confirmCollectionModal.$refs.confirmCollection.hide();\n      this.doBatchTransactions();\n    },\n    sendTx() {\n      this.dismissed = false;\n      this.responseFunction(this.signedTxObject);\n      this.$refs.confirmModal.$refs.confirmation.hide();\n\n      if (this.raw.generateOnly) return;\n      this.showSuccessModal(\n        'Transaction sent!',\n        'Okay',\n        this.network.type.blockExplorerTX.replace(\n          '[[txHash]]',\n          this.signedTxObject.tx.hash\n        )\n      );\n    },\n    reset() {\n      this.responseFunction = null;\n      this.advancedExpand = false;\n      this.addressValid = true;\n      this.amount = '';\n      this.amountValid = true;\n      this.nonce = '';\n      this.gasLimit = '21000';\n      this.data = '0x';\n      this.gasPrice = 0;\n      this.parsedBalance = 0;\n      this.toAddress = '';\n      this.transactionFee = '';\n      this.raw = {};\n      this.signedTx = '';\n      this.messageToSign = '';\n      this.signedMessage = '';\n      this.messageToSign = '';\n      this.signedArray = [];\n      this.txBatch = null;\n      this.sending = false;\n      this.signCallback = {};\n      this.swapWigetData = {\n        destAddress: '',\n        fromCurrency: {\n          symbol: 'ETH',\n          name: ''\n        },\n        toCurrency: {\n          symbol: 'ETH',\n          name: ''\n        },\n        fromValue: 0\n      };\n    }\n  }\n};\n</script>\n"],"sourceRoot":"src/containers/ConfirmationContainer"}]}