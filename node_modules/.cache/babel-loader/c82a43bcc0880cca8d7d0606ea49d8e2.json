{"remainingRequest":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/containers/NotificationsContainer/NotificationsContainer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/containers/NotificationsContainer/NotificationsContainer.vue","mtime":1573477611640},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.number.is-nan\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.array.find-index\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.sort\";\nimport _defineProperty from \"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState } from 'vuex';\nimport store from 'store';\nimport unit from 'ethjs-unit';\nimport BigNumber from 'bignumber.js';\nimport SwapNotification from \"./components/NotificationTypes/SwapNotification\";\nimport TransactionNotification from \"./components/NotificationTypes/TransactionNotification\";\nimport TransactionDetails from \"./components/NotificationTypes/NotificationDetails\";\nimport SwapDetails from \"./components/NotificationTypes/SwapDetails\";\nimport { statusTypes, listComponentMapping, detailComponentMapping } from \"./components/config\";\nimport { INVESTIGATE_FAILURE_KEY, notificationStatuses, notificationType } from '@/helpers/notificationFormatters';\nimport { SwapProviders } from '@/partners';\nexport default {\n  components: {\n    'swap-notification': SwapNotification,\n    'transaction-notification': TransactionNotification,\n    'transaction-details': TransactionDetails,\n    'swap-details': SwapDetails\n  },\n  data: function data() {\n    return {\n      cancelHide: false,\n      shown: false,\n      unreadCount: 0,\n      ethPrice: new BigNumber(0),\n      detailsShown: false,\n      detailType: '',\n      notificationDetails: {}\n    };\n  },\n  computed: _objectSpread({}, mapState(['web3', 'network', 'notifications', 'account', 'online']), {\n    sortedNotifications: function sortedNotifications() {\n      var _this = this;\n\n      if (!this.notifications[this.account.address]) return [];\n      var notifications = this.notifications[this.account.address];\n      return notifications.sort(function (a, b) {\n        a = a.timestamp;\n        b = b.timestamp;\n        return a > b ? -1 : a < b ? 1 : 0;\n      }).filter(function (entry) {\n        return entry.network === _this.network.type.name;\n      });\n    }\n  }),\n  watch: {\n    notifications: function notifications() {\n      this.countUnread();\n    }\n  },\n  mounted: function mounted() {\n    if (this.notifications[this.account.address] === undefined) {\n      this.notifications[this.account.address] = [];\n      store.set('notifications', this.notifications);\n    }\n\n    this.countUnread();\n\n    if (this.online) {\n      this.fetchBalanceData();\n      this.checkForUnResolvedTxNotifications();\n    }\n  },\n  methods: {\n    hiddenModal: function hiddenModal() {\n      this.shown = false;\n      this.hideDetails();\n    },\n    checkForUnResolvedTxNotifications: function checkForUnResolvedTxNotifications() {\n      var _this2 = this;\n\n      if (!this.notifications[this.account.address]) return [];\n      var check = this.notifications[this.account.address].filter(function (entry) {\n        return entry.network === _this2.network.type.name;\n      }).filter(function (entry) {\n        var isOlder = (new Date().getTime() - new Date(entry.timestamp).getTime()) / 1000 > 6000;\n        var isUnResolved = entry.status === notificationStatuses.PENDING;\n        var notExternalSwap = entry.type === notificationType.TRANSACTION || entry.type === notificationType.SWAP && entry.body.isDex === true;\n        var hasHash = entry.hash !== '' && entry.hash !== undefined;\n        return isOlder && isUnResolved && hasHash && notExternalSwap;\n      });\n      check.forEach(function (entry) {\n        _this2.web3.eth.getTransactionReceipt(entry.hash).then(function (result) {\n          if (result === null) return;\n\n          var noticeIdx = _this2.notifications[_this2.account.address].findIndex(function (noticeEntry) {\n            return entry.id === noticeEntry.id;\n          });\n\n          if (noticeIdx >= 0) {\n            entry.status = result.status ? notificationStatuses.COMPLETE : notificationStatuses.FAILED;\n            entry.body.error = !result.status;\n            entry.body.errorMessage = result.status ? '' : INVESTIGATE_FAILURE_KEY;\n            entry.body.gasUsed = new BigNumber(result.gasUsed).toString();\n            entry.body.blockNumber = new BigNumber(result.blockNumber).toString();\n\n            if (entry.body.isDex) {\n              entry.swapStatus = result.status ? notificationStatuses.COMPLETE : notificationStatuses.FAILED;\n              entry.body.timeRemaining = -1;\n            }\n\n            _this2.$store.dispatch('updateNotification', [_this2.account.address, noticeIdx, entry]);\n          }\n        });\n      });\n    },\n    showNotifications: function showNotifications() {\n      this.shown = true;\n      this.$refs.notification.show();\n    },\n    showDetails: function showDetails(details) {\n      this.cancelHide = true;\n      this.detailsShown = true;\n      this.detailType = details[0];\n      this.notificationDetails = details[1];\n\n      if (details.length === 3) {\n        this.notificationDetails.index = details[2];\n      }\n    },\n    hideDetails: function hideDetails() {\n      this.detailsShown = false;\n      this.notificationDetails = {};\n      this.detailType = '';\n    },\n    useComponent: function useComponent(type) {\n      if (listComponentMapping[type]) {\n        return listComponentMapping[type];\n      }\n\n      return 'transaction-notification';\n    },\n    useDetailComponent: function useDetailComponent(type) {\n      if (detailComponentMapping[type]) {\n        return detailComponentMapping[type];\n      }\n\n      return 'transaction-details';\n    },\n    countUnread: function countUnread() {\n      var _this3 = this;\n\n      this.unreadCount = 0;\n\n      if (this.sortedNotifications.length) {\n        this.sortedNotifications.forEach(function (notif) {\n          if (notif.read === false) _this3.unreadCount++;\n        });\n      }\n    },\n    expand: function expand(idx, notif) {\n      var _this4 = this;\n\n      return function () {\n        var updatedNotif = notif;\n\n        if (notif.expanded !== true) {\n          updatedNotif.read = true;\n          updatedNotif.expanded = true;\n        } else {\n          updatedNotif.expanded = false;\n        }\n\n        _this4.$store.dispatch('updateNotification', [_this4.account.address, idx, updatedNotif]);\n      };\n    },\n    expandAll: function expandAll() {\n      var _this5 = this;\n\n      this.notifications[this.account.address].forEach(function (notice, idx) {\n        var updatedNotif = notice;\n\n        if (notice.expanded !== true) {\n          updatedNotif.read = true;\n          updatedNotif.expanded = true;\n        }\n\n        _this5.$store.dispatch('updateNotification', [_this5.account.address, idx, updatedNotif]);\n      });\n    },\n    CallapseAll: function CallapseAll() {\n      var _this6 = this;\n\n      this.notifications[this.account.address].forEach(function (notice, idx) {\n        var updatedNotif = notice;\n        updatedNotif.expanded = false;\n\n        _this6.$store.dispatch('updateNotification', [_this6.account.address, idx, updatedNotif]);\n      });\n    },\n    childUpdateNotification: function childUpdateNotification(idx) {\n      var _this7 = this;\n\n      if (typeof idx === 'undefined') return function () {};\n      return function (updatedNotif) {\n        _this7.$store.dispatch('updateNotification', [_this7.account.address, idx, updatedNotif]);\n      };\n    },\n    processStatus: function processStatus(rawStatus) {\n      if (statusTypes[rawStatus]) {\n        return statusTypes[rawStatus];\n      }\n\n      return statusTypes.statusError;\n    },\n    errorMessageString: function errorMessageString(notice) {\n      if (notice.body.errorMessage === INVESTIGATE_FAILURE_KEY) {\n        return this.$t('header.investigate');\n      }\n\n      return notice.body.errorMessage;\n    },\n    hashLink: function hashLink(hash, currency) {\n      if (currency && SwapProviders.isNotToken(currency)) {\n        return SwapProviders.getBlockChainExplorerUrl(currency, hash);\n      }\n\n      if (this.network.type.blockExplorerTX) {\n        return this.network.type.blockExplorerTX.replace('[[txHash]]', hash);\n      }\n    },\n    addressLink: function addressLink(addr, currency) {\n      if (currency && SwapProviders.isNotToken(currency)) {\n        return SwapProviders.getAddressLookupUrl(currency, addr);\n      }\n\n      if (this.network.type.blockExplorerAddr) {\n        return this.network.type.blockExplorerAddr.replace('[[address]]', addr);\n      }\n    },\n    dateString: function dateString(notice) {\n      if (notice !== {} && this._i18n.locale !== null) {\n        return new Date(notice.timestamp).toLocaleDateString(this._i18n.locale.replace('_', '-'));\n      }\n\n      return '';\n    },\n    timeString: function timeString(notice) {\n      if (notice !== {} && this._i18n.locale !== null) {\n        return new Date(notice.timestamp).toLocaleTimeString(this._i18n.locale.replace('_', '-'));\n      }\n\n      return '';\n    },\n    fetchBalanceData: function () {\n      var _fetchBalanceData = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var url, fetchValues, values;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                url = 'https://cryptorates.mewapi.io/ticker';\n                _context.next = 3;\n                return fetch(url);\n\n              case 3:\n                fetchValues = _context.sent;\n                _context.next = 6;\n                return fetchValues.json();\n\n              case 6:\n                values = _context.sent;\n\n                if (values) {\n                  _context.next = 9;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", 0);\n\n              case 9:\n                if (!(!values && !values.data && !values.data['ETH'])) {\n                  _context.next = 11;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", 0);\n\n              case 11:\n                this.ethPrice = new BigNumber(values.data['ETH'].quotes.USD.price);\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function fetchBalanceData() {\n        return _fetchBalanceData.apply(this, arguments);\n      }\n\n      return fetchBalanceData;\n    }(),\n    convertToGwei: function convertToGwei(value) {\n      if (this.notValidNumber(value)) return '';\n      return unit.fromWei(new BigNumber(value).toFixed(), 'Gwei');\n    },\n    convertToEth: function convertToEth(value) {\n      if (this.notValidNumber(value)) return '';\n      return unit.fromWei(new BigNumber(value).toFixed(), 'ether');\n    },\n    getFiatValue: function getFiatValue(value) {\n      if (this.notValidNumber(value)) return '';\n      if (this.ethPrice === 0) return '';\n      return new BigNumber(this.convertToEth(value)).multipliedBy(new BigNumber(this.ethPrice)).decimalPlaces(2).toFixed();\n    },\n    notValidNumber: function notValidNumber(value) {\n      return typeof value === 'undefined' || Number.isNaN(value) || value === 'NaN';\n    }\n  }\n};",{"version":3,"sources":["NotificationsContainer.vue"],"names":[],"mappings":"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","sourcesContent":["<template lang=\"html\">\n  <div class=\"notification-container\">\n    <div class=\"notification-logo\" @click=\"showNotifications\">\n      <img\n        alt=\"Notifications\"\n        class=\"logo-large\"\n        src=\"~@/assets/images/icons/notification.svg\"\n      />\n      <div v-show=\"unreadCount > 0\" class=\"notification-dot\">\n        <div class=\"parent\">\n          <div class=\"heart\"></div>\n        </div>\n      </div>\n    </div>\n    <b-modal\n      ref=\"notification\"\n      hide-footer\n      centered\n      no-padding\n      class=\"bootstrap-modal-wide nopadding\"\n      static\n      lazy\n      @show=\"countUnread\"\n      @hide=\"hiddenModal\"\n    >\n      <template slot=\"modal-title\">\n        <div>\n          <div v-if=\"!detailsShown\" class=\"modal-title\">\n            {{ unreadCount > 1 ? 'Notifications' : 'Notification' }}\n            <div v-show=\"unreadCount >= 0\" class=\"notification-count\">\n              <span>{{ unreadCount }}</span>\n            </div>\n          </div>\n          <div v-else class=\"modal-title show-pointer\" @click=\"hideDetails\">\n            <i class=\"fa fa-long-arrow-left\" aria-hidden=\"true\" />\n            {{ $t('common.back') }}\n          </div>\n        </div>\n      </template>\n      <div v-if=\"!detailsShown\" class=\"notification-item-container\">\n        <ul\n          v-if=\"\n            sortedNotifications !== undefined && sortedNotifications.length > 0\n          \"\n        >\n          <li>\n            <p @click=\"expandAll\">\n              <i aria-hidden=\"true\" class=\"fa fa-2x fa-angle-down\"></i>\n            </p>\n            <p @click=\"CallapseAll\">\n              <i aria-hidden=\"true\" class=\"fa fa-2x fa-angle-up\"></i>\n            </p>\n          </li>\n          <li\n            v-for=\"(notification, idx) in sortedNotifications\"\n            :key=\"notification.id + idx\"\n            class=\"notification-item\"\n          >\n            <keep-alive\n              :max=\"10\"\n              :exclude=\"['transaction-notification', 'transaction-error']\"\n            >\n              <component\n                :is=\"useComponent(notification.type)\"\n                :expand=\"expand(idx, notification)\"\n                :shown=\"shown\"\n                :notice=\"notification\"\n                :convert-to-gwei=\"convertToGwei\"\n                :convert-to-eth=\"convertToEth\"\n                :get-fiat-value=\"getFiatValue\"\n                :date-string=\"dateString\"\n                :time-string=\"timeString\"\n                :hash-link=\"hashLink\"\n                :address-link=\"addressLink\"\n                :process-status=\"processStatus\"\n                :error-message-string=\"errorMessageString\"\n                :index=\"idx\"\n                :child-update-notification=\"childUpdateNotification(idx)\"\n                @showDetails=\"showDetails\"\n              >\n              </component>\n            </keep-alive>\n          </li>\n        </ul>\n        <div v-else class=\"notification-no-item\">No notifications found :(</div>\n      </div>\n      <div v-if=\"detailsShown\" class=\"notification-item-container\">\n        <component\n          :is=\"useDetailComponent(detailType)\"\n          :shown=\"shown\"\n          :notice=\"notificationDetails\"\n          :convert-to-gwei=\"convertToGwei\"\n          :convert-to-eth=\"convertToEth\"\n          :get-fiat-value=\"getFiatValue\"\n          :date-string=\"dateString\"\n          :time-string=\"timeString\"\n          :hash-link=\"hashLink\"\n          :address-link=\"addressLink\"\n          :process-status=\"processStatus\"\n          :error-message-string=\"errorMessageString\"\n          :child-update-notification=\"\n            childUpdateNotification(notificationDetails.index)\n          \"\n        >\n        </component>\n      </div>\n    </b-modal>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport store from 'store';\nimport unit from 'ethjs-unit';\nimport BigNumber from 'bignumber.js';\n\nimport SwapNotification from './components/NotificationTypes/SwapNotification';\nimport TransactionNotification from './components/NotificationTypes/TransactionNotification';\nimport TransactionDetails from './components/NotificationTypes/NotificationDetails';\nimport SwapDetails from './components/NotificationTypes/SwapDetails';\n\nimport {\n  statusTypes,\n  listComponentMapping,\n  detailComponentMapping\n} from './components/config';\n\nimport {\n  INVESTIGATE_FAILURE_KEY,\n  notificationStatuses,\n  notificationType\n} from '@/helpers/notificationFormatters';\n\nimport { SwapProviders } from '@/partners';\n\nexport default {\n  components: {\n    'swap-notification': SwapNotification,\n    'transaction-notification': TransactionNotification,\n    'transaction-details': TransactionDetails,\n    'swap-details': SwapDetails\n  },\n  data() {\n    return {\n      cancelHide: false,\n      shown: false,\n      unreadCount: 0,\n      ethPrice: new BigNumber(0),\n      detailsShown: false,\n      detailType: '',\n      notificationDetails: {}\n    };\n  },\n  computed: {\n    ...mapState(['web3', 'network', 'notifications', 'account', 'online']),\n    sortedNotifications() {\n      if (!this.notifications[this.account.address]) return [];\n      const notifications = this.notifications[this.account.address];\n      return notifications\n        .sort((a, b) => {\n          a = a.timestamp;\n          b = b.timestamp;\n\n          return a > b ? -1 : a < b ? 1 : 0;\n        })\n        .filter(entry => entry.network === this.network.type.name);\n    }\n  },\n  watch: {\n    notifications() {\n      this.countUnread();\n    }\n  },\n  mounted() {\n    if (this.notifications[this.account.address] === undefined) {\n      this.notifications[this.account.address] = [];\n      store.set('notifications', this.notifications);\n    }\n    this.countUnread();\n    if (this.online) {\n      this.fetchBalanceData();\n      this.checkForUnResolvedTxNotifications();\n    }\n  },\n  methods: {\n    hiddenModal() {\n      this.shown = false;\n      this.hideDetails();\n    },\n    checkForUnResolvedTxNotifications() {\n      if (!this.notifications[this.account.address]) return [];\n      const check = this.notifications[this.account.address]\n        .filter(entry => entry.network === this.network.type.name)\n        .filter(entry => {\n          const isOlder =\n            (new Date().getTime() - new Date(entry.timestamp).getTime()) /\n              1000 >\n            6000;\n          const isUnResolved = entry.status === notificationStatuses.PENDING;\n          const notExternalSwap =\n            entry.type === notificationType.TRANSACTION ||\n            (entry.type === notificationType.SWAP && entry.body.isDex === true);\n          const hasHash = entry.hash !== '' && entry.hash !== undefined;\n          return isOlder && isUnResolved && hasHash && notExternalSwap;\n        });\n      check.forEach(entry => {\n        this.web3.eth.getTransactionReceipt(entry.hash).then(result => {\n          if (result === null) return;\n          const noticeIdx = this.notifications[this.account.address].findIndex(\n            noticeEntry => entry.id === noticeEntry.id\n          );\n          if (noticeIdx >= 0) {\n            entry.status = result.status\n              ? notificationStatuses.COMPLETE\n              : notificationStatuses.FAILED;\n            entry.body.error = !result.status;\n            entry.body.errorMessage = result.status\n              ? ''\n              : INVESTIGATE_FAILURE_KEY;\n            entry.body.gasUsed = new BigNumber(result.gasUsed).toString();\n            entry.body.blockNumber = new BigNumber(\n              result.blockNumber\n            ).toString();\n            if (entry.body.isDex) {\n              entry.swapStatus = result.status\n                ? notificationStatuses.COMPLETE\n                : notificationStatuses.FAILED;\n              entry.body.timeRemaining = -1;\n            }\n            this.$store.dispatch('updateNotification', [\n              this.account.address,\n              noticeIdx,\n              entry\n            ]);\n          }\n        });\n      });\n    },\n    showNotifications() {\n      this.shown = true;\n      this.$refs.notification.show();\n    },\n    showDetails(details) {\n      this.cancelHide = true;\n      this.detailsShown = true;\n      this.detailType = details[0];\n      this.notificationDetails = details[1];\n      if (details.length === 3) {\n        this.notificationDetails.index = details[2];\n      }\n    },\n    hideDetails() {\n      this.detailsShown = false;\n      this.notificationDetails = {};\n      this.detailType = '';\n    },\n    useComponent(type) {\n      if (listComponentMapping[type]) {\n        return listComponentMapping[type];\n      }\n      return 'transaction-notification';\n    },\n    useDetailComponent(type) {\n      if (detailComponentMapping[type]) {\n        return detailComponentMapping[type];\n      }\n      return 'transaction-details';\n    },\n    countUnread() {\n      this.unreadCount = 0;\n      if (this.sortedNotifications.length) {\n        this.sortedNotifications.forEach(notif => {\n          if (notif.read === false) this.unreadCount++;\n        });\n      }\n    },\n    expand(idx, notif) {\n      return () => {\n        const updatedNotif = notif;\n        if (notif.expanded !== true) {\n          updatedNotif.read = true;\n          updatedNotif.expanded = true;\n        } else {\n          updatedNotif.expanded = false;\n        }\n\n        this.$store.dispatch('updateNotification', [\n          this.account.address,\n          idx,\n          updatedNotif\n        ]);\n      };\n    },\n    expandAll() {\n      this.notifications[this.account.address].forEach((notice, idx) => {\n        const updatedNotif = notice;\n        if (notice.expanded !== true) {\n          updatedNotif.read = true;\n          updatedNotif.expanded = true;\n        }\n        this.$store.dispatch('updateNotification', [\n          this.account.address,\n          idx,\n          updatedNotif\n        ]);\n      });\n    },\n    CallapseAll() {\n      this.notifications[this.account.address].forEach((notice, idx) => {\n        const updatedNotif = notice;\n        updatedNotif.expanded = false;\n        this.$store.dispatch('updateNotification', [\n          this.account.address,\n          idx,\n          updatedNotif\n        ]);\n      });\n    },\n    childUpdateNotification(idx) {\n      if (typeof idx === 'undefined') return () => {};\n      return updatedNotif => {\n        this.$store.dispatch('updateNotification', [\n          this.account.address,\n          idx,\n          updatedNotif\n        ]);\n      };\n    },\n    processStatus(rawStatus) {\n      if (statusTypes[rawStatus]) {\n        return statusTypes[rawStatus];\n      }\n      return statusTypes.statusError;\n    },\n    errorMessageString(notice) {\n      if (notice.body.errorMessage === INVESTIGATE_FAILURE_KEY) {\n        return this.$t('header.investigate');\n      }\n      return notice.body.errorMessage;\n    },\n    hashLink(hash, currency) {\n      if (currency && SwapProviders.isNotToken(currency)) {\n        return SwapProviders.getBlockChainExplorerUrl(currency, hash);\n      }\n      if (this.network.type.blockExplorerTX) {\n        return this.network.type.blockExplorerTX.replace('[[txHash]]', hash);\n      }\n    },\n    addressLink(addr, currency) {\n      if (currency && SwapProviders.isNotToken(currency)) {\n        return SwapProviders.getAddressLookupUrl(currency, addr);\n      }\n      if (this.network.type.blockExplorerAddr) {\n        return this.network.type.blockExplorerAddr.replace('[[address]]', addr);\n      }\n    },\n    dateString(notice) {\n      if (notice !== {} && this._i18n.locale !== null) {\n        return new Date(notice.timestamp).toLocaleDateString(\n          this._i18n.locale.replace('_', '-')\n        );\n      }\n      return '';\n    },\n    timeString(notice) {\n      if (notice !== {} && this._i18n.locale !== null) {\n        return new Date(notice.timestamp).toLocaleTimeString(\n          this._i18n.locale.replace('_', '-')\n        );\n      }\n      return '';\n    },\n    async fetchBalanceData() {\n      const url = 'https://cryptorates.mewapi.io/ticker';\n      const fetchValues = await fetch(url);\n      const values = await fetchValues.json();\n      if (!values) return 0;\n      if (!values && !values.data && !values.data['ETH']) return 0;\n      this.ethPrice = new BigNumber(values.data['ETH'].quotes.USD.price);\n    },\n    convertToGwei(value) {\n      if (this.notValidNumber(value)) return '';\n      return unit.fromWei(new BigNumber(value).toFixed(), 'Gwei');\n    },\n    convertToEth(value) {\n      if (this.notValidNumber(value)) return '';\n      return unit.fromWei(new BigNumber(value).toFixed(), 'ether');\n    },\n    getFiatValue(value) {\n      if (this.notValidNumber(value)) return '';\n      if (this.ethPrice === 0) return '';\n      return new BigNumber(this.convertToEth(value))\n        .multipliedBy(new BigNumber(this.ethPrice))\n        .decimalPlaces(2)\n        .toFixed();\n    },\n    notValidNumber(value) {\n      return (\n        typeof value === 'undefined' || Number.isNaN(value) || value === 'NaN'\n      );\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import './NotificationsContainer.scss';\n</style>\n"],"sourceRoot":"src/containers/NotificationsContainer"}]}