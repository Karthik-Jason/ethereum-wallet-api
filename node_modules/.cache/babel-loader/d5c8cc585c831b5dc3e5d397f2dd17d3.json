{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/eslint-loader/index.js??ref--13-0!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/helpers/parseTokensData.js","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/helpers/parseTokensData.js","mtime":1574664278286},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js","mtime":1574664275010},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/eslint-loader/index.js","mtime":1574664275986}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.array.find\";\n//import web3 from 'web3';\nimport locStore from 'store';\nimport BigNumber from 'bignumber.js';\n\nfunction parseTokensData(data, to, _web3, networkToken, networkName) {\n  var web3 = _web3;\n  var token = networkToken.find(function (el) {\n    return el.address.toLowerCase() === to.toLowerCase();\n  });\n\n  if (!token) {\n    var customStore = locStore.get('customTokens');\n\n    if (customStore !== undefined && customStore[networkName] !== undefined && customStore[networkName].length) {\n      token = customStore[networkName].find(function (el) {\n        return el.address.toLowerCase() === to.toLowerCase();\n      });\n    }\n  }\n\n  var jsonInterface = {\n    constant: false,\n    inputs: [{\n      name: '_to',\n      type: 'address'\n    }, {\n      name: '_amount',\n      type: 'uint256'\n    }],\n    name: 'transfer',\n    outputs: [{\n      name: '',\n      type: 'bool'\n    }],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  };\n  var transferFuncSig = web3.eth.abi.encodeFunctionSignature(jsonInterface);\n  var tokenData = {\n    tokenTransferTo: '',\n    tokenTransferVal: '',\n    tokenSymbol: ''\n  };\n\n  if (data.substr(0, 10) === transferFuncSig) {\n    var params = web3.eth.abi.decodeParameters(['address', 'uint256'], \"\".concat(data.substr(10)));\n    var value = new BigNumber(params[1]);\n    tokenData.tokenTransferTo = params[0];\n    tokenData.tokenTransferVal = token ? value.div(new BigNumber(10).pow(token.decimals)).toFixed().toString() : value.toString();\n    tokenData.tokenSymbol = token ? token.symbol : 'Unidentified Token';\n  }\n\n  return tokenData;\n}\n\nexport default parseTokensData;",{"version":3,"sources":["/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/helpers/parseTokensData.js"],"names":["locStore","BigNumber","parseTokensData","data","to","_web3","networkToken","networkName","web3","token","find","el","address","toLowerCase","customStore","get","undefined","length","jsonInterface","constant","inputs","name","type","outputs","payable","stateMutability","transferFuncSig","eth","abi","encodeFunctionSignature","tokenData","tokenTransferTo","tokenTransferVal","tokenSymbol","substr","params","decodeParameters","value","div","pow","decimals","toFixed","toString","symbol"],"mappings":";;AAAA;AACA,OAAOA,QAAP,MAAqB,OAArB;AACA,OAAOC,SAAP,MAAsB,cAAtB;;AAEA,SAASC,eAAT,CAAyBC,IAAzB,EAA+BC,EAA/B,EAAmCC,KAAnC,EAA0CC,YAA1C,EAAwDC,WAAxD,EAAqE;AACnE,MAAMC,IAAI,GAAGH,KAAb;AACA,MAAII,KAAK,GAAGH,YAAY,CAACI,IAAb,CAAkB,UAAAC,EAAE,EAAI;AAClC,WAAOA,EAAE,CAACC,OAAH,CAAWC,WAAX,OAA6BT,EAAE,CAACS,WAAH,EAApC;AACD,GAFW,CAAZ;;AAGA,MAAI,CAACJ,KAAL,EAAY;AACV,QAAMK,WAAW,GAAGd,QAAQ,CAACe,GAAT,CAAa,cAAb,CAApB;;AACA,QACED,WAAW,KAAKE,SAAhB,IACAF,WAAW,CAACP,WAAD,CAAX,KAA6BS,SAD7B,IAEAF,WAAW,CAACP,WAAD,CAAX,CAAyBU,MAH3B,EAIE;AACAR,MAAAA,KAAK,GAAGK,WAAW,CAACP,WAAD,CAAX,CAAyBG,IAAzB,CAA8B,UAAAC,EAAE,EAAI;AAC1C,eAAOA,EAAE,CAACC,OAAH,CAAWC,WAAX,OAA6BT,EAAE,CAACS,WAAH,EAApC;AACD,OAFO,CAAR;AAGD;AACF;;AACD,MAAMK,aAAa,GAAG;AACpBC,IAAAA,QAAQ,EAAE,KADU;AAEpBC,IAAAA,MAAM,EAAE,CACN;AAAEC,MAAAA,IAAI,EAAE,KAAR;AAAeC,MAAAA,IAAI,EAAE;AAArB,KADM,EAEN;AAAED,MAAAA,IAAI,EAAE,SAAR;AAAmBC,MAAAA,IAAI,EAAE;AAAzB,KAFM,CAFY;AAMpBD,IAAAA,IAAI,EAAE,UANc;AAOpBE,IAAAA,OAAO,EAAE,CAAC;AAAEF,MAAAA,IAAI,EAAE,EAAR;AAAYC,MAAAA,IAAI,EAAE;AAAlB,KAAD,CAPW;AAQpBE,IAAAA,OAAO,EAAE,KARW;AASpBC,IAAAA,eAAe,EAAE,YATG;AAUpBH,IAAAA,IAAI,EAAE;AAVc,GAAtB;AAYA,MAAMI,eAAe,GAAGlB,IAAI,CAACmB,GAAL,CAASC,GAAT,CAAaC,uBAAb,CAAqCX,aAArC,CAAxB;AACA,MAAMY,SAAS,GAAG;AAChBC,IAAAA,eAAe,EAAE,EADD;AAEhBC,IAAAA,gBAAgB,EAAE,EAFF;AAGhBC,IAAAA,WAAW,EAAE;AAHG,GAAlB;;AAKA,MAAI9B,IAAI,CAAC+B,MAAL,CAAY,CAAZ,EAAe,EAAf,MAAuBR,eAA3B,EAA4C;AAC1C,QAAMS,MAAM,GAAG3B,IAAI,CAACmB,GAAL,CAASC,GAAT,CAAaQ,gBAAb,CACb,CAAC,SAAD,EAAY,SAAZ,CADa,YAEVjC,IAAI,CAAC+B,MAAL,CAAY,EAAZ,CAFU,EAAf;AAIA,QAAMG,KAAK,GAAG,IAAIpC,SAAJ,CAAckC,MAAM,CAAC,CAAD,CAApB,CAAd;AACAL,IAAAA,SAAS,CAACC,eAAV,GAA4BI,MAAM,CAAC,CAAD,CAAlC;AACAL,IAAAA,SAAS,CAACE,gBAAV,GAA6BvB,KAAK,GAC9B4B,KAAK,CACFC,GADH,CACO,IAAIrC,SAAJ,CAAc,EAAd,EAAkBsC,GAAlB,CAAsB9B,KAAK,CAAC+B,QAA5B,CADP,EAEGC,OAFH,GAGGC,QAHH,EAD8B,GAK9BL,KAAK,CAACK,QAAN,EALJ;AAMAZ,IAAAA,SAAS,CAACG,WAAV,GAAwBxB,KAAK,GAAGA,KAAK,CAACkC,MAAT,GAAkB,oBAA/C;AACD;;AAED,SAAOb,SAAP;AACD;;AAED,eAAe5B,eAAf","sourcesContent":["//import web3 from 'web3';\nimport locStore from 'store';\nimport BigNumber from 'bignumber.js';\n\nfunction parseTokensData(data, to, _web3, networkToken, networkName) {\n  const web3 = _web3;\n  let token = networkToken.find(el => {\n    return el.address.toLowerCase() === to.toLowerCase();\n  });\n  if (!token) {\n    const customStore = locStore.get('customTokens');\n    if (\n      customStore !== undefined &&\n      customStore[networkName] !== undefined &&\n      customStore[networkName].length\n    ) {\n      token = customStore[networkName].find(el => {\n        return el.address.toLowerCase() === to.toLowerCase();\n      });\n    }\n  }\n  const jsonInterface = {\n    constant: false,\n    inputs: [\n      { name: '_to', type: 'address' },\n      { name: '_amount', type: 'uint256' }\n    ],\n    name: 'transfer',\n    outputs: [{ name: '', type: 'bool' }],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  };\n  const transferFuncSig = web3.eth.abi.encodeFunctionSignature(jsonInterface);\n  const tokenData = {\n    tokenTransferTo: '',\n    tokenTransferVal: '',\n    tokenSymbol: ''\n  };\n  if (data.substr(0, 10) === transferFuncSig) {\n    const params = web3.eth.abi.decodeParameters(\n      ['address', 'uint256'],\n      `${data.substr(10)}`\n    );\n    const value = new BigNumber(params[1]);\n    tokenData.tokenTransferTo = params[0];\n    tokenData.tokenTransferVal = token\n      ? value\n          .div(new BigNumber(10).pow(token.decimals))\n          .toFixed()\n          .toString()\n      : value.toString();\n    tokenData.tokenSymbol = token ? token.symbol : 'Unidentified Token';\n  }\n\n  return tokenData;\n}\n\nexport default parseTokensData;\n"]}]}