{"remainingRequest":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/thread-loader/dist/cjs.js!/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/dapps/Ambrpay/Ambrpay.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/dapps/Ambrpay/Ambrpay.vue","mtime":1573477611644},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _typeof from \"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/@babel/runtime-corejs2/helpers/esm/typeof\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport _defineProperty from \"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport SubscriptionForm from \"./containers/SubscriptionForm\";\nimport ManageFundsModal from \"./components/ManageFundsModal\";\nimport ManageSubscriptionsModal from \"./components/ManageSubscriptionsModal\";\nimport Ambrpay from \"./AmbrpayModified\";\nimport BackButton from '@/layouts/InterfaceLayout/components/BackButton';\nimport { mapState } from 'vuex';\nimport BigNumber from 'bignumber.js';\nimport { Toast } from '@/helpers';\nexport default {\n  components: {\n    'subscription-form': SubscriptionForm,\n    'back-button': BackButton,\n    'manage-funds-modal': ManageFundsModal,\n    'manage-subscriptions-modal': ManageSubscriptionsModal\n  },\n  data: function data() {\n    return {\n      availableBalanceEth: '',\n      availableBalanceUSD: '',\n      manageFundsText: '',\n      ethPrice: 0,\n      loadingBalance: true,\n      ambrpay: '',\n      subscriptions: []\n    };\n  },\n  computed: _objectSpread({}, mapState(['web3', 'account', 'network', 'online'])),\n  mounted: function mounted() {\n    var _this = this;\n\n    this.init();\n    this.getSubscriptions();\n    this.$refs.manageSubs.$refs.manageSubscriptionsModal.$on('show', function () {\n      _this.getSubscriptions();\n    });\n    if (this.online) this.getEthPrice();\n  },\n  methods: {\n    init: function init() {\n      var account = {\n        publicApiKey: 'api_public_DXfGdjBB4eIVgbURCCCAIQ2S',\n        address: this.account.address,\n        netId: this.network.type.chainID.toString()\n      };\n      this.ambrpay = new Ambrpay(account, this.web3);\n      this.getSubscriptionFunds();\n    },\n    getSubscriptionFunds: function getSubscriptionFunds() {\n      var _this2 = this;\n\n      this.ambrpay.getSubscriptionFunds().then(function (res) {\n        _this2.availableBalanceEth = new BigNumber(_this2.web3.utils.fromWei(res, 'ether')).toFixed();\n\n        _this2.convertToUSD();\n\n        _this2.loadingBalance = false;\n      }).catch(function (err) {\n        _this2.loadingBalance = false;\n        Toast.responseHandler(err, Toast.ERROR);\n      });\n    },\n    convertToUSD: function convertToUSD() {\n      this.availableBalanceUSD = '--';\n\n      if (this.availableBalanceEth) {\n        this.availableBalanceUSD = new BigNumber(new BigNumber(this.availableBalanceEth).times(new BigNumber(this.ethPrice))).toFixed(2);\n      }\n    },\n    openManageFundsModal: function openManageFundsModal(str) {\n      this.manageFundsText = str;\n      this.$refs.manageFunds.$refs.manageFundsModal.show();\n    },\n    openManageSubModal: function openManageSubModal() {\n      this.$refs.manageSubs.$refs.manageSubscriptionsModal.show();\n    },\n    getEthPrice: function () {\n      var _getEthPrice = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var price;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetch('https://cryptorates.mewapi.io/ticker?filter=ETH').then(function (res) {\n                  return res.json();\n                }).catch(function (e) {\n                  Toast.responseHandler(e, Toast.ERROR);\n                });\n\n              case 2:\n                price = _context.sent;\n                this.ethPrice = _typeof(price) === 'object' ? price.data.ETH.quotes.USD.price : 0;\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getEthPrice() {\n        return _getEthPrice.apply(this, arguments);\n      }\n\n      return getEthPrice;\n    }(),\n    startSubscription: function startSubscription(params) {\n      this.ambrpay.subscribe(params).then(this.getSubscriptions).catch(function (err) {\n        Toast.responseHandler(err, Toast.ERROR);\n      });\n    },\n    addFunds: function addFunds(amt) {\n      this.ambrpay.addFunds(amt).then(this.getSubscriptionFunds).catch(function (err) {\n        Toast.responseHandler(err, Toast.ERROR);\n      });\n    },\n    withdrawFunds: function withdrawFunds(amt) {\n      this.ambrpay.withdrawFunds(amt).then(this.getSubscriptionFunds).catch(function (err) {\n        Toast.responseHandler(err, Toast.ERROR);\n      });\n    },\n    unsubscribeSub: function unsubscribeSub(data) {\n      this.ambrpay.unsubscribe(data.pos, data.addr).then(this.getSubscriptions).catch(function (err) {\n        Toast.responseHandler(err, Toast.ERROR);\n      });\n    },\n    getSubscriptions: function getSubscriptions() {\n      var _this3 = this;\n\n      this.ambrpay.getSubscriptions().then(function (res) {\n        _this3.subscriptions = res;\n      }).catch(function (err) {\n        Toast.responseHandler(err, Toast.ERROR);\n      });\n    }\n  }\n};",{"version":3,"sources":["Ambrpay.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"ambrpay-container\">\n    <back-button :title=\"$t('dappsAmbrpay.exit-dapp')\" />\n    <b-container class=\"pl-5 pr-5\">\n      <div class=\"ambrpay-header mt-5\">\n        <div class=\"title-container\">\n          <h3 class=\"page-title\">{{ $t('dappsAmbrpay.title') }}</h3>\n          <popover\n            :popcontent=\"$t('dappsAmbrpay.ambrpay-popover')\"\n            class=\"dapp-popover\"\n          ></popover>\n        </div>\n        <div class=\"btns-container\">\n          <b-button\n            class=\"withdraw-btn\"\n            @click=\"openManageFundsModal('Withdraw')\"\n            >{{ $t('dappsAmbrpay.withdraw-funds') }}</b-button\n          >\n          <b-button class=\"add-btn\" @click=\"openManageFundsModal('Add')\">{{\n            $t('dappsAmbrpay.add-funds')\n          }}</b-button>\n        </div>\n      </div>\n      <div class=\"funds-container\">\n        <span class=\"fund-text\">{{ $t('dappsAmbrpay.balance') }}</span>\n        <div class=\"balance-container\">\n          <i v-show=\"loadingBalance\" class=\"fa fa-spinner fa-spin\" />\n          <span v-show=\"!loadingBalance\" class=\"fund-text\"\n            >{{ availableBalanceEth }} {{ $t('dappsAmbrpay.eth') }}\n          </span>\n          <span v-show=\"!loadingBalance\" class=\"usd-text\"\n            >{{ availableBalanceUSD }} {{ $t('dappsAmbrpay.usd') }}</span\n          >\n        </div>\n      </div>\n      <subscription-form\n        @startSubscription=\"startSubscription\"\n      ></subscription-form>\n      <div class=\"mb-4\">\n        <b-button\n          class=\"mx-auto active-sub-btn my-subscriptions-container\"\n          @click=\"openManageSubModal()\"\n          >{{ $t('dappsAmbrpay.my-subscriptions') }}\n          <span v-if=\"subscriptions.length > 0\" class=\"subscriptions-number\">{{\n            subscriptions.length\n          }}</span>\n        </b-button>\n      </div>\n    </b-container>\n    <manage-funds-modal\n      ref=\"manageFunds\"\n      :manage-funds-text=\"manageFundsText\"\n      :available-balance-eth=\"availableBalanceEth\"\n      :available-balance-usd=\"availableBalanceUSD\"\n      @addFunds=\"addFunds\"\n      @withdrawFunds=\"withdrawFunds\"\n    />\n    <manage-subscriptions-modal\n      ref=\"manageSubs\"\n      :subscriptions=\"subscriptions\"\n      @unsubscribeSub=\"unsubscribeSub\"\n    />\n  </div>\n</template>\n\n<script>\nimport SubscriptionForm from './containers/SubscriptionForm';\nimport ManageFundsModal from './components/ManageFundsModal';\nimport ManageSubscriptionsModal from './components/ManageSubscriptionsModal';\nimport Ambrpay from './AmbrpayModified';\nimport BackButton from '@/layouts/InterfaceLayout/components/BackButton';\nimport { mapState } from 'vuex';\nimport BigNumber from 'bignumber.js';\nimport { Toast } from '@/helpers';\n\nexport default {\n  components: {\n    'subscription-form': SubscriptionForm,\n    'back-button': BackButton,\n    'manage-funds-modal': ManageFundsModal,\n    'manage-subscriptions-modal': ManageSubscriptionsModal\n  },\n  data() {\n    return {\n      availableBalanceEth: '',\n      availableBalanceUSD: '',\n      manageFundsText: '',\n      ethPrice: 0,\n      loadingBalance: true,\n      ambrpay: '',\n      subscriptions: []\n    };\n  },\n  computed: {\n    ...mapState(['web3', 'account', 'network', 'online'])\n  },\n  mounted() {\n    this.init();\n    this.getSubscriptions();\n    this.$refs.manageSubs.$refs.manageSubscriptionsModal.$on('show', () => {\n      this.getSubscriptions();\n    });\n    if (this.online) this.getEthPrice();\n  },\n  methods: {\n    init() {\n      const account = {\n        publicApiKey: 'api_public_DXfGdjBB4eIVgbURCCCAIQ2S',\n        address: this.account.address,\n        netId: this.network.type.chainID.toString()\n      };\n      this.ambrpay = new Ambrpay(account, this.web3);\n      this.getSubscriptionFunds();\n    },\n    getSubscriptionFunds() {\n      this.ambrpay\n        .getSubscriptionFunds()\n        .then(res => {\n          this.availableBalanceEth = new BigNumber(\n            this.web3.utils.fromWei(res, 'ether')\n          ).toFixed();\n          this.convertToUSD();\n          this.loadingBalance = false;\n        })\n        .catch(err => {\n          this.loadingBalance = false;\n          Toast.responseHandler(err, Toast.ERROR);\n        });\n    },\n    convertToUSD() {\n      this.availableBalanceUSD = '--';\n\n      if (this.availableBalanceEth) {\n        this.availableBalanceUSD = new BigNumber(\n          new BigNumber(this.availableBalanceEth).times(\n            new BigNumber(this.ethPrice)\n          )\n        ).toFixed(2);\n      }\n    },\n    openManageFundsModal(str) {\n      this.manageFundsText = str;\n      this.$refs.manageFunds.$refs.manageFundsModal.show();\n    },\n    openManageSubModal() {\n      this.$refs.manageSubs.$refs.manageSubscriptionsModal.show();\n    },\n    async getEthPrice() {\n      const price = await fetch(\n        'https://cryptorates.mewapi.io/ticker?filter=ETH'\n      )\n        .then(res => {\n          return res.json();\n        })\n        .catch(e => {\n          Toast.responseHandler(e, Toast.ERROR);\n        });\n      this.ethPrice =\n        typeof price === 'object' ? price.data.ETH.quotes.USD.price : 0;\n    },\n    startSubscription(params) {\n      this.ambrpay\n        .subscribe(params)\n        .then(this.getSubscriptions)\n        .catch(err => {\n          Toast.responseHandler(err, Toast.ERROR);\n        });\n    },\n    addFunds(amt) {\n      this.ambrpay\n        .addFunds(amt)\n        .then(this.getSubscriptionFunds)\n        .catch(err => {\n          Toast.responseHandler(err, Toast.ERROR);\n        });\n    },\n    withdrawFunds(amt) {\n      this.ambrpay\n        .withdrawFunds(amt)\n        .then(this.getSubscriptionFunds)\n        .catch(err => {\n          Toast.responseHandler(err, Toast.ERROR);\n        });\n    },\n    unsubscribeSub(data) {\n      this.ambrpay\n        .unsubscribe(data.pos, data.addr)\n        .then(this.getSubscriptions)\n        .catch(err => {\n          Toast.responseHandler(err, Toast.ERROR);\n        });\n    },\n    getSubscriptions() {\n      this.ambrpay\n        .getSubscriptions()\n        .then(res => {\n          this.subscriptions = res;\n        })\n        .catch(err => {\n          Toast.responseHandler(err, Toast.ERROR);\n        });\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'Ambrpay.scss';\n</style>\n"],"sourceRoot":"src/dapps/Ambrpay"}]}