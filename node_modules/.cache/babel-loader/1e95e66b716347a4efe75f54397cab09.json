{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/eslint-loader/index.js??ref--13-0!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/wallets/hardware/bitbox/digitalBitboxUsb.js","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/wallets/hardware/bitbox/digitalBitboxUsb.js","mtime":1574664278326},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js","mtime":1574664275010},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/eslint-loader/index.js","mtime":1574664275986}],"contextDependencies":[],"result":["// eslint-disable\n\n/**\n *  (c) 2017 Douglas Bakkum, Shift Devices AG\n *  MIT license\n **/\n'use strict';\n\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport u2f from 'u2f-api';\n\nvar DigitalBitboxUsb = function DigitalBitboxUsb() {}; // Convert from normal to web-safe, strip trailing \"=\"s\n\n\nDigitalBitboxUsb.webSafe64 = function (base64) {\n  return base64.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, '');\n}; // Convert from web-safe to normal, add trailing \"=\"s\n\n\nDigitalBitboxUsb.normal64 = function (base64) {\n  return (// eslint-disable-next-line\n    base64.replace(/\\-/g, '+').replace(/_/g, '/') + '=='.substring(0, 3 * base64.length % 4)\n  );\n};\n\nDigitalBitboxUsb.prototype.u2fCallback = function (response, callback) {\n  if ('signatureData' in response) {\n    var data = new Buffer(DigitalBitboxUsb.normal64(response.signatureData), 'base64');\n    callback(data.slice(5));\n  } else {\n    callback(undefined, response);\n  }\n};\n\nDigitalBitboxUsb.prototype.exchange = function (msg, callback) {\n  msg = Buffer.from(msg, 'ascii');\n  var kh_max_len = 128 - 2; // Subtract 2 bytes for `index` and `total` header\n  // Challenge is needed for U2F but unused in the hijack procedure\n\n  var challenge = new Buffer('dbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdb', 'hex');\n  var total = Math.ceil(msg.length / kh_max_len);\n  var self = this;\n\n  var localCallback = function localCallback(result) {\n    self.u2fCallback(result, callback);\n  };\n\n  for (var index = 0; index < total; index++) {\n    var kh = Buffer.concat([Buffer.from([total]), Buffer.from([index]), msg.slice(index * kh_max_len, (index + 1) * kh_max_len)]);\n    var key = {\n      appId: location.origin,\n      challenge: DigitalBitboxUsb.webSafe64(challenge.toString('base64')),\n      version: 'U2F_V2',\n      keyHandle: DigitalBitboxUsb.webSafe64(kh.toString('base64'))\n    }; // Set timeout to 35 seconds for Windows 10 to wait for user confirmation\n    // Keep 3 seconds for other plaforms so that polling is fast enough\n\n    var timeout = void 0;\n    navigator.platform.indexOf('Win') >= 0 && (navigator.userAgent.indexOf('Windows NT 10.0') != -1 || navigator.userAgent.indexOf('Windows 10.0') != -1) ? timeout = 35 : timeout = 3;\n    u2f.sign(key, timeout).then(localCallback).catch(function (err) {\n      callback(undefined, err);\n    });\n  }\n};\n\nexport default DigitalBitboxUsb;",{"version":3,"sources":["/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/wallets/hardware/bitbox/digitalBitboxUsb.js"],"names":["u2f","DigitalBitboxUsb","webSafe64","base64","replace","normal64","substring","length","prototype","u2fCallback","response","callback","data","Buffer","signatureData","slice","undefined","exchange","msg","from","kh_max_len","challenge","total","Math","ceil","self","localCallback","result","index","kh","concat","key","appId","location","origin","toString","version","keyHandle","timeout","navigator","platform","indexOf","userAgent","sign","then","catch","err"],"mappings":"AAAA;;AACA;;;;AAKA;;;;AAEA,OAAOA,GAAP,MAAgB,SAAhB;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAW,CAAE,CAAtC,C,CAEA;;;AACAA,gBAAgB,CAACC,SAAjB,GAA6B,UAASC,MAAT,EAAiB;AAC5C,SAAOA,MAAM,CACVC,OADI,CACI,KADJ,EACW,GADX,EAEJA,OAFI,CAEI,KAFJ,EAEW,GAFX,EAGJA,OAHI,CAGI,KAHJ,EAGW,EAHX,CAAP;AAID,CALD,C,CAOA;;;AACAH,gBAAgB,CAACI,QAAjB,GAA4B,UAASF,MAAT,EAAiB;AAC3C,SACE;AACAA,IAAAA,MAAM,CAACC,OAAP,CAAe,KAAf,EAAsB,GAAtB,EAA2BA,OAA3B,CAAmC,IAAnC,EAAyC,GAAzC,IACA,KAAKE,SAAL,CAAe,CAAf,EAAmB,IAAIH,MAAM,CAACI,MAAZ,GAAsB,CAAxC;AAHF;AAKD,CAND;;AAQAN,gBAAgB,CAACO,SAAjB,CAA2BC,WAA3B,GAAyC,UAASC,QAAT,EAAmBC,QAAnB,EAA6B;AACpE,MAAI,mBAAmBD,QAAvB,EAAiC;AAC/B,QAAME,IAAI,GAAG,IAAIC,MAAJ,CACXZ,gBAAgB,CAACI,QAAjB,CAA0BK,QAAQ,CAACI,aAAnC,CADW,EAEX,QAFW,CAAb;AAIAH,IAAAA,QAAQ,CAACC,IAAI,CAACG,KAAL,CAAW,CAAX,CAAD,CAAR;AACD,GAND,MAMO;AACLJ,IAAAA,QAAQ,CAACK,SAAD,EAAYN,QAAZ,CAAR;AACD;AACF,CAVD;;AAYAT,gBAAgB,CAACO,SAAjB,CAA2BS,QAA3B,GAAsC,UAASC,GAAT,EAAcP,QAAd,EAAwB;AAC5DO,EAAAA,GAAG,GAAGL,MAAM,CAACM,IAAP,CAAYD,GAAZ,EAAiB,OAAjB,CAAN;AACA,MAAME,UAAU,GAAG,MAAM,CAAzB,CAF4D,CAEhC;AAC5B;;AACA,MAAMC,SAAS,GAAG,IAAIR,MAAJ,CAChB,kEADgB,EAEhB,KAFgB,CAAlB;AAIA,MAAMS,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUN,GAAG,CAACX,MAAJ,GAAaa,UAAvB,CAAd;AACA,MAAMK,IAAI,GAAG,IAAb;;AACA,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAASC,MAAT,EAAiB;AACrCF,IAAAA,IAAI,CAAChB,WAAL,CAAiBkB,MAAjB,EAAyBhB,QAAzB;AACD,GAFD;;AAGA,OAAK,IAAIiB,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGN,KAA5B,EAAmCM,KAAK,EAAxC,EAA4C;AAC1C,QAAMC,EAAE,GAAGhB,MAAM,CAACiB,MAAP,CAAc,CACvBjB,MAAM,CAACM,IAAP,CAAY,CAACG,KAAD,CAAZ,CADuB,EAEvBT,MAAM,CAACM,IAAP,CAAY,CAACS,KAAD,CAAZ,CAFuB,EAGvBV,GAAG,CAACH,KAAJ,CAAUa,KAAK,GAAGR,UAAlB,EAA8B,CAACQ,KAAK,GAAG,CAAT,IAAcR,UAA5C,CAHuB,CAAd,CAAX;AAKA,QAAMW,GAAG,GAAG;AACVC,MAAAA,KAAK,EAAEC,QAAQ,CAACC,MADN;AAEVb,MAAAA,SAAS,EAAEpB,gBAAgB,CAACC,SAAjB,CAA2BmB,SAAS,CAACc,QAAV,CAAmB,QAAnB,CAA3B,CAFD;AAGVC,MAAAA,OAAO,EAAE,QAHC;AAIVC,MAAAA,SAAS,EAAEpC,gBAAgB,CAACC,SAAjB,CAA2B2B,EAAE,CAACM,QAAH,CAAY,QAAZ,CAA3B;AAJD,KAAZ,CAN0C,CAY1C;AACA;;AACA,QAAIG,OAAO,SAAX;AACAC,IAAAA,SAAS,CAACC,QAAV,CAAmBC,OAAnB,CAA2B,KAA3B,KAAqC,CAArC,KACCF,SAAS,CAACG,SAAV,CAAoBD,OAApB,CAA4B,iBAA5B,KAAkD,CAAC,CAAnD,IACCF,SAAS,CAACG,SAAV,CAAoBD,OAApB,CAA4B,cAA5B,KAA+C,CAAC,CAFlD,IAGKH,OAAO,GAAG,EAHf,GAIKA,OAAO,GAAG,CAJf;AAKAtC,IAAAA,GAAG,CACA2C,IADH,CACQZ,GADR,EACaO,OADb,EAEGM,IAFH,CAEQlB,aAFR,EAGGmB,KAHH,CAGS,UAAAC,GAAG,EAAI;AACZnC,MAAAA,QAAQ,CAACK,SAAD,EAAY8B,GAAZ,CAAR;AACD,KALH;AAMD;AACF,CAxCD;;AA0CA,eAAe7C,gBAAf","sourcesContent":["// eslint-disable\n/**\n *  (c) 2017 Douglas Bakkum, Shift Devices AG\n *  MIT license\n **/\n\n'use strict';\n\nimport u2f from 'u2f-api';\n\nconst DigitalBitboxUsb = function() {};\n\n// Convert from normal to web-safe, strip trailing \"=\"s\nDigitalBitboxUsb.webSafe64 = function(base64) {\n  return base64\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_')\n    .replace(/=+$/, '');\n};\n\n// Convert from web-safe to normal, add trailing \"=\"s\nDigitalBitboxUsb.normal64 = function(base64) {\n  return (\n    // eslint-disable-next-line\n    base64.replace(/\\-/g, '+').replace(/_/g, '/') +\n    '=='.substring(0, (3 * base64.length) % 4)\n  );\n};\n\nDigitalBitboxUsb.prototype.u2fCallback = function(response, callback) {\n  if ('signatureData' in response) {\n    const data = new Buffer(\n      DigitalBitboxUsb.normal64(response.signatureData),\n      'base64'\n    );\n    callback(data.slice(5));\n  } else {\n    callback(undefined, response);\n  }\n};\n\nDigitalBitboxUsb.prototype.exchange = function(msg, callback) {\n  msg = Buffer.from(msg, 'ascii');\n  const kh_max_len = 128 - 2; // Subtract 2 bytes for `index` and `total` header\n  // Challenge is needed for U2F but unused in the hijack procedure\n  const challenge = new Buffer(\n    'dbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdb',\n    'hex'\n  );\n  const total = Math.ceil(msg.length / kh_max_len);\n  const self = this;\n  const localCallback = function(result) {\n    self.u2fCallback(result, callback);\n  };\n  for (let index = 0; index < total; index++) {\n    const kh = Buffer.concat([\n      Buffer.from([total]),\n      Buffer.from([index]),\n      msg.slice(index * kh_max_len, (index + 1) * kh_max_len)\n    ]);\n    const key = {\n      appId: location.origin,\n      challenge: DigitalBitboxUsb.webSafe64(challenge.toString('base64')),\n      version: 'U2F_V2',\n      keyHandle: DigitalBitboxUsb.webSafe64(kh.toString('base64'))\n    };\n    // Set timeout to 35 seconds for Windows 10 to wait for user confirmation\n    // Keep 3 seconds for other plaforms so that polling is fast enough\n    let timeout;\n    navigator.platform.indexOf('Win') >= 0 &&\n    (navigator.userAgent.indexOf('Windows NT 10.0') != -1 ||\n      navigator.userAgent.indexOf('Windows 10.0') != -1)\n      ? (timeout = 35)\n      : (timeout = 3);\n    u2f\n      .sign(key, timeout)\n      .then(localCallback)\n      .catch(err => {\n        callback(undefined, err);\n      });\n  }\n};\n\nexport default DigitalBitboxUsb;\n"]}]}