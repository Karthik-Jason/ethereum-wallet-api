{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/eslint-loader/index.js??ref--13-0!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/dapps/MakerDai/helpers.js","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/dapps/MakerDai/helpers.js","mtime":1573477611656},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport BigNumber from 'bignumber.js';\n\nvar toBigNumber = function toBigNumber(num) {\n  return new BigNumber(num);\n};\n\nvar bnOver = function bnOver(one, two, three) {\n  return toBigNumber(one).times(toBigNumber(two)).div(toBigNumber(three));\n};\n\nexport function displayPercentValue(raw) {\n  if (!BigNumber.isBigNumber(raw)) raw = new BigNumber(raw);\n  return raw.times(100).toString();\n}\nexport function displayFixedValue(raw) {\n  var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n  var round = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  if (!BigNumber.isBigNumber(raw)) raw = new BigNumber(raw);\n  if (!isFinite(raw) || isNaN(raw)) return '--';\n  if (round) return raw.toFixed(decimals, BigNumber.ROUND_DOWN).toString();\n  return raw.toFixed(decimals).toString();\n}\nexport function displayFixedPercent(raw) {\n  var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n  var round = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var value = displayFixedValue(displayPercentValue(raw), decimals, round);\n\n  if (isFinite(value) && new BigNumber(value).gt(0)) {\n    return value;\n  }\n\n  return '--';\n} // Calculations\n\nexport function maxDai(ethPrice, ethCollateral, liquidationRatio, debtValue) {\n  return bnOver(toBigNumber(ethPrice), toBigNumber(ethCollateral), toBigNumber(liquidationRatio)).minus(toBigNumber(debtValue));\n}\nexport function maxPethDraw(pethCollateral, liquidationRatio, debtValue, pethPrice) {\n  var pethMin = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n  return toBigNumber(pethCollateral).minus(bnOver(toBigNumber(liquidationRatio).plus(0.001), toBigNumber(debtValue), toBigNumber(pethPrice))).minus(toBigNumber(pethMin).times(1.0));\n}\nexport function maxEthDraw(ethCollateral, liquidationRatio, debtValue, ethPrice) {\n  var minEth = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n  return toBigNumber(ethCollateral).minus(bnOver(toBigNumber(liquidationRatio), toBigNumber(debtValue), toBigNumber(ethPrice))).minus(toBigNumber(minEth).times(1.0));\n}\nexport function calcCollatRatio(ethQty, daiQty, ethPrice) {\n  return bnOver(toBigNumber(ethPrice), ethQty, daiQty);\n}\nexport function calcLiquidationPrice(ethQty, daiQty, ethPrice, liquidationRatio) {\n  var getInt = parseInt(ethPrice);\n\n  for (var i = getInt; i > 0; i--) {\n    var atValue = bnOver(i, ethQty, daiQty).lte(toBigNumber(liquidationRatio));\n\n    if (atValue) {\n      return i;\n    }\n  }\n\n  for (var _i = 100; _i > 0; _i--) {\n    var _atValue = bnOver(_i / 100, ethQty, daiQty).lte(toBigNumber(liquidationRatio));\n\n    if (_atValue) {\n      return _i / 100;\n    }\n  }\n\n  return 0;\n}",{"version":3,"sources":["/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/dapps/MakerDai/helpers.js"],"names":["BigNumber","toBigNumber","num","bnOver","one","two","three","times","div","displayPercentValue","raw","isBigNumber","toString","displayFixedValue","decimals","round","isFinite","isNaN","toFixed","ROUND_DOWN","displayFixedPercent","value","gt","maxDai","ethPrice","ethCollateral","liquidationRatio","debtValue","minus","maxPethDraw","pethCollateral","pethPrice","pethMin","plus","maxEthDraw","minEth","calcCollatRatio","ethQty","daiQty","calcLiquidationPrice","getInt","parseInt","i","atValue","lte"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js';\n\nconst toBigNumber = num => {\n  return new BigNumber(num);\n};\n\nconst bnOver = (one, two, three) => {\n  return toBigNumber(one)\n    .times(toBigNumber(two))\n    .div(toBigNumber(three));\n};\n\nexport function displayPercentValue(raw) {\n  if (!BigNumber.isBigNumber(raw)) raw = new BigNumber(raw);\n  return raw.times(100).toString();\n}\n\nexport function displayFixedValue(raw, decimals = 3, round = true) {\n  if (!BigNumber.isBigNumber(raw)) raw = new BigNumber(raw);\n  if (!isFinite(raw) || isNaN(raw)) return '--';\n  if (round) return raw.toFixed(decimals, BigNumber.ROUND_DOWN).toString();\n  return raw.toFixed(decimals).toString();\n}\n\nexport function displayFixedPercent(raw, decimals = 3, round = true) {\n  const value = displayFixedValue(displayPercentValue(raw), decimals, round);\n  if (isFinite(value) && new BigNumber(value).gt(0)) {\n    return value;\n  }\n  return '--';\n}\n\n// Calculations\n\nexport function maxDai(ethPrice, ethCollateral, liquidationRatio, debtValue) {\n  return bnOver(\n    toBigNumber(ethPrice),\n    toBigNumber(ethCollateral),\n    toBigNumber(liquidationRatio)\n  ).minus(toBigNumber(debtValue));\n}\n\nexport function maxPethDraw(\n  pethCollateral,\n  liquidationRatio,\n  debtValue,\n  pethPrice,\n  pethMin = 0\n) {\n  return toBigNumber(pethCollateral)\n    .minus(\n      bnOver(\n        toBigNumber(liquidationRatio).plus(0.001),\n        toBigNumber(debtValue),\n        toBigNumber(pethPrice)\n      )\n    )\n    .minus(toBigNumber(pethMin).times(1.0));\n}\n\nexport function maxEthDraw(\n  ethCollateral,\n  liquidationRatio,\n  debtValue,\n  ethPrice,\n  minEth = 0\n) {\n  return toBigNumber(ethCollateral)\n    .minus(\n      bnOver(\n        toBigNumber(liquidationRatio),\n        toBigNumber(debtValue),\n        toBigNumber(ethPrice)\n      )\n    )\n    .minus(toBigNumber(minEth).times(1.0));\n}\n\nexport function calcCollatRatio(ethQty, daiQty, ethPrice) {\n  return bnOver(toBigNumber(ethPrice), ethQty, daiQty);\n}\n\nexport function calcLiquidationPrice(\n  ethQty,\n  daiQty,\n  ethPrice,\n  liquidationRatio\n) {\n  const getInt = parseInt(ethPrice);\n  for (let i = getInt; i > 0; i--) {\n    const atValue = bnOver(i, ethQty, daiQty).lte(\n      toBigNumber(liquidationRatio)\n    );\n    if (atValue) {\n      return i;\n    }\n  }\n  for (let i = 100; i > 0; i--) {\n    const atValue = bnOver(i / 100, ethQty, daiQty).lte(\n      toBigNumber(liquidationRatio)\n    );\n    if (atValue) {\n      return i / 100;\n    }\n  }\n  return 0;\n}\n"]}]}