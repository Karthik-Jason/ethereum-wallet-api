{"remainingRequest":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/thread-loader/dist/cjs.js!/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/eslint-loader/index.js??ref--13-0!/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/helpers/notificationFormatters/index.js","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/helpers/notificationFormatters/index.js","mtime":1573477611664},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.array.find-index\";\nimport { INVESTIGATE_FAILURE_KEY, type, notificationType, notificationStatuses, swapOnlyStatuses, swapIndexes, txIndexes } from \"./config\";\nimport { formatSwap, formatSwapError, formatSwapErrorUpdate, formatSwapReciept, formatTransactionError, formatTransactionErrorUpdate, formatTransactionHash, formatTransactionReciept } from \"./formatters\";\nimport { getNotificationIndex, getSwapEntryIndex, getSwapEntryIndexForTxReceipt, extractEvmErrorData } from \"./utils\";\n\nvar transactionHash = function transactionHash(notifArray, val, network) {\n  notifArray.push(formatTransactionHash(val, network));\n  return notifArray;\n};\n\nvar transactionReceipt = function transactionReceipt(notifArray, val, network) {\n  var idx = notifArray.findIndex(function (entry) {\n    return getNotificationIndex(entry, val);\n  });\n  notifArray[idx] = formatTransactionReciept(notifArray[idx], val, network);\n  var swapIdx = notifArray.findIndex(function (entry) {\n    return getSwapEntryIndexForTxReceipt(entry, val);\n  });\n\n  if (swapIdx >= 0) {\n    notifArray[swapIdx] = formatTransactionReciept(notifArray[swapIdx], val);\n  }\n\n  return notifArray;\n};\n\nvar transactionError = function transactionError(notifArray, val, network) {\n  var notUpdated = true;\n  val[txIndexes.response] = extractEvmErrorData(val[txIndexes.response]);\n  var idx = notifArray.findIndex(function (entry) {\n    return getNotificationIndex(entry, val);\n  });\n\n  if (idx >= 0 && !val[txIndexes.response].message) {\n    notUpdated = false;\n    notifArray[idx] = formatTransactionErrorUpdate(notifArray[idx], val);\n    return notifArray;\n  } else if (idx >= 0 && val[txIndexes.response].details) {\n    notUpdated = false;\n    notifArray[idx] = formatTransactionErrorUpdate(notifArray[idx], val);\n    return notifArray;\n  }\n\n  if (notUpdated) notifArray.push(formatTransactionError(val, network));\n  return notifArray;\n};\n\nvar swapHash = function swapHash(notifArray, val, network) {\n  notifArray.push(formatSwap(val, network));\n  return notifArray;\n};\n\nvar swapReceipt =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee(notifArray, val) {\n    var idx;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            idx = notifArray.findIndex(function (entry) {\n              return getSwapEntryIndex(entry, val);\n            });\n\n            if (!(idx >= 0)) {\n              _context.next = 5;\n              break;\n            }\n\n            _context.next = 4;\n            return formatSwapReciept(notifArray[idx], val);\n\n          case 4:\n            notifArray[idx] = _context.sent;\n\n          case 5:\n            return _context.abrupt(\"return\", notifArray);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function swapReceipt(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}(); // For swaps not using the ethereum network\n\n\nvar swapOrder = function swapOrder(notifArray, val, network) {\n  notifArray.push(formatSwap(val, network));\n  return notifArray;\n};\n\nvar swapError = function swapError(notifArray, val, network) {\n  val[swapIndexes.response] = extractEvmErrorData(val[swapIndexes.response]);\n  var idx = notifArray.findIndex(function (entry) {\n    return getSwapEntryIndex(entry, val);\n  });\n\n  if (!/known transaction/.test(val[swapIndexes.response]).message) {\n    if (idx >= 0) {\n      notifArray[idx] = formatSwapErrorUpdate(notifArray[idx], val);\n      return notifArray;\n    } else if (val[swapIndexes.response].details) {\n      notifArray[idx] = formatSwapErrorUpdate(notifArray[idx], val);\n    }\n\n    notifArray.push(formatSwapError(val, network));\n    return notifArray;\n  }\n\n  notifArray.push(formatSwapError(val, network));\n  return notifArray;\n};\n\nvar addUpdateNotification = function addUpdateNotification(newNotif, val, network) {\n  switch (val[0]) {\n    case type.TRANSACTION_HASH:\n      return transactionHash(newNotif, val, network);\n\n    case type.TRANSACTION_RECEIPT:\n      return transactionReceipt(newNotif, val, network);\n\n    case type.TRANSACTION_ERROR:\n      return transactionError(newNotif, val, network);\n\n    default:\n      break;\n  }\n};\n\nvar addUpdateSwapNotification =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee2(newNotif, val, network) {\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.t0 = val[0];\n            _context2.next = _context2.t0 === type.TRANSACTION_HASH ? 3 : _context2.t0 === type.SWAP_HASH ? 3 : _context2.t0 === type.TRANSACTION_RECEIPT ? 6 : _context2.t0 === type.SWAP_RECEIPT ? 6 : _context2.t0 === type.TRANSACTION_ERROR ? 9 : _context2.t0 === type.SWAP_ERROR ? 9 : _context2.t0 === type.SWAP_ORDER ? 12 : 15;\n            break;\n\n          case 3:\n            _context2.next = 5;\n            return swapHash(newNotif, val, network);\n\n          case 5:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 6:\n            _context2.next = 8;\n            return swapReceipt(newNotif, val, network);\n\n          case 8:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 9:\n            _context2.next = 11;\n            return swapError(newNotif, val, network);\n\n          case 11:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 12:\n            _context2.next = 14;\n            return swapOrder(newNotif, val, network);\n\n          case 14:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 15:\n            return _context2.abrupt(\"break\", 16);\n\n          case 16:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function addUpdateSwapNotification(_x3, _x4, _x5) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport { INVESTIGATE_FAILURE_KEY, type, notificationType, notificationStatuses, swapOnlyStatuses, swapIndexes, txIndexes, addUpdateNotification, addUpdateSwapNotification };",{"version":3,"sources":["/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/helpers/notificationFormatters/index.js"],"names":["INVESTIGATE_FAILURE_KEY","type","notificationType","notificationStatuses","swapOnlyStatuses","swapIndexes","txIndexes","formatSwap","formatSwapError","formatSwapErrorUpdate","formatSwapReciept","formatTransactionError","formatTransactionErrorUpdate","formatTransactionHash","formatTransactionReciept","getNotificationIndex","getSwapEntryIndex","getSwapEntryIndexForTxReceipt","extractEvmErrorData","transactionHash","notifArray","val","network","push","transactionReceipt","idx","findIndex","entry","swapIdx","transactionError","notUpdated","response","message","details","swapHash","swapReceipt","swapOrder","swapError","test","addUpdateNotification","newNotif","TRANSACTION_HASH","TRANSACTION_RECEIPT","TRANSACTION_ERROR","addUpdateSwapNotification","SWAP_HASH","SWAP_RECEIPT","SWAP_ERROR","SWAP_ORDER"],"mappings":"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","sourcesContent":["import {\n  INVESTIGATE_FAILURE_KEY,\n  type,\n  notificationType,\n  notificationStatuses,\n  swapOnlyStatuses,\n  swapIndexes,\n  txIndexes\n} from './config';\n\nimport {\n  formatSwap,\n  formatSwapError,\n  formatSwapErrorUpdate,\n  formatSwapReciept,\n  formatTransactionError,\n  formatTransactionErrorUpdate,\n  formatTransactionHash,\n  formatTransactionReciept\n} from './formatters';\n\nimport {\n  getNotificationIndex,\n  getSwapEntryIndex,\n  getSwapEntryIndexForTxReceipt,\n  extractEvmErrorData\n} from './utils';\n\nconst transactionHash = (notifArray, val, network) => {\n  notifArray.push(formatTransactionHash(val, network));\n  return notifArray;\n};\n\nconst transactionReceipt = (notifArray, val, network) => {\n  const idx = notifArray.findIndex(entry => getNotificationIndex(entry, val));\n  notifArray[idx] = formatTransactionReciept(notifArray[idx], val, network);\n  const swapIdx = notifArray.findIndex(entry =>\n    getSwapEntryIndexForTxReceipt(entry, val)\n  );\n  if (swapIdx >= 0) {\n    notifArray[swapIdx] = formatTransactionReciept(notifArray[swapIdx], val);\n  }\n  return notifArray;\n};\n\nconst transactionError = (notifArray, val, network) => {\n  let notUpdated = true;\n  val[txIndexes.response] = extractEvmErrorData(val[txIndexes.response]);\n  const idx = notifArray.findIndex(entry => getNotificationIndex(entry, val));\n  if (idx >= 0 && !val[txIndexes.response].message) {\n    notUpdated = false;\n    notifArray[idx] = formatTransactionErrorUpdate(notifArray[idx], val);\n    return notifArray;\n  } else if (idx >= 0 && val[txIndexes.response].details) {\n    notUpdated = false;\n    notifArray[idx] = formatTransactionErrorUpdate(notifArray[idx], val);\n    return notifArray;\n  }\n  if (notUpdated) notifArray.push(formatTransactionError(val, network));\n  return notifArray;\n};\n\nconst swapHash = (notifArray, val, network) => {\n  notifArray.push(formatSwap(val, network));\n  return notifArray;\n};\n\nconst swapReceipt = async (notifArray, val) => {\n  const idx = notifArray.findIndex(entry => getSwapEntryIndex(entry, val));\n  if (idx >= 0) {\n    notifArray[idx] = await formatSwapReciept(notifArray[idx], val);\n  }\n  return notifArray;\n};\n\n// For swaps not using the ethereum network\nconst swapOrder = (notifArray, val, network) => {\n  notifArray.push(formatSwap(val, network));\n  return notifArray;\n};\n\nconst swapError = (notifArray, val, network) => {\n  val[swapIndexes.response] = extractEvmErrorData(val[swapIndexes.response]);\n  const idx = notifArray.findIndex(entry => getSwapEntryIndex(entry, val));\n  if (!/known transaction/.test(val[swapIndexes.response]).message) {\n    if (idx >= 0) {\n      notifArray[idx] = formatSwapErrorUpdate(notifArray[idx], val);\n      return notifArray;\n    } else if (val[swapIndexes.response].details) {\n      notifArray[idx] = formatSwapErrorUpdate(notifArray[idx], val);\n    }\n    notifArray.push(formatSwapError(val, network));\n    return notifArray;\n  }\n  notifArray.push(formatSwapError(val, network));\n  return notifArray;\n};\n\nconst addUpdateNotification = function(newNotif, val, network) {\n  switch (val[0]) {\n    case type.TRANSACTION_HASH:\n      return transactionHash(newNotif, val, network);\n    case type.TRANSACTION_RECEIPT:\n      return transactionReceipt(newNotif, val, network);\n    case type.TRANSACTION_ERROR:\n      return transactionError(newNotif, val, network);\n    default:\n      break;\n  }\n};\n\nconst addUpdateSwapNotification = async function(newNotif, val, network) {\n  switch (val[0]) {\n    case type.TRANSACTION_HASH:\n    case type.SWAP_HASH:\n      return await swapHash(newNotif, val, network);\n    case type.TRANSACTION_RECEIPT:\n    case type.SWAP_RECEIPT:\n      return await swapReceipt(newNotif, val, network);\n    case type.TRANSACTION_ERROR:\n    case type.SWAP_ERROR:\n      return await swapError(newNotif, val, network);\n    case type.SWAP_ORDER:\n      return await swapOrder(newNotif, val, network);\n    default:\n      break;\n  }\n};\nexport {\n  INVESTIGATE_FAILURE_KEY,\n  type,\n  notificationType,\n  notificationStatuses,\n  swapOnlyStatuses,\n  swapIndexes,\n  txIndexes,\n  addUpdateNotification,\n  addUpdateSwapNotification\n};\n"]}]}