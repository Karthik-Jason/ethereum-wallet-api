{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/thread-loader/dist/cjs.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/eslint-loader/index.js??ref--13-0!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/wallets/web3-provider/web3Calls.js","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/wallets/web3-provider/web3Calls.js","mtime":1574664278326},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/thread-loader/dist/cjs.js","mtime":1574664277654},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js","mtime":1574664275010},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/eslint-loader/index.js","mtime":1574664275986}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport _classCallCheck from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport Method from 'web3-core-method';\nimport utils from 'web3-utils';\nimport { formatters } from 'web3-core-helpers';\n\nvar Web3Calls = function Web3Calls(requestManager) {\n  var _this = this;\n\n  _classCallCheck(this, Web3Calls);\n\n  var ethereumCalls = [new Method({\n    name: 'getId',\n    call: 'net_version',\n    params: 0,\n    outputFormatter: utils.hexToNumber\n  }), new Method({\n    name: 'getGasPrice',\n    call: 'eth_gasPrice',\n    params: 0\n  }), new Method({\n    name: 'getBlockNumber',\n    call: 'eth_blockNumber',\n    params: 0\n  }), new Method({\n    name: 'getBlockByNumber',\n    call: 'eth_getBlockByNumber',\n    params: 2\n  }), new Method({\n    name: 'estimateGas',\n    call: 'eth_estimateGas',\n    params: 1,\n    inputFormatter: [formatters.inputCallFormatter],\n    outputFormatter: utils.hexToNumber\n  }), new Method({\n    name: 'sendSignedTransaction',\n    call: 'eth_sendRawTransaction',\n    params: 1,\n    inputFormatter: [null]\n  }), new Method({\n    name: 'getTransactionReceipt',\n    call: 'eth_getTransactionReceipt',\n    params: 1,\n    inputFormatter: [null]\n  }), new Method({\n    name: 'getTransactionCount',\n    call: 'eth_getTransactionCount',\n    params: 2,\n    inputFormatter: [function (address) {\n      if (utils.isAddress(address.toLowerCase())) {\n        return address;\n      }\n\n      throw new Error('Address ' + address + ' is not a valid address to get the \"transactionCount\".');\n    }, function () {\n      return 'latest';\n    }]\n  })];\n  this.ethereumCalls = {};\n  ethereumCalls.forEach(function (call) {\n    call.attachToObject(_this.ethereumCalls);\n    call.setRequestManager(requestManager);\n  });\n  return this.ethereumCalls;\n};\n\nexport default Web3Calls;",{"version":3,"sources":["/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/wallets/web3-provider/web3Calls.js"],"names":["Method","utils","formatters","Web3Calls","requestManager","ethereumCalls","name","call","params","outputFormatter","hexToNumber","inputFormatter","inputCallFormatter","address","isAddress","toLowerCase","Error","forEach","attachToObject","setRequestManager"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,kBAAnB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,SAASC,UAAT,QAA2B,mBAA3B;;IACMC,S,GACJ,mBAAYC,cAAZ,EAA4B;AAAA;;AAAA;;AAC1B,MAAMC,aAAa,GAAG,CACpB,IAAIL,MAAJ,CAAW;AACTM,IAAAA,IAAI,EAAE,OADG;AAETC,IAAAA,IAAI,EAAE,aAFG;AAGTC,IAAAA,MAAM,EAAE,CAHC;AAITC,IAAAA,eAAe,EAAER,KAAK,CAACS;AAJd,GAAX,CADoB,EAOpB,IAAIV,MAAJ,CAAW;AACTM,IAAAA,IAAI,EAAE,aADG;AAETC,IAAAA,IAAI,EAAE,cAFG;AAGTC,IAAAA,MAAM,EAAE;AAHC,GAAX,CAPoB,EAYpB,IAAIR,MAAJ,CAAW;AACTM,IAAAA,IAAI,EAAE,gBADG;AAETC,IAAAA,IAAI,EAAE,iBAFG;AAGTC,IAAAA,MAAM,EAAE;AAHC,GAAX,CAZoB,EAiBpB,IAAIR,MAAJ,CAAW;AACTM,IAAAA,IAAI,EAAE,kBADG;AAETC,IAAAA,IAAI,EAAE,sBAFG;AAGTC,IAAAA,MAAM,EAAE;AAHC,GAAX,CAjBoB,EAsBpB,IAAIR,MAAJ,CAAW;AACTM,IAAAA,IAAI,EAAE,aADG;AAETC,IAAAA,IAAI,EAAE,iBAFG;AAGTC,IAAAA,MAAM,EAAE,CAHC;AAITG,IAAAA,cAAc,EAAE,CAACT,UAAU,CAACU,kBAAZ,CAJP;AAKTH,IAAAA,eAAe,EAAER,KAAK,CAACS;AALd,GAAX,CAtBoB,EA6BpB,IAAIV,MAAJ,CAAW;AACTM,IAAAA,IAAI,EAAE,uBADG;AAETC,IAAAA,IAAI,EAAE,wBAFG;AAGTC,IAAAA,MAAM,EAAE,CAHC;AAITG,IAAAA,cAAc,EAAE,CAAC,IAAD;AAJP,GAAX,CA7BoB,EAmCpB,IAAIX,MAAJ,CAAW;AACTM,IAAAA,IAAI,EAAE,uBADG;AAETC,IAAAA,IAAI,EAAE,2BAFG;AAGTC,IAAAA,MAAM,EAAE,CAHC;AAITG,IAAAA,cAAc,EAAE,CAAC,IAAD;AAJP,GAAX,CAnCoB,EAyCpB,IAAIX,MAAJ,CAAW;AACTM,IAAAA,IAAI,EAAE,qBADG;AAETC,IAAAA,IAAI,EAAE,yBAFG;AAGTC,IAAAA,MAAM,EAAE,CAHC;AAITG,IAAAA,cAAc,EAAE,CACd,UAASE,OAAT,EAAkB;AAChB,UAAIZ,KAAK,CAACa,SAAN,CAAgBD,OAAO,CAACE,WAAR,EAAhB,CAAJ,EAA4C;AAC1C,eAAOF,OAAP;AACD;;AACD,YAAM,IAAIG,KAAJ,CACJ,aACEH,OADF,GAEE,wDAHE,CAAN;AAKD,KAVa,EAWd,YAAW;AACT,aAAO,QAAP;AACD,KAba;AAJP,GAAX,CAzCoB,CAAtB;AA8DA,OAAKR,aAAL,GAAqB,EAArB;AACAA,EAAAA,aAAa,CAACY,OAAd,CAAsB,UAAAV,IAAI,EAAI;AAC5BA,IAAAA,IAAI,CAACW,cAAL,CAAoB,KAAI,CAACb,aAAzB;AACAE,IAAAA,IAAI,CAACY,iBAAL,CAAuBf,cAAvB;AACD,GAHD;AAIA,SAAO,KAAKC,aAAZ;AACD,C;;AAEH,eAAeF,SAAf","sourcesContent":["import Method from 'web3-core-method';\nimport utils from 'web3-utils';\nimport { formatters } from 'web3-core-helpers';\nclass Web3Calls {\n  constructor(requestManager) {\n    const ethereumCalls = [\n      new Method({\n        name: 'getId',\n        call: 'net_version',\n        params: 0,\n        outputFormatter: utils.hexToNumber\n      }),\n      new Method({\n        name: 'getGasPrice',\n        call: 'eth_gasPrice',\n        params: 0\n      }),\n      new Method({\n        name: 'getBlockNumber',\n        call: 'eth_blockNumber',\n        params: 0\n      }),\n      new Method({\n        name: 'getBlockByNumber',\n        call: 'eth_getBlockByNumber',\n        params: 2\n      }),\n      new Method({\n        name: 'estimateGas',\n        call: 'eth_estimateGas',\n        params: 1,\n        inputFormatter: [formatters.inputCallFormatter],\n        outputFormatter: utils.hexToNumber\n      }),\n      new Method({\n        name: 'sendSignedTransaction',\n        call: 'eth_sendRawTransaction',\n        params: 1,\n        inputFormatter: [null]\n      }),\n      new Method({\n        name: 'getTransactionReceipt',\n        call: 'eth_getTransactionReceipt',\n        params: 1,\n        inputFormatter: [null]\n      }),\n      new Method({\n        name: 'getTransactionCount',\n        call: 'eth_getTransactionCount',\n        params: 2,\n        inputFormatter: [\n          function(address) {\n            if (utils.isAddress(address.toLowerCase())) {\n              return address;\n            }\n            throw new Error(\n              'Address ' +\n                address +\n                ' is not a valid address to get the \"transactionCount\".'\n            );\n          },\n          function() {\n            return 'latest';\n          }\n        ]\n      })\n    ];\n    this.ethereumCalls = {};\n    ethereumCalls.forEach(call => {\n      call.attachToObject(this.ethereumCalls);\n      call.setRequestManager(requestManager);\n    });\n    return this.ethereumCalls;\n  }\n}\nexport default Web3Calls;\n"]}]}