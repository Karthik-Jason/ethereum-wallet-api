{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/thread-loader/dist/cjs.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/layouts/InterfaceLayout/components/InterfaceNetworkModal/InterfaceNetworkModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/src/layouts/InterfaceLayout/components/InterfaceNetworkModal/InterfaceNetworkModal.vue","mtime":1573477611976},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.function.name\";\nimport _defineProperty from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-app/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport store from 'store';\nimport InterfaceBottomText from '@/components/InterfaceBottomText';\nimport * as networkTypes from '@/networks/types';\nimport Misc from '@/helpers/misc';\nimport { mapState } from 'vuex';\nexport default {\n  components: {\n    'interface-bottom-text': InterfaceBottomText\n  },\n  data: function data() {\n    return {\n      types: networkTypes,\n      selectedNetworkName: 'ETH',\n      chainID: networkTypes['ETH'].chainID,\n      port: 443,\n      name: '',\n      url: '',\n      username: '',\n      password: '',\n      customNetworks: [],\n      blockExplorerAddr: '',\n      blockExplorerTX: ''\n    };\n  },\n  computed: _objectSpread({}, mapState(['network', 'Networks', 'web3']), {\n    reorderedNetworks: function reorderedNetworks() {\n      var networks = Misc.reorderNetworks();\n      return networks;\n    },\n    selectedNetwork: function selectedNetwork() {\n      return this.types[this.selectedNetworkName];\n    }\n  }),\n  watch: {\n    selectedNetworkName: function selectedNetworkName(val) {\n      if (val !== 'CUS') {\n        this.chainID = this.selectedNetwork.chainID;\n      }\n    }\n  },\n  mounted: function mounted() {\n    if (store.get('customNetworks') !== undefined) {\n      this.customNetworks = store.get('customNetworks');\n    }\n\n    this.types['CUS'] = {\n      name: 'CUS',\n      name_long: 'CUSTOM',\n      homePage: '',\n      blockExplorerTX: '',\n      blockExplorerAddr: '',\n      chainID: networkTypes['ETH'].chainID,\n      tokens: [],\n      contracts: [],\n      currencyName: 'CUS'\n    };\n    this.selectedNetworkName = this.network.type.name;\n  },\n  methods: {\n    networkModalOpen: function networkModalOpen() {\n      this.$refs.network.$refs.network.show();\n    },\n    removeNetwork: function removeNetwork(net, idx) {\n      this.customNetworks.splice(idx, 1);\n\n      if (net.service === this.network.service) {\n        if (this.customNetworks.length > 0) {\n          this.switchNetwork(this.customNetworks[0]);\n        } else {\n          this.switchNetwork(this.Networks.ETH[0]);\n        }\n      }\n\n      store.set('customNetworks', this.customNetworks);\n    },\n    addCustomNetworkToggle: function addCustomNetworkToggle() {\n      this.$refs.network.$el.classList.toggle('max-height-1');\n      this.$refs.networkList.classList.toggle('hidden');\n      this.$refs.networkAdd.classList.toggle('hidden');\n    },\n    resetCompState: function resetCompState() {\n      this.port = 443;\n      this.name = '';\n      this.url = '';\n      this.username = '';\n      this.password = '';\n      this.blockExplorerAddr = '';\n      this.blockExplorerTX = '';\n    },\n    saveCustomNetwork: function saveCustomNetwork() {\n      var customNetwork = {\n        auth: this.password !== '' && this.username !== '',\n        password: this.password,\n        port: parseInt(this.port),\n        service: this.name,\n        type: {\n          blockExplorerAddr: this.selectedNetwork.blockExplorerAddr || this.blockExplorerAddr || '',\n          blockExplorerTX: this.selectedNetwork.blockExplorerTX || this.blockExplorerTX || '',\n          chainID: parseInt(this.chainID),\n          contracts: [],\n          homePage: '',\n          name: this.selectedNetwork.name,\n          name_long: this.selectedNetwork.name_long,\n          tokens: [],\n          currencyName: this.selectedNetwork.currencyName\n        },\n        url: this.url,\n        username: this.username\n      };\n      this.customNetworks.push(customNetwork);\n      store.set('customNetworks', this.customNetworks);\n      this.resetCompState();\n      this.$refs.addCustomToggle.click();\n    },\n    expendAuth: function expendAuth() {\n      this.$refs.authForm.classList.toggle('hidden');\n    },\n    switchNetwork: function switchNetwork(network) {\n      var _this = this;\n\n      this.$store.dispatch('switchNetwork', network).then(function () {\n        _this.$store.dispatch('setWeb3Instance').then(function () {\n          _this.selectedNetworkName = network.type.name;\n\n          if (Misc.isMewCx()) {\n            _this.web3.eth.net.getId().then(function (id) {\n              window.chrome.storage.sync.set({\n                defChainID: network.type.chainID,\n                defNetVersion: id,\n                defNetwork: JSON.stringify({\n                  url: network.url,\n                  key: network.type.name\n                })\n              });\n            });\n          }\n        });\n      });\n      this.$refs.network.hide();\n    }\n  }\n};",{"version":3,"sources":["InterfaceNetworkModal.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"modal-container\">\n    <b-modal\n      ref=\"network\"\n      :title=\"$t('interface.network')\"\n      hide-footer\n      centered\n      class=\"bootstrap-modal network nopadding max-height-1\"\n      static\n      lazy\n    >\n      <div class=\"content-block\">\n        <div class=\"flex-container\">\n          <h4 class=\"modal-title\">{{ $t('common.advanced') }}</h4>\n          <div class=\"margin-left-auto add-custom-network\">\n            <p>{{ $t('interface.addCustomNode') }}</p>\n            <div class=\"sliding-switch-white\">\n              <label class=\"switch\">\n                <input\n                  ref=\"addCustomToggle\"\n                  type=\"checkbox\"\n                  @click=\"addCustomNetworkToggle\"\n                />\n                <span class=\"slider round\" />\n              </label>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div ref=\"networkList\" class=\"network-list\">\n        <div\n          v-for=\"(key, index) in Object.keys(reorderedNetworks)\"\n          :key=\"key + index\"\n          class=\"content-block\"\n        >\n          <div class=\"network-title\">\n            <div class=\"network-icon\">\n              <img :src=\"Networks[key][0].type.icon\" alt />\n            </div>\n            <h4 :class=\"key.toLowerCase()\">{{ key }}</h4>\n          </div>\n          <div class=\"grid-3\">\n            <p\n              v-for=\"net in Networks[key]\"\n              :key=\"net.service\"\n              :class=\"\n                net.service === network.service &&\n                net.type &&\n                net.type.name === network.type.name\n                  ? 'current-network'\n                  : ''\n              \"\n              class=\"switch-network\"\n              @click=\"switchNetwork(net, key)\"\n            >\n              {{ net.service }}\n            </p>\n          </div>\n        </div>\n        <div v-if=\"customNetworks.length > 0\" class=\"content-block\">\n          <h4 class=\"cust\">Custom Networks</h4>\n          <div\n            v-for=\"(net, idx) in customNetworks\"\n            :key=\"net.service + '(' + net.type.name + ')' + idx\"\n            class=\"grid-3\"\n          >\n            <div\n              :class=\"\n                net.service === network.service &&\n                net.type.name === network.type.name\n                  ? 'current-network'\n                  : ''\n              \"\n              class=\"switch-network custom-network-item\"\n            >\n              <p @click=\"switchNetwork(net)\">\n                {{ net.service }} {{ '(' + net.type.name + ')' }}\n              </p>\n              <i\n                class=\"fa fa-times-circle\"\n                @click.prevent=\"removeNetwork(net, idx)\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      <form ref=\"networkAdd\" class=\"network-add hidden\">\n        <div class=\"content-block\">\n          <div class=\"input-block-container\">\n            <input\n              v-validate=\"'required'\"\n              v-model=\"name\"\n              class=\"custom-input-text-1\"\n              type=\"text\"\n              name=\"nodeName\"\n              placeholder=\"ETH Node Name\"\n              autocomplete=\"off\"\n            />\n            <select v-model=\"selectedNetworkName\" class=\"custom-select-1\">\n              <option\n                v-for=\"type in types\"\n                :value=\"type.name\"\n                :key=\"type.name + type.name_long\"\n                :selected=\"selectedNetworkName === type.name\"\n              >\n                {{ type.name | capitalize }} -\n                {{ type.name_long | capitalize }}\n              </option>\n            </select>\n            <input\n              v-validate=\"{\n                required: true,\n                url: {\n                  require_protocol: true,\n                  protocols: ['http', 'https', 'ws', 'wss'],\n                  require_tld: false\n                }\n              }\"\n              v-model=\"url\"\n              class=\"custom-input-text-1\"\n              type=\"text\"\n              name=\"nodeUrl\"\n              placeholder=\"URL\"\n              autocomplete=\"off\"\n            />\n            <input\n              v-model=\"port\"\n              class=\"custom-input-text-1\"\n              type=\"number\"\n              name=\"nodePort\"\n              placeholder=\"Port\"\n              autocomplete=\"off\"\n            />\n            <input\n              v-validate=\"'required|url:require_protocol'\"\n              v-show=\"selectedNetworkName === 'CUS'\"\n              v-model=\"blockExplorerTX\"\n              class=\"custom-input-text-1\"\n              type=\"text\"\n              name=\"customExplorerTx\"\n              placeholder=\"https://etherscan.io/tx/[[txHash]]\"\n              autocomplete=\"off\"\n            />\n            <input\n              v-validate=\"'required|numeric'\"\n              v-show=\"selectedNetworkName === 'CUS'\"\n              v-model=\"chainID\"\n              class=\"custom-input-text-1\"\n              type=\"number\"\n              name=\"customChain\"\n              placeholder=\"Chain ID\"\n              autocomplete=\"off\"\n            />\n            <input\n              v-validate=\"'required|url:require_protocol'\"\n              v-show=\"selectedNetworkName === 'CUS'\"\n              v-model=\"blockExplorerAddr\"\n              class=\"custom-input-text-1\"\n              type=\"text\"\n              name=\"customExplorerAddr\"\n              placeholder=\"https://etherscan.io/address/[[address]]\"\n              autocomplete=\"off\"\n            />\n          </div>\n          <div>\n            <p v-show=\"errors.has('nodeName')\">\n              {{ errors.first('nodeName') }}\n            </p>\n            <p v-show=\"errors.has('nodeUrl')\">{{ errors.first('nodeUrl') }}</p>\n            <p\n              v-show=\"\n                errors.has('customExplorerTx') || blockExplorerTX.length > 0\n              \"\n            >\n              {{ errors.first('customExplorerTx') }}\n            </p>\n            <p v-show=\"errors.has('customChain') || (chainID && chainID > 0)\">\n              {{ errors.first('customChain') }}\n            </p>\n            <p\n              v-show=\"\n                errors.has('customExplorerAddr') || blockExplorerAddr.length > 0\n              \"\n            >\n              {{ errors.first('customExplorerAddr') }}\n            </p>\n          </div>\n        </div>\n\n        <div class=\"content-block\">\n          <div class=\"flex-container\">\n            <div>\n              <h4 class=\"modal-title\">{{ $t('interface.httpBasicAccess') }}</h4>\n              <p class=\"warning-msg\">\n                Warning: This information will be saved to your local storage,\n                make sure your computer is secure.\n              </p>\n            </div>\n            <div class=\"margin-left-auto add-custom-network\">\n              <div class=\"sliding-switch-white\">\n                <label class=\"switch\">\n                  <input type=\"checkbox\" @click=\"expendAuth\" />\n                  <span class=\"slider round\" />\n                </label>\n              </div>\n            </div>\n          </div>\n          <div ref=\"authForm\" class=\"auth-form-container hidden\">\n            <input\n              v-model=\"username\"\n              class=\"custom-input-text-1\"\n              type=\"text\"\n              name\n              placeholder=\"User Name\"\n              autocomplete=\"off\"\n            />\n            <input\n              v-model=\"password\"\n              class=\"custom-input-text-1\"\n              type=\"password\"\n              name\n              placeholder=\"Password\"\n              autocomplete=\"off\"\n            />\n          </div>\n        </div>\n\n        <div class=\"content-block\">\n          <div class=\"save-button-container\">\n            <button\n              v-show=\"selectedNetworkName !== 'CUS'\"\n              :class=\"[\n                errors.has('nodeName') ||\n                errors.has('nodeUrl') ||\n                url === '' ||\n                name === ''\n                  ? 'disabled'\n                  : '',\n                'save-button large-round-button-green-filled clickable'\n              ]\"\n              @click.prevent=\"saveCustomNetwork\"\n            >\n              {{ $t('interface.save') }}\n            </button>\n            <button\n              v-show=\"selectedNetworkName === 'CUS'\"\n              :class=\"[\n                errors.has('nodeName') ||\n                errors.has('nodeUrl') ||\n                url === '' ||\n                name === '' ||\n                errors.has('customChain') ||\n                errors.has('customExplorerTx') ||\n                blockExplorerTX === '' ||\n                !chainID ||\n                blockExplorerAddr === '' ||\n                errors.has('customExplorerAddr')\n                  ? 'disabled'\n                  : '',\n                'save-button large-round-button-green-filled clickable'\n              ]\"\n              @click.prevent=\"saveCustomNetwork\"\n            >\n              {{ $t('interface.save') }}\n            </button>\n            <interface-bottom-text\n              :link-text=\"$t('interface.helpCenter')\"\n              :question=\"$t('interface.dontKnow')\"\n              link=\"https://kb.myetherwallet.com\"\n            />\n          </div>\n        </div>\n      </form>\n    </b-modal>\n  </div>\n</template>\n\n<script>\nimport store from 'store';\n\nimport InterfaceBottomText from '@/components/InterfaceBottomText';\nimport * as networkTypes from '@/networks/types';\nimport Misc from '@/helpers/misc';\n\nimport { mapState } from 'vuex';\n\nexport default {\n  components: {\n    'interface-bottom-text': InterfaceBottomText\n  },\n  data() {\n    return {\n      types: networkTypes,\n      selectedNetworkName: 'ETH',\n      chainID: networkTypes['ETH'].chainID,\n      port: 443,\n      name: '',\n      url: '',\n      username: '',\n      password: '',\n      customNetworks: [],\n      blockExplorerAddr: '',\n      blockExplorerTX: ''\n    };\n  },\n  computed: {\n    ...mapState(['network', 'Networks', 'web3']),\n    reorderedNetworks() {\n      const networks = Misc.reorderNetworks();\n      return networks;\n    },\n    selectedNetwork() {\n      return this.types[this.selectedNetworkName];\n    }\n  },\n  watch: {\n    selectedNetworkName(val) {\n      if (val !== 'CUS') {\n        this.chainID = this.selectedNetwork.chainID;\n      }\n    }\n  },\n  mounted() {\n    if (store.get('customNetworks') !== undefined) {\n      this.customNetworks = store.get('customNetworks');\n    }\n    this.types['CUS'] = {\n      name: 'CUS',\n      name_long: 'CUSTOM',\n      homePage: '',\n      blockExplorerTX: '',\n      blockExplorerAddr: '',\n      chainID: networkTypes['ETH'].chainID,\n      tokens: [],\n      contracts: [],\n      currencyName: 'CUS'\n    };\n    this.selectedNetworkName = this.network.type.name;\n  },\n  methods: {\n    networkModalOpen() {\n      this.$refs.network.$refs.network.show();\n    },\n    removeNetwork(net, idx) {\n      this.customNetworks.splice(idx, 1);\n      if (net.service === this.network.service) {\n        if (this.customNetworks.length > 0) {\n          this.switchNetwork(this.customNetworks[0]);\n        } else {\n          this.switchNetwork(this.Networks.ETH[0]);\n        }\n      }\n      store.set('customNetworks', this.customNetworks);\n    },\n    addCustomNetworkToggle() {\n      this.$refs.network.$el.classList.toggle('max-height-1');\n      this.$refs.networkList.classList.toggle('hidden');\n      this.$refs.networkAdd.classList.toggle('hidden');\n    },\n    resetCompState() {\n      this.port = 443;\n      this.name = '';\n      this.url = '';\n      this.username = '';\n      this.password = '';\n      this.blockExplorerAddr = '';\n      this.blockExplorerTX = '';\n    },\n    saveCustomNetwork() {\n      const customNetwork = {\n        auth: this.password !== '' && this.username !== '',\n        password: this.password,\n        port: parseInt(this.port),\n        service: this.name,\n        type: {\n          blockExplorerAddr:\n            this.selectedNetwork.blockExplorerAddr ||\n            this.blockExplorerAddr ||\n            '',\n          blockExplorerTX:\n            this.selectedNetwork.blockExplorerTX || this.blockExplorerTX || '',\n          chainID: parseInt(this.chainID),\n          contracts: [],\n          homePage: '',\n          name: this.selectedNetwork.name,\n          name_long: this.selectedNetwork.name_long,\n          tokens: [],\n          currencyName: this.selectedNetwork.currencyName\n        },\n        url: this.url,\n        username: this.username\n      };\n\n      this.customNetworks.push(customNetwork);\n      store.set('customNetworks', this.customNetworks);\n      this.resetCompState();\n      this.$refs.addCustomToggle.click();\n    },\n    expendAuth() {\n      this.$refs.authForm.classList.toggle('hidden');\n    },\n    switchNetwork(network) {\n      this.$store.dispatch('switchNetwork', network).then(() => {\n        this.$store.dispatch('setWeb3Instance').then(() => {\n          this.selectedNetworkName = network.type.name;\n          if (Misc.isMewCx()) {\n            this.web3.eth.net.getId().then(id => {\n              window.chrome.storage.sync.set({\n                defChainID: network.type.chainID,\n                defNetVersion: id,\n                defNetwork: JSON.stringify({\n                  url: network.url,\n                  key: network.type.name\n                })\n              });\n            });\n          }\n        });\n      });\n\n      this.$refs.network.hide();\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'InterfaceNetworkModal.scss';\n</style>\n"],"sourceRoot":"src/layouts/InterfaceLayout/components/InterfaceNetworkModal"}]}