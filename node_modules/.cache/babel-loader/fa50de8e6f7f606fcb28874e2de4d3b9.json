{"remainingRequest":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/thread-loader/dist/cjs.js!/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/eslint-loader/index.js??ref--13-0!/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/wallets/web3-provider/methods/eth_getTransactionReceipt.js","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/wallets/web3-provider/methods/eth_getTransactionReceipt.js","mtime":1573477612132},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport { toPayload } from \"../jsonrpc\";\nimport EthCalls from \"../web3Calls\";\nvar WAIT_TIME = 30 * 1000; //30 seconds\n\nvar memcache = {};\nexport default\n/*#__PURE__*/\n(function () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee(_ref, res, next) {\n    var payload, requestManager, ethCalls, txHash, receipt;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            payload = _ref.payload, requestManager = _ref.requestManager;\n\n            if (!(payload.method !== 'eth_getTransactionReceipt')) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt(\"return\", next());\n\n          case 3:\n            ethCalls = new EthCalls(requestManager);\n            txHash = payload.params[0];\n\n            if (!(!memcache[txHash] || memcache[txHash] && memcache[txHash].timestamp < new Date().getTime() - WAIT_TIME)) {\n              _context.next = 19;\n              break;\n            }\n\n            _context.prev = 6;\n            _context.next = 9;\n            return ethCalls.getTransactionReceipt(txHash);\n\n          case 9:\n            receipt = _context.sent;\n            memcache[txHash] = {\n              timestamp: new Date().getTime(),\n              receipt: JSON.stringify(receipt)\n            };\n            res(null, toPayload(payload.id, receipt));\n            _context.next = 17;\n            break;\n\n          case 14:\n            _context.prev = 14;\n            _context.t0 = _context[\"catch\"](6);\n            res(null, toPayload(payload.id, null));\n\n          case 17:\n            _context.next = 20;\n            break;\n\n          case 19:\n            res(null, toPayload(payload.id, JSON.parse(memcache[txHash].receipt) || null));\n\n          case 20:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[6, 14]]);\n  }));\n\n  return function (_x, _x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n})();",{"version":3,"sources":["/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/wallets/web3-provider/methods/eth_getTransactionReceipt.js"],"names":["toPayload","EthCalls","WAIT_TIME","memcache","res","next","payload","requestManager","method","ethCalls","txHash","params","timestamp","Date","getTime","getTransactionReceipt","receipt","JSON","stringify","id","parse"],"mappings":";;AAAA,SAASA,SAAT;AACA,OAAOC,QAAP;AACA,IAAMC,SAAS,GAAG,KAAK,IAAvB,C,CAA6B;;AAC7B,IAAMC,QAAQ,GAAG,EAAjB;AACA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAe,uBAAoCC,GAApC,EAAyCC,IAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,YAAAA,OAAT,QAASA,OAAT,EAAkBC,cAAlB,QAAkBA,cAAlB;;AAAA,kBACTD,OAAO,CAACE,MAAR,KAAmB,2BADV;AAAA;AAAA;AAAA;;AAAA,6CAC8CH,IAAI,EADlD;;AAAA;AAEPI,YAAAA,QAFO,GAEI,IAAIR,QAAJ,CAAaM,cAAb,CAFJ;AAGPG,YAAAA,MAHO,GAGEJ,OAAO,CAACK,MAAR,CAAe,CAAf,CAHF;;AAAA,kBAKX,CAACR,QAAQ,CAACO,MAAD,CAAT,IACCP,QAAQ,CAACO,MAAD,CAAR,IACCP,QAAQ,CAACO,MAAD,CAAR,CAAiBE,SAAjB,GAA6B,IAAIC,IAAJ,GAAWC,OAAX,KAAuBZ,SAP3C;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAUaO,QAAQ,CAACM,qBAAT,CAA+BL,MAA/B,CAVb;;AAAA;AAUHM,YAAAA,OAVG;AAWTb,YAAAA,QAAQ,CAACO,MAAD,CAAR,GAAmB;AACjBE,cAAAA,SAAS,EAAE,IAAIC,IAAJ,GAAWC,OAAX,EADM;AAEjBE,cAAAA,OAAO,EAAEC,IAAI,CAACC,SAAL,CAAeF,OAAf;AAFQ,aAAnB;AAIAZ,YAAAA,GAAG,CAAC,IAAD,EAAOJ,SAAS,CAACM,OAAO,CAACa,EAAT,EAAaH,OAAb,CAAhB,CAAH;AAfS;AAAA;;AAAA;AAAA;AAAA;AAiBTZ,YAAAA,GAAG,CAAC,IAAD,EAAOJ,SAAS,CAACM,OAAO,CAACa,EAAT,EAAa,IAAb,CAAhB,CAAH;;AAjBS;AAAA;AAAA;;AAAA;AAoBXf,YAAAA,GAAG,CACD,IADC,EAEDJ,SAAS,CAACM,OAAO,CAACa,EAAT,EAAaF,IAAI,CAACG,KAAL,CAAWjB,QAAQ,CAACO,MAAD,CAAR,CAAiBM,OAA5B,KAAwC,IAArD,CAFR,CAAH;;AApBW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { toPayload } from '../jsonrpc';\nimport EthCalls from '../web3Calls';\nconst WAIT_TIME = 30 * 1000; //30 seconds\nconst memcache = {};\nexport default async ({ payload, requestManager }, res, next) => {\n  if (payload.method !== 'eth_getTransactionReceipt') return next();\n  const ethCalls = new EthCalls(requestManager);\n  const txHash = payload.params[0];\n  if (\n    !memcache[txHash] ||\n    (memcache[txHash] &&\n      memcache[txHash].timestamp < new Date().getTime() - WAIT_TIME)\n  ) {\n    try {\n      const receipt = await ethCalls.getTransactionReceipt(txHash);\n      memcache[txHash] = {\n        timestamp: new Date().getTime(),\n        receipt: JSON.stringify(receipt)\n      };\n      res(null, toPayload(payload.id, receipt));\n    } catch (e) {\n      res(null, toPayload(payload.id, null));\n    }\n  } else {\n    res(\n      null,\n      toPayload(payload.id, JSON.parse(memcache[txHash].receipt) || null)\n    );\n  }\n};\n"]}]}