{"remainingRequest":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/thread-loader/dist/cjs.js!/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/eslint-loader/index.js??ref--13-0!/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/partners/kyber/kyber.js","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/partners/kyber/kyber.js","mtime":1573477612092},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport _toConsumableArray from \"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es7.object.values\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport _defineProperty from \"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.set\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport debugLogger from 'debug';\nimport BigNumber from 'bignumber.js';\nimport ENS from 'ethereum-ens';\nimport { utils } from \"../helpers\";\nimport { networkSymbols } from \"../partnersConfig\";\nimport { ERC20, kyberBaseCurrency, PROVIDER_NAME, TIME_SWAP_VALID, MAX_DEST_AMOUNT, MIN_RATE_BUFFER, defaultValues, KyberCurrencies, kyberAddressFallback, kyberNetworkABI, kyberValidNetworks, kyberNetworkENS, walletDepositeAddress, FEE_RATE, GAS_LIMITS } from \"./config\";\nimport kyberCalls from \"./kyber-calls\";\nvar logger = debugLogger('v5:kyber-swap');\nvar errorLogger = debugLogger('v5-error:kyber');\n\nvar toBigNumber = function toBigNumber(num) {\n  return new BigNumber(num);\n};\n\nvar Kyber =\n/*#__PURE__*/\nfunction () {\n  function Kyber() {\n    var _this = this;\n\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Kyber);\n\n    this.name = Kyber.getName();\n    this.network = props.network || networkSymbols.ETH;\n    this.getRateForUnit = typeof props.getRateForUnit === 'boolean' ? props.getRateForUnit : false;\n    this.hasRates = 0;\n    this.GAS_LIMITS = GAS_LIMITS;\n    this.gasLimitsLoaded = false;\n    this.tokenListLoaded = false;\n    this.defaultTradeGasLimit = props.tradeGasLimit || defaultValues.tradeGasLimit;\n    this.tokenToTokenGasLimit = props.tokenToTokenGasLimit || defaultValues.tokenToTokenGasLimit;\n    this.defaultTokenApprovalGasLimit = props.tokenApprovalGasLimit || defaultValues.tokenApprovalGasLimit;\n    this.maxGasPrice = defaultValues.maxGasPrice; // 30 Gwei\n\n    this.gasPrice = defaultValues.gasPrice; // 2 Gwei\n\n    this.tokenDetails = {};\n    this.setDefaultCurrencyList();\n    this.web3 = props.web3;\n    this.ens = new ENS(props.web3.currentProvider);\n    this.kyberNetworkABI = kyberNetworkABI || [];\n    this.kyberNetworkAddress = props.kyberAddress || kyberAddressFallback[this.network];\n    this.retrieveGasLimits().then(function () {\n      _this.gasLimitsLoaded = true;\n    });\n    this.getSupportedTokenList();\n    this.getMainNetAddress(this.kyberNetworkAddress);\n  } // Static Informational\n\n\n  _createClass(Kyber, [{\n    key: \"getNetwork\",\n    value: function getNetwork() {\n      return this.network;\n    }\n  }, {\n    key: \"getAddress\",\n    value: function getAddress() {\n      return this.kyberNetworkAddress;\n    }\n  }, {\n    key: \"getKyberNetworkAddress\",\n    value: function getKyberNetworkAddress() {\n      return this.kyberNetworkAddress;\n    }\n  }, {\n    key: \"kyberNetworkState\",\n    value: function () {\n      var _kyberNetworkState = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.getKyberContractObject().methods.enabled().call();\n\n              case 2:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function kyberNetworkState() {\n        return _kyberNetworkState.apply(this, arguments);\n      }\n\n      return kyberNetworkState;\n    }()\n  }, {\n    key: \"setNetwork\",\n    value: function setNetwork(network) {\n      this.network = network;\n\n      if (this.isValidNetwork) {\n        this.getMainNetAddress(kyberAddressFallback[this.network]);\n        this.getSupportedTokenList();\n      }\n    }\n  }, {\n    key: \"setDefaultCurrencyList\",\n    value: function setDefaultCurrencyList(fromConstructor) {\n      if (fromConstructor) {\n        this.tokenDetails = fromConstructor;\n      } else if (KyberCurrencies[this.network]) {\n        this.tokenDetails = this.defaultCurrencyList;\n      }\n    }\n  }, {\n    key: \"getMainNetAddress\",\n    value: function getMainNetAddress(initialAddress) {\n      var _this2 = this;\n\n      if (this.network === networkSymbols.ETH) {\n        try {\n          this.ens.resolver(kyberNetworkENS).addr().then(function (address) {\n            _this2.kyberNetworkAddress = address;\n          }).catch(function () {\n            errorLogger('failed to resolve kyber network address via ENS');\n          });\n        } catch (e) {\n          errorLogger(e);\n        }\n      } else {\n        this.kyberNetworkAddress = initialAddress;\n      }\n    }\n  }, {\n    key: \"getSupportedTokenList\",\n    value: function () {\n      var _getSupportedTokenList = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return this.retrieveSupportedTokenList(this.network);\n\n              case 3:\n                this.tokenDetails = _context2.sent;\n                this.hasRates = Object.keys(this.tokenDetails).length > 0 ? this.hasRates + 1 : 0;\n                _context2.next = 10;\n                break;\n\n              case 7:\n                _context2.prev = 7;\n                _context2.t0 = _context2[\"catch\"](0);\n                errorLogger(_context2.t0);\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 7]]);\n      }));\n\n      function getSupportedTokenList() {\n        return _getSupportedTokenList.apply(this, arguments);\n      }\n\n      return getSupportedTokenList;\n    }() // API Call\n\n  }, {\n    key: \"retrieveSupportedTokenList\",\n    value: function () {\n      var _retrieveSupportedTokenList = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3(network) {\n        var rawTokenList, tokenList, tokenDetails, i, symbol;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _context3.next = 3;\n                return kyberCalls.getTokenList(network);\n\n              case 3:\n                rawTokenList = _context3.sent;\n                tokenList = rawTokenList.data;\n\n                if (!tokenList) {\n                  _context3.next = 10;\n                  break;\n                }\n\n                tokenDetails = {};\n\n                for (i = 0; i < tokenList.length; i++) {\n                  if (tokenList[i].symbol && tokenList[i].name && tokenList[i].decimals && tokenList[i].address) {\n                    // otherwise the entry is invalid\n                    symbol = tokenList[i].symbol.toUpperCase();\n                    tokenDetails[symbol] = tokenList[i];\n                  }\n                }\n\n                this.tokenListLoaded = true;\n                return _context3.abrupt(\"return\", tokenDetails);\n\n              case 10:\n                return _context3.abrupt(\"return\", KyberCurrencies[this.network]);\n\n              case 13:\n                _context3.prev = 13;\n                _context3.t0 = _context3[\"catch\"](0);\n                utils.handleOrThrow(_context3.t0);\n                errorLogger(_context3.t0);\n\n              case 17:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 13]]);\n      }));\n\n      function retrieveSupportedTokenList(_x) {\n        return _retrieveSupportedTokenList.apply(this, arguments);\n      }\n\n      return retrieveSupportedTokenList;\n    }() // API Call\n\n  }, {\n    key: \"retrieveGasLimits\",\n    value: function () {\n      var _retrieveGasLimits = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4() {\n        var network,\n            gasLimitList,\n            _args4 = arguments;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                network = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : this.network;\n                _context4.prev = 1;\n                _context4.next = 4;\n                return kyberCalls.getGasLimits(network);\n\n              case 4:\n                gasLimitList = _context4.sent;\n\n                if (gasLimitList && gasLimitList.data) {\n                  this.GAS_LIMITS = gasLimitList.data;\n                }\n\n                _context4.next = 12;\n                break;\n\n              case 8:\n                _context4.prev = 8;\n                _context4.t0 = _context4[\"catch\"](1);\n                utils.handleOrThrow(_context4.t0);\n                errorLogger(_context4.t0);\n\n              case 12:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[1, 8]]);\n      }));\n\n      function retrieveGasLimits() {\n        return _retrieveGasLimits.apply(this, arguments);\n      }\n\n      return retrieveGasLimits;\n    }()\n  }, {\n    key: \"getKyberContractObject\",\n    value: function getKyberContractObject() {\n      return new this.web3.eth.Contract(this.kyberNetworkABI, this.kyberNetworkAddress);\n    }\n  }, {\n    key: \"validSwap\",\n    value: function validSwap(fromCurrency, toCurrency) {\n      if (this.isValidNetwork) {\n        if (!this.currencies) return false;\n        return this.currencies[fromCurrency] && this.currencies[toCurrency];\n      }\n    }\n  }, {\n    key: \"calculateTrueRate\",\n    value: function calculateTrueRate(topRate) {\n      return new BigNumber(topRate).minus(new BigNumber(topRate).times(new BigNumber(FEE_RATE))).toNumber();\n    }\n  }, {\n    key: \"getRate\",\n    value: function () {\n      var _getRate = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee5(fromCurrency, toCurrency, fromValue) {\n        var rate;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.getExpactedRateInTokens(fromCurrency, toCurrency, this.getRateForUnit ? 1 : fromValue);\n\n              case 2:\n                rate = _context5.sent;\n                return _context5.abrupt(\"return\", {\n                  fromCurrency: fromCurrency,\n                  toCurrency: toCurrency,\n                  provider: this.name,\n                  rate: this.calculateTrueRate(rate)\n                });\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getRate(_x2, _x3, _x4) {\n        return _getRate.apply(this, arguments);\n      }\n\n      return getRate;\n    }()\n  }, {\n    key: \"getRateUpdate\",\n    value: function () {\n      var _getRateUpdate = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee6(fromCurrency, toCurrency, fromValue, toValue, isFiat) {\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                return _context6.abrupt(\"return\", this.getRate(fromCurrency, toCurrency, fromValue, toValue, isFiat));\n\n              case 1:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function getRateUpdate(_x5, _x6, _x7, _x8, _x9) {\n        return _getRateUpdate.apply(this, arguments);\n      }\n\n      return getRateUpdate;\n    }()\n  }, {\n    key: \"getExpectedRate\",\n    value: function () {\n      var _getExpectedRate = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee7(fromToken, toToken, fromValueWei) {\n        var rates;\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this.callKyberContract('getExpectedRate', this.getTokenAddress(fromToken), this.getTokenAddress(toToken), fromValueWei);\n\n              case 2:\n                rates = _context7.sent;\n                logger(rates);\n\n                if (!new BigNumber(rates['expectedRate']).eq(new BigNumber(0))) {\n                  _context7.next = 6;\n                  break;\n                }\n\n                return _context7.abrupt(\"return\", -1);\n\n              case 6:\n                return _context7.abrupt(\"return\", rates['expectedRate']);\n\n              case 7:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function getExpectedRate(_x10, _x11, _x12) {\n        return _getExpectedRate.apply(this, arguments);\n      }\n\n      return getExpectedRate;\n    }()\n  }, {\n    key: \"getExpactedRateInTokens\",\n    value: function () {\n      var _getExpactedRateInTokens = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee8(fromToken, toToken, fromValue) {\n        var fromWei, inWei;\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                fromWei = this.convertToTokenWei(fromToken, fromValue);\n                logger(fromWei);\n                _context8.next = 4;\n                return this.getExpectedRate(fromToken, toToken, fromWei);\n\n              case 4:\n                inWei = _context8.sent;\n\n                if (!new BigNumber(inWei).gt(-1)) {\n                  _context8.next = 7;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", this.convertToTokenBase(kyberBaseCurrency, inWei));\n\n              case 7:\n                return _context8.abrupt(\"return\", -1);\n\n              case 8:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function getExpactedRateInTokens(_x13, _x14, _x15) {\n        return _getExpactedRateInTokens.apply(this, arguments);\n      }\n\n      return getExpactedRateInTokens;\n    }()\n  }, {\n    key: \"getInitialCurrencyEntries\",\n    value: function getInitialCurrencyEntries(collectMapFrom, collectMapTo) {\n      for (var prop in this.currencies) {\n        if (prop === 'THISISADUMMYTOKEN') continue;\n        if (this.currencies[prop]) collectMapTo.set(prop, {\n          symbol: prop,\n          name: this.currencies[prop].name\n        });\n        collectMapFrom.set(prop, {\n          symbol: prop,\n          name: this.currencies[prop].name\n        });\n      }\n    }\n  }, {\n    key: \"getUpdatedCurrencyEntries\",\n    value: function getUpdatedCurrencyEntries(value, collectMap) {\n      if (this.currencies[value.symbol]) {\n        for (var prop in this.currencies) {\n          if (prop === 'THISISADUMMYTOKEN') continue;\n          if (this.currencies[prop]) collectMap.set(prop, {\n            symbol: prop,\n            name: this.currencies[prop].name\n          });\n        }\n      }\n    }\n  }, {\n    key: \"getUpdatedFromCurrencyEntries\",\n    value: function getUpdatedFromCurrencyEntries(value, collectMap) {\n      this.getUpdatedCurrencyEntries(value, collectMap);\n    }\n  }, {\n    key: \"getUpdatedToCurrencyEntries\",\n    value: function getUpdatedToCurrencyEntries(value, collectMap) {\n      this.getUpdatedCurrencyEntries(value, collectMap);\n    }\n  }, {\n    key: \"callKyberContract\",\n    value: function () {\n      var _callKyberContract = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee9(method) {\n        var _this$getKyberContrac,\n            _len,\n            parameters,\n            _key,\n            _args9 = arguments;\n\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.prev = 0;\n\n                for (_len = _args9.length, parameters = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n                  parameters[_key - 1] = _args9[_key];\n                }\n\n                _context9.next = 4;\n                return (_this$getKyberContrac = this.getKyberContractObject().methods)[method].apply(_this$getKyberContrac, parameters).call();\n\n              case 4:\n                return _context9.abrupt(\"return\", _context9.sent);\n\n              case 7:\n                _context9.prev = 7;\n                _context9.t0 = _context9[\"catch\"](0);\n                // eslint-disable-next-line\n                console.error(_context9.t0);\n\n              case 10:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this, [[0, 7]]);\n      }));\n\n      function callKyberContract(_x16) {\n        return _callKyberContract.apply(this, arguments);\n      }\n\n      return callKyberContract;\n    }()\n  }, {\n    key: \"approveKyber\",\n    value: function () {\n      var _approveKyber = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee10(fromToken, fromValueWei) {\n        var transferGasEst, methodObject;\n        return regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.prev = 0;\n                methodObject = new this.web3.eth.Contract(ERC20, this.getTokenAddress(fromToken)).methods.approve(this.getKyberNetworkAddress(), fromValueWei);\n\n                try {\n                  transferGasEst = this.getTokenApprovalGas(fromToken);\n                } catch (e) {\n                  transferGasEst = undefined;\n                }\n\n                if (!transferGasEst) {\n                  _context10.next = 5;\n                  break;\n                }\n\n                return _context10.abrupt(\"return\", {\n                  to: this.getTokenAddress(fromToken),\n                  value: 0,\n                  gas: transferGasEst,\n                  data: methodObject.encodeABI()\n                });\n\n              case 5:\n                return _context10.abrupt(\"return\", {\n                  to: this.getTokenAddress(fromToken),\n                  value: 0,\n                  data: methodObject.encodeABI()\n                });\n\n              case 8:\n                _context10.prev = 8;\n                _context10.t0 = _context10[\"catch\"](0);\n                errorLogger(_context10.t0);\n\n              case 11:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this, [[0, 8]]);\n      }));\n\n      function approveKyber(_x17, _x18) {\n        return _approveKyber.apply(this, arguments);\n      }\n\n      return approveKyber;\n    }()\n  }, {\n    key: \"canUserSwap\",\n    value: function () {\n      var _canUserSwap = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee12(_ref) {\n        var _this3 = this;\n\n        var fromCurrency, toCurrency, fromValueWei, toValueWei, fromAddress, userCap, isTokenApprovalNeeded, _ref3, approve, reset, reason, errorMessage;\n\n        return regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                fromCurrency = _ref.fromCurrency, toCurrency = _ref.toCurrency, fromValueWei = _ref.fromValueWei, toValueWei = _ref.toValueWei, fromAddress = _ref.fromAddress;\n                userCap = true;\n\n                isTokenApprovalNeeded =\n                /*#__PURE__*/\n                function () {\n                  var _ref2 = _asyncToGenerator(\n                  /*#__PURE__*/\n                  regeneratorRuntime.mark(function _callee11(fromToken, toToken, fromValueWei, fromAddress) {\n                    var currentAllowance;\n                    return regeneratorRuntime.wrap(function _callee11$(_context11) {\n                      while (1) {\n                        switch (_context11.prev = _context11.next) {\n                          case 0:\n                            if (!(fromToken === kyberBaseCurrency)) {\n                              _context11.next = 2;\n                              break;\n                            }\n\n                            return _context11.abrupt(\"return\", {\n                              approve: false,\n                              reset: false\n                            });\n\n                          case 2:\n                            _context11.next = 4;\n                            return new _this3.web3.eth.Contract(ERC20, _this3.getTokenAddress(fromToken)).methods.allowance(fromAddress, _this3.getKyberNetworkAddress()).call();\n\n                          case 4:\n                            currentAllowance = _context11.sent;\n\n                            if (!new BigNumber(currentAllowance).gt(new BigNumber(0))) {\n                              _context11.next = 9;\n                              break;\n                            }\n\n                            if (!new BigNumber(currentAllowance).minus(new BigNumber(fromValueWei)).lt(new BigNumber(0))) {\n                              _context11.next = 8;\n                              break;\n                            }\n\n                            return _context11.abrupt(\"return\", {\n                              approve: true,\n                              reset: true\n                            });\n\n                          case 8:\n                            return _context11.abrupt(\"return\", {\n                              approve: false,\n                              reset: false\n                            });\n\n                          case 9:\n                            return _context11.abrupt(\"return\", {\n                              approve: true,\n                              reset: false\n                            });\n\n                          case 10:\n                          case \"end\":\n                            return _context11.stop();\n                        }\n                      }\n                    }, _callee11);\n                  }));\n\n                  return function isTokenApprovalNeeded(_x20, _x21, _x22, _x23) {\n                    return _ref2.apply(this, arguments);\n                  };\n                }();\n\n                if (!(fromCurrency === kyberBaseCurrency || toCurrency === kyberBaseCurrency)) {\n                  _context12.next = 10;\n                  break;\n                }\n\n                _context12.t0 = BigNumber;\n                _context12.next = 7;\n                return this.callKyberContract('getUserCapInWei', fromAddress);\n\n              case 7:\n                _context12.t1 = _context12.sent;\n                _context12.t2 = new BigNumber(fromCurrency === kyberBaseCurrency ? fromValueWei : toValueWei);\n                userCap = new _context12.t0(_context12.t1).times(0.95).gt(_context12.t2);\n\n              case 10:\n                _context12.t3 = userCap;\n\n                if (!_context12.t3) {\n                  _context12.next = 18;\n                  break;\n                }\n\n                _context12.t4 = BigNumber;\n                _context12.next = 15;\n                return this.callKyberContract('getBalance', this.getTokenAddress(fromCurrency), fromAddress);\n\n              case 15:\n                _context12.t5 = _context12.sent;\n                _context12.t6 = fromValueWei;\n                _context12.t3 = new _context12.t4(_context12.t5).gte(_context12.t6);\n\n              case 18:\n                if (!_context12.t3) {\n                  _context12.next = 47;\n                  break;\n                }\n\n                _context12.next = 21;\n                return isTokenApprovalNeeded(fromCurrency, toCurrency, fromValueWei, fromAddress);\n\n              case 21:\n                _ref3 = _context12.sent;\n                approve = _ref3.approve;\n                reset = _ref3.reset;\n\n                if (!(approve && reset)) {\n                  _context12.next = 39;\n                  break;\n                }\n\n                _context12.t7 = Set;\n                _context12.next = 28;\n                return this.approveKyber(fromCurrency, 0, fromAddress);\n\n              case 28:\n                _context12.t8 = _context12.sent;\n                _context12.t9 = _objectSpread;\n                _context12.t10 = {\n                  gas: this.getTokenApprovalGas(fromCurrency)\n                };\n                _context12.next = 33;\n                return this.approveKyber(fromCurrency, fromValueWei, fromAddress);\n\n              case 33:\n                _context12.t11 = _context12.sent;\n                _context12.t12 = (0, _context12.t9)(_context12.t10, _context12.t11);\n                _context12.t13 = [_context12.t8, _context12.t12];\n                return _context12.abrupt(\"return\", new _context12.t7(_context12.t13));\n\n              case 39:\n                if (!approve) {\n                  _context12.next = 46;\n                  break;\n                }\n\n                _context12.t14 = Set;\n                _context12.next = 43;\n                return this.approveKyber(fromCurrency, fromValueWei, fromAddress);\n\n              case 43:\n                _context12.t15 = _context12.sent;\n                _context12.t16 = [_context12.t15];\n                return _context12.abrupt(\"return\", new _context12.t14(_context12.t16));\n\n              case 46:\n                return _context12.abrupt(\"return\", new Set());\n\n              case 47:\n                reason = !userCap ? 'user cap value' : 'current token balance';\n                errorMessage = \"User is not eligible to use kyber network. Current swap value exceeds \".concat(reason);\n                throw Error(errorMessage);\n\n              case 50:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function canUserSwap(_x19) {\n        return _canUserSwap.apply(this, arguments);\n      }\n\n      return canUserSwap;\n    }()\n  }, {\n    key: \"getTradeData\",\n    value: function () {\n      var _getTradeData = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee13(_ref4, minRateWei) {\n        var fromCurrency, toCurrency, fromValueWei, toAddress, data;\n        return regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                fromCurrency = _ref4.fromCurrency, toCurrency = _ref4.toCurrency, fromValueWei = _ref4.fromValueWei, toAddress = _ref4.toAddress;\n                _context13.t0 = this.getKyberContractObject().methods;\n                _context13.next = 4;\n                return this.getTokenAddress(fromCurrency);\n\n              case 4:\n                _context13.t1 = _context13.sent;\n                _context13.t2 = fromValueWei;\n                _context13.next = 8;\n                return this.getTokenAddress(toCurrency);\n\n              case 8:\n                _context13.t3 = _context13.sent;\n                _context13.t4 = toAddress;\n                _context13.t5 = MAX_DEST_AMOUNT;\n                _context13.t6 = this.MinRateWeiAdjustment(minRateWei);\n                _context13.t7 = walletDepositeAddress;\n                data = _context13.t0.trade.call(_context13.t0, _context13.t1, _context13.t2, _context13.t3, _context13.t4, _context13.t5, _context13.t6, _context13.t7).encodeABI();\n                return _context13.abrupt(\"return\", {\n                  to: this.getKyberNetworkAddress(),\n                  value: Object.values(networkSymbols).includes(fromCurrency) ? fromValueWei : 0,\n                  gas: this.getTokenTradeGas(fromCurrency, toCurrency),\n                  data: data\n                });\n\n              case 15:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function getTradeData(_x24, _x25) {\n        return _getTradeData.apply(this, arguments);\n      }\n\n      return getTradeData;\n    }()\n  }, {\n    key: \"generateDataForTransactions\",\n    value: function () {\n      var _generateDataForTransactions = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee14(_ref5) {\n        var fromCurrency, toCurrency, fromValue, toValue, fromAddress, toAddress, fromValueWei, toValueWei, kyberSwapDetails, finalRate, prepareSwapTxData, swapTransactions;\n        return regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                fromCurrency = _ref5.fromCurrency, toCurrency = _ref5.toCurrency, fromValue = _ref5.fromValue, toValue = _ref5.toValue, fromAddress = _ref5.fromAddress, toAddress = _ref5.toAddress;\n                _context14.prev = 1;\n                fromValueWei = this.convertToTokenWei(fromCurrency, fromValue);\n                toValueWei = this.convertToTokenWei(toCurrency, toValue);\n                kyberSwapDetails = {\n                  fromCurrency: fromCurrency,\n                  toCurrency: toCurrency,\n                  fromAddress: fromAddress,\n                  toAddress: toAddress,\n                  fromValueWei: fromValueWei,\n                  toValueWei: toValueWei\n                };\n                _context14.next = 7;\n                return this.getExpectedRate(fromCurrency, toCurrency, fromValueWei);\n\n              case 7:\n                finalRate = _context14.sent;\n\n                if (!(finalRate === 0)) {\n                  _context14.next = 10;\n                  break;\n                }\n\n                throw Error('Received a rate of 0. Invalid quantity.  Try swapping a lower amount.');\n\n              case 10:\n                _context14.next = 12;\n                return this.canUserSwap(kyberSwapDetails);\n\n              case 12:\n                prepareSwapTxData = _context14.sent;\n                _context14.t0 = prepareSwapTxData;\n                _context14.next = 16;\n                return this.getTradeData(kyberSwapDetails, finalRate);\n\n              case 16:\n                _context14.t1 = _context14.sent;\n\n                _context14.t0.add.call(_context14.t0, _context14.t1);\n\n                swapTransactions = Array.from(prepareSwapTxData);\n                return _context14.abrupt(\"return\", _toConsumableArray(swapTransactions));\n\n              case 22:\n                _context14.prev = 22;\n                _context14.t2 = _context14[\"catch\"](1);\n                errorLogger(_context14.t2);\n                throw _context14.t2;\n\n              case 26:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this, [[1, 22]]);\n      }));\n\n      function generateDataForTransactions(_x26) {\n        return _generateDataForTransactions.apply(this, arguments);\n      }\n\n      return generateDataForTransactions;\n    }()\n  }, {\n    key: \"startSwap\",\n    value: function () {\n      var _startSwap = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee15(swapDetails) {\n        var finalRateWei, finalRate;\n        return regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                swapDetails.maybeToken = true;\n                swapDetails.providerAddress = this.getAddress();\n                _context15.next = 4;\n                return this.callKyberContract('maxGasPrice');\n\n              case 4:\n                swapDetails.kyberMaxGas = _context15.sent;\n                _context15.next = 7;\n                return this.getExpectedRate(swapDetails.fromCurrency, swapDetails.toCurrency, this.convertToTokenWei(swapDetails.fromCurrency, swapDetails.fromValue));\n\n              case 7:\n                finalRateWei = _context15.sent;\n                finalRate = this.convertToTokenBase('ETH', finalRateWei);\n                _context15.next = 11;\n                return this.generateDataForTransactions(swapDetails);\n\n              case 11:\n                swapDetails.dataForInitialization = _context15.sent;\n                swapDetails.toValue = new BigNumber(finalRate).times(new BigNumber(swapDetails.fromValue).toFixed(18).toString());\n                swapDetails.finalRate = this.calculateNormalizedExchangeRate(swapDetails.toValue, swapDetails.fromValue);\n                swapDetails.providerReceives = swapDetails.fromValue;\n                swapDetails.providerSends = new BigNumber(finalRate).times(new BigNumber(swapDetails.fromValue));\n                swapDetails.parsed = {\n                  sendToAddress: this.getKyberNetworkAddress(),\n                  status: 'pending',\n                  validFor: TIME_SWAP_VALID\n                };\n                swapDetails.providerAddress = this.getKyberNetworkAddress();\n                swapDetails.isDex = Kyber.isDex();\n                return _context15.abrupt(\"return\", swapDetails);\n\n              case 20:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function startSwap(_x27) {\n        return _startSwap.apply(this, arguments);\n      }\n\n      return startSwap;\n    }()\n  }, {\n    key: \"MinRateWeiAdjustment\",\n    // Helpers\n    value: function MinRateWeiAdjustment(minRateWei) {\n      var minRateWeiBN = new BigNumber(minRateWei);\n      return minRateWeiBN.minus(minRateWeiBN.times(new BigNumber(MIN_RATE_BUFFER))).toFixed(0).toString();\n    }\n  }, {\n    key: \"isTokenToToken\",\n    value: function isTokenToToken(fromCurrency, toCurrency) {\n      return fromCurrency !== kyberBaseCurrency && toCurrency !== kyberBaseCurrency;\n    }\n  }, {\n    key: \"getTokenTradeGas\",\n    value: function getTokenTradeGas(fromCurrency, toCurrency) {\n      var fromGas = this.getTokenSwapGas(fromCurrency);\n      var toGas = this.getTokenSwapGas(toCurrency);\n      return toBigNumber(fromGas).plus(toBigNumber(toGas)).toFixed(0).toString();\n    }\n  }, {\n    key: \"getTokenApprovalGas\",\n    value: function getTokenApprovalGas(token) {\n      var gasLimits = this.getGasLimits(token);\n      return gasLimits.approveGasLimit;\n    }\n  }, {\n    key: \"getTokenSwapGas\",\n    value: function getTokenSwapGas(token) {\n      var gasLimits = this.getGasLimits(token);\n      return gasLimits.swapGasLimit;\n    }\n  }, {\n    key: \"getTokenAddress\",\n    value: function getTokenAddress(token) {\n      try {\n        if (utils.stringEqual(networkSymbols.ETH, token)) {\n          return this.currencies[token].address;\n        }\n\n        return this.web3.utils.toChecksumAddress(this.currencies[token].address);\n      } catch (e) {\n        errorLogger(e);\n        throw Error(\"Token [\".concat(token, \"] not included in kyber network list of tokens\"));\n      }\n    }\n  }, {\n    key: \"getTokenDecimals\",\n    value: function getTokenDecimals(token) {\n      try {\n        return new BigNumber(this.currencies[token].decimals).toNumber();\n      } catch (e) {\n        errorLogger(e);\n        throw Error(\"Token [\".concat(token, \"] not included in kyber network list of tokens\"));\n      }\n    }\n  }, {\n    key: \"getGasLimits\",\n    value: function getGasLimits(token) {\n      try {\n        var address = this.getTokenAddress(token);\n        var gasLimit = this.GAS_LIMITS.find(function (entry) {\n          return entry.address.toLowerCase() === address.toLowerCase() || entry.symbol === token;\n        });\n\n        if (gasLimit !== null && gasLimit !== undefined) {\n          return gasLimit;\n        }\n\n        return {\n          swapGasLimit: this.defaultTradeGasLimit,\n          approveGasLimit: this.defaultTokenApprovalGasLimit\n        };\n      } catch (e) {\n        return {\n          swapGasLimit: this.defaultTradeGasLimit,\n          approveGasLimit: this.defaultTokenApprovalGasLimit\n        };\n      }\n    }\n  }, {\n    key: \"calculateNormalizedExchangeRate\",\n    value: function calculateNormalizedExchangeRate(toValue, fromValue) {\n      return new BigNumber(toValue).div(fromValue).toString(10);\n    }\n  }, {\n    key: \"convertToTokenBase\",\n    value: function convertToTokenBase(token, value) {\n      var decimals = this.getTokenDecimals(token);\n      var denominator = new BigNumber(10).pow(decimals);\n      return new BigNumber(value).div(denominator).toString(10);\n    }\n  }, {\n    key: \"convertToTokenWei\",\n    value: function convertToTokenWei(token, value) {\n      var decimals = this.getTokenDecimals(token);\n      var denominator = new BigNumber(10).pow(decimals);\n      return new BigNumber(value).times(denominator).integerValue(BigNumber.ROUND_DOWN).toString(10);\n    }\n  }, {\n    key: \"defaultCurrencyList\",\n    // Getters\n    get: function get() {\n      return KyberCurrencies[this.network];\n    }\n  }, {\n    key: \"ratesRetrieved\",\n    get: function get() {\n      return this.tokenListLoaded;\n    }\n  }, {\n    key: \"isReady\",\n    get: function get() {\n      return Object.keys(this.tokenDetails).length > 0 && this.gasLimitsLoaded && this.tokenListLoaded;\n    }\n  }, {\n    key: \"currencies\",\n    get: function get() {\n      if (this.isValidNetwork && this.tokenDetails !== undefined) {\n        if (Object.keys(this.tokenDetails).length > 5) {\n          return this.tokenDetails;\n        }\n\n        return this.defaultCurrencyList;\n      } else if (this.isValidNetwork) {\n        return this.defaultCurrencyList;\n      }\n\n      return {};\n    }\n  }, {\n    key: \"isValidNetwork\",\n    get: function get() {\n      return kyberValidNetworks.includes(this.network);\n    }\n  }], [{\n    key: \"getName\",\n    value: function getName() {\n      return PROVIDER_NAME;\n    }\n  }, {\n    key: \"isDex\",\n    value: function isDex() {\n      return true;\n    }\n  }, {\n    key: \"getOrderStatus\",\n    value: function () {\n      var _getOrderStatus = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee16() {\n        return regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                return _context16.abrupt(\"return\", 'new');\n\n              case 1:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16);\n      }));\n\n      function getOrderStatus() {\n        return _getOrderStatus.apply(this, arguments);\n      }\n\n      return getOrderStatus;\n    }()\n  }]);\n\n  return Kyber;\n}();\n\nexport { Kyber as default };",{"version":3,"sources":["/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/partners/kyber/kyber.js"],"names":["debugLogger","BigNumber","ENS","utils","networkSymbols","ERC20","kyberBaseCurrency","PROVIDER_NAME","TIME_SWAP_VALID","MAX_DEST_AMOUNT","MIN_RATE_BUFFER","defaultValues","KyberCurrencies","kyberAddressFallback","kyberNetworkABI","kyberValidNetworks","kyberNetworkENS","walletDepositeAddress","FEE_RATE","GAS_LIMITS","kyberCalls","logger","errorLogger","toBigNumber","num","Kyber","props","name","getName","network","ETH","getRateForUnit","hasRates","gasLimitsLoaded","tokenListLoaded","defaultTradeGasLimit","tradeGasLimit","tokenToTokenGasLimit","defaultTokenApprovalGasLimit","tokenApprovalGasLimit","maxGasPrice","gasPrice","tokenDetails","setDefaultCurrencyList","web3","ens","currentProvider","kyberNetworkAddress","kyberAddress","retrieveGasLimits","then","getSupportedTokenList","getMainNetAddress","getKyberContractObject","methods","enabled","call","isValidNetwork","fromConstructor","defaultCurrencyList","initialAddress","resolver","addr","address","catch","e","retrieveSupportedTokenList","Object","keys","length","getTokenList","rawTokenList","tokenList","data","i","symbol","decimals","toUpperCase","handleOrThrow","getGasLimits","gasLimitList","eth","Contract","fromCurrency","toCurrency","currencies","topRate","minus","times","toNumber","fromValue","getExpactedRateInTokens","rate","provider","calculateTrueRate","toValue","isFiat","getRate","fromToken","toToken","fromValueWei","callKyberContract","getTokenAddress","rates","eq","fromWei","convertToTokenWei","getExpectedRate","inWei","gt","convertToTokenBase","collectMapFrom","collectMapTo","prop","set","value","collectMap","getUpdatedCurrencyEntries","method","parameters","console","error","methodObject","approve","getKyberNetworkAddress","transferGasEst","getTokenApprovalGas","undefined","to","gas","encodeABI","toValueWei","fromAddress","userCap","isTokenApprovalNeeded","reset","allowance","currentAllowance","lt","gte","Set","approveKyber","reason","errorMessage","Error","minRateWei","toAddress","MinRateWeiAdjustment","trade","values","includes","getTokenTradeGas","kyberSwapDetails","finalRate","canUserSwap","prepareSwapTxData","getTradeData","add","swapTransactions","Array","from","swapDetails","maybeToken","providerAddress","getAddress","kyberMaxGas","finalRateWei","generateDataForTransactions","dataForInitialization","toFixed","toString","calculateNormalizedExchangeRate","providerReceives","providerSends","parsed","sendToAddress","status","validFor","isDex","minRateWeiBN","fromGas","getTokenSwapGas","toGas","plus","token","gasLimits","approveGasLimit","swapGasLimit","stringEqual","toChecksumAddress","gasLimit","find","entry","toLowerCase","div","getTokenDecimals","denominator","pow","integerValue","ROUND_DOWN"],"mappings":"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","sourcesContent":["import debugLogger from 'debug';\nimport BigNumber from 'bignumber.js';\nimport ENS from 'ethereum-ens';\nimport { utils } from '../helpers';\nimport { networkSymbols } from '../partnersConfig';\nimport {\n  ERC20,\n  kyberBaseCurrency,\n  PROVIDER_NAME,\n  TIME_SWAP_VALID,\n  MAX_DEST_AMOUNT,\n  MIN_RATE_BUFFER,\n  defaultValues,\n  KyberCurrencies,\n  kyberAddressFallback,\n  kyberNetworkABI,\n  kyberValidNetworks,\n  kyberNetworkENS,\n  walletDepositeAddress,\n  FEE_RATE,\n  GAS_LIMITS\n} from './config';\nimport kyberCalls from './kyber-calls';\n\nconst logger = debugLogger('v5:kyber-swap');\nconst errorLogger = debugLogger('v5-error:kyber');\n\nconst toBigNumber = num => {\n  return new BigNumber(num);\n};\n\nexport default class Kyber {\n  constructor(props = {}) {\n    this.name = Kyber.getName();\n    this.network = props.network || networkSymbols.ETH;\n    this.getRateForUnit =\n      typeof props.getRateForUnit === 'boolean' ? props.getRateForUnit : false;\n    this.hasRates = 0;\n    this.GAS_LIMITS = GAS_LIMITS;\n    this.gasLimitsLoaded = false;\n    this.tokenListLoaded = false;\n    this.defaultTradeGasLimit =\n      props.tradeGasLimit || defaultValues.tradeGasLimit;\n    this.tokenToTokenGasLimit =\n      props.tokenToTokenGasLimit || defaultValues.tokenToTokenGasLimit;\n    this.defaultTokenApprovalGasLimit =\n      props.tokenApprovalGasLimit || defaultValues.tokenApprovalGasLimit;\n    this.maxGasPrice = defaultValues.maxGasPrice; // 30 Gwei\n    this.gasPrice = defaultValues.gasPrice; // 2 Gwei\n    this.tokenDetails = {};\n    this.setDefaultCurrencyList();\n    this.web3 = props.web3;\n    this.ens = new ENS(props.web3.currentProvider);\n    this.kyberNetworkABI = kyberNetworkABI || [];\n    this.kyberNetworkAddress =\n      props.kyberAddress || kyberAddressFallback[this.network];\n    this.retrieveGasLimits().then(() => {\n      this.gasLimitsLoaded = true;\n    });\n    this.getSupportedTokenList();\n    this.getMainNetAddress(this.kyberNetworkAddress);\n  }\n\n  // Static Informational\n  static getName() {\n    return PROVIDER_NAME;\n  }\n\n  static isDex() {\n    return true;\n  }\n\n  // Getters\n  get defaultCurrencyList() {\n    return KyberCurrencies[this.network];\n  }\n\n  get ratesRetrieved() {\n    return this.tokenListLoaded;\n  }\n\n  get isReady() {\n    return (\n      Object.keys(this.tokenDetails).length > 0 &&\n      this.gasLimitsLoaded &&\n      this.tokenListLoaded\n    );\n  }\n\n  get currencies() {\n    if (this.isValidNetwork && this.tokenDetails !== undefined) {\n      if (Object.keys(this.tokenDetails).length > 5) {\n        return this.tokenDetails;\n      }\n      return this.defaultCurrencyList;\n    } else if (this.isValidNetwork) {\n      return this.defaultCurrencyList;\n    }\n    return {};\n  }\n\n  get isValidNetwork() {\n    return kyberValidNetworks.includes(this.network);\n  }\n\n  getNetwork() {\n    return this.network;\n  }\n\n  getAddress() {\n    return this.kyberNetworkAddress;\n  }\n\n  getKyberNetworkAddress() {\n    return this.kyberNetworkAddress;\n  }\n\n  async kyberNetworkState() {\n    return await this.getKyberContractObject()\n      .methods.enabled()\n      .call();\n  }\n\n  setNetwork(network) {\n    this.network = network;\n    if (this.isValidNetwork) {\n      this.getMainNetAddress(kyberAddressFallback[this.network]);\n      this.getSupportedTokenList();\n    }\n  }\n\n  setDefaultCurrencyList(fromConstructor) {\n    if (fromConstructor) {\n      this.tokenDetails = fromConstructor;\n    } else if (KyberCurrencies[this.network]) {\n      this.tokenDetails = this.defaultCurrencyList;\n    }\n  }\n\n  getMainNetAddress(initialAddress) {\n    if (this.network === networkSymbols.ETH) {\n      try {\n        this.ens\n          .resolver(kyberNetworkENS)\n          .addr()\n          .then(address => {\n            this.kyberNetworkAddress = address;\n          })\n          .catch(() => {\n            errorLogger('failed to resolve kyber network address via ENS');\n          });\n      } catch (e) {\n        errorLogger(e);\n      }\n    } else {\n      this.kyberNetworkAddress = initialAddress;\n    }\n  }\n\n  async getSupportedTokenList() {\n    try {\n      this.tokenDetails = await this.retrieveSupportedTokenList(this.network);\n      this.hasRates =\n        Object.keys(this.tokenDetails).length > 0 ? this.hasRates + 1 : 0;\n    } catch (e) {\n      errorLogger(e);\n    }\n  }\n\n  // API Call\n  async retrieveSupportedTokenList(network) {\n    try {\n      const rawTokenList = await kyberCalls.getTokenList(network);\n      const tokenList = rawTokenList.data;\n      if (tokenList) {\n        const tokenDetails = {};\n        for (let i = 0; i < tokenList.length; i++) {\n          if (\n            tokenList[i].symbol &&\n            tokenList[i].name &&\n            tokenList[i].decimals &&\n            tokenList[i].address\n          ) {\n            // otherwise the entry is invalid\n            const symbol = tokenList[i].symbol.toUpperCase();\n            tokenDetails[symbol] = tokenList[i];\n          }\n        }\n        this.tokenListLoaded = true;\n        return tokenDetails;\n      }\n      return KyberCurrencies[this.network];\n    } catch (e) {\n      utils.handleOrThrow(e);\n      errorLogger(e);\n    }\n  }\n\n  // API Call\n  async retrieveGasLimits(network = this.network) {\n    try {\n      const gasLimitList = await kyberCalls.getGasLimits(network);\n      if (gasLimitList && gasLimitList.data) {\n        this.GAS_LIMITS = gasLimitList.data;\n      }\n    } catch (e) {\n      utils.handleOrThrow(e);\n      errorLogger(e);\n    }\n  }\n\n  getKyberContractObject() {\n    return new this.web3.eth.Contract(\n      this.kyberNetworkABI,\n      this.kyberNetworkAddress\n    );\n  }\n\n  validSwap(fromCurrency, toCurrency) {\n    if (this.isValidNetwork) {\n      if (!this.currencies) return false;\n      return this.currencies[fromCurrency] && this.currencies[toCurrency];\n    }\n  }\n\n  calculateTrueRate(topRate) {\n    return new BigNumber(topRate)\n      .minus(new BigNumber(topRate).times(new BigNumber(FEE_RATE)))\n      .toNumber();\n  }\n\n  async getRate(fromCurrency, toCurrency, fromValue) {\n    const rate = await this.getExpactedRateInTokens(\n      fromCurrency,\n      toCurrency,\n      this.getRateForUnit ? 1 : fromValue\n    );\n    return {\n      fromCurrency,\n      toCurrency,\n      provider: this.name,\n      rate: this.calculateTrueRate(rate)\n    };\n  }\n\n  async getRateUpdate(fromCurrency, toCurrency, fromValue, toValue, isFiat) {\n    return this.getRate(fromCurrency, toCurrency, fromValue, toValue, isFiat);\n  }\n\n  async getExpectedRate(fromToken, toToken, fromValueWei) {\n    const rates = await this.callKyberContract(\n      'getExpectedRate',\n      this.getTokenAddress(fromToken),\n      this.getTokenAddress(toToken),\n      fromValueWei\n    );\n    logger(rates);\n    if (new BigNumber(rates['expectedRate']).eq(new BigNumber(0))) {\n      return -1;\n    }\n    return rates['expectedRate'];\n  }\n\n  async getExpactedRateInTokens(fromToken, toToken, fromValue) {\n    const fromWei = this.convertToTokenWei(fromToken, fromValue);\n    logger(fromWei);\n    const inWei = await this.getExpectedRate(fromToken, toToken, fromWei);\n    if (new BigNumber(inWei).gt(-1)) {\n      return this.convertToTokenBase(kyberBaseCurrency, inWei);\n    }\n    return -1;\n  }\n\n  getInitialCurrencyEntries(collectMapFrom, collectMapTo) {\n    for (const prop in this.currencies) {\n      if (prop === 'THISISADUMMYTOKEN') continue;\n      if (this.currencies[prop])\n        collectMapTo.set(prop, {\n          symbol: prop,\n          name: this.currencies[prop].name\n        });\n      collectMapFrom.set(prop, {\n        symbol: prop,\n        name: this.currencies[prop].name\n      });\n    }\n  }\n\n  getUpdatedCurrencyEntries(value, collectMap) {\n    if (this.currencies[value.symbol]) {\n      for (const prop in this.currencies) {\n        if (prop === 'THISISADUMMYTOKEN') continue;\n        if (this.currencies[prop])\n          collectMap.set(prop, {\n            symbol: prop,\n            name: this.currencies[prop].name\n          });\n      }\n    }\n  }\n\n  getUpdatedFromCurrencyEntries(value, collectMap) {\n    this.getUpdatedCurrencyEntries(value, collectMap);\n  }\n\n  getUpdatedToCurrencyEntries(value, collectMap) {\n    this.getUpdatedCurrencyEntries(value, collectMap);\n  }\n\n  async callKyberContract(method, ...parameters) {\n    try {\n      return await this.getKyberContractObject()\n        .methods[method](...parameters)\n        .call();\n    } catch (e) {\n      // eslint-disable-next-line\n      console.error(e);\n    }\n  }\n\n  async approveKyber(fromToken, fromValueWei) {\n    let transferGasEst;\n    try {\n      const methodObject = new this.web3.eth.Contract(\n        ERC20,\n        this.getTokenAddress(fromToken)\n      ).methods.approve(this.getKyberNetworkAddress(), fromValueWei);\n      try {\n        transferGasEst = this.getTokenApprovalGas(fromToken);\n      } catch (e) {\n        transferGasEst = undefined;\n      }\n\n      if (transferGasEst) {\n        return {\n          to: this.getTokenAddress(fromToken),\n          value: 0,\n          gas: transferGasEst,\n          data: methodObject.encodeABI()\n        };\n      }\n      return {\n        to: this.getTokenAddress(fromToken),\n        value: 0,\n        data: methodObject.encodeABI()\n      };\n    } catch (e) {\n      errorLogger(e);\n    }\n  }\n\n  async canUserSwap({\n    fromCurrency,\n    toCurrency,\n    fromValueWei,\n    toValueWei,\n    fromAddress\n  }) {\n    let userCap = true;\n\n    const isTokenApprovalNeeded = async (\n      fromToken,\n      toToken,\n      fromValueWei,\n      fromAddress\n    ) => {\n      if (fromToken === kyberBaseCurrency)\n        return { approve: false, reset: false };\n\n      const currentAllowance = await new this.web3.eth.Contract(\n        ERC20,\n        this.getTokenAddress(fromToken)\n      ).methods\n        .allowance(fromAddress, this.getKyberNetworkAddress())\n        .call();\n\n      if (new BigNumber(currentAllowance).gt(new BigNumber(0))) {\n        if (\n          new BigNumber(currentAllowance)\n            .minus(new BigNumber(fromValueWei))\n            .lt(new BigNumber(0))\n        ) {\n          return { approve: true, reset: true };\n        }\n        return { approve: false, reset: false };\n      }\n      return { approve: true, reset: false };\n    };\n\n    if (\n      fromCurrency === kyberBaseCurrency ||\n      toCurrency === kyberBaseCurrency\n    ) {\n      userCap = new BigNumber(\n        await this.callKyberContract('getUserCapInWei', fromAddress)\n      )\n        .times(0.95)\n        .gt(\n          new BigNumber(\n            fromCurrency === kyberBaseCurrency ? fromValueWei : toValueWei\n          )\n        );\n    }\n\n    if (\n      userCap &&\n      new BigNumber(\n        await this.callKyberContract(\n          'getBalance',\n          this.getTokenAddress(fromCurrency),\n          fromAddress\n        )\n      ).gte(fromValueWei)\n    ) {\n      const { approve, reset } = await isTokenApprovalNeeded(\n        fromCurrency,\n        toCurrency,\n        fromValueWei,\n        fromAddress\n      );\n      if (approve && reset) {\n        return new Set([\n          await this.approveKyber(fromCurrency, 0, fromAddress),\n          {\n            gas: this.getTokenApprovalGas(fromCurrency),\n            ...(await this.approveKyber(\n              fromCurrency,\n              fromValueWei,\n              fromAddress\n            ))\n          }\n        ]);\n      } else if (approve) {\n        return new Set([\n          await this.approveKyber(fromCurrency, fromValueWei, fromAddress)\n        ]);\n      }\n      return new Set();\n    }\n    const reason = !userCap ? 'user cap value' : 'current token balance';\n    const errorMessage = `User is not eligible to use kyber network. Current swap value exceeds ${reason}`;\n    throw Error(errorMessage);\n  }\n\n  async getTradeData(\n    { fromCurrency, toCurrency, fromValueWei, toAddress },\n    minRateWei\n  ) {\n    const data = this.getKyberContractObject()\n      .methods.trade(\n        await this.getTokenAddress(fromCurrency),\n        fromValueWei,\n        await this.getTokenAddress(toCurrency),\n        toAddress,\n        MAX_DEST_AMOUNT,\n        this.MinRateWeiAdjustment(minRateWei),\n        walletDepositeAddress\n      )\n      .encodeABI();\n    return {\n      to: this.getKyberNetworkAddress(),\n      value: Object.values(networkSymbols).includes(fromCurrency)\n        ? fromValueWei\n        : 0,\n      gas: this.getTokenTradeGas(fromCurrency, toCurrency),\n      data\n    };\n  }\n\n  async generateDataForTransactions({\n    fromCurrency,\n    toCurrency,\n    fromValue,\n    toValue,\n    fromAddress,\n    toAddress\n  }) {\n    try {\n      const fromValueWei = this.convertToTokenWei(fromCurrency, fromValue);\n      const toValueWei = this.convertToTokenWei(toCurrency, toValue);\n      const kyberSwapDetails = {\n        fromCurrency,\n        toCurrency,\n        fromAddress,\n        toAddress,\n        fromValueWei,\n        toValueWei\n      };\n      const finalRate = await this.getExpectedRate(\n        fromCurrency,\n        toCurrency,\n        fromValueWei\n      );\n      if (finalRate === 0)\n        throw Error(\n          'Received a rate of 0. Invalid quantity.  Try swapping a lower amount.'\n        );\n      const prepareSwapTxData = await this.canUserSwap(kyberSwapDetails);\n      prepareSwapTxData.add(\n        await this.getTradeData(kyberSwapDetails, finalRate)\n      );\n      const swapTransactions = Array.from(prepareSwapTxData);\n      return [...swapTransactions];\n    } catch (e) {\n      errorLogger(e);\n      throw e;\n    }\n  }\n\n  async startSwap(swapDetails) {\n    swapDetails.maybeToken = true;\n    swapDetails.providerAddress = this.getAddress();\n    swapDetails.kyberMaxGas = await this.callKyberContract('maxGasPrice');\n    const finalRateWei = await this.getExpectedRate(\n      swapDetails.fromCurrency,\n      swapDetails.toCurrency,\n      this.convertToTokenWei(swapDetails.fromCurrency, swapDetails.fromValue)\n    );\n    const finalRate = this.convertToTokenBase('ETH', finalRateWei);\n    swapDetails.dataForInitialization = await this.generateDataForTransactions(\n      swapDetails\n    );\n    swapDetails.toValue = new BigNumber(finalRate).times(\n      new BigNumber(swapDetails.fromValue).toFixed(18).toString()\n    );\n\n    swapDetails.finalRate = this.calculateNormalizedExchangeRate(\n      swapDetails.toValue,\n      swapDetails.fromValue\n    );\n    swapDetails.providerReceives = swapDetails.fromValue;\n    swapDetails.providerSends = new BigNumber(finalRate).times(\n      new BigNumber(swapDetails.fromValue)\n    );\n    swapDetails.parsed = {\n      sendToAddress: this.getKyberNetworkAddress(),\n      status: 'pending',\n      validFor: TIME_SWAP_VALID\n    };\n    swapDetails.providerAddress = this.getKyberNetworkAddress();\n    swapDetails.isDex = Kyber.isDex();\n    return swapDetails;\n  }\n\n  static async getOrderStatus() {\n    return 'new';\n  }\n\n  // Helpers\n  MinRateWeiAdjustment(minRateWei) {\n    const minRateWeiBN = new BigNumber(minRateWei);\n    return minRateWeiBN\n      .minus(minRateWeiBN.times(new BigNumber(MIN_RATE_BUFFER)))\n      .toFixed(0)\n      .toString();\n  }\n\n  isTokenToToken(fromCurrency, toCurrency) {\n    return (\n      fromCurrency !== kyberBaseCurrency && toCurrency !== kyberBaseCurrency\n    );\n  }\n\n  getTokenTradeGas(fromCurrency, toCurrency) {\n    const fromGas = this.getTokenSwapGas(fromCurrency);\n    const toGas = this.getTokenSwapGas(toCurrency);\n    return toBigNumber(fromGas)\n      .plus(toBigNumber(toGas))\n      .toFixed(0)\n      .toString();\n  }\n\n  getTokenApprovalGas(token) {\n    const gasLimits = this.getGasLimits(token);\n    return gasLimits.approveGasLimit;\n  }\n\n  getTokenSwapGas(token) {\n    const gasLimits = this.getGasLimits(token);\n    return gasLimits.swapGasLimit;\n  }\n\n  getTokenAddress(token) {\n    try {\n      if (utils.stringEqual(networkSymbols.ETH, token)) {\n        return this.currencies[token].address;\n      }\n      return this.web3.utils.toChecksumAddress(this.currencies[token].address);\n    } catch (e) {\n      errorLogger(e);\n      throw Error(\n        `Token [${token}] not included in kyber network list of tokens`\n      );\n    }\n  }\n\n  getTokenDecimals(token) {\n    try {\n      return new BigNumber(this.currencies[token].decimals).toNumber();\n    } catch (e) {\n      errorLogger(e);\n      throw Error(\n        `Token [${token}] not included in kyber network list of tokens`\n      );\n    }\n  }\n\n  getGasLimits(token) {\n    try {\n      const address = this.getTokenAddress(token);\n      const gasLimit = this.GAS_LIMITS.find(entry => {\n        return (\n          entry.address.toLowerCase() === address.toLowerCase() ||\n          entry.symbol === token\n        );\n      });\n      if (gasLimit !== null && gasLimit !== undefined) {\n        return gasLimit;\n      }\n      return {\n        swapGasLimit: this.defaultTradeGasLimit,\n        approveGasLimit: this.defaultTokenApprovalGasLimit\n      };\n    } catch (e) {\n      return {\n        swapGasLimit: this.defaultTradeGasLimit,\n        approveGasLimit: this.defaultTokenApprovalGasLimit\n      };\n    }\n  }\n\n  calculateNormalizedExchangeRate(toValue, fromValue) {\n    return new BigNumber(toValue).div(fromValue).toString(10);\n  }\n\n  convertToTokenBase(token, value) {\n    const decimals = this.getTokenDecimals(token);\n    const denominator = new BigNumber(10).pow(decimals);\n    return new BigNumber(value).div(denominator).toString(10);\n  }\n\n  convertToTokenWei(token, value) {\n    const decimals = this.getTokenDecimals(token);\n    const denominator = new BigNumber(10).pow(decimals);\n    return new BigNumber(value)\n      .times(denominator)\n      .integerValue(BigNumber.ROUND_DOWN)\n      .toString(10);\n  }\n}\n"]}]}