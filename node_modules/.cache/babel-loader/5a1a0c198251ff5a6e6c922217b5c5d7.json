{"remainingRequest":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/dapps/MakerDai/containers/SelectCDP/SelectCDP.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/dapps/MakerDai/containers/SelectCDP/SelectCDP.vue","mtime":1573477611656},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState } from 'vuex';\nimport InterfaceContainerTitle from '@/layouts/InterfaceLayout/components/InterfaceContainerTitle';\nimport InterfaceBottomText from '@/components/InterfaceBottomText';\nimport Blockie from '@/components/Blockie';\nimport BigNumber from 'bignumber.js';\nimport SelectCdpEntry from \"../../components/SelectCdpEntry\";\nvar KOVAN_SERVER_URL = 'https://sai-kovan.makerfoundation.com/v1';\n\nvar toBigNumber = function toBigNumber(num) {\n  return new BigNumber(num);\n};\n\nexport default {\n  components: {\n    'interface-container-title': InterfaceContainerTitle,\n    'interface-bottom-text': InterfaceBottomText,\n    blockie: Blockie,\n    'select-cdp-entry': SelectCdpEntry\n  },\n  props: {\n    ethPrice: {\n      type: BigNumber,\n      default: function _default() {\n        return new BigNumber(0);\n      }\n    },\n    makerActive: {\n      type: Boolean,\n      default: false\n    },\n    cdps: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    availableCdps: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    cdpDetailsLoaded: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      loaded: false,\n      serverUrl: KOVAN_SERVER_URL,\n      wethToPethRatio: 0,\n      daiPrice: 0,\n      priceFloor: 0,\n      ethQty: 0,\n      daiQty: 0,\n      selectedCdp: '',\n      cdp: {},\n      eth: toBigNumber(0),\n      dai: toBigNumber(0),\n      debtValue: toBigNumber(0),\n      collatRatio: toBigNumber(0),\n      pethCollateral: toBigNumber(0),\n      usdCollateral: toBigNumber(0),\n      ethCollateral: toBigNumber(0),\n      ratio: null,\n      isSafe: false,\n      maxDaiDraw: toBigNumber(0),\n      maxPethDraw: toBigNumber(0),\n      maxEthDraw: toBigNumber(0)\n    };\n  },\n  computed: _objectSpread({}, mapState(['account', 'gasPrice', 'web3', 'network', 'ens']), {\n    cdpOptions: function cdpOptions() {\n      return this.availableCdps;\n    }\n  }),\n  mounted: function () {\n    var _mounted = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee() {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!this.makerActive) {\n                this.$router.push({\n                  name: 'Maker'\n                });\n              }\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function mounted() {\n      return _mounted.apply(this, arguments);\n    }\n\n    return mounted;\n  }(),\n  methods: {\n    openManage: function openManage(cdp) {\n      this.$router.push({\n        name: 'manage',\n        params: {\n          cdpId: cdp\n        }\n      });\n    },\n    displayPercentValue: function displayPercentValue(raw) {\n      if (!BigNumber.isBigNumber(raw)) raw = new BigNumber(raw);\n      return raw.times(100).toString();\n    },\n    displayFixedValue: function displayFixedValue(raw) {\n      var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n      if (!BigNumber.isBigNumber(raw)) raw = new BigNumber(raw);\n      return raw.toFixed(decimals).toString();\n    }\n  }\n};",{"version":3,"sources":["SelectCDP.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <!--    <div class=\"container-maker\">\n      <div class=\"manage-container\">\n        <div class=\"content-container\">\n          <p class=\"cpd-title\">{{ $t('dappsMaker.cdpPortal') }}</p>\n          <div class=\"cdp-id\">\n            <p>\n              {{ $t('dappsMaker.currentPrice') }}: <b>{{ ethPrice }}</b> USD\n            </p>\n          </div>\n        </div>\n        <div v-if=\"!cdpDetailsLoaded\">\n          {{ $t('dappsMaker.loadingMessage') }}\n        </div>\n        <div v-if=\"cdpDetailsLoaded\">\n          <div\n            v-for=\"(cdp, idx) in Object.keys(availableCdps)\"\n            :key=\"cdp + idx\"\n          >\n            <select-cdp-entry\n              :a-cdp=\"cdpOptions[cdp]\"\n              :cdp-id=\"cdp\"\n            ></select-cdp-entry>\n          </div>\n        </div>\n      </div>\n    </div>-->\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport InterfaceContainerTitle from '@/layouts/InterfaceLayout/components/InterfaceContainerTitle';\nimport InterfaceBottomText from '@/components/InterfaceBottomText';\nimport Blockie from '@/components/Blockie';\nimport BigNumber from 'bignumber.js';\nimport SelectCdpEntry from '../../components/SelectCdpEntry';\n\nconst KOVAN_SERVER_URL = 'https://sai-kovan.makerfoundation.com/v1';\n\nconst toBigNumber = num => {\n  return new BigNumber(num);\n};\n\nexport default {\n  components: {\n    'interface-container-title': InterfaceContainerTitle,\n    'interface-bottom-text': InterfaceBottomText,\n    blockie: Blockie,\n    'select-cdp-entry': SelectCdpEntry\n  },\n  props: {\n    ethPrice: {\n      type: BigNumber,\n      default: function() {\n        return new BigNumber(0);\n      }\n    },\n    makerActive: {\n      type: Boolean,\n      default: false\n    },\n    cdps: {\n      type: Array,\n      default: function() {\n        return [];\n      }\n    },\n    availableCdps: {\n      type: Object,\n      default: function() {\n        return {};\n      }\n    },\n    cdpDetailsLoaded: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      loaded: false,\n      serverUrl: KOVAN_SERVER_URL,\n      wethToPethRatio: 0,\n      daiPrice: 0,\n      priceFloor: 0,\n      ethQty: 0,\n      daiQty: 0,\n      selectedCdp: '',\n      cdp: {},\n      eth: toBigNumber(0),\n      dai: toBigNumber(0),\n      debtValue: toBigNumber(0),\n      collatRatio: toBigNumber(0),\n      pethCollateral: toBigNumber(0),\n      usdCollateral: toBigNumber(0),\n      ethCollateral: toBigNumber(0),\n      ratio: null,\n      isSafe: false,\n      maxDaiDraw: toBigNumber(0),\n      maxPethDraw: toBigNumber(0),\n      maxEthDraw: toBigNumber(0)\n    };\n  },\n  computed: {\n    ...mapState(['account', 'gasPrice', 'web3', 'network', 'ens']),\n    cdpOptions() {\n      return this.availableCdps;\n    }\n  },\n  async mounted() {\n    if (!this.makerActive) {\n      this.$router.push({\n        name: 'Maker'\n      });\n    }\n  },\n  methods: {\n    openManage(cdp) {\n      this.$router.push({\n        name: 'manage',\n        params: {\n          cdpId: cdp\n        }\n      });\n    },\n    displayPercentValue(raw) {\n      if (!BigNumber.isBigNumber(raw)) raw = new BigNumber(raw);\n      return raw.times(100).toString();\n    },\n    displayFixedValue(raw, decimals = 3) {\n      if (!BigNumber.isBigNumber(raw)) raw = new BigNumber(raw);\n      return raw.toFixed(decimals).toString();\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'SelectCDP';\n</style>\n"],"sourceRoot":"src/dapps/MakerDai/containers/SelectCDP"}]}