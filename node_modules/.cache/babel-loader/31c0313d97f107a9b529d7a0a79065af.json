{"remainingRequest":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/thread-loader/dist/cjs.js!/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/eslint-loader/index.js??ref--13-0!/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/helpers/notificationFormatters/utils.js","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/helpers/notificationFormatters/utils.js","mtime":1573477611664},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.map\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\nimport { notificationType, swapIndexes, txIndexes } from \"./config\";\n\nvar extractHashToCompare = function extractHashToCompare(index, val) {\n  if (val[index].details) {\n    return val[index].details.transactionHash;\n  }\n\n  return val[index].transactionHash;\n};\n\nvar getSwapEntryIndex = function getSwapEntryIndex(entry, val) {\n  try {\n    if (entry.body.providerAddress) {\n      var hashToCompare = extractHashToCompare(swapIndexes.response, val);\n      return entry.hash === hashToCompare && entry.type === notificationType.SWAP && entry.body.providerAddress.toLowerCase() === val[swapIndexes.txDetails].to.toLowerCase();\n    }\n\n    return false;\n  } catch (e) {\n    return false;\n  }\n};\n\nvar getSwapEntryIndexForTxReceipt = function getSwapEntryIndexForTxReceipt(entry, val) {\n  try {\n    if (entry.body.providerAddress) {\n      var hashToCompare = extractHashToCompare(txIndexes.response, val);\n      return entry.hash === hashToCompare && entry.type === notificationType.SWAP && entry.body.providerAddress.toLowerCase() === val[txIndexes.txDetails].to.toLowerCase();\n    }\n\n    return false;\n  } catch (e) {\n    return false;\n  }\n};\n\nvar getNotificationIndex = function getNotificationIndex(entry, val) {\n  var hashToCompare = extractHashToCompare(txIndexes.response, val);\n  return entry.hash === hashToCompare && entry.type !== notificationType.SWAP;\n};\n\nvar mapToObject = function mapToObject(map) {\n  var obj = {};\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = map[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var prop = _step.value;\n      obj[prop[0]] = prop[1];\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return obj;\n};\n\nvar extractEvmErrorData = function extractEvmErrorData(errObj) {\n  try {\n    if (errObj.hasOwnProperty('message')) {\n      if (/Transaction has been reverted by the EVM:/.test(errObj.message)) {\n        var stripText = errObj.message.replace('Transaction has been reverted by the EVM:', '');\n        stripText = stripText.replace('{', '').replace('}', '');\n        var entryPairs = stripText.split(',');\n        var betterEntries = entryPairs.map(function (entry) {\n          var cleanEntry = entry.replace(/\\s+/g, '').replace(/\"/g, '').replace(/\"/g, '').replace(/^\\s+/, '').replace(/\\s+$/, '');\n          var entries = cleanEntry.split(':');\n          entries[0] = entries[0].replace(/\\s+/, '');\n          return entries;\n        });\n        var mappedErrorDetails = mapToObject(new Map(betterEntries));\n        return {\n          message: 'Transaction has been reverted by the EVM',\n          details: mappedErrorDetails,\n          stack: errObj.stack\n        };\n      }\n\n      return errObj;\n    }\n\n    return errObj;\n  } catch (e) {\n    return errObj;\n  }\n};\n\nexport { getSwapEntryIndex, getSwapEntryIndexForTxReceipt, getNotificationIndex, extractEvmErrorData };",{"version":3,"sources":["/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/helpers/notificationFormatters/utils.js"],"names":["notificationType","swapIndexes","txIndexes","extractHashToCompare","index","val","details","transactionHash","getSwapEntryIndex","entry","body","providerAddress","hashToCompare","response","hash","type","SWAP","toLowerCase","txDetails","to","e","getSwapEntryIndexForTxReceipt","getNotificationIndex","mapToObject","map","obj","prop","extractEvmErrorData","errObj","hasOwnProperty","test","message","stripText","replace","entryPairs","split","betterEntries","cleanEntry","entries","mappedErrorDetails","Map","stack"],"mappings":"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","sourcesContent":["import { notificationType, swapIndexes, txIndexes } from './config';\n\nconst extractHashToCompare = (index, val) => {\n  if (val[index].details) {\n    return val[index].details.transactionHash;\n  }\n  return val[index].transactionHash;\n};\n\nconst getSwapEntryIndex = (entry, val) => {\n  try {\n    if (entry.body.providerAddress) {\n      const hashToCompare = extractHashToCompare(swapIndexes.response, val);\n      return (\n        entry.hash === hashToCompare &&\n        entry.type === notificationType.SWAP &&\n        entry.body.providerAddress.toLowerCase() ===\n          val[swapIndexes.txDetails].to.toLowerCase()\n      );\n    }\n    return false;\n  } catch (e) {\n    return false;\n  }\n};\n\nconst getSwapEntryIndexForTxReceipt = (entry, val) => {\n  try {\n    if (entry.body.providerAddress) {\n      const hashToCompare = extractHashToCompare(txIndexes.response, val);\n      return (\n        entry.hash === hashToCompare &&\n        entry.type === notificationType.SWAP &&\n        entry.body.providerAddress.toLowerCase() ===\n          val[txIndexes.txDetails].to.toLowerCase()\n      );\n    }\n    return false;\n  } catch (e) {\n    return false;\n  }\n};\n\nconst getNotificationIndex = (entry, val) => {\n  const hashToCompare = extractHashToCompare(txIndexes.response, val);\n  return entry.hash === hashToCompare && entry.type !== notificationType.SWAP;\n};\n\nconst mapToObject = map => {\n  const obj = {};\n  for (const prop of map) {\n    obj[prop[0]] = prop[1];\n  }\n  return obj;\n};\n\nconst extractEvmErrorData = errObj => {\n  try {\n    if (errObj.hasOwnProperty('message')) {\n      if (/Transaction has been reverted by the EVM:/.test(errObj.message)) {\n        let stripText = errObj.message.replace(\n          'Transaction has been reverted by the EVM:',\n          ''\n        );\n        stripText = stripText.replace('{', '').replace('}', '');\n        const entryPairs = stripText.split(',');\n        const betterEntries = entryPairs.map(entry => {\n          const cleanEntry = entry\n            .replace(/\\s+/g, '')\n            .replace(/\"/g, '')\n            .replace(/\"/g, '')\n            .replace(/^\\s+/, '')\n            .replace(/\\s+$/, '');\n          const entries = cleanEntry.split(':');\n          entries[0] = entries[0].replace(/\\s+/, '');\n          return entries;\n        });\n        const mappedErrorDetails = mapToObject(new Map(betterEntries));\n        return {\n          message: 'Transaction has been reverted by the EVM',\n          details: mappedErrorDetails,\n          stack: errObj.stack\n        };\n      }\n      return errObj;\n    }\n    return errObj;\n  } catch (e) {\n    return errObj;\n  }\n};\n\nexport {\n  getSwapEntryIndex,\n  getSwapEntryIndexForTxReceipt,\n  getNotificationIndex,\n  extractEvmErrorData\n};\n"]}]}