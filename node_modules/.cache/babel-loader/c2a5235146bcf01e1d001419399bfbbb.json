{"remainingRequest":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/components/DropDownAddressSelector/DropDownAddressSelector.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/src/components/DropDownAddressSelector/DropDownAddressSelector.vue","mtime":1573477611536},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _toConsumableArray from \"/home/karthik/Desktop/myetherwallet/MyEtherWallet/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.array.find-index\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport '@/assets/images/currency/coins/asFont/cryptocoins.css';\nimport '@/assets/images/currency/coins/asFont/cryptocoins-colors.css';\nimport debugLogger from 'debug';\nimport WAValidator from 'wallet-address-validator';\nimport Blockie from '@/components/Blockie';\nimport { EthereumTokens, BASE_CURRENCY } from '@/partners';\nvar errorLogger = debugLogger('v5:error');\nexport default {\n  components: {\n    blockie: Blockie\n  },\n  props: {\n    title: {\n      type: String,\n      default: ''\n    },\n    currentAddress: {\n      type: String,\n      default: ''\n    },\n    currency: {\n      type: String,\n      default: 'ETH'\n    }\n  },\n  data: function data() {\n    return {\n      selectedAddress: '',\n      validAddress: false,\n      dropdownOpen: false,\n      addresses: [],\n      toAddressCheckMark: false\n    };\n  },\n  watch: {\n    currentAddress: function currentAddress(address) {\n      if (this.addresses.findIndex(function (addr) {\n        return addr.address === address;\n      }) === -1) {\n        this.addresses = [{\n          address: address,\n          currency: BASE_CURRENCY\n        }].concat(_toConsumableArray(this.addresses));\n      }\n    },\n    selectedAddress: function selectedAddress(address) {\n      this.validateAddress(address);\n    },\n    currency: function currency() {\n      this.validateAddress(this.selectedAddress);\n    }\n  },\n  methods: {\n    copyToClipboard: function copyToClipboard(ref) {\n      ref.select();\n      document.execCommand('copy');\n    },\n    isToken: function isToken(symbol) {\n      return typeof EthereumTokens[symbol] !== 'undefined';\n    },\n    listedAddressClick: function listedAddressClick(address) {\n      this.toAddressCheckMark = true;\n      this.dropdownOpen = !this.dropdownOpen;\n      this.selectedAddress = address;\n    },\n    validateAddress: function validateAddress(addr) {\n      if (this.selectedAddress !== '') {\n        var checkAddress = addr.address ? addr.address : addr;\n\n        if (EthereumTokens[this.currency]) {\n          this.validAddress = WAValidator.validate(checkAddress, 'ETH');\n        } else {\n          try {\n            this.validAddress = WAValidator.validate(checkAddress, this.currency);\n          } catch (e) {\n            errorLogger(e);\n            this.validAddress = false;\n          }\n        }\n\n        if (this.validAddress) {\n          this.$emit('toAddress', checkAddress);\n          this.$emit('validAddress', true);\n        } else {\n          this.$emit('toAddress', '');\n          this.$emit('validAddress', false);\n        }\n      }\n    }\n  }\n};",{"version":3,"sources":["DropDownAddressSelector.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4FA,OAAA,uDAAA;AACA,OAAA,8DAAA;AACA,OAAA,WAAA,MAAA,OAAA;AACA,OAAA,WAAA,MAAA,0BAAA;AACA,OAAA,OAAA,MAAA,sBAAA;AACA,SAAA,cAAA,EAAA,aAAA,QAAA,YAAA;AAEA,IAAA,WAAA,GAAA,WAAA,CAAA,UAAA,CAAA;AAEA,eAAA;AACA,EAAA,UAAA,EAAA;AACA,IAAA,OAAA,EAAA;AADA,GADA;AAIA,EAAA,KAAA,EAAA;AACA,IAAA,KAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KADA;AAKA,IAAA,cAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KALA;AASA,IAAA,QAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA;AATA,GAJA;AAkBA,EAAA,IAlBA,kBAkBA;AACA,WAAA;AACA,MAAA,eAAA,EAAA,EADA;AAEA,MAAA,YAAA,EAAA,KAFA;AAGA,MAAA,YAAA,EAAA,KAHA;AAIA,MAAA,SAAA,EAAA,EAJA;AAKA,MAAA,kBAAA,EAAA;AALA,KAAA;AAOA,GA1BA;AA2BA,EAAA,KAAA,EAAA;AACA,IAAA,cADA,0BACA,OADA,EACA;AACA,UAAA,KAAA,SAAA,CAAA,SAAA,CAAA,UAAA,IAAA;AAAA,eAAA,IAAA,CAAA,OAAA,KAAA,OAAA;AAAA,OAAA,MAAA,CAAA,CAAA,EAAA;AACA,aAAA,SAAA,IACA;AACA,UAAA,OAAA,EAAA,OADA;AAEA,UAAA,QAAA,EAAA;AAFA,SADA,4BAKA,KAAA,SALA;AAOA;AACA,KAXA;AAYA,IAAA,eAZA,2BAYA,OAZA,EAYA;AACA,WAAA,eAAA,CAAA,OAAA;AACA,KAdA;AAeA,IAAA,QAfA,sBAeA;AACA,WAAA,eAAA,CAAA,KAAA,eAAA;AACA;AAjBA,GA3BA;AA8CA,EAAA,OAAA,EAAA;AACA,IAAA,eADA,2BACA,GADA,EACA;AACA,MAAA,GAAA,CAAA,MAAA;AACA,MAAA,QAAA,CAAA,WAAA,CAAA,MAAA;AACA,KAJA;AAKA,IAAA,OALA,mBAKA,MALA,EAKA;AACA,aAAA,OAAA,cAAA,CAAA,MAAA,CAAA,KAAA,WAAA;AACA,KAPA;AAQA,IAAA,kBARA,8BAQA,OARA,EAQA;AACA,WAAA,kBAAA,GAAA,IAAA;AACA,WAAA,YAAA,GAAA,CAAA,KAAA,YAAA;AACA,WAAA,eAAA,GAAA,OAAA;AACA,KAZA;AAaA,IAAA,eAbA,2BAaA,IAbA,EAaA;AACA,UAAA,KAAA,eAAA,KAAA,EAAA,EAAA;AACA,YAAA,YAAA,GAAA,IAAA,CAAA,OAAA,GAAA,IAAA,CAAA,OAAA,GAAA,IAAA;;AACA,YAAA,cAAA,CAAA,KAAA,QAAA,CAAA,EAAA;AACA,eAAA,YAAA,GAAA,WAAA,CAAA,QAAA,CAAA,YAAA,EAAA,KAAA,CAAA;AACA,SAFA,MAEA;AACA,cAAA;AACA,iBAAA,YAAA,GAAA,WAAA,CAAA,QAAA,CACA,YADA,EAEA,KAAA,QAFA,CAAA;AAIA,WALA,CAKA,OAAA,CAAA,EAAA;AACA,YAAA,WAAA,CAAA,CAAA,CAAA;AACA,iBAAA,YAAA,GAAA,KAAA;AACA;AACA;;AAEA,YAAA,KAAA,YAAA,EAAA;AACA,eAAA,KAAA,CAAA,WAAA,EAAA,YAAA;AACA,eAAA,KAAA,CAAA,cAAA,EAAA,IAAA;AACA,SAHA,MAGA;AACA,eAAA,KAAA,CAAA,WAAA,EAAA,EAAA;AACA,eAAA,KAAA,CAAA,cAAA,EAAA,KAAA;AACA;AACA;AACA;AAtCA;AA9CA,CAAA","sourcesContent":["<template>\n  <div class=\"drop-down-address-selector\">\n    <div class=\"dropdown--title\">\n      <h4>{{ title }}</h4>\n      <button\n        class=\"title-button prevent-user-select\"\n        @click=\"copyToClipboard($refs.addressInput)\"\n      >\n        {{ $t('common.copy') }}\n      </button>\n    </div>\n    <div class=\"dropdown--content\">\n      <div\n        :class=\"dropdownOpen ? 'dropdown-open' : ''\"\n        class=\"dropdown-input-box\"\n      >\n        <input\n          ref=\"addressInput\"\n          v-model=\"selectedAddress\"\n          type=\"text\"\n          placeholder=\"Please enter the address\"\n          @focus=\"dropdownOpen = false\"\n        />\n        <div v-if=\"!validAddress\" class=\"blockie-place-holder-image\" />\n        <div v-if=\"validAddress\" class=\"selected-address-blockie\">\n          <blockie :address=\"selectedAddress\" width=\"30px\" height=\"30px\" />\n          <div v-if=\"isToken(currency)\">\n            <img\n              alt=\"Ethereum\"\n              class=\"currency-icon\"\n              src=\"@/assets/images/currency/eth.svg\"\n            />\n          </div>\n          <div v-else>\n            <i\n              :class=\"['currency-icon', 'as-font', 'cc', currency, 'cc-icon']\"\n            />\n          </div>\n        </div>\n        <div class=\"dropdown-open-button\" @click=\"dropdownOpen = !dropdownOpen\">\n          <i\n            v-if=\"!dropdownOpen\"\n            class=\"fa fa-chevron-down\"\n            aria-hidden=\"true\"\n          />\n          <i v-if=\"dropdownOpen\" class=\"fa fa-chevron-up\" aria-hidden=\"true\" />\n        </div>\n      </div>\n      <div v-if=\"dropdownOpen\" class=\"dropdown-list-box\">\n        <ul>\n          <li\n            v-for=\"addr in addresses\"\n            :key=\"addr.key\"\n            @click=\"listedAddressClick(addr.address)\"\n          >\n            <div class=\"list-blockie\">\n              <blockie :address=\"addr.address\" width=\"30px\" height=\"30px\" />\n              <img\n                alt=\"Ethereum\"\n                class=\"currency-icon\"\n                src=\"@/assets/images/currency/eth.svg\"\n              />\n            </div>\n            <div class=\"address-block\">\n              <p class=\"listed-address\">\n                {{ addr.address }}\n                <!-- Address book feature\n                <span\n                  v-if=\"addr.address !== currentAddress && addr.currency !== 'ETH'\"\n                  class=\"address-note\"\n                  >{{ addr.currency }} {{ $t('interface.addr') }}</span\n                >\n                -->\n              </p>\n            </div>\n            <p v-if=\"addr.address === currentAddress\" class=\"address-note\">\n              {{ $t('interface.myAddr') }}\n            </p>\n            <i\n              v-if=\"toAddressCheckMark\"\n              aria-hidden=\"true\"\n              class=\"fa fa-check-circle good-button\"\n            />\n          </li>\n        </ul>\n      </div>\n    </div>\n    <!-- .dropdown--content -->\n  </div>\n</template>\n\n<script>\nimport '@/assets/images/currency/coins/asFont/cryptocoins.css';\nimport '@/assets/images/currency/coins/asFont/cryptocoins-colors.css';\nimport debugLogger from 'debug';\nimport WAValidator from 'wallet-address-validator';\nimport Blockie from '@/components/Blockie';\nimport { EthereumTokens, BASE_CURRENCY } from '@/partners';\n\nconst errorLogger = debugLogger('v5:error');\n\nexport default {\n  components: {\n    blockie: Blockie\n  },\n  props: {\n    title: {\n      type: String,\n      default: ''\n    },\n    currentAddress: {\n      type: String,\n      default: ''\n    },\n    currency: {\n      type: String,\n      default: 'ETH'\n    }\n  },\n  data() {\n    return {\n      selectedAddress: '',\n      validAddress: false,\n      dropdownOpen: false,\n      addresses: [],\n      toAddressCheckMark: false\n    };\n  },\n  watch: {\n    currentAddress(address) {\n      if (this.addresses.findIndex(addr => addr.address === address) === -1) {\n        this.addresses = [\n          {\n            address: address,\n            currency: BASE_CURRENCY\n          },\n          ...this.addresses\n        ];\n      }\n    },\n    selectedAddress(address) {\n      this.validateAddress(address);\n    },\n    currency() {\n      this.validateAddress(this.selectedAddress);\n    }\n  },\n  methods: {\n    copyToClipboard(ref) {\n      ref.select();\n      document.execCommand('copy');\n    },\n    isToken(symbol) {\n      return typeof EthereumTokens[symbol] !== 'undefined';\n    },\n    listedAddressClick(address) {\n      this.toAddressCheckMark = true;\n      this.dropdownOpen = !this.dropdownOpen;\n      this.selectedAddress = address;\n    },\n    validateAddress(addr) {\n      if (this.selectedAddress !== '') {\n        const checkAddress = addr.address ? addr.address : addr;\n        if (EthereumTokens[this.currency]) {\n          this.validAddress = WAValidator.validate(checkAddress, 'ETH');\n        } else {\n          try {\n            this.validAddress = WAValidator.validate(\n              checkAddress,\n              this.currency\n            );\n          } catch (e) {\n            errorLogger(e);\n            this.validAddress = false;\n          }\n        }\n\n        if (this.validAddress) {\n          this.$emit('toAddress', checkAddress);\n          this.$emit('validAddress', true);\n        } else {\n          this.$emit('toAddress', '');\n          this.$emit('validAddress', false);\n        }\n      }\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'DropDownAddressSelector';\n</style>\n"],"sourceRoot":"src/components/DropDownAddressSelector"}]}