{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/thread-loader/dist/cjs.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/layouts/InterfaceLayout/containers/SwapContainer/components/SwapAddressSelector/SwapAddressSelector.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/layouts/InterfaceLayout/containers/SwapContainer/components/SwapAddressSelector/SwapAddressSelector.vue","mtime":1574664278306},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/thread-loader/dist/cjs.js","mtime":1574664277654},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js","mtime":1574664275010},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js","mtime":1574664277774}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.array.find-index\";\nimport _defineProperty from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport '@/assets/images/currency/coins/asFont/cryptocoins.css';\nimport '@/assets/images/currency/coins/asFont/cryptocoins-colors.css';\nimport { mapState } from 'vuex';\nimport debugLogger from 'debug';\nimport WAValidator from 'wallet-address-validator';\nimport MAValidator from 'multicoin-address-validator';\nimport Blockie from '@/components/Blockie';\nimport { EthereumTokens, BASE_CURRENCY, hasIcon } from '@/partners';\nimport { canValidate } from '@/partners/helpers';\nimport getMultiCoinAddress from '@/helpers/ENSMultiCoin.js';\nvar errorLogger = debugLogger('v5:error');\nexport default {\n  components: {\n    blockie: Blockie\n  },\n  props: {\n    title: {\n      type: String,\n      default: ''\n    },\n    currentAddress: {\n      type: String,\n      default: ''\n    },\n    currency: {\n      type: String,\n      default: 'ETH'\n    },\n    preFill: {\n      type: Boolean,\n      default: false\n    },\n    preFillAddress: {\n      type: String,\n      default: ''\n    }\n  },\n  data: function data() {\n    return {\n      validityState: 0,\n      EnsAddress: '',\n      validEnsAddress: false,\n      EthereumTokens: EthereumTokens,\n      selectedAddress: '',\n      validAddress: false,\n      dropdownOpen: false,\n      unableToValidate: false,\n      addresses: [],\n      toAddressCheckMark: false\n    };\n  },\n  computed: _objectSpread({}, mapState(['ens'])),\n  watch: {\n    currentAddress: function currentAddress(address) {\n      if (this.addresses.findIndex(function (addr) {\n        return addr.address === address;\n      }) === -1) {\n        this.addresses = [{\n          address: address,\n          currency: BASE_CURRENCY\n        }].concat(_toConsumableArray(this.addresses));\n      }\n    },\n    selectedAddress: function selectedAddress(address) {\n      this.validateAddress(address);\n    },\n    currency: function currency() {\n      this.validateAddress(this.selectedAddress);\n    }\n  },\n  mounted: function mounted() {\n    if (this.preFill) {\n      this.selectedAddress = this.preFillAddress !== '' ? this.preFillAddress : '';\n    }\n  },\n  methods: {\n    getIcon: function getIcon(currency) {\n      return hasIcon(currency);\n    },\n    copyToClipboard: function copyToClipboard(ref) {\n      ref.select();\n      document.execCommand('copy');\n    },\n    isToken: function isToken(symbol) {\n      return typeof EthereumTokens[symbol] !== 'undefined';\n    },\n    listedAddressClick: function listedAddressClick(address) {\n      this.toAddressCheckMark = true;\n      this.dropdownOpen = !this.dropdownOpen;\n      this.selectedAddress = address;\n    },\n    checkForEns: function () {\n      var _checkForEns = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(address) {\n        var currency, nativeAddress;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!address.includes('.')) {\n                  _context.next = 17;\n                  break;\n                }\n\n                currency = this.currency === 'ETH' ? 'ETH' : this.isToken(this.currency) ? 'ETH' : this.currency;\n                _context.prev = 2;\n                _context.next = 5;\n                return getMultiCoinAddress(this.ens, address, currency);\n\n              case 5:\n                nativeAddress = _context.sent;\n                this.validityResult('VALID_ENS');\n                this.EnsAddress = nativeAddress;\n                return _context.abrupt(\"return\", nativeAddress);\n\n              case 11:\n                _context.prev = 11;\n                _context.t0 = _context[\"catch\"](2);\n                this.validityResult('INVALID_ENS');\n                return _context.abrupt(\"return\", address);\n\n              case 15:\n                _context.next = 19;\n                break;\n\n              case 17:\n                this.validityResult('INVALID_ENS');\n                return _context.abrupt(\"return\", address);\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[2, 11]]);\n      }));\n\n      function checkForEns(_x) {\n        return _checkForEns.apply(this, arguments);\n      }\n\n      return checkForEns;\n    }(),\n    validityResult: function validityResult(state) {\n      var validityStates = {\n        VALID: 1,\n        INVALID: 2,\n        MAYBE_VALID: 3,\n        VALID_ENS: 4,\n        INVALID_ENS: 5\n      };\n      var validStates = [1, 3, 4];\n\n      if (typeof state === 'undefined') {\n        return validStates.includes(this.validityState);\n      } else if (typeof state === 'boolean') {\n        if (state) {\n          if (this.validityState !== 4) {\n            this.validityState = validityStates['VALID'];\n          }\n        } else {\n          this.validityState = validityStates['INVALID'];\n        }\n      } else {\n        this.validityState = validityStates[state];\n      }\n    },\n    validateAddress: function () {\n      var _validateAddress = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2(addr) {\n        var checkAddress;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(this.selectedAddress !== '')) {\n                  _context2.next = 11;\n                  break;\n                }\n\n                this.validAddress = false;\n                this.unableToValidate = false;\n                checkAddress = addr.address ? addr.address : addr;\n                _context2.next = 6;\n                return this.checkForEns(checkAddress);\n\n              case 6:\n                checkAddress = _context2.sent;\n\n                if (EthereumTokens[this.currency]) {\n                  this.validAddress = WAValidator.validate(checkAddress, 'ETH');\n                  this.validityResult(this.validAddress);\n                } else {\n                  try {\n                    this.validAddress = WAValidator.validate(checkAddress, this.currency);\n                    this.validityResult(this.validAddress);\n                  } catch (e) {\n                    if (canValidate(this.currency)) {\n                      try {\n                        this.validAddress = MAValidator.validate(checkAddress, this.currency);\n                        this.validityResult(this.validAddress);\n                      } catch (e) {\n                        errorLogger(e);\n                        this.validityResult('INVALID');\n                        this.validAddress = false;\n                      }\n                    } else {\n                      this.validityResult('MAYBE_VALID');\n                      this.validAddress = true;\n                      this.unableToValidate = true;\n                    }\n                  }\n                }\n\n                if (this.validityResult()) {\n                  this.$emit('toAddress', checkAddress);\n                } else {\n                  this.$emit('toAddress', '');\n                }\n\n                _context2.next = 12;\n                break;\n\n              case 11:\n                if (this.validityState !== 0) {\n                  this.validityResult('INVALID');\n                }\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function validateAddress(_x2) {\n        return _validateAddress.apply(this, arguments);\n      }\n\n      return validateAddress;\n    }()\n  }\n};",{"version":3,"sources":["SwapAddressSelector.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"drop-down-address-selector\">\n    <div class=\"dropdown--title\">\n      <h4>{{ title }}</h4>\n      <button\n        class=\"title-button prevent-user-select\"\n        @click=\"copyToClipboard($refs.addressInput)\"\n      >\n        {{ $t('common.copy') }}\n      </button>\n    </div>\n    <div class=\"dropdown--content\">\n      <div\n        :class=\"dropdownOpen ? 'dropdown-open' : ''\"\n        class=\"dropdown-input-box\"\n      >\n        <input\n          ref=\"addressInput\"\n          v-model=\"selectedAddress\"\n          type=\"text\"\n          placeholder=\"Please enter the address\"\n          @focus=\"dropdownOpen = false\"\n        />\n        <div v-if=\"!validAddress\" class=\"blockie-place-holder-image\" />\n        <div v-if=\"validAddress\" class=\"selected-address-blockie\">\n          <blockie :address=\"selectedAddress\" width=\"30px\" height=\"30px\" />\n          <div v-if=\"isToken(currency)\">\n            <img\n              class=\"currency-icon\"\n              src=\"@/assets/images/currency/eth.svg\"\n              alt\n            />\n          </div>\n          <div v-else>\n            <i\n              :class=\"[\n                'currency-icon',\n                'as-font',\n                'cc',\n                getIcon(currency),\n                'cc-icon'\n              ]\"\n            />\n          </div>\n        </div>\n        <div class=\"dropdown-open-button\" @click=\"dropdownOpen = !dropdownOpen\">\n          <i\n            v-if=\"!dropdownOpen\"\n            class=\"fa fa-chevron-down\"\n            aria-hidden=\"true\"\n          />\n          <i v-if=\"dropdownOpen\" class=\"fa fa-chevron-up\" aria-hidden=\"true\" />\n        </div>\n      </div>\n      <div v-if=\"dropdownOpen\" class=\"dropdown-list-box\">\n        <ul>\n          <li\n            v-for=\"addr in addresses\"\n            :key=\"addr.key\"\n            @click=\"listedAddressClick(addr.address)\"\n          >\n            <div class=\"list-blockie\">\n              <blockie :address=\"addr.address\" width=\"30px\" height=\"30px\" />\n              <img\n                class=\"currency-icon\"\n                src=\"@/assets/images/currency/eth.svg\"\n                alt\n              />\n            </div>\n            <div class=\"address-block\">\n              <p class=\"listed-address\">\n                {{ addr.address }}\n              </p>\n            </div>\n            <p v-if=\"addr.address === currentAddress\" class=\"address-note\">\n              {{ $t('interface.myAddr') }}\n            </p>\n            <i\n              v-if=\"toAddressCheckMark\"\n              aria-hidden=\"true\"\n              class=\"fa fa-check-circle good-button\"\n            />\n          </li>\n        </ul>\n      </div>\n    </div>\n    <!-- .dropdown--content -->\n    <div v-show=\"validityState === 2\" class=\"error-message-container\">\n      <p>{{ $t('interface.notValidAddr', { currency: currency }) }}</p>\n    </div>\n    <div v-show=\"validityState === 3\" class=\"warn-message-container\">\n      <p>\n        {{\n          $t('interface.unableToValidateAddress', {\n            currency: currency\n          })\n        }}\n      </p>\n    </div>\n    <div v-show=\"validityState === 4\" class=\"warn-message-container\">\n      <p>\n        {{ EnsAddress }}\n      </p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport '@/assets/images/currency/coins/asFont/cryptocoins.css';\nimport '@/assets/images/currency/coins/asFont/cryptocoins-colors.css';\nimport { mapState } from 'vuex';\nimport debugLogger from 'debug';\nimport WAValidator from 'wallet-address-validator';\nimport MAValidator from 'multicoin-address-validator';\nimport Blockie from '@/components/Blockie';\nimport { EthereumTokens, BASE_CURRENCY, hasIcon } from '@/partners';\nimport { canValidate } from '@/partners/helpers';\nimport getMultiCoinAddress from '@/helpers/ENSMultiCoin.js';\n\nconst errorLogger = debugLogger('v5:error');\n\nexport default {\n  components: {\n    blockie: Blockie\n  },\n  props: {\n    title: {\n      type: String,\n      default: ''\n    },\n    currentAddress: {\n      type: String,\n      default: ''\n    },\n    currency: {\n      type: String,\n      default: 'ETH'\n    },\n    preFill: {\n      type: Boolean,\n      default: false\n    },\n    preFillAddress: {\n      type: String,\n      default: ''\n    }\n  },\n  data() {\n    return {\n      validityState: 0,\n      EnsAddress: '',\n      validEnsAddress: false,\n      EthereumTokens: EthereumTokens,\n      selectedAddress: '',\n      validAddress: false,\n      dropdownOpen: false,\n      unableToValidate: false,\n      addresses: [],\n      toAddressCheckMark: false\n    };\n  },\n  computed: {\n    ...mapState(['ens'])\n  },\n  watch: {\n    currentAddress(address) {\n      if (this.addresses.findIndex(addr => addr.address === address) === -1) {\n        this.addresses = [\n          {\n            address: address,\n            currency: BASE_CURRENCY\n          },\n          ...this.addresses\n        ];\n      }\n    },\n    selectedAddress(address) {\n      this.validateAddress(address);\n    },\n    currency() {\n      this.validateAddress(this.selectedAddress);\n    }\n  },\n  mounted() {\n    if (this.preFill) {\n      this.selectedAddress =\n        this.preFillAddress !== '' ? this.preFillAddress : '';\n    }\n  },\n  methods: {\n    getIcon(currency) {\n      return hasIcon(currency);\n    },\n    copyToClipboard(ref) {\n      ref.select();\n      document.execCommand('copy');\n    },\n    isToken(symbol) {\n      return typeof EthereumTokens[symbol] !== 'undefined';\n    },\n    listedAddressClick(address) {\n      this.toAddressCheckMark = true;\n      this.dropdownOpen = !this.dropdownOpen;\n      this.selectedAddress = address;\n    },\n    async checkForEns(address) {\n      if (address.includes('.')) {\n        const currency =\n          this.currency === 'ETH'\n            ? 'ETH'\n            : this.isToken(this.currency)\n            ? 'ETH'\n            : this.currency;\n        try {\n          const nativeAddress = await getMultiCoinAddress(\n            this.ens,\n            address,\n            currency\n          );\n          this.validityResult('VALID_ENS');\n          this.EnsAddress = nativeAddress;\n          return nativeAddress;\n        } catch (e) {\n          this.validityResult('INVALID_ENS');\n          return address;\n        }\n      } else {\n        this.validityResult('INVALID_ENS');\n        return address;\n      }\n    },\n    validityResult(state) {\n      const validityStates = {\n        VALID: 1,\n        INVALID: 2,\n        MAYBE_VALID: 3,\n        VALID_ENS: 4,\n        INVALID_ENS: 5\n      };\n      const validStates = [1, 3, 4];\n      if (typeof state === 'undefined') {\n        return validStates.includes(this.validityState);\n      } else if (typeof state === 'boolean') {\n        if (state) {\n          if (this.validityState !== 4) {\n            this.validityState = validityStates['VALID'];\n          }\n        } else {\n          this.validityState = validityStates['INVALID'];\n        }\n      } else {\n        this.validityState = validityStates[state];\n      }\n    },\n    async validateAddress(addr) {\n      if (this.selectedAddress !== '') {\n        this.validAddress = false;\n        this.unableToValidate = false;\n        let checkAddress = addr.address ? addr.address : addr;\n        checkAddress = await this.checkForEns(checkAddress);\n        if (EthereumTokens[this.currency]) {\n          this.validAddress = WAValidator.validate(checkAddress, 'ETH');\n          this.validityResult(this.validAddress);\n        } else {\n          try {\n            this.validAddress = WAValidator.validate(\n              checkAddress,\n              this.currency\n            );\n            this.validityResult(this.validAddress);\n          } catch (e) {\n            if (canValidate(this.currency)) {\n              try {\n                this.validAddress = MAValidator.validate(\n                  checkAddress,\n                  this.currency\n                );\n                this.validityResult(this.validAddress);\n              } catch (e) {\n                errorLogger(e);\n                this.validityResult('INVALID');\n                this.validAddress = false;\n              }\n            } else {\n              this.validityResult('MAYBE_VALID');\n              this.validAddress = true;\n              this.unableToValidate = true;\n            }\n          }\n        }\n\n        if (this.validityResult()) {\n          this.$emit('toAddress', checkAddress);\n        } else {\n          this.$emit('toAddress', '');\n        }\n      } else if (this.validityState !== 0) {\n        this.validityResult('INVALID');\n      }\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'SwapAddressSelector';\n</style>\n"],"sourceRoot":"src/layouts/InterfaceLayout/containers/SwapContainer/components/SwapAddressSelector"}]}