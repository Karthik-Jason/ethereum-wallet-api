{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/thread-loader/dist/cjs.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/eslint-loader/index.js??ref--13-0!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/wallets/web3-provider/providers/ws-provider.js","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/wallets/web3-provider/providers/ws-provider.js","mtime":1574664278326},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/thread-loader/dist/cjs.js","mtime":1574664277654},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js","mtime":1574664275010},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/eslint-loader/index.js","mtime":1574664275986}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.is\";\nimport _classCallCheck from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport Web3WSProvider from \"./ws-web3-provider\";\nimport { Manager as Web3RequestManager } from 'web3-core-requestmanager';\nimport MiddleWare from \"../middleware\";\nimport workerTimer from '@/helpers/webWorkerTimer';\nimport { ethSendTransaction, ethSignTransaction, ethSign, ethAccounts, ethCoinbase, ethGetTransactionCount, netVersion } from \"../methods\";\n\nvar WSProvider = function WSProvider(host, options, store, eventHub) {\n  var _this2 = this;\n\n  _classCallCheck(this, WSProvider);\n\n  this.wsProvider = new Web3WSProvider(host, options);\n  this.oWSProvider = new Web3WSProvider(host, options);\n  this.lastMessage = new Date().getTime();\n\n  var keepAlive = function keepAlive() {\n    if (_this2.oWSProvider.connection.readyState === _this2.oWSProvider.connection.OPEN) _this2.wsProvider.connection.send('{\"jsonrpc\":\"2.0\",\"method\":\"net_version\",\"params\":[],\"id\":0}');\n    if (_this2.wsProvider.connection.readyState === _this2.wsProvider.connection.OPEN) _this2.oWSProvider.connection.send('{\"jsonrpc\":\"2.0\",\"method\":\"net_version\",\"params\":[],\"id\":1}');\n\n    if (!Object.is(_this2.wsProvider, store.state.web3.currentProvider) && _this2.lastMessage + 10 * 60 * 1000 < new Date().getTime() //wait extra 10 minutes\n    ) {\n        _this2.wsProvider.disconnect();\n\n        _this2.oWSProvider.disconnect();\n\n        workerTimer.clearInterval(_this2.keepAliveTimer);\n      }\n  };\n\n  this.keepAliveTimer = workerTimer.setInterval(keepAlive, 5000);\n  var _this = this.wsProvider;\n  delete this.wsProvider['send'];\n\n  this.wsProvider.send = function (payload, callback) {\n    _this2.lastMessage = new Date().getTime();\n\n    if (_this.connection.readyState === _this.connection.CONNECTING) {\n      setTimeout(function () {\n        _this2.wsProvider.send(payload, callback);\n      }, 10);\n      return;\n    }\n\n    if (_this.connection.readyState !== _this.connection.OPEN) {\n      if (typeof _this.connection.onerror === 'function') {\n        _this.connection.onerror(new Error('connection not open'));\n      }\n\n      callback(new Error('connection not open'));\n      return;\n    }\n\n    var req = {\n      payload: payload,\n      store: store,\n      requestManager: new Web3RequestManager(_this2.oWSProvider),\n      eventHub: eventHub\n    };\n    var middleware = new MiddleWare();\n    middleware.use(ethSendTransaction);\n    middleware.use(ethSignTransaction);\n    middleware.use(ethSign);\n    middleware.use(ethAccounts);\n    middleware.use(ethGetTransactionCount);\n    middleware.use(ethCoinbase);\n    middleware.use(netVersion);\n    middleware.run(req, callback).then(function () {\n      _this.connection.send(JSON.stringify(payload));\n\n      _this._addResponseCallback(payload, callback);\n    });\n  };\n\n  return this.wsProvider;\n};\n\nexport default WSProvider;",{"version":3,"sources":["/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/wallets/web3-provider/providers/ws-provider.js"],"names":["Web3WSProvider","Manager","Web3RequestManager","MiddleWare","workerTimer","ethSendTransaction","ethSignTransaction","ethSign","ethAccounts","ethCoinbase","ethGetTransactionCount","netVersion","WSProvider","host","options","store","eventHub","wsProvider","oWSProvider","lastMessage","Date","getTime","keepAlive","connection","readyState","OPEN","send","Object","is","state","web3","currentProvider","disconnect","clearInterval","keepAliveTimer","setInterval","_this","payload","callback","CONNECTING","setTimeout","onerror","Error","req","requestManager","middleware","use","run","then","JSON","stringify","_addResponseCallback"],"mappings":"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","sourcesContent":["import Web3WSProvider from './ws-web3-provider';\nimport { Manager as Web3RequestManager } from 'web3-core-requestmanager';\nimport MiddleWare from '../middleware';\nimport workerTimer from '@/helpers/webWorkerTimer';\nimport {\n  ethSendTransaction,\n  ethSignTransaction,\n  ethSign,\n  ethAccounts,\n  ethCoinbase,\n  ethGetTransactionCount,\n  netVersion\n} from '../methods';\nclass WSProvider {\n  constructor(host, options, store, eventHub) {\n    this.wsProvider = new Web3WSProvider(host, options);\n    this.oWSProvider = new Web3WSProvider(host, options);\n    this.lastMessage = new Date().getTime();\n    const keepAlive = () => {\n      if (\n        this.oWSProvider.connection.readyState ===\n        this.oWSProvider.connection.OPEN\n      )\n        this.wsProvider.connection.send(\n          '{\"jsonrpc\":\"2.0\",\"method\":\"net_version\",\"params\":[],\"id\":0}'\n        );\n      if (\n        this.wsProvider.connection.readyState ===\n        this.wsProvider.connection.OPEN\n      )\n        this.oWSProvider.connection.send(\n          '{\"jsonrpc\":\"2.0\",\"method\":\"net_version\",\"params\":[],\"id\":1}'\n        );\n      if (\n        !Object.is(this.wsProvider, store.state.web3.currentProvider) &&\n        this.lastMessage + 10 * 60 * 1000 < new Date().getTime() //wait extra 10 minutes\n      ) {\n        this.wsProvider.disconnect();\n        this.oWSProvider.disconnect();\n        workerTimer.clearInterval(this.keepAliveTimer);\n      }\n    };\n    this.keepAliveTimer = workerTimer.setInterval(keepAlive, 5000);\n    const _this = this.wsProvider;\n    delete this.wsProvider['send'];\n    this.wsProvider.send = (payload, callback) => {\n      this.lastMessage = new Date().getTime();\n      if (_this.connection.readyState === _this.connection.CONNECTING) {\n        setTimeout(() => {\n          this.wsProvider.send(payload, callback);\n        }, 10);\n        return;\n      }\n      if (_this.connection.readyState !== _this.connection.OPEN) {\n        if (typeof _this.connection.onerror === 'function') {\n          _this.connection.onerror(new Error('connection not open'));\n        }\n        callback(new Error('connection not open'));\n        return;\n      }\n      const req = {\n        payload,\n        store,\n        requestManager: new Web3RequestManager(this.oWSProvider),\n        eventHub\n      };\n      const middleware = new MiddleWare();\n      middleware.use(ethSendTransaction);\n      middleware.use(ethSignTransaction);\n      middleware.use(ethSign);\n      middleware.use(ethAccounts);\n      middleware.use(ethGetTransactionCount);\n      middleware.use(ethCoinbase);\n      middleware.use(netVersion);\n      middleware.run(req, callback).then(() => {\n        _this.connection.send(JSON.stringify(payload));\n        _this._addResponseCallback(payload, callback);\n      });\n    };\n    return this.wsProvider;\n  }\n}\nexport default WSProvider;\n"]}]}