{"remainingRequest":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/layouts/InterfaceLayout/containers/NFTManagerContainer/components/NftDetails/NftDetails.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/src/layouts/InterfaceLayout/containers/NFTManagerContainer/components/NftDetails/NftDetails.vue","mtime":1574664278306},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/babel-loader/lib/index.js","mtime":1574664275010},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/cache-loader/dist/cjs.js","mtime":1574664275186},{"path":"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/vue-loader/lib/index.js","mtime":1574664277774}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/home/karthik/Desktop/myetherwallet/ethereum-wallet-api/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState } from 'vuex';\nimport { Misc, Toast } from '@/helpers';\nimport InterfaceContainerTitle from '@/layouts/InterfaceLayout/components/InterfaceContainerTitle';\nimport SmallBackButton from '@/layouts/InterfaceLayout/components/SmallBackButton';\nimport DropDownAddressSelector from '@/components/DropDownAddressSelector';\nimport StandardButton from '@/components/Buttons/StandardButton';\nimport placeholderImage from '@/assets/images/icons/defaultToken.png';\nexport default {\n  components: {\n    'interface-container-title': InterfaceContainerTitle,\n    'back-button': SmallBackButton,\n    'address-selector': DropDownAddressSelector,\n    'standard-button': StandardButton\n  },\n  props: {\n    selectedTitle: {\n      type: String,\n      default: 'Error'\n    },\n    nft: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    selectedContract: {\n      type: String,\n      default: 'Error'\n    },\n    nftConfig: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    }\n  },\n  data: function data() {\n    return {\n      toAddress: '',\n      tokenContract: {},\n      ERC721tokenContract: {},\n      cryptoKittiesContract: {},\n      cryptoKittiesConfig: '0x06012c8cf97bead5deae237070f9587f8e7a266d',\n      sendButton: {\n        title: this.$t('interface.send'),\n        buttonStyle: 'green',\n        helpCenter: true,\n        noMinWidth: true,\n        fullWidth: true\n      }\n    };\n  },\n  computed: _objectSpread({}, mapState(['account', 'web3']), {\n    isValidAddress: function isValidAddress() {\n      if (this.toAddress !== '') {\n        return Misc.isValidENSorEtherAddress(this.toAddress);\n      }\n\n      return false;\n    }\n  }),\n  watch: {},\n  mounted: function mounted() {\n    this.ERC721tokenContract = new this.web3.eth.Contract([{\n      constant: false,\n      inputs: [{\n        name: '_from',\n        type: 'address'\n      }, {\n        name: '_to',\n        type: 'address'\n      }, {\n        name: '_tokenId',\n        type: 'uint256'\n      }],\n      name: 'transferFrom',\n      outputs: [],\n      payable: false,\n      stateMutability: 'nonpayable',\n      type: 'function'\n    }]);\n  },\n  methods: {\n    getImage: function getImage(nft) {\n      if (nft.customNft) {\n        return placeholderImage;\n      }\n\n      return nft.image;\n    },\n    prepareTransfer: function prepareTransfer(toAddress) {\n      this.toAddress = toAddress;\n      this.ERC721tokenContract.options.address = this.nft.contract;\n    },\n    buildData: function buildData() {\n      if (this.nft.contract.toLowerCase() === this.cryptoKittiesConfig.toLowerCase()) {\n        this.cryptoKittiesContract = new this.web3.eth.Contract([{\n          constant: false,\n          inputs: [{\n            name: '_to',\n            type: 'address'\n          }, {\n            name: '_tokenId',\n            type: 'uint256'\n          }],\n          name: 'transfer',\n          outputs: [],\n          payable: false,\n          stateMutability: 'nonpayable',\n          type: 'function'\n        }]);\n        return this.cryptoKittiesContract.methods.transfer(this.toAddress, this.nft.token).encodeABI();\n      }\n\n      return this.ERC721tokenContract.methods.transferFrom(this.account.address, this.toAddress, this.nft.token).encodeABI();\n    },\n    transfer: function transfer() {\n      var _this = this;\n\n      if (this.isValidAddress) {\n        var txData = this.buildData();\n        var raw = {\n          from: this.account.address,\n          to: this.nft.contract,\n          data: txData\n        };\n        this.web3.eth.sendTransaction(raw).on('transactionHash', function () {\n          _this.$emit('nftTransferred', _this.nft);\n\n          _this.toAddress = '';\n        }).catch(function (err) {\n          _this.$emit('resetNFT', _this.nft);\n\n          Toast.responseHandler(err, Toast.ERROR);\n        });\n      }\n    },\n    goBack: function goBack() {\n      this.$emit('back');\n    }\n  }\n};",{"version":3,"sources":["NftDetails.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"crypto-kitties-details\">\n    <div class=\"crypto-kitties-details-content-container\">\n      <back-button @click.native=\"goBack\" />\n      <div class=\"grid-container\">\n        <div class=\"kitty-image\">\n          <img :src=\"getImage(nft)\" alt />\n        </div>\n        <div class=\"kitty-text\">\n          <h3>{{ $t('dapps.sendMy', { value: selectedTitle }) }}</h3>\n          <p>#{{ nft.token }}</p>\n          <div class=\"address-input-container\">\n            <address-selector\n              :title=\"$t('interface.sendTxToAddr')\"\n              @toAddress=\"prepareTransfer\"\n            />\n            <div class=\"send-button-container\">\n              <standard-button\n                :button-disabled=\"!isValidAddress\"\n                :options=\"sendButton\"\n                @click.native=\"transfer\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport { Misc, Toast } from '@/helpers';\nimport InterfaceContainerTitle from '@/layouts/InterfaceLayout/components/InterfaceContainerTitle';\nimport SmallBackButton from '@/layouts/InterfaceLayout/components/SmallBackButton';\nimport DropDownAddressSelector from '@/components/DropDownAddressSelector';\nimport StandardButton from '@/components/Buttons/StandardButton';\nimport placeholderImage from '@/assets/images/icons/defaultToken.png';\n\nexport default {\n  components: {\n    'interface-container-title': InterfaceContainerTitle,\n    'back-button': SmallBackButton,\n    'address-selector': DropDownAddressSelector,\n    'standard-button': StandardButton\n  },\n  props: {\n    selectedTitle: {\n      type: String,\n      default: 'Error'\n    },\n    nft: {\n      type: Object,\n      default: function() {\n        return {};\n      }\n    },\n    selectedContract: {\n      type: String,\n      default: 'Error'\n    },\n    nftConfig: {\n      type: Object,\n      default: function() {\n        return {};\n      }\n    }\n  },\n  data() {\n    return {\n      toAddress: '',\n      tokenContract: {},\n      ERC721tokenContract: {},\n      cryptoKittiesContract: {},\n      cryptoKittiesConfig: '0x06012c8cf97bead5deae237070f9587f8e7a266d',\n      sendButton: {\n        title: this.$t('interface.send'),\n        buttonStyle: 'green',\n        helpCenter: true,\n        noMinWidth: true,\n        fullWidth: true\n      }\n    };\n  },\n\n  computed: {\n    ...mapState(['account', 'web3']),\n    isValidAddress() {\n      if (this.toAddress !== '') {\n        return Misc.isValidENSorEtherAddress(this.toAddress);\n      }\n      return false;\n    }\n  },\n  watch: {},\n  mounted() {\n    this.ERC721tokenContract = new this.web3.eth.Contract([\n      {\n        constant: false,\n        inputs: [\n          { name: '_from', type: 'address' },\n          { name: '_to', type: 'address' },\n          {\n            name: '_tokenId',\n            type: 'uint256'\n          }\n        ],\n        name: 'transferFrom',\n        outputs: [],\n        payable: false,\n        stateMutability: 'nonpayable',\n        type: 'function'\n      }\n    ]);\n  },\n  methods: {\n    getImage(nft) {\n      if (nft.customNft) {\n        return placeholderImage;\n      }\n      return nft.image;\n    },\n    prepareTransfer(toAddress) {\n      this.toAddress = toAddress;\n      this.ERC721tokenContract.options.address = this.nft.contract;\n    },\n    buildData() {\n      if (\n        this.nft.contract.toLowerCase() ===\n        this.cryptoKittiesConfig.toLowerCase()\n      ) {\n        this.cryptoKittiesContract = new this.web3.eth.Contract([\n          {\n            constant: false,\n            inputs: [\n              { name: '_to', type: 'address' },\n              { name: '_tokenId', type: 'uint256' }\n            ],\n            name: 'transfer',\n            outputs: [],\n            payable: false,\n            stateMutability: 'nonpayable',\n            type: 'function'\n          }\n        ]);\n\n        return this.cryptoKittiesContract.methods\n          .transfer(this.toAddress, this.nft.token)\n          .encodeABI();\n      }\n      return this.ERC721tokenContract.methods\n        .transferFrom(this.account.address, this.toAddress, this.nft.token)\n        .encodeABI();\n    },\n    transfer() {\n      if (this.isValidAddress) {\n        const txData = this.buildData();\n        const raw = {\n          from: this.account.address,\n          to: this.nft.contract,\n          data: txData\n        };\n        this.web3.eth\n          .sendTransaction(raw)\n          .on('transactionHash', () => {\n            this.$emit('nftTransferred', this.nft);\n            this.toAddress = '';\n          })\n          .catch(err => {\n            this.$emit('resetNFT', this.nft);\n            Toast.responseHandler(err, Toast.ERROR);\n          });\n      }\n    },\n    goBack() {\n      this.$emit('back');\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'NftDetails';\n</style>\n"],"sourceRoot":"src/layouts/InterfaceLayout/containers/NFTManagerContainer/components/NftDetails"}]}