"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var messages_pb_1 = require("./kkProto/messages_pb");
var utils_1 = require("./utils");
function ethTxAsProto(tx, nodePath) {
    var est = new messages_pb_1.default.EthereumSignTx();
    est.setAddressNList(nodePath);
    // For proper rlp encoding when the value of the  parameter is zero,
    // the device expects an empty byte array instead of
    // a byte array with a value of zero
    if (tx.value) {
        est.setValue(emptyOrVal(tx.value));
    }
    if (tx.gasLimit) {
        est.setValue(emptyOrVal(tx.gasLimit));
    }
    if (tx.gasPrice) {
        est.setValue(emptyOrVal(tx.gasPrice));
    }
    return est;
}
exports.ethTxAsProto = ethTxAsProto;
function emptyOrVal(val) {
    if (!val)
        return new Uint8Array();
    else
        return utils_1.arrayify(val);
}
function newTokenTransaction(tx, tShortCut, tRecipient, tValue) {
    return {
        ethereumTx: tx,
        tokenShortcut: tShortCut,
        tokenTo: tRecipient,
        tokenValue: tValue
    };
}
exports.newTokenTransaction = newTokenTransaction;
//# sourceMappingURL=ethereum.js.map