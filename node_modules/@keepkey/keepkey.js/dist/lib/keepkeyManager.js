"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var keepkey_1 = require("./keepkey");
var eventemitter2_1 = require("eventemitter2");
var defaultUSBDeviceCallback = function () { }; // tslint:disable-line:no-empty
var KeepKeyManager = /** @class */ (function () {
    function KeepKeyManager(config) {
        if (config === void 0) { config = {}; }
        this.deviceEvents = new eventemitter2_1.default.EventEmitter2({ wildcard: true });
        this.keepkeys = {};
        this.onConnectCallback = defaultUSBDeviceCallback;
        this.onDisconnectCallback = defaultUSBDeviceCallback;
        this.onConnectCallback = config.onConnectCallback || defaultUSBDeviceCallback;
        this.onDisconnectCallback = config.onDisconnectCallback || defaultUSBDeviceCallback;
        // If we have access to WebUSB, register callbacks
        if (window.navigator.usb) {
            window.navigator.usb.onconnect = this.handleConnectKeepKey.bind(this);
            window.navigator.usb.ondisconnect = this.handleDisconnectKeepKey.bind(this);
        }
    }
    Object.defineProperty(KeepKeyManager.prototype, "initializedCount", {
        get: function () {
            return Object.keys(this.keepkeys).length;
        },
        enumerable: true,
        configurable: true
    });
    KeepKeyManager.prototype.initializeWebUSBDevices = function (webusbConfig, devices) {
        return __awaiter(this, void 0, void 0, function () {
            var devicesToInitialize, _a, _i, devicesToInitialize_1, usbDevice, k, features;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!window.navigator.usb)
                            throw new Error('WebUSB not supported in your browser!');
                        _a = devices;
                        if (_a) return [3 /*break*/, 2];
                        return [4 /*yield*/, window.navigator.usb.getDevices()];
                    case 1:
                        _a = (_b.sent());
                        _b.label = 2;
                    case 2:
                        devicesToInitialize = _a;
                        _i = 0, devicesToInitialize_1 = devicesToInitialize;
                        _b.label = 3;
                    case 3:
                        if (!(_i < devicesToInitialize_1.length)) return [3 /*break*/, 8];
                        usbDevice = devicesToInitialize_1[_i];
                        if (!this.keepkeys[usbDevice.serialNumber]) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.get(usbDevice.serialNumber).initialize()];
                    case 4:
                        _b.sent();
                        return [3 /*break*/, 7];
                    case 5:
                        k = keepkey_1.default.withWebUSB(__assign({ usbDevice: usbDevice }, webusbConfig));
                        return [4 /*yield*/, k.initialize()];
                    case 6:
                        features = _b.sent();
                        if (features)
                            this.add(k, usbDevice.serialNumber);
                        _b.label = 7;
                    case 7:
                        _i++;
                        return [3 /*break*/, 3];
                    case 8: return [2 /*return*/, this.initializedCount];
                }
            });
        });
    };
    KeepKeyManager.prototype.add = function (keepkey, deviceID) {
        var id = deviceID || keepkey.features.deviceId;
        if (!(this.keepkeys[id])) {
            this.keepkeys[id] = keepkey;
            this.decorateEvents(deviceID, keepkey.device.events);
            return true;
        }
        return false;
    };
    KeepKeyManager.prototype.exec = function (method) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, Promise.all(Object.values(this.keepkeys)
                        .map(function (k) { return k[method].apply(k, args); })).then(function (values) { return values.reduce(function (final, response, i) {
                        final[Object.keys(_this.keepkeys)[i]] = response;
                        return final;
                    }, {}); })];
            });
        });
    };
    KeepKeyManager.prototype.get = function (deviceID) {
        if (this.keepkeys[deviceID])
            return this.keepkeys[deviceID];
        if (this.initializedCount)
            return Object.values(this.keepkeys)[0];
        return null;
    };
    KeepKeyManager.prototype.remove = function (deviceID) {
        return __awaiter(this, void 0, void 0, function () {
            var keepkey, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.keepkeys[deviceID])
                            return [2 /*return*/];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 4, , 5]);
                        keepkey = this.get(deviceID);
                        return [4 /*yield*/, keepkey.clearSession()];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, keepkey.device.disconnect()];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        e_1 = _a.sent();
                        console.error(e_1);
                        return [3 /*break*/, 5];
                    case 5:
                        delete this.keepkeys[deviceID];
                        return [2 /*return*/];
                }
            });
        });
    };
    KeepKeyManager.prototype.removeAll = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Promise.all(Object.keys(this.keepkeys).map(this.remove))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    KeepKeyManager.prototype.disconnectAll = function () {
        Object.values(this.keepkeys).forEach(function (k) {
            if (k.device.queue)
                k.device.queue.clear();
            k.device.disconnect().catch(console.log);
        });
    };
    KeepKeyManager.prototype.decorateEvents = function (deviceID, events) {
        var _this = this;
        events.onAny(function (e) {
            var values = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                values[_i - 1] = arguments[_i];
            }
            return _this.deviceEvents.emit([e, deviceID], [deviceID].concat(values));
        });
    };
    KeepKeyManager.prototype.handleConnectKeepKey = function (e) {
        var _this = this;
        var deviceID = e.device.serialNumber;
        this.initializeWebUSBDevices(null, [e.device])
            .then(function () { return _this.onConnectCallback(deviceID); })
            .catch(console.error);
    };
    KeepKeyManager.prototype.handleDisconnectKeepKey = function (e) {
        var _this = this;
        var deviceID = e.device.serialNumber;
        this.remove(deviceID)
            .then(function () { return _this.onDisconnectCallback(deviceID); })
            .catch(function (e) {
            console.error(e);
            _this.onDisconnectCallback(deviceID);
        });
    };
    return KeepKeyManager;
}());
exports.default = KeepKeyManager;
//# sourceMappingURL=keepkeyManager.js.map