"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var google_protobuf_1 = require("google-protobuf");
var messages_pb_1 = require("./kkProto/messages_pb");
var types_pb_1 = require("./kkProto/types_pb");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var bytebuffer_1 = require("bytebuffer");
var utils_1 = require("./utils");
var messageTypeRegistry_1 = require("./messageTypeRegistry");
var event_1 = require("./event");
var NO_THROW_CODES = [
    types_pb_1.default.FailureType.FAILURE_ACTIONCANCELLED,
    types_pb_1.default.FailureType.FAILURE_PINCANCELLED
];
var Device = /** @class */ (function () {
    function Device() {
    }
    // exchange sends a request to the device and streams back the results
    // the MessageType enum numer will be returned in addition to the google-protobuf message
    // based on trezorExchange()
    // in https://github.com/go-ethereum/accounts/usbwallet/trezor.go
    // and https://github.com/solipsis/go-keepkey/blob/master/pkg/keepkey/transport.go#L277
    Device.prototype.exchange = function (msgTypeEnum, msg) {
        return __awaiter(this, void 0, void 0, function () {
            var msgBuffer, responseBuffer, _a, responseTypeEnum, responseMsg, errorResponse, ack, interruptedResponse, interruptedResponse, interruptedResponse;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        msgBuffer = this.toMessageBuffer(msgTypeEnum, msg);
                        return [4 /*yield*/, this.sendRaw(msgBuffer)];
                    case 1:
                        responseBuffer = _b.sent();
                        this.events.emit(String(msgTypeEnum), event_1.makeEvent({
                            message_enum: msgTypeEnum,
                            message: msg.toObject(),
                            from_device: false,
                            interface: this.interface
                        }));
                        _a = this.fromMessageBuffer(responseBuffer), responseTypeEnum = _a[0], responseMsg = _a[1];
                        this.events.emit(String(responseTypeEnum), event_1.makeEvent({
                            message_enum: responseTypeEnum,
                            message: responseMsg.toObject(),
                            from_device: true,
                            interface: this.interface
                        }));
                        // If error, throw with response message
                        if (responseTypeEnum === messages_pb_1.default.MessageType.MESSAGETYPE_FAILURE) {
                            errorResponse = responseMsg;
                            if (!NO_THROW_CODES.includes(errorResponse.getCode()))
                                throw new Error(errorResponse.getMessage()); // We don't want to throw if cancel actions are user initiated
                        }
                        if (responseTypeEnum === messages_pb_1.default.MessageType.MESSAGETYPE_BUTTONREQUEST) {
                            return [2 /*return*/, this.exchange(messages_pb_1.default.MessageType.MESSAGETYPE_BUTTONACK, new messages_pb_1.default.ButtonAck())];
                        }
                        if (responseTypeEnum === messages_pb_1.default.MessageType.MESSAGETYPE_ENTROPYREQUEST) {
                            ack = new messages_pb_1.default.EntropyAck();
                            ack.setEntropy(this.getEntropy(32));
                            return [2 /*return*/, this.exchange(messages_pb_1.default.MessageType.MESSAGETYPE_ENTROPYACK, ack)];
                        }
                        if (!(responseTypeEnum === messages_pb_1.default.MessageType.MESSAGETYPE_PINMATRIXREQUEST)) return [3 /*break*/, 3];
                        return [4 /*yield*/, rxjs_1.fromEvent(this.events, 'PINMATRIXACK_INTERRUPT_RESULT').pipe(operators_1.take(1)).toPromise()];
                    case 2:
                        interruptedResponse = _b.sent();
                        return [2 /*return*/, interruptedResponse];
                    case 3:
                        if (!(responseTypeEnum === messages_pb_1.default.MessageType.MESSAGETYPE_PASSPHRASEREQUEST)) return [3 /*break*/, 5];
                        return [4 /*yield*/, rxjs_1.fromEvent(this.events, 'PASSPHRASEACK_INTERRUPT_RESULT').pipe(operators_1.take(1)).toPromise()];
                    case 4:
                        interruptedResponse = _b.sent();
                        return [2 /*return*/, interruptedResponse];
                    case 5:
                        if (!(responseTypeEnum === messages_pb_1.default.MessageType.MESSAGETYPE_CHARACTERREQUEST)) return [3 /*break*/, 7];
                        return [4 /*yield*/, rxjs_1.fromEvent(this.events, 'CHARACTERACK_INTERRUPT_RESULT').pipe(operators_1.take(1)).toPromise()];
                    case 6:
                        interruptedResponse = _b.sent();
                        return [2 /*return*/, interruptedResponse];
                    case 7: return [2 /*return*/, [responseTypeEnum, responseMsg]];
                }
            });
        });
    };
    Device.prototype.toMessageBuffer = function (msgTypeEnum, msg) {
        var messageBuffer = msg.serializeBinary();
        var headerBuffer = new ArrayBuffer(8);
        var headerView = new DataView(headerBuffer);
        headerView.setUint8(0, 0x23);
        headerView.setUint8(1, 0x23);
        headerView.setUint16(2, msgTypeEnum);
        headerView.setUint32(4, messageBuffer.byteLength);
        return bytebuffer_1.default.concat([headerView.buffer, messageBuffer]);
    };
    Device.prototype.fromMessageBuffer = function (buff) {
        var dataView = buff.view;
        var typeID = utils_1.leByteArrayToLong(dataView.slice(3, 5));
        var MessageType = messageTypeRegistry_1.default[typeID];
        if (!MessageType) {
            var msg_1 = new messages_pb_1.default.Failure();
            msg_1.setCode(types_pb_1.default.FailureType.FAILURE_UNEXPECTEDMESSAGE);
            msg_1.setMessage('Unknown message type received');
            return [messages_pb_1.default.MessageType.MESSAGETYPE_FAILURE, msg_1];
        }
        var msg = new MessageType();
        var reader = new google_protobuf_1.default.BinaryReader(dataView.slice(9), 0, buff.limit - (9 + 2));
        return [typeID, MessageType.deserializeBinaryFromReader(msg, reader)];
    };
    Device.failureMessageFactory = function (e) {
        var msg = new messages_pb_1.default.Failure();
        msg.setCode(types_pb_1.default.FailureType.FAILURE_UNEXPECTEDMESSAGE);
        if (typeof e === 'string') {
            msg.setMessage(e);
        }
        else {
            msg.setMessage(String(e));
        }
        return bytebuffer_1.default.wrap(msg.serializeBinary());
    };
    return Device;
}());
exports.default = Device;
//# sourceMappingURL=device.js.map