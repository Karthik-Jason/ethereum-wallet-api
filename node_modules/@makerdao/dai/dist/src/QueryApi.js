"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getQueryResponse = getQueryResponse;
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _assert = _interopRequireDefault(require("assert"));

var _ethereumjsUtil = _interopRequireDefault(require("ethereumjs-util"));

var _isomorphicFetch = _interopRequireDefault(require("isomorphic-fetch"));

var MAINNET_SERVER_URL = 'https://sai-mainnet.makerfoundation.com/v1';
var KOVAN_SERVER_URL = 'https://sai-kovan.makerfoundation.com/v1';

function getQueryResponse(_x, _x2, _x3) {
  return _getQueryResponse.apply(this, arguments);
}

function _getQueryResponse() {
  _getQueryResponse = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee2(serverUrl, query, variables) {
    var resp, _ref, data;

    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return (0, _isomorphicFetch["default"])(serverUrl, {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                query: query,
                variables: variables
              })
            });

          case 2:
            resp = _context2.sent;
            _context2.next = 5;
            return resp.json();

          case 5:
            _ref = _context2.sent;
            data = _ref.data;
            (0, _assert["default"])(data, "error fetching data from ".concat(serverUrl));
            return _context2.abrupt("return", data);

          case 9:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getQueryResponse.apply(this, arguments);
}

var QueryApi =
/*#__PURE__*/
function () {
  function QueryApi(network) {
    (0, _classCallCheck2["default"])(this, QueryApi);

    switch (network) {
      case 'mainnet':
      case 1:
        this.serverUrl = MAINNET_SERVER_URL;
        break;

      case 'kovan':
      case 42:
        this.serverUrl = KOVAN_SERVER_URL;
        break;

      default:
        throw new Error("don't know what to do for network \"".concat(network, "\""));
    }
  }

  (0, _createClass2["default"])(QueryApi, [{
    key: "getCdpIdsForOwner",
    value: function () {
      var _getCdpIdsForOwner = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee(rawAddress) {
        var address, query, response;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                address = _ethereumjsUtil["default"].toChecksumAddress(rawAddress);
                query = "query ($lad: String) {\n      allCups(condition: { lad: $lad }) {\n        nodes {\n          id\n        }\n      }\n    }";
                _context.next = 4;
                return getQueryResponse(this.serverUrl, query, {
                  lad: address
                });

              case 4:
                response = _context.sent;
                return _context.abrupt("return", response.allCups.nodes.map(function (n) {
                  return n.id;
                }));

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getCdpIdsForOwner(_x4) {
        return _getCdpIdsForOwner.apply(this, arguments);
      }

      return getCdpIdsForOwner;
    }()
  }]);
  return QueryApi;
}();

exports["default"] = QueryApi;