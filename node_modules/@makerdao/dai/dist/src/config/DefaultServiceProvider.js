"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.resolver = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _servicesCore = require("@makerdao/services-core");

var _AccountsService = _interopRequireDefault(require("../eth/AccountsService"));

var _AllowanceService = _interopRequireDefault(require("../eth/AllowanceService"));

var _CacheService = _interopRequireDefault(require("../utils/CacheService"));

var _ConsoleLogger = _interopRequireDefault(require("../utils/loggers/ConsoleLogger"));

var _DSProxyService = _interopRequireDefault(require("../eth/DSProxyService"));

var _EthereumCdpService = _interopRequireDefault(require("../eth/EthereumCdpService"));

var _EthereumTokenService = _interopRequireDefault(require("../eth/EthereumTokenService"));

var _EventService = _interopRequireDefault(require("../utils/events/EventService"));

var _GasService = _interopRequireDefault(require("../eth/GasService"));

var _MulticallService = _interopRequireDefault(require("../eth/MulticallService"));

var _NonceService = _interopRequireDefault(require("../eth/NonceService"));

var _NullEventService = _interopRequireDefault(require("../utils/events/NullEventService"));

var _NullLogger = _interopRequireDefault(require("../utils/loggers/NullLogger"));

var _PriceService = _interopRequireDefault(require("../eth/PriceService"));

var _SmartContractService = _interopRequireDefault(require("../eth/SmartContractService"));

var _TimerService = _interopRequireDefault(require("../utils/TimerService"));

var _TokenConversionService = _interopRequireDefault(require("../eth/TokenConversionService"));

var _TransactionManager = _interopRequireDefault(require("../eth/TransactionManager"));

var _Web3Service = _interopRequireDefault(require("../eth/Web3Service"));

var _index = require("./index");

var resolver = {
  defaults: {
    accounts: 'AccountsService',
    allowance: 'AllowanceService',
    cache: 'CacheService',
    cdp: 'EthereumCdpService',
    conversion: 'TokenConversionService',
    event: 'EventService',
    gas: 'GasService',
    log: 'ConsoleLogger',
    multicall: 'MulticallService',
    nonce: 'NonceService',
    price: 'PriceService',
    proxy: 'DSProxyService',
    smartContract: 'SmartContractService',
    timer: 'TimerService',
    token: 'EthereumTokenService',
    transactionManager: 'TransactionManager',
    web3: 'Web3Service'
  },
  disabled: {
    event: 'NullEventService',
    log: 'NullLogger'
  }
};
exports.resolver = resolver;

var DefaultServiceProvider =
/*#__PURE__*/
function (_ServiceProvider) {
  (0, _inherits2["default"])(DefaultServiceProvider, _ServiceProvider);

  function DefaultServiceProvider() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck2["default"])(this, DefaultServiceProvider);

    if (config.web3) {
      config = (0, _objectSpread2["default"])({}, config, {
        accounts: (0, _objectSpread2["default"])({}, config.accounts, {
          web3: (0, _index.getSettings)(config.web3)
        })
      });
    }

    return (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(DefaultServiceProvider).call(this, config, (0, _objectSpread2["default"])({
      services: {
        AccountsService: _AccountsService["default"],
        AllowanceService: _AllowanceService["default"],
        CacheService: _CacheService["default"],
        ConsoleLogger: _ConsoleLogger["default"],
        DSProxyService: _DSProxyService["default"],
        EthereumCdpService: _EthereumCdpService["default"],
        EthereumTokenService: _EthereumTokenService["default"],
        EventService: _EventService["default"],
        GasService: _GasService["default"],
        MulticallService: _MulticallService["default"],
        NonceService: _NonceService["default"],
        NullEventService: _NullEventService["default"],
        NullLogger: _NullLogger["default"],
        PriceService: _PriceService["default"],
        SmartContractService: _SmartContractService["default"],
        TimerService: _TimerService["default"],
        TokenConversionService: _TokenConversionService["default"],
        TransactionManager: _TransactionManager["default"],
        Web3Service: _Web3Service["default"]
      }
    }, resolver)));
  }

  return DefaultServiceProvider;
}(_servicesCore.ServiceProvider);

exports["default"] = DefaultServiceProvider;