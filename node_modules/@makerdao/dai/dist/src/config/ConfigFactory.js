"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _wrapNativeSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapNativeSuper"));

var _test = _interopRequireDefault(require("./presets/test.json"));

var _kovan = _interopRequireDefault(require("./presets/kovan.json"));

var _http = _interopRequireDefault(require("./presets/http.json"));

var _ws = _interopRequireDefault(require("./presets/ws.json"));

var _mainnet = _interopRequireDefault(require("./presets/mainnet.json"));

var _browser = _interopRequireDefault(require("./presets/browser.json"));

var _inject = _interopRequireDefault(require("./presets/inject.json"));

var _intersection = _interopRequireDefault(require("lodash/intersection"));

var _merge = _interopRequireDefault(require("lodash/merge"));

var _index = require("./index");

var _constants = require("../utils/constants");

var ConfigPresetNotFoundError =
/*#__PURE__*/
function (_Error) {
  (0, _inherits2["default"])(ConfigPresetNotFoundError, _Error);

  function ConfigPresetNotFoundError(message) {
    (0, _classCallCheck2["default"])(this, ConfigPresetNotFoundError);
    return (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(ConfigPresetNotFoundError).call(this, 'Cannot find configuration preset with name: ' + message));
  }

  return ConfigPresetNotFoundError;
}((0, _wrapNativeSuper2["default"])(Error));

var serviceRoles = ['accounts', 'allowance', 'cdp', 'conversion', 'gas', 'log', 'multicall', 'nonce', 'price', 'proxy', 'smartContract', 'timer', 'token', 'transactionManager', 'web3'];

function loadPreset(name) {
  if ((0, _typeof2["default"])(name) == 'object') {
    return name; // for testing
  }

  var preset;

  switch (name) {
    case 'test':
      preset = _test["default"];
      break;

    case 'http':
      preset = _http["default"];
      break;

    case 'ws':
    case 'websocket':
      preset = _ws["default"];
      break;

    case 'kovan':
      preset = _kovan["default"];
      break;

    case 'mainnet':
      preset = _mainnet["default"];
      break;

    case 'browser':
      preset = _browser["default"];
      break;

    case 'inject':
      preset = _inject["default"];
      break;

    default:
      throw new ConfigPresetNotFoundError(name);
  } // make a copy so we don't overwrite the original values


  return (0, _merge["default"])({}, preset);
}

var reservedWords = ['accounts', 'overrideMetamask', 'plugins', 'privateKey', 'provider', 'url'];

function checkForReservedWords(words) {
  var usedReservedWords = (0, _intersection["default"])(words, reservedWords);

  if (usedReservedWords.length > 0) {
    throw new Error('The following words cannot be used as service role names: ' + usedReservedWords.join(', '));
  }
}

var ConfigFactory =
/*#__PURE__*/
function () {
  function ConfigFactory() {
    (0, _classCallCheck2["default"])(this, ConfigFactory);
  }

  (0, _createClass2["default"])(ConfigFactory, null, [{
    key: "create",

    /**
     * @param {string} preset
     * @param {object} options
     */
    value: function create(preset) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var resolver = arguments.length > 2 ? arguments[2] : undefined;

      if (typeof preset !== 'string') {
        options = preset;
        preset = options.preset;
      }

      var config = loadPreset(preset);
      var additionalServices = options.additionalServices || [];
      checkForReservedWords(additionalServices);
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = serviceRoles.concat(additionalServices)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var role = _step.value;
          if (!(role in options)) continue;

          if (!(role in config)) {
            config[role] = options[role];
            continue;
          }

          config[role] = (0, _index.mergeServiceConfig)(role, config[role], options[role], resolver);
        } // web3-specific convenience options

      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      if (config.web3) {
        var web3Settings = config.web3[1] || config.web3;
        if (!web3Settings.provider) web3Settings.provider = {};

        if (options.url) {
          web3Settings.provider.url = options.url;
        }

        if (options.provider) {
          (0, _merge["default"])(web3Settings.provider, options.provider);
        }
      } // accounts-specific convenience option


      if (options.privateKey) {
        config.accounts = (0, _objectSpread2["default"])({}, config.accounts, {
          "default": {
            type: _constants.AccountType.PRIVATE_KEY,
            key: options.privateKey
          }
        });
      }

      return config;
    }
  }]);
  return ConfigFactory;
}();

exports["default"] = ConfigFactory;