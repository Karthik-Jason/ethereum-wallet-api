"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _servicesCore = require("@makerdao/services-core");

var _tokens = _interopRequireDefault(require("../../contracts/tokens"));

var _contracts = _interopRequireDefault(require("../../contracts/contracts"));

var _networks = _interopRequireDefault(require("../../contracts/networks"));

var _Erc20Token = _interopRequireDefault(require("./tokens/Erc20Token"));

var _EtherToken = _interopRequireDefault(require("./tokens/EtherToken"));

var _WethToken = _interopRequireDefault(require("./tokens/WethToken"));

var _PethToken = _interopRequireDefault(require("./tokens/PethToken"));

var _ERC = _interopRequireDefault(require("../../contracts/abis/ERC20.json"));

var EthereumTokenService =
/*#__PURE__*/
function (_PrivateService) {
  (0, _inherits2["default"])(EthereumTokenService, _PrivateService);

  function EthereumTokenService() {
    var _this;

    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'token';
    (0, _classCallCheck2["default"])(this, EthereumTokenService);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(EthereumTokenService).call(this, name, ['smartContract', 'web3', 'log', 'gas', 'transactionManager']));
    _this._tokens = _tokens["default"];
    _this._addedTokens = {};
    return _this;
  }

  (0, _createClass2["default"])(EthereumTokenService, [{
    key: "initialize",
    value: function initialize() {
      var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (settings.erc20) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = settings.erc20[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var token = _step.value;
            var symbol = token.symbol || token.currency.symbol;
            this._tokens[symbol] = symbol;
            this._addedTokens[symbol] = [token];
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }
    }
  }, {
    key: "getTokens",
    value: function getTokens() {
      return Object.keys(this._tokens);
    } // FIXME should be caching/memoizing here

  }, {
    key: "getToken",
    value: function getToken(symbol, version) {
      // support passing in Currency constructors
      if (symbol.symbol) symbol = symbol.symbol;

      if (this.getTokens().indexOf(symbol) < 0) {
        throw new Error('provided token is not a symbol');
      }

      if (symbol === _tokens["default"].ETH) {
        return new _EtherToken["default"](this.get('web3'), this.get('gas'), this.get('transactionManager'));
      }

      var _this$_getTokenInfo = this._getTokenInfo(symbol, version),
          address = _this$_getTokenInfo.address,
          decimals = _this$_getTokenInfo.decimals,
          abi = _this$_getTokenInfo.abi,
          currency = _this$_getTokenInfo.currency;

      var scs = this.get('smartContract');
      var contract = scs.getContractByAddressAndAbi(address, abi || _ERC["default"]);

      if (symbol === _tokens["default"].WETH) {
        return new _WethToken["default"](contract, this.get('web3'), decimals);
      }

      if (symbol === _tokens["default"].PETH) {
        if (decimals !== 18) {
          throw new Error('PethToken code hardcodes 18 decimal places.');
        }

        var tub = scs.getContract(_contracts["default"].SAI_TUB);
        return new _PethToken["default"](contract, this.get('web3'), tub);
      }

      return new _Erc20Token["default"](contract, this.get('web3'), decimals || 18, symbol, currency);
    }
  }, {
    key: "_getTokenInfo",
    value: function _getTokenInfo(symbol, version) {
      var _this$get = this.get('web3'),
          network = _this$get.network,
          networkName = _this$get.networkName;

      var tokenInfoList = this._addedTokens[symbol] || this._getNetworkMapping(network)[symbol];

      var tokenInfo = version ? tokenInfoList[version - 1] : tokenInfoList[tokenInfoList.length - 1];
      if (typeof tokenInfo.address === 'string') return tokenInfo;
      return (0, _objectSpread2["default"])({}, tokenInfo, {
        address: tokenInfo.address[networkName === 'test' ? 'testnet' : networkName]
      });
    }
  }, {
    key: "_getNetworkMapping",
    value: function _getNetworkMapping(networkId) {
      var mapping = _networks["default"].filter(function (m) {
        return m.networkId === networkId;
      });

      if (mapping.length < 1) {
        throw new Error('networkId not found');
      }

      return mapping[0].contracts;
    }
  }, {
    key: "_selectTokenVersions",
    value: function _selectTokenVersions(mapping) {
      var tokenArray = [];

      for (var token in _tokens["default"]) {
        if (token === 'ETH') {
          tokenArray['ETH'] = [1];
        }

        if (token in mapping) {
          (function () {
            var versionArray = [];
            mapping[token].forEach(function (e) {
              versionArray.push(e.version);
            });
            tokenArray[token] = versionArray;
          })();
        }
      }

      return tokenArray;
    }
  }]);
  return EthereumTokenService;
}(_servicesCore.PrivateService);

exports["default"] = EthereumTokenService;