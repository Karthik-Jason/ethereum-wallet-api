"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _applyDecoratedDescriptor2 = _interopRequireDefault(require("@babel/runtime/helpers/applyDecoratedDescriptor"));

var _servicesCore = require("@makerdao/services-core");

var _contracts = _interopRequireDefault(require("../../contracts/contracts"));

var _Cdp = _interopRequireDefault(require("./Cdp"));

var _ProxyCdp = _interopRequireDefault(require("./ProxyCdp"));

var _QueryApi = _interopRequireDefault(require("../QueryApi"));

var _bignumber = _interopRequireDefault(require("bignumber.js"));

var _constants = require("../utils/constants");

var _Currency = require("./Currency");

var _conversion = require("../utils/conversion");

var _tracksTransactions = _interopRequireDefault(require("../utils/tracksTransactions"));

var _assert = _interopRequireDefault(require("assert"));

var _class;

var EthereumCdpService = (_class =
/*#__PURE__*/
function (_PrivateService) {
  (0, _inherits2["default"])(EthereumCdpService, _PrivateService);

  /**
   * @param {string} name
   */
  function EthereumCdpService() {
    var _this;

    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'cdp';
    (0, _classCallCheck2["default"])(this, EthereumCdpService);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(EthereumCdpService).call(this, name, ['allowance', 'conversion', 'event', 'price', 'proxy', 'smartContract', 'token'])); // aliases

    _this.freeEth = _this.freePeth;
    return _this;
  }

  (0, _createClass2["default"])(EthereumCdpService, [{
    key: "_smartContract",
    value: function _smartContract() {
      return this.get('smartContract');
    }
  }, {
    key: "_txMgr",
    value: function _txMgr() {
      return this.get('smartContract').get('transactionManager');
    }
  }, {
    key: "_tubContract",
    value: function _tubContract() {
      return this._smartContract().getContract(_contracts["default"].SAI_TUB);
    }
  }, {
    key: "_saiProxyTubContract",
    value: function _saiProxyTubContract() {
      return this._smartContract().getContract(_contracts["default"].SAI_PROXY);
    }
  }, {
    key: "_web3Service",
    value: function _web3Service() {
      return this._smartContract().get('web3');
    }
  }, {
    key: "_conversionService",
    value: function _conversionService() {
      return this.get('conversion');
    }
  }, {
    key: "getCdp",
    value: function () {
      var _getCdp = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee(id, dsProxy) {
        var info, owner, proxy;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                (0, _assert["default"])(typeof id === 'number', 'ID must be a number.');
                _context.next = 3;
                return this.getInfo(id);

              case 3:
                info = _context.sent;
                owner = info.lad.toString().toLowerCase();
                (0, _assert["default"])(owner !== '0x0000000000000000000000000000000000000000', "That CDP doesn't exist--try opening a new one.");

                if (!dsProxy) {
                  _context.next = 9;
                  break;
                }

                (0, _assert["default"])(owner === dsProxy.toLowerCase(), 'That CDP is not owned by that address.');
                return _context.abrupt("return", new _ProxyCdp["default"](this, dsProxy, id));

              case 9:
                if (!(owner === this._web3Service().currentAddress().toLowerCase())) {
                  _context.next = 11;
                  break;
                }

                return _context.abrupt("return", new _Cdp["default"](this, id));

              case 11:
                _context.next = 13;
                return this.get('proxy').currentProxy();

              case 13:
                proxy = _context.sent;

                if (!(proxy && owner === proxy.toLowerCase())) {
                  _context.next = 16;
                  break;
                }

                return _context.abrupt("return", new _ProxyCdp["default"](this, proxy, id));

              case 16:
                return _context.abrupt("return", new _Cdp["default"](this, id));

              case 17:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getCdp(_x, _x2) {
        return _getCdp.apply(this, arguments);
      }

      return getCdp;
    }()
  }, {
    key: "_throwIfNotEnoughMkrToWipe",
    value: function () {
      var _throwIfNotEnoughMkrToWipe2 = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee2(cdpId, amountToWipe) {
        var unit,
            enoughMkrToWipe,
            _args2 = arguments;
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                unit = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : _Currency.DAI;
                _context2.next = 3;
                return this.enoughMkrToWipe(cdpId, amountToWipe, unit);

              case 3:
                enoughMkrToWipe = _context2.sent;

                if (!(enoughMkrToWipe === false)) {
                  _context2.next = 6;
                  break;
                }

                throw new Error('not enough MKR balance to cover governance fee');

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function _throwIfNotEnoughMkrToWipe(_x3, _x4) {
        return _throwIfNotEnoughMkrToWipe2.apply(this, arguments);
      }

      return _throwIfNotEnoughMkrToWipe;
    }()
  }, {
    key: "enoughMkrToWipe",
    value: function () {
      var _enoughMkrToWipe = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee3(cdpId, amountToWipe) {
        var unit,
            dai,
            MkrToken,
            ownerAddress,
            _ref,
            _ref2,
            fee,
            balance,
            debt,
            mkrOwed,
            _args3 = arguments;

        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                unit = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : _Currency.DAI;
                dai = (0, _Currency.getCurrency)(amountToWipe, unit);

                if (!dai.eq(0)) {
                  _context3.next = 4;
                  break;
                }

                return _context3.abrupt("return");

              case 4:
                MkrToken = this.get('token').getToken(_Currency.MKR);
                ownerAddress = this.get('token').get('web3').currentAddress();
                _context3.next = 8;
                return Promise.all([this.getGovernanceFee(cdpId, _Currency.MKR), MkrToken.balanceOf(ownerAddress), this.getDebtValue(cdpId)]);

              case 8:
                _ref = _context3.sent;
                _ref2 = (0, _slicedToArray2["default"])(_ref, 3);
                fee = _ref2[0];
                balance = _ref2[1];
                debt = _ref2[2];
                mkrOwed = dai.div(debt).toBigNumber().times(fee.toBigNumber());

                if (!mkrOwed.gt(balance.toBigNumber())) {
                  _context3.next = 16;
                  break;
                }

                return _context3.abrupt("return", false);

              case 16:
                return _context3.abrupt("return", true);

              case 17:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function enoughMkrToWipe(_x5, _x6) {
        return _enoughMkrToWipe.apply(this, arguments);
      }

      return enoughMkrToWipe;
    }()
  }, {
    key: "openCdp",
    value: function openCdp() {
      return new _Cdp["default"](this).transactionObject();
    }
  }, {
    key: "openProxyCdp",
    value: function openProxyCdp(dsProxy) {
      return new _ProxyCdp["default"](this, dsProxy).transactionObject();
    }
  }, {
    key: "openProxyCdpLockEthAndDrawDai",
    value: function openProxyCdpLockEthAndDrawDai(amountEth, amountDai) {
      var dsProxy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      return new _ProxyCdp["default"](this, dsProxy, null, {
        lockAndDraw: true,
        amountEth: amountEth,
        amountDai: amountDai
      }).transactionObject();
    }
  }, {
    key: "getCdpIds",
    value: function () {
      var _getCdpIds = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee4(address) {
        var api;
        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (!address) {
                  address = this._web3Service().get('accounts').currentAddress();
                }

                api = new _QueryApi["default"](this._web3Service().networkId());
                return _context4.abrupt("return", api.getCdpIdsForOwner(address));

              case 3:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function getCdpIds(_x7) {
        return _getCdpIds.apply(this, arguments);
      }

      return getCdpIds;
    }()
  }, {
    key: "shut",
    value: function () {
      var _shut = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee5(cdpId) {
        var debt, hexCdpId;
        return _regenerator["default"].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return this.getDebtValue(cdpId, _Currency.DAI);

              case 2:
                debt = _context5.sent;
                _context5.next = 5;
                return this._throwIfNotEnoughMkrToWipe(cdpId, debt);

              case 5:
                hexCdpId = (0, _conversion.numberToBytes32)(cdpId);
                _context5.next = 8;
                return this.get('allowance').requireAllowance(_Currency.MKR, this._tubContract().address);

              case 8:
                _context5.next = 10;
                return this.get('allowance').requireAllowance(_Currency.DAI, this._tubContract().address);

              case 10:
                return _context5.abrupt("return", this._tubContract().shut(hexCdpId));

              case 11:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function shut(_x8) {
        return _shut.apply(this, arguments);
      }

      return shut;
    }()
  }, {
    key: "lockEth",
    value: function () {
      var _lockEth = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee6(cdpId, amount, _ref3) {
        var _ref3$unit, unit, waitForConfirm, promise, convert;

        return _regenerator["default"].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _ref3$unit = _ref3.unit, unit = _ref3$unit === void 0 ? _Currency.ETH : _ref3$unit, waitForConfirm = _ref3.waitForConfirm, promise = _ref3.promise;
                convert = this._conversionService().convertEthToWeth(amount, {
                  unit: unit,
                  promise: promise
                });

                if (!waitForConfirm) {
                  _context6.next = 7;
                  break;
                }

                _context6.next = 5;
                return this._txMgr().confirm(convert);

              case 5:
                _context6.next = 9;
                break;

              case 7:
                _context6.next = 9;
                return convert;

              case 9:
                return _context6.abrupt("return", this.lockWeth(cdpId, amount, {
                  promise: promise
                }));

              case 10:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function lockEth(_x9, _x10, _x11) {
        return _lockEth.apply(this, arguments);
      }

      return lockEth;
    }()
  }, {
    key: "lockWeth",
    value: function () {
      var _lockWeth = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee7(cdpId, amount, _ref4) {
        var _ref4$unit, unit, promise, wethPerPeth, weth;

        return _regenerator["default"].wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _ref4$unit = _ref4.unit, unit = _ref4$unit === void 0 ? _Currency.WETH : _ref4$unit, promise = _ref4.promise;
                _context7.next = 3;
                return this.get('price').getWethToPethRatio();

              case 3:
                wethPerPeth = _context7.sent;
                weth = (0, _Currency.getCurrency)(amount, unit);
                _context7.next = 7;
                return this._conversionService().convertWethToPeth(weth, {
                  promise: promise
                });

              case 7:
                return _context7.abrupt("return", this.lockPeth(cdpId, weth.div(wethPerPeth), {
                  promise: promise
                }));

              case 8:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function lockWeth(_x12, _x13, _x14) {
        return _lockWeth.apply(this, arguments);
      }

      return lockWeth;
    }()
  }, {
    key: "lockPeth",
    value: function () {
      var _lockPeth = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee8(cdpId, amount, _ref5) {
        var _ref5$unit, unit, promise, hexCdpId, value;

        return _regenerator["default"].wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _ref5$unit = _ref5.unit, unit = _ref5$unit === void 0 ? _Currency.PETH : _ref5$unit, promise = _ref5.promise;
                hexCdpId = (0, _conversion.numberToBytes32)(cdpId);
                value = (0, _Currency.getCurrency)(amount, unit).toFixed('wei');
                _context8.next = 5;
                return this.get('allowance').requireAllowance(_Currency.PETH, this._tubContract().address, {
                  promise: promise
                });

              case 5:
                return _context8.abrupt("return", this._tubContract().lock(hexCdpId, value, {
                  promise: promise
                }));

              case 6:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function lockPeth(_x15, _x16, _x17) {
        return _lockPeth.apply(this, arguments);
      }

      return lockPeth;
    }()
  }, {
    key: "freePeth",
    value: function freePeth(cdpId, amount) {
      var _ref6 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
          _ref6$unit = _ref6.unit,
          unit = _ref6$unit === void 0 ? _Currency.PETH : _ref6$unit,
          promise = _ref6.promise;

      var hexCdpId = (0, _conversion.numberToBytes32)(cdpId);
      var value = (0, _Currency.getCurrency)(amount, unit).toFixed('wei');
      return this._tubContract().free(hexCdpId, value, {
        promise: promise
      });
    }
  }, {
    key: "drawDai",
    value: function drawDai(cdpId, amount) {
      var _ref7 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
          _ref7$unit = _ref7.unit,
          unit = _ref7$unit === void 0 ? _Currency.DAI : _ref7$unit,
          promise = _ref7.promise;

      var hexCdpId = (0, _conversion.numberToBytes32)(cdpId);
      var value = (0, _Currency.getCurrency)(amount, unit).toFixed('wei');
      return this._tubContract().draw(hexCdpId, value, {
        promise: promise
      });
    }
  }, {
    key: "wipeDai",
    value: function () {
      var _wipeDai = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee9(cdpId, amount, _ref8) {
        var _ref8$unit, unit, promise, value, hexCdpId;

        return _regenerator["default"].wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _ref8$unit = _ref8.unit, unit = _ref8$unit === void 0 ? _Currency.DAI : _ref8$unit, promise = _ref8.promise;
                value = (0, _Currency.getCurrency)(amount, unit).toFixed('wei');
                _context9.next = 4;
                return this._throwIfNotEnoughMkrToWipe(cdpId, amount, unit);

              case 4:
                hexCdpId = (0, _conversion.numberToBytes32)(cdpId);
                _context9.next = 7;
                return this.get('allowance').requireAllowance(_Currency.MKR, this._tubContract().address);

              case 7:
                _context9.next = 9;
                return this.get('allowance').requireAllowance(_Currency.DAI, this._tubContract().address);

              case 9:
                return _context9.abrupt("return", this._tubContract().wipe(hexCdpId, value, {
                  promise: promise
                }));

              case 10:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function wipeDai(_x18, _x19, _x20) {
        return _wipeDai.apply(this, arguments);
      }

      return wipeDai;
    }()
  }, {
    key: "getInfo",
    value: function getInfo(cdpId) {
      var hexCdpId = (0, _conversion.numberToBytes32)(cdpId);
      return this._tubContract().cups(hexCdpId);
    }
  }, {
    key: "getCollateralValue",
    value: function () {
      var _getCollateralValue = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee10(cdpId) {
        var unit,
            hexCdpId,
            pethValue,
            pethPrice,
            ethValue,
            ethPrice,
            usdValue,
            _args10 = arguments;
        return _regenerator["default"].wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                unit = _args10.length > 1 && _args10[1] !== undefined ? _args10[1] : _Currency.ETH;
                hexCdpId = (0, _conversion.numberToBytes32)(cdpId);
                _context10.t0 = _Currency.PETH;
                _context10.next = 5;
                return this._tubContract().ink(hexCdpId);

              case 5:
                _context10.t1 = _context10.sent;
                pethValue = _context10.t0.wei.call(_context10.t0, _context10.t1);

                if (!(unit === _Currency.PETH)) {
                  _context10.next = 9;
                  break;
                }

                return _context10.abrupt("return", pethValue);

              case 9:
                _context10.next = 11;
                return this.get('price').getWethToPethRatio();

              case 11:
                pethPrice = _context10.sent;
                ethValue = (0, _Currency.ETH)(pethValue.times(pethPrice));

                if (!(unit === _Currency.ETH)) {
                  _context10.next = 15;
                  break;
                }

                return _context10.abrupt("return", ethValue);

              case 15:
                _context10.next = 17;
                return this.get('price').getEthPrice();

              case 17:
                ethPrice = _context10.sent;
                usdValue = ethValue.times(ethPrice);

                if (!(unit === _Currency.USD)) {
                  _context10.next = 21;
                  break;
                }

                return _context10.abrupt("return", usdValue);

              case 21:
                throw new Error("Don't know how to get collateral value in ".concat(unit ? unit.symbol : unit));

              case 22:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      function getCollateralValue(_x21) {
        return _getCollateralValue.apply(this, arguments);
      }

      return getCollateralValue;
    }()
  }, {
    key: "getDebtValue",
    value: function () {
      var _getDebtValue = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee11(cdpId) {
        var unit,
            hexCdpId,
            tub,
            tab,
            daiDebt,
            targetPrice,
            _args11 = arguments;
        return _regenerator["default"].wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                unit = _args11.length > 1 && _args11[1] !== undefined ? _args11[1] : _Currency.DAI;
                hexCdpId = (0, _conversion.numberToBytes32)(cdpId); // we need to use the Web3.js contract interface to get the return value
                // from the non-constant function `tab`

                tub = this._smartContract().getWeb3ContractByName(_contracts["default"].SAI_TUB);
                _context11.next = 5;
                return new Promise(function (resolve, reject) {
                  return tub.methods.tab(hexCdpId).call({}, function (err, val) {
                    return err ? reject(err) : resolve(val);
                  });
                });

              case 5:
                tab = _context11.sent;
                daiDebt = _Currency.DAI.wei(tab.toString());
                _context11.t0 = unit;
                _context11.next = _context11.t0 === _Currency.DAI ? 10 : _context11.t0 === _Currency.USD ? 11 : 15;
                break;

              case 10:
                return _context11.abrupt("return", daiDebt);

              case 11:
                _context11.next = 13;
                return this.getTargetPrice();

              case 13:
                targetPrice = _context11.sent;
                return _context11.abrupt("return", daiDebt.times(targetPrice));

              case 15:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      function getDebtValue(_x22) {
        return _getDebtValue.apply(this, arguments);
      }

      return getDebtValue;
    }() //updates compound interest calculations for all CDPs.  Used by tests that depend on a fee

  }, {
    key: "_drip",
    value: function () {
      var _drip2 = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee12() {
        return _regenerator["default"].wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                return _context12.abrupt("return", this._tubContract().drip());

              case 1:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      function _drip() {
        return _drip2.apply(this, arguments);
      }

      return _drip;
    }()
  }, {
    key: "getGovernanceFee",
    value: function () {
      var _getGovernanceFee = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee13(cdpId) {
        var unit,
            hexCdpId,
            tub,
            rap,
            usdFee,
            price,
            _args13 = arguments;
        return _regenerator["default"].wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                unit = _args13.length > 1 && _args13[1] !== undefined ? _args13[1] : _Currency.MKR;
                hexCdpId = (0, _conversion.numberToBytes32)(cdpId); // we need to use the Web3.js contract interface to get the return value
                // from the non-constant function `rap`

                tub = this._smartContract().getWeb3ContractByName(_contracts["default"].SAI_TUB);
                _context13.next = 5;
                return new Promise(function (resolve, reject) {
                  tub.methods.rap(hexCdpId).call({}, function (err, val) {
                    return err ? reject(err) : resolve(val);
                  });
                });

              case 5:
                rap = _context13.sent;
                usdFee = _Currency.USD.wei(rap);
                _context13.t0 = unit;
                _context13.next = _context13.t0 === _Currency.USD ? 10 : _context13.t0 === _Currency.MKR ? 11 : 15;
                break;

              case 10:
                return _context13.abrupt("return", usdFee);

              case 11:
                _context13.next = 13;
                return this.get('price').getMkrPrice();

              case 13:
                price = _context13.sent;
                return _context13.abrupt("return", usdFee.div(price));

              case 15:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      function getGovernanceFee(_x23) {
        return _getGovernanceFee.apply(this, arguments);
      }

      return getGovernanceFee;
    }()
  }, {
    key: "getCollateralizationRatio",
    value: function () {
      var _getCollateralizationRatio = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee14(cdpId) {
        var usdDebt, _ref9, _ref10, pethPrice, pethCollateral;

        return _regenerator["default"].wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                _context14.next = 2;
                return this.getDebtValue(cdpId, _Currency.USD);

              case 2:
                usdDebt = _context14.sent;

                if (!usdDebt.eq(0)) {
                  _context14.next = 5;
                  break;
                }

                return _context14.abrupt("return", Infinity);

              case 5:
                _context14.next = 7;
                return Promise.all([this.get('price').getPethPrice(), this.getCollateralValue(cdpId, _Currency.PETH)]);

              case 7:
                _ref9 = _context14.sent;
                _ref10 = (0, _slicedToArray2["default"])(_ref9, 2);
                pethPrice = _ref10[0];
                pethCollateral = _ref10[1];
                return _context14.abrupt("return", pethCollateral.times(pethPrice).div(usdDebt).toNumber());

              case 12:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      function getCollateralizationRatio(_x24) {
        return _getCollateralizationRatio.apply(this, arguments);
      }

      return getCollateralizationRatio;
    }()
  }, {
    key: "getLiquidationRatio",
    value: function () {
      var _getLiquidationRatio = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee15() {
        var value;
        return _regenerator["default"].wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                _context15.next = 2;
                return this._tubContract().mat();

              case 2:
                value = _context15.sent;
                return _context15.abrupt("return", new _bignumber["default"](value.toString()).dividedBy(_constants.RAY).toNumber());

              case 4:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      function getLiquidationRatio() {
        return _getLiquidationRatio.apply(this, arguments);
      }

      return getLiquidationRatio;
    }()
  }, {
    key: "getLiquidationPenalty",
    value: function () {
      var _getLiquidationPenalty = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee16() {
        var value;
        return _regenerator["default"].wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                _context16.next = 2;
                return this._tubContract().axe();

              case 2:
                value = _context16.sent;
                return _context16.abrupt("return", new _bignumber["default"](value.toString()).dividedBy(_constants.RAY).minus(1).toNumber());

              case 4:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      function getLiquidationPenalty() {
        return _getLiquidationPenalty.apply(this, arguments);
      }

      return getLiquidationPenalty;
    }()
  }, {
    key: "getTargetPrice",
    value: function () {
      var _getTargetPrice = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee17() {
        var vox, par;
        return _regenerator["default"].wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                // we need to use the Web3.js contract interface to get the return value
                // from the non-constant function `par()`
                vox = this._smartContract().getWeb3ContractByName(_contracts["default"].SAI_VOX);
                _context17.next = 3;
                return new Promise(function (resolve, reject) {
                  return vox.methods.par().call({}, function (err, val) {
                    return err ? reject(err) : resolve(val);
                  });
                });

              case 3:
                par = _context17.sent;
                return _context17.abrupt("return", _Currency.USD_DAI.ray(par));

              case 5:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this);
      }));

      function getTargetPrice() {
        return _getTargetPrice.apply(this, arguments);
      }

      return getTargetPrice;
    }()
  }, {
    key: "getLiquidationPrice",
    value: function () {
      var _getLiquidationPrice = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee18(cdpId) {
        var _ref11, _ref12, debt, liqRatio, collateral;

        return _regenerator["default"].wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                _context18.next = 2;
                return Promise.all([this.getDebtValue(cdpId, _Currency.USD), this.getLiquidationRatio(), this.getCollateralValue(cdpId)]);

              case 2:
                _ref11 = _context18.sent;
                _ref12 = (0, _slicedToArray2["default"])(_ref11, 3);
                debt = _ref12[0];
                liqRatio = _ref12[1];
                collateral = _ref12[2];

                if (!collateral.eq(0)) {
                  _context18.next = 9;
                  break;
                }

                return _context18.abrupt("return", (0, _Currency.USD_ETH)(Infinity));

              case 9:
                return _context18.abrupt("return", debt.times(liqRatio).div(collateral));

              case 10:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18, this);
      }));

      function getLiquidationPrice(_x25) {
        return _getLiquidationPrice.apply(this, arguments);
      }

      return getLiquidationPrice;
    }()
  }, {
    key: "isSafe",
    value: function () {
      var _isSafe = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee19(cdpId) {
        var _ref13, _ref14, liqPrice, ethPrice;

        return _regenerator["default"].wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                _context19.next = 2;
                return Promise.all([this.getLiquidationPrice(cdpId), this.get('price').getEthPrice()]);

              case 2:
                _ref13 = _context19.sent;
                _ref14 = (0, _slicedToArray2["default"])(_ref13, 2);
                liqPrice = _ref14[0];
                ethPrice = _ref14[1];
                return _context19.abrupt("return", (0, _Currency.USD_ETH)(ethPrice).gte(liqPrice));

              case 7:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19, this);
      }));

      function isSafe(_x26) {
        return _isSafe.apply(this, arguments);
      }

      return isSafe;
    }()
  }, {
    key: "getAnnualGovernanceFee",
    value: function getAnnualGovernanceFee() {
      return this._tubContract().fee().then(function (bn) {
        var fee = new _bignumber["default"](bn.toString()).dividedBy(_constants.RAY);
        var secondsPerYear = 60 * 60 * 24 * 365;

        _bignumber["default"].config({
          POW_PRECISION: 100
        });

        return fee.pow(secondsPerYear).minus(1).toNumber();
      });
    }
  }, {
    key: "getSystemCollateralization",
    value: function () {
      var _getSystemCollateralization = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee20() {
        var dai, _ref15, _ref16, totalWethLocked, wethPrice, daiSupply, targetPrice, totalCollateralValue, systemDaiDebt;

        return _regenerator["default"].wrap(function _callee20$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                dai = this.get('token').getToken(_Currency.DAI);
                _context20.next = 3;
                return Promise.all([this._tubContract().pie(), this.get('price').getEthPrice(), dai.totalSupply(), this.getTargetPrice()]);

              case 3:
                _ref15 = _context20.sent;
                _ref16 = (0, _slicedToArray2["default"])(_ref15, 4);
                totalWethLocked = _ref16[0];
                wethPrice = _ref16[1];
                daiSupply = _ref16[2];
                targetPrice = _ref16[3];
                totalCollateralValue = new _bignumber["default"](totalWethLocked).div(_constants.WAD).times(wethPrice.toBigNumber());
                systemDaiDebt = daiSupply.times(targetPrice);
                return _context20.abrupt("return", totalCollateralValue.div(systemDaiDebt.toBigNumber()).toNumber());

              case 12:
              case "end":
                return _context20.stop();
            }
          }
        }, _callee20, this);
      }));

      function getSystemCollateralization() {
        return _getSystemCollateralization.apply(this, arguments);
      }

      return getSystemCollateralization;
    }()
  }, {
    key: "getWethToPethRatio",
    value: function () {
      var _getWethToPethRatio = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee21() {
        var value;
        return _regenerator["default"].wrap(function _callee21$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                _context21.next = 2;
                return this._tubContract().per();

              case 2:
                value = _context21.sent;
                return _context21.abrupt("return", new _bignumber["default"](value.toString()).dividedBy(_constants.RAY).toNumber());

              case 4:
              case "end":
                return _context21.stop();
            }
          }
        }, _callee21, this);
      }));

      function getWethToPethRatio() {
        return _getWethToPethRatio.apply(this, arguments);
      }

      return getWethToPethRatio;
    }()
  }, {
    key: "give",
    value: function give(cdpId, newAddress) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var hexCdpId = (0, _conversion.numberToBytes32)(cdpId);
      return this._tubContract().give(hexCdpId, newAddress, options);
    }
  }, {
    key: "bite",
    value: function bite(cdpId) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var hexCdpId = (0, _conversion.numberToBytes32)(cdpId);
      return this._tubContract().bite(hexCdpId, options);
    }
  }, {
    key: "freeEthProxy",
    value: function freeEthProxy(dsProxy, cdpId, amount) {
      var hexCdpId = (0, _conversion.numberToBytes32)(cdpId);
      var value = (0, _Currency.getCurrency)(amount, _Currency.ETH).toFixed('wei');
      return this._saiProxyTubContract().free(this._tubContract().address, hexCdpId, value, {
        dsProxy: dsProxy,
        metadata: {
          action: {
            name: 'free',
            id: cdpId,
            amount: (0, _Currency.getCurrency)(amount, _Currency.ETH),
            proxy: dsProxy
          }
        }
      });
    }
  }, {
    key: "lockEthProxy",
    value: function lockEthProxy(dsProxy, cdpId, amount) {
      var hexCdpId = (0, _conversion.numberToBytes32)(cdpId);
      var value = (0, _Currency.getCurrency)(amount, _Currency.ETH).toFixed('wei');
      return this._saiProxyTubContract().lock(this._tubContract().address, hexCdpId, {
        dsProxy: dsProxy,
        value: value,
        metadata: {
          action: {
            name: 'lock',
            id: cdpId,
            amount: (0, _Currency.getCurrency)(amount, _Currency.ETH),
            proxy: dsProxy
          }
        }
      });
    }
  }, {
    key: "lockEthAndDrawDaiProxy",
    value: function lockEthAndDrawDaiProxy(dsProxy, cdpId, amountEth, amountDai) {
      var hexCdpId = (0, _conversion.numberToBytes32)(cdpId);
      var valueEth = (0, _Currency.getCurrency)(amountEth, _Currency.ETH).toFixed('wei');
      var valueDai = (0, _Currency.getCurrency)(amountDai, _Currency.DAI).toFixed('wei');
      return this._saiProxyTubContract().lockAndDraw(this._tubContract().address, hexCdpId, valueDai, {
        dsProxy: dsProxy,
        value: valueEth,
        metadata: {
          action: {
            name: 'lockAndDraw',
            id: cdpId,
            lockAmount: (0, _Currency.getCurrency)(amountEth, _Currency.ETH),
            drawAmount: (0, _Currency.getCurrency)(amountDai, _Currency.DAI),
            proxy: dsProxy
          }
        }
      });
    }
  }, {
    key: "drawDaiProxy",
    value: function drawDaiProxy(dsProxy, cdpId, amount) {
      var hexCdpId = (0, _conversion.numberToBytes32)(cdpId);
      var value = (0, _Currency.getCurrency)(amount, _Currency.DAI).toFixed('wei');
      return this._saiProxyTubContract().draw(this._tubContract().address, hexCdpId, value, {
        dsProxy: dsProxy,
        metadata: {
          action: {
            name: 'draw',
            id: cdpId,
            amount: (0, _Currency.getCurrency)(amount, _Currency.DAI),
            proxy: dsProxy
          }
        }
      });
    }
  }, {
    key: "giveProxy",
    value: function giveProxy(dsProxy, cdpId, newAddress) {
      var hexCdpId = (0, _conversion.numberToBytes32)(cdpId);
      return this._saiProxyTubContract().give(this._tubContract().address, hexCdpId, newAddress, {
        dsProxy: dsProxy,
        metadata: {
          action: {
            name: 'give',
            id: cdpId,
            to: newAddress,
            proxy: dsProxy
          }
        }
      });
    }
  }, {
    key: "wipeDaiProxy",
    value: function () {
      var _wipeDaiProxy = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee22(dsProxy, cdpId, amount, _ref17) {
        var useOtc, promise, hexCdpId, value, options;
        return _regenerator["default"].wrap(function _callee22$(_context22) {
          while (1) {
            switch (_context22.prev = _context22.next) {
              case 0:
                useOtc = _ref17.useOtc, promise = _ref17.promise;
                hexCdpId = (0, _conversion.numberToBytes32)(cdpId);
                value = (0, _Currency.getCurrency)(amount, _Currency.DAI).toFixed('wei');
                _context22.next = 5;
                return this.get('allowance').requireAllowance(_Currency.DAI, dsProxy, {
                  promise: promise
                });

              case 5:
                if (useOtc) {
                  _context22.next = 10;
                  break;
                }

                _context22.next = 8;
                return this._throwIfNotEnoughMkrToWipe(cdpId, amount, _Currency.DAI);

              case 8:
                _context22.next = 10;
                return this.get('allowance').requireAllowance(_Currency.MKR, dsProxy, {
                  promise: promise
                });

              case 10:
                options = {
                  dsProxy: dsProxy,
                  metadata: {
                    action: {
                      name: 'wipe',
                      id: cdpId,
                      amount: (0, _Currency.getCurrency)(amount, _Currency.DAI),
                      otc: useOtc,
                      proxy: dsProxy
                    }
                  },
                  promise: promise
                }; // If using OTC to buy MKR to pay fee, pass OTC address to SaiProxy wipe()

                return _context22.abrupt("return", useOtc ? this._saiProxyTubContract()['wipe(address,bytes32,uint256,address)'](this._tubContract().address, hexCdpId, value, this._smartContract().getContractAddressByName(_contracts["default"].MAKER_OTC), options) : this._saiProxyTubContract()['wipe(address,bytes32,uint256)'](this._tubContract().address, hexCdpId, value, options));

              case 12:
              case "end":
                return _context22.stop();
            }
          }
        }, _callee22, this);
      }));

      function wipeDaiProxy(_x27, _x28, _x29, _x30) {
        return _wipeDaiProxy.apply(this, arguments);
      }

      return wipeDaiProxy;
    }()
  }, {
    key: "shutProxy",
    value: function () {
      var _shutProxy = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee23(dsProxy, cdpId, _ref18) {
        var useOtc, promise, hexCdpId, debt, options;
        return _regenerator["default"].wrap(function _callee23$(_context23) {
          while (1) {
            switch (_context23.prev = _context23.next) {
              case 0:
                useOtc = _ref18.useOtc, promise = _ref18.promise;
                hexCdpId = (0, _conversion.numberToBytes32)(cdpId);
                _context23.next = 4;
                return this.get('allowance').requireAllowance(_Currency.DAI, dsProxy, {
                  promise: promise
                });

              case 4:
                if (useOtc) {
                  _context23.next = 12;
                  break;
                }

                _context23.next = 7;
                return this.getDebtValue(cdpId, _Currency.DAI);

              case 7:
                debt = _context23.sent;
                _context23.next = 10;
                return this._throwIfNotEnoughMkrToWipe(cdpId, debt);

              case 10:
                _context23.next = 12;
                return this.get('allowance').requireAllowance(_Currency.MKR, dsProxy, {
                  promise: promise
                });

              case 12:
                options = {
                  dsProxy: dsProxy,
                  metadata: {
                    action: {
                      name: 'close',
                      id: cdpId,
                      otc: useOtc,
                      proxy: dsProxy
                    }
                  },
                  promise: promise
                }; // If using OTC to buy MKR to pay fee, pass OTC address to SaiProxy shut()
                // method

                return _context23.abrupt("return", useOtc ? this._saiProxyTubContract()['shut(address,bytes32,address)'](this._tubContract().address, hexCdpId, this._smartContract().getContractAddressByName(_contracts["default"].MAKER_OTC), options) : this._saiProxyTubContract()['shut(address,bytes32)'](this._tubContract().address, hexCdpId, options));

              case 14:
              case "end":
                return _context23.stop();
            }
          }
        }, _callee23, this);
      }));

      function shutProxy(_x31, _x32, _x33) {
        return _shutProxy.apply(this, arguments);
      }

      return shutProxy;
    }()
  }]);
  return EthereumCdpService;
}(_servicesCore.PrivateService), ((0, _applyDecoratedDescriptor2["default"])(_class.prototype, "lockEth", [_tracksTransactions["default"]], Object.getOwnPropertyDescriptor(_class.prototype, "lockEth"), _class.prototype), (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "lockWeth", [_tracksTransactions["default"]], Object.getOwnPropertyDescriptor(_class.prototype, "lockWeth"), _class.prototype), (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "lockPeth", [_tracksTransactions["default"]], Object.getOwnPropertyDescriptor(_class.prototype, "lockPeth"), _class.prototype), (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "wipeDai", [_tracksTransactions["default"]], Object.getOwnPropertyDescriptor(_class.prototype, "wipeDai"), _class.prototype), (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "wipeDaiProxy", [_tracksTransactions["default"]], Object.getOwnPropertyDescriptor(_class.prototype, "wipeDaiProxy"), _class.prototype), (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "shutProxy", [_tracksTransactions["default"]], Object.getOwnPropertyDescriptor(_class.prototype, "shutProxy"), _class.prototype)), _class);
exports["default"] = EthereumCdpService;