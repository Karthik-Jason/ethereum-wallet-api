"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _contracts = _interopRequireDefault(require("../../contracts/contracts"));

var _Currency = require("./Currency");

var Cdp =
/*#__PURE__*/
function () {
  function Cdp(cdpService) {
    var _this = this;

    var cdpId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    (0, _classCallCheck2["default"])(this, Cdp);
    this._cdpService = cdpService;
    this._smartContractService = this._cdpService.get('smartContract');

    if (!cdpId) {
      this._create();
    } else {
      this.id = cdpId;
    }

    this._emitterInstance = this._cdpService.get('event').buildEmitter();
    this.on = this._emitterInstance.on;

    this._emitterInstance.registerPollEvents({
      COLLATERAL: {
        USD: function USD() {
          return _this.getCollateralValue(_Currency.USD);
        },
        ETH: function ETH() {
          return _this.getCollateralValue();
        }
      },
      DEBT: {
        dai: function dai() {
          return _this.getDebtValue();
        }
      }
    });
  }

  (0, _createClass2["default"])(Cdp, [{
    key: "_create",
    value: function _create() {
      var _this2 = this;

      var tubContract = this._smartContractService.getContract(_contracts["default"].SAI_TUB);

      var promise = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee() {
        var txo;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return 0;

              case 2:
                _context.next = 4;
                return tubContract.open({
                  promise: promise
                });

              case 4:
                txo = _context.sent;
                _this2.id = parseInt(txo.receipt.logs[1].data, 16);
                return _context.abrupt("return", _this2);

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }))();
      this._transactionObject = promise;
    }
  }, {
    key: "transactionObject",
    value: function transactionObject() {
      return this._transactionObject;
    }
  }]);
  return Cdp;
}(); // each of these methods just calls the method of the same name on the service
// with the cdp's id as the first argument


exports["default"] = Cdp;
var passthroughMethods = ['bite', 'drawDai', 'enoughMkrToWipe', 'freeEth', 'freePeth', 'getCollateralValue', 'getCollateralizationRatio', 'getDebtValue', 'getGovernanceFee', 'getInfo', 'getLiquidationPrice', 'give', 'isSafe', 'lockEth', 'lockPeth', 'lockWeth', 'shut', 'wipeDai'];
Object.assign(Cdp.prototype, passthroughMethods.reduce(function (acc, name) {
  acc[name] = function () {
    var _this$_cdpService;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return (_this$_cdpService = this._cdpService)[name].apply(_this$_cdpService, [this.id].concat(args));
  };

  return acc;
}, {}));