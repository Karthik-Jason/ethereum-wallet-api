"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _servicesCore = require("@makerdao/services-core");

/* eslint-disable */
var ConsoleLogger =
/*#__PURE__*/
function (_PrivateService) {
  (0, _inherits2["default"])(ConsoleLogger, _PrivateService);

  /**
   * @param {string} name
   */
  function ConsoleLogger() {
    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'log';
    (0, _classCallCheck2["default"])(this, ConsoleLogger);
    return (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(ConsoleLogger).call(this, name));
  }

  (0, _createClass2["default"])(ConsoleLogger, [{
    key: "debug",
    value: function debug() {
      var _console;

      (_console = console).log.apply(_console, arguments);
    }
  }, {
    key: "info",
    value: function info() {
      var _console2;

      (_console2 = console).info.apply(_console2, arguments);
    }
  }, {
    key: "warn",
    value: function warn() {
      var _console3;

      (_console3 = console).warn.apply(_console3, arguments);
    }
  }, {
    key: "error",
    value: function error() {
      var _console4;

      (_console4 = console).error.apply(_console4, arguments);
    }
  }, {
    key: "trace",
    value: function trace() {
      var _console5;

      (_console5 = console).trace.apply(_console5, arguments);
    }
  }]);
  return ConsoleLogger;
}(_servicesCore.PrivateService);

exports["default"] = ConsoleLogger;