"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createPayloadFetcher = createPayloadFetcher;
exports.createMemoizedPoll = createMemoizedPoll;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _isEqual = _interopRequireDefault(require("lodash/isEqual"));

//////////////////////////////
/////  Polling Helpers  //////
//////////////////////////////
function createPayloadFetcher(payloadGetterMap) {
  return function () {
    return Promise.all(Object.entries(payloadGetterMap).map(function (_ref) {
      var _ref2 = (0, _slicedToArray2["default"])(_ref, 2),
          key = _ref2[0],
          getter = _ref2[1];

      return getter().then(function (state) {
        return [key, state];
      });
    })).then(function (states) {
      var payload = {};
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = states[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _step$value = (0, _slicedToArray2["default"])(_step.value, 2),
              key = _step$value[0],
              state = _step$value[1];

          payload[key] = state;
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return payload;
    });
  };
}

function createMemoizedPoll(_ref3) {
  var _type = _ref3.type,
      getState = _ref3.getState,
      emit = _ref3.emit,
      _ref3$curr = _ref3.curr,
      curr = _ref3$curr === void 0 ? {} : _ref3$curr,
      _ref3$live = _ref3.live,
      _live = _ref3$live === void 0 ? false : _ref3$live;

  return {
    ping: function () {
      var _ping = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee() {
        var next, msg;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (_live) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt("return");

              case 2:
                _context.prev = 2;
                _context.next = 5;
                return getState();

              case 5:
                next = _context.sent;

                if (!(0, _isEqual["default"])(curr, next)) {
                  emit(_type, next);
                  curr = next;
                }

                _context.next = 13;
                break;

              case 9:
                _context.prev = 9;
                _context.t0 = _context["catch"](2);
                msg = "Failed to get latest ".concat(_type, " state. Message -> ").concat(_context.t0);
                emit('error', msg);

              case 13:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[2, 9]]);
      }));

      function ping() {
        return _ping.apply(this, arguments);
      }

      return ping;
    }(),
    heat: function () {
      var _heat = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee2() {
        var msg;
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!_live) {
                  _context2.next = 2;
                  break;
                }

                return _context2.abrupt("return");

              case 2:
                _context2.prev = 2;
                _context2.next = 5;
                return getState();

              case 5:
                curr = _context2.sent;
                _live = true;
                _context2.next = 13;
                break;

              case 9:
                _context2.prev = 9;
                _context2.t0 = _context2["catch"](2);
                msg = "Failed to get initial ".concat(_type, " state. Message -> ").concat(_context2.t0);
                emit('error', msg);

              case 13:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, null, [[2, 9]]);
      }));

      function heat() {
        return _heat.apply(this, arguments);
      }

      return heat;
    }(),
    cool: function cool() {
      if (!_live) return;
      _live = false;
    },
    type: function type() {
      return _type;
    },
    live: function live() {
      return _live;
    }
  };
}